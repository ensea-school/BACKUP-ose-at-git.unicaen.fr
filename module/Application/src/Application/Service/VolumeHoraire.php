<?php

namespace Application\Service;

use Application\Service\Traits\ElementPedagogiqueAwareTrait;
use Application\Service\Traits\EtatVolumeHoraireAwareTrait;
use Application\Service\Traits\ServiceServiceAwareTrait;
use Application\Service\Traits\TypeVolumeHoraireAwareTrait;
use Doctrine\ORM\QueryBuilder;
use Application\Entity\Db\Structure as StructureEntity;
use Application\Entity\Db\Intervenant as IntervenantEntity;
use Application\Entity\Db\TypeValidation as TypeValidationEntity;
use Application\Entity\Db\EtatVolumeHoraire as EtatVolumeHoraireEntity;
use Application\Entity\Db\VolumeHoraire as VolumeHoraireEntity;

/**
 * Description of VolumeHoraire
 *
 * @author Laurent LÉCLUSE <laurent.lecluse at unicaen.fr>
 */
class VolumeHoraire extends AbstractEntityService
{
    use TypeVolumeHoraireAwareTrait;
    use ServiceServiceAwareTrait;
    use ElementPedagogiqueAwareTrait;
    use EtatVolumeHoraireAwareTrait;



    /**
     * retourne la classe des entités
     *
     * @return string
     * @throws RuntimeException
     */
    public function getEntityClass()
    {
        return VolumeHoraireEntity::class;
    }



    /**
     * Retourne l'alias d'entité courante
     *
     * @return string
     */
    public function getAlias()
    {
        return 'vh';
    }



    /**
     *
     * @return \Application\Entity\Db\VolumeHoraire
     */
    public function newEntity()
    {

        $entity = parent::newEntity();

        // type de volume horaire par défaut
        $entity->setTypeVolumeHoraire($this->getServiceTypeVolumeHoraire()->getPrevu());

        return $entity;
    }



    /**
     * Sauvegarde une entité
     *
     * @param VolumeHoraireEntity $entity
     *
     * @throws \RuntimeException
     * @return VolumeHoraireEntity
     */
    public function save($entity, $plafondControl=true)
    {
        $result = parent::save($entity); // TODO: Change the autogenerated stub
        if ($plafondControl){
            $this->getServiceService()->controlePlafondFcMaj($entity->getService()->getIntervenant(), $entity->getTypeVolumeHoraire());
        }
        return $result;
    }



    /**
     * Recherche par intervenant concerné.
     *
     * @param IntervenantEntity $intervenant
     * @param QueryBuilder|null $qb
     *
     * @return QueryBuilder
     */
    public function finderByIntervenant(IntervenantEntity $intervenant, QueryBuilder $qb = null, $alias = null)
    {
        list($qb, $alias) = $this->initQuery($qb, $alias);

        $qb
            ->join("$alias.service", 'vhs2')
            ->join("vhs2.intervenant", 'i2')
            ->andWhere("i2 = :intervenant")
            ->setParameter('intervenant', $intervenant);

        return $qb;
    }



    /**
     *
     * @param EtatVolumeHoraireEntity $etatVolumeHoraire
     * @param QueryBuilder            $qb
     * @param string                  $alias
     *
     * @return QueryBuilder
     */
    public function finderByEtatVolumeHoraire(EtatVolumeHoraireEntity $etatVolumeHoraire = null, QueryBuilder $qb = null, $alias = null)
    {
        list($qb, $alias) = $this->initQuery($qb, $alias);
        if ($etatVolumeHoraire) {
            $sEtatVolumeHoraire = $this->getServiceEtatVolumeHoraire();

            $this->join($sEtatVolumeHoraire, $qb, 'etatVolumeHoraire');

            $qb->andWhere($sEtatVolumeHoraire->getAlias() . '.ordre >= ' . $etatVolumeHoraire->getOrdre());
        }

        return $qb;
    }



    /**
     *
     * @param EtatVolumeHoraireEntity $etatVolumeHoraire
     * @param QueryBuilder            $qb
     * @param string                  $alias
     *
     * @return QueryBuilder
     */
    public function finderByStrictEtatVolumeHoraire(EtatVolumeHoraireEntity $etatVolumeHoraire = null, QueryBuilder $qb = null, $alias = null)
    {
        list($qb, $alias) = $this->initQuery($qb, $alias);
        if ($etatVolumeHoraire) {
            $sEtatVolumeHoraire = $this->getServiceEtatVolumeHoraire();

            $this->join($sEtatVolumeHoraire, $qb, 'etatVolumeHoraire');

            $sEtatVolumeHoraire->finderById($etatVolumeHoraire->getId(), $qb);
        }

        return $qb;
    }



    /**
     * Retourne les volumes horaires qui ont fait ou non l'objet d'un contrat/avenant.
     *
     * @param boolean|\Application\Entity\Db\Contrat $contrat <code>true</code>, <code>false</code> ou
     *                                                        bien un Contrat précis
     * @param QueryBuilder|null                      $queryBuilder
     *
     * @return QueryBuilder
     */
    public function finderByContrat($contrat, QueryBuilder $qb = null, $alias = null)
    {
        list($qb, $alias) = $this->initQuery($qb, $alias);

        if ($contrat instanceof \Application\Entity\Db\Contrat) {
            $qb->addSelect("c")
                ->join("$alias.contrat", "c")
                ->andWhere("c = :contrat")->setParameter('contrat', $contrat);
        } else {
            $value = $contrat ? 'is not null' : 'is null';
            $qb->andWhere("$alias.contrat $value");
        }

        return $qb;
    }

}