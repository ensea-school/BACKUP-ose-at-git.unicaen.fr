-- ********************************************************************* --
-- *          à faire AVANT avoir mis à jour le code source            * --
-- ********************************************************************* --

BEGIN DBMS_SCHEDULER.disable(name=>'"OSE"."OSE_SRC_SYNC"', force => TRUE); END; 

/



 CREATE SEQUENCE "OSE"."WF_TYPE_DEP_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."WF_OLD_INT_ETAPE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 119941 CACHE 20 NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."WF_ETAPE_DEP_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."WF_DEP_BLOQUANTE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 621805 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TMP_CALCUL_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61203 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_WORKFLOW_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1193228 CACHE 20 NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_VALIDATION_REF_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_VALIDATION_ENS_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 92458 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_SERVICE_SAISIE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 247461 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_SERVICE_REF_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 236457 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_SERVICE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1878577 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_PJ_FOURNIE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6591 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_PJ_DEMANDE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 15080 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_PIECE_JOINTE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 25204 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_PAIEMENT_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 22307 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_DOSSIER_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 327306 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_DMEP_LIQUIDATION_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_CONTRAT_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 7302 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_CLOTURE_REALISE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 266720 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."TBL_AGREMENT_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 44937563 NOCACHE NOORDER NOCYCLE;
 CREATE SEQUENCE "OSE"."REGLE_STRUCTURE_VAL_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5 NOCACHE NOORDER NOCYCLE;
---------------------------
--Nouveau TABLE
--WF_ETAPE_DEP
---------------------------
  CREATE TABLE "OSE"."WF_ETAPE_DEP" 
   (	"ETAPE_SUIV_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ETAPE_PREC_ID" NUMBER(*,0) NOT NULL ENABLE,
	"LOCALE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"INTEGRALE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"PARTIELLE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ACTIVE" NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE,
	"TYPE_INTERVENANT_ID" NUMBER(*,0),
	CONSTRAINT "WF_ETAPE_DEP_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "WF_ETAPE_DEP__UN" UNIQUE ("ETAPE_SUIV_ID","ETAPE_PREC_ID") ENABLE,
	CONSTRAINT "WE_PREC_WE_FK" FOREIGN KEY ("ETAPE_PREC_ID")
	 REFERENCES "OSE"."WF_ETAPE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "WE_SUIV_WE_FK" FOREIGN KEY ("ETAPE_SUIV_ID")
	 REFERENCES "OSE"."WF_ETAPE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "WE_TYPE_INTERVENANT_FK" FOREIGN KEY ("TYPE_INTERVENANT_ID")
	 REFERENCES "OSE"."TYPE_INTERVENANT" ("ID") ON DELETE CASCADE ENABLE
   );

---------------------------
--Nouveau TABLE
--TMP_CALCUL
---------------------------
  CREATE GLOBAL TEMPORARY TABLE "OSE"."TMP_CALCUL" 
   (	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"SUJET" VARCHAR2(80 CHAR) NOT NULL ENABLE,
	"ID" NUMBER NOT NULL ENABLE,
	CONSTRAINT "TMP_CALCUL_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TMP_CALCUL_UK1" UNIQUE ("INTERVENANT_ID","SUJET") ENABLE
   ) ON COMMIT DELETE ROWS;

---------------------------
--Nouveau TABLE
--TBL_VALIDATION_REFERENTIEL
---------------------------
  CREATE TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"STRUCTURE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"SERVICE_REFERENTIEL_ID" NUMBER(*,0) NOT NULL ENABLE,
	"VALIDATION_ID" NUMBER(*,0),
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"VOLUME_HORAIRE_REF_ID" NUMBER(*,0) NOT NULL ENABLE,
	CONSTRAINT "TBL_VALIDATION_REFERENTIEL_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_VALIDATION_REFERENTIEL__UN" UNIQUE ("INTERVENANT_ID","STRUCTURE_ID","TYPE_VOLUME_HORAIRE_ID","SERVICE_REFERENTIEL_ID","VOLUME_HORAIRE_REF_ID","VALIDATION_ID") DISABLE,
	CONSTRAINT "TVR_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TVR_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TVR_SERVICE_REFERENTIEL_FK" FOREIGN KEY ("SERVICE_REFERENTIEL_ID")
	 REFERENCES "OSE"."SERVICE_REFERENTIEL" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TVR_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TVR_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TVR_VALIDATION_FK" FOREIGN KEY ("VALIDATION_ID")
	 REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TVR_VOLUME_HORAIRE_REF_FK" FOREIGN KEY ("VOLUME_HORAIRE_REF_ID")
	 REFERENCES "OSE"."VOLUME_HORAIRE_REF" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--TBL_VALIDATION_ENSEIGNEMENT
---------------------------
  CREATE TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"STRUCTURE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"SERVICE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"VALIDATION_ID" NUMBER(*,0),
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"VOLUME_HORAIRE_ID" NUMBER(*,0) NOT NULL ENABLE,
	CONSTRAINT "TBL_VALIDATION_ENSEIGNEMENT_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_VALIDATION_ENSEIGNEMENT_UN" UNIQUE ("INTERVENANT_ID","STRUCTURE_ID","TYPE_VOLUME_HORAIRE_ID","SERVICE_ID","VOLUME_HORAIRE_ID","VALIDATION_ID") DISABLE,
	CONSTRAINT "TVE_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TVE_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TVE_SERVICE_FK" FOREIGN KEY ("SERVICE_ID")
	 REFERENCES "OSE"."SERVICE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TVE_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TVE_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TVE_VALIDATION_FK" FOREIGN KEY ("VALIDATION_ID")
	 REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TVE_VOLUME_HORAIRE_FK" FOREIGN KEY ("VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--TBL_SERVICE_SAISIE
---------------------------
  CREATE TABLE "OSE"."TBL_SERVICE_SAISIE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"PEUT_SAISIR_SERVICE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"PEUT_SAISIR_REFERENTIEL" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_SERVICE_PREV" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_REFERENTIEL_PREV" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_SERVICE_REAL" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_REFERENTIEL_REAL" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "TBL_SERVICE_SAISIE_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_SERVICE_SAISIE__UN" UNIQUE ("INTERVENANT_ID") ENABLE,
	CONSTRAINT "TBL_SERVICE_SAISIE_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_SRV_SAISIE_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--TBL_SERVICE_REFERENTIEL
---------------------------
  CREATE TABLE "OSE"."TBL_SERVICE_REFERENTIEL" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"PEUT_SAISIR_SERVICE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0),
	"STRUCTURE_ID" NUMBER(*,0),
	"NBVH" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"VALIDE" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "TBL_SERVICE_REFERENTIEL_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_SERVICE_REFERENTIEL__UN" UNIQUE ("INTERVENANT_ID","TYPE_VOLUME_HORAIRE_ID","STRUCTURE_ID") ENABLE,
	CONSTRAINT "TBL_SERVICE_REF_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_SERVICE_REF_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_SERVICE_REF_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_SERVICE_REF_TVH_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--TBL_SERVICE
---------------------------
  CREATE TABLE "OSE"."TBL_SERVICE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"PEUT_SAISIR_SERVICE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0),
	"STRUCTURE_ID" NUMBER(*,0),
	"NBVH" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"VALIDE" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0),
	"ELEMENT_PEDAGOGIQUE_PERIODE_ID" NUMBER(*,0),
	"ETAPE_ID" NUMBER(*,0),
	"ELEMENT_PEDAGOGIQUE_HISTO" NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE,
	"ETAPE_HISTO" NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE,
	"HAS_HEURES_MAUVAISE_PERIODE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"SERVICE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_STRUCTURE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_INTERVENANT_CODE" VARCHAR2(5 CHAR) NOT NULL ENABLE,
	"TYPE_VOLUME_HORAIRE_CODE" VARCHAR2(15 CHAR),
	"HEURES" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "TBL_SERVICE_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_SERVICE__UN" UNIQUE ("SERVICE_ID","TYPE_VOLUME_HORAIRE_ID") ENABLE,
	CONSTRAINT "TBL_SERVICE_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_SERVICE_ELEMENT_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	 REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_SERVICE_ETAPE_FK" FOREIGN KEY ("ETAPE_ID")
	 REFERENCES "OSE"."ETAPE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_SERVICE_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_SERVICE_PERIODE_EP_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_PERIODE_ID")
	 REFERENCES "OSE"."PERIODE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_SERVICE_SERVICE_FK" FOREIGN KEY ("SERVICE_ID")
	 REFERENCES "OSE"."SERVICE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_SERVICE_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_SERVICE_STRUCTURE_FKV1" FOREIGN KEY ("INTERVENANT_STRUCTURE_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_SERVICE_TINTERVENANT_FK" FOREIGN KEY ("TYPE_INTERVENANT_ID")
	 REFERENCES "OSE"."TYPE_INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_SERVICE_TVH_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--TBL_PIECE_JOINTE_FOURNIE
---------------------------
  CREATE TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_PIECE_JOINTE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"VALIDATION_ID" NUMBER(*,0),
	"FICHIER_ID" NUMBER(*,0),
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"PIECE_JOINTE_ID" NUMBER(*,0) NOT NULL ENABLE,
	CONSTRAINT "TBL_PIECE_JOINTE_FOURNIE_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_PIECE_JOINTE_FOURNIE__UN" UNIQUE ("TYPE_PIECE_JOINTE_ID","INTERVENANT_ID","VALIDATION_ID","FICHIER_ID") ENABLE,
	CONSTRAINT "TBL_PJF_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_PJF_FICHIER_FK" FOREIGN KEY ("FICHIER_ID")
	 REFERENCES "OSE"."FICHIER" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_PJF_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_PJF_PIECE_JOINTE_FK" FOREIGN KEY ("PIECE_JOINTE_ID")
	 REFERENCES "OSE"."PIECE_JOINTE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_PJF_TYPE_PIECE_JOINTE_FK" FOREIGN KEY ("TYPE_PIECE_JOINTE_ID")
	 REFERENCES "OSE"."TYPE_PIECE_JOINTE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_PJF_VALIDATION_FK" FOREIGN KEY ("VALIDATION_ID")
	 REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--TBL_PIECE_JOINTE_DEMANDE
---------------------------
  CREATE TABLE "OSE"."TBL_PIECE_JOINTE_DEMANDE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_PIECE_JOINTE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_POUR_SEUIL" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "TBL_PIECE_JOINTE_DEMANDE_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_PIECE_JOINTE_DEMANDE__UN" UNIQUE ("TYPE_PIECE_JOINTE_ID","INTERVENANT_ID") ENABLE,
	CONSTRAINT "TBL_PJD_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_PJD_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_PJD_TYPE_PIECE_JOINTE_FK" FOREIGN KEY ("TYPE_PIECE_JOINTE_ID")
	 REFERENCES "OSE"."TYPE_PIECE_JOINTE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--TBL_PIECE_JOINTE
---------------------------
  CREATE TABLE "OSE"."TBL_PIECE_JOINTE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_PIECE_JOINTE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"DEMANDEE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"FOURNIE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"VALIDEE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_POUR_SEUIL" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "TBL_PIECE_JOINTE_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_PIECE_JOINTE__UN" UNIQUE ("TYPE_PIECE_JOINTE_ID","INTERVENANT_ID") ENABLE,
	CONSTRAINT "TBL_PIECE_JOINTE_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_PJ_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_PJ_TYPE_PIECE_JOINTE_FK" FOREIGN KEY ("TYPE_PIECE_JOINTE_ID")
	 REFERENCES "OSE"."TYPE_PIECE_JOINTE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--TBL_PAIEMENT
---------------------------
  CREATE TABLE "OSE"."TBL_PAIEMENT" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"SERVICE_A_PAYER_TYPE" VARCHAR2(25 CHAR) NOT NULL ENABLE,
	"SERVICE_A_PAYER_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"STRUCTURE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"MISE_EN_PAIEMENT_ID" NUMBER(*,0),
	"PERIODE_PAIEMENT_ID" NUMBER(*,0),
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_A_PAYER" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_A_PAYER_POND" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_DEMANDEES" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_PAYEES" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "TBL_PAIEMENT_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_PAIEMENT__UN" UNIQUE ("SERVICE_A_PAYER_ID","INTERVENANT_ID","MISE_EN_PAIEMENT_ID") ENABLE,
	CONSTRAINT "TBL_PAIEMENT_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_PAIEMENT_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_PAIEMENT_MEP_FK" FOREIGN KEY ("MISE_EN_PAIEMENT_ID")
	 REFERENCES "OSE"."MISE_EN_PAIEMENT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_PAIEMENT_PERIODE_FK" FOREIGN KEY ("PERIODE_PAIEMENT_ID")
	 REFERENCES "OSE"."PERIODE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_PAIEMENT_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--TBL_DOSSIER
---------------------------
  CREATE TABLE "OSE"."TBL_DOSSIER" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"PEUT_SAISIR_DOSSIER" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"DOSSIER_ID" NUMBER(*,0),
	"VALIDATION_ID" NUMBER(*,0),
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "TBL_DOSSIER_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_DOSSIER__UN" UNIQUE ("INTERVENANT_ID") ENABLE,
	CONSTRAINT "TBL_DOSSIER_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_DOSSIER_DOSSIER_FK" FOREIGN KEY ("DOSSIER_ID")
	 REFERENCES "OSE"."DOSSIER" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_DOSSIER_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_DOSSIER_VALIDATION_FK" FOREIGN KEY ("VALIDATION_ID")
	 REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--TBL_DMEP_LIQUIDATION
---------------------------
  CREATE TABLE "OSE"."TBL_DMEP_LIQUIDATION" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_RESSOURCE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"STRUCTURE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"HEURES" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "TBL_DMEP_LIQUIDATION_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_DMEP_LIQUIDATION__UN" UNIQUE ("ANNEE_ID","TYPE_RESSOURCE_ID","STRUCTURE_ID") ENABLE,
	CONSTRAINT "TBL_DMLIQ_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_DMLIQ_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_DMLIQ_TYPE_RESSOURCE_FK" FOREIGN KEY ("TYPE_RESSOURCE_ID")
	 REFERENCES "OSE"."TYPE_RESSOURCE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--TBL_CONTRAT
---------------------------
  CREATE TABLE "OSE"."TBL_CONTRAT" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"PEUT_AVOIR_CONTRAT" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"STRUCTURE_ID" NUMBER(*,0),
	"NBVH" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"EDITE" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"SIGNE" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "TBL_CONTRAT_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_CONTRAT__UN" UNIQUE ("INTERVENANT_ID","STRUCTURE_ID") ENABLE,
	CONSTRAINT "TBL_CONTRAT_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_CONTRAT_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_CONTRAT_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--TBL_CLOTURE_REALISE
---------------------------
  CREATE TABLE "OSE"."TBL_CLOTURE_REALISE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"PEUT_CLOTURER_SAISIE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"CLOTURE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "TBL_CLOTURE_REALISE_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_CLOTURE_REALISE__UN" UNIQUE ("INTERVENANT_ID") ENABLE,
	CONSTRAINT "TBL_CLOTURE_REALISE_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_CLO_REAL_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--TBL_AGREMENT
---------------------------
  CREATE TABLE "OSE"."TBL_AGREMENT" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_AGREMENT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"STRUCTURE_ID" NUMBER(*,0),
	"OBLIGATOIRE" NUMBER(1,0) NOT NULL ENABLE,
	"AGREMENT_ID" NUMBER(*,0),
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "TBL_AGREMENT_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_AGREMENT__UN" UNIQUE ("TYPE_AGREMENT_ID","INTERVENANT_ID","STRUCTURE_ID") ENABLE,
	CONSTRAINT "TBL_AGR_AGREMENT_FK" FOREIGN KEY ("AGREMENT_ID")
	 REFERENCES "OSE"."AGREMENT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_AGR_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_AGR_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_AGR_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_AGR_TYPE_AGREMENT_FK" FOREIGN KEY ("TYPE_AGREMENT_ID")
	 REFERENCES "OSE"."TYPE_AGREMENT" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Modifié TABLE
--STATUT_INTERVENANT
---------------------------
ALTER TABLE "OSE"."STATUT_INTERVENANT" ADD ("PEUT_SAISIR_SERVICE_EXT" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE);
ALTER TABLE "OSE"."STATUT_INTERVENANT" ADD ("TEM_ATV" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE);

---------------------------
--Modifié TABLE
--SERVICE
---------------------------
ALTER TABLE "OSE"."SERVICE" DROP CONSTRAINT "SERVICE_ELEMENT_PEDAGOGIQUE_FK";
ALTER TABLE "OSE"."SERVICE" ADD CONSTRAINT "SERVICE_ELEMENT_PEDAGOGIQUE_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID") REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE"("ID") ENABLE;

---------------------------
--Nouveau TABLE
--REGLE_STRUCTURE_VALIDATION
---------------------------
  CREATE TABLE "OSE"."REGLE_STRUCTURE_VALIDATION" 
   (	"ID" NUMBER NOT NULL ENABLE,
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"PRIORITE" VARCHAR2(20 CHAR) NOT NULL ENABLE,
	"MESSAGE" VARCHAR2(500 CHAR),
	CONSTRAINT "REGLE_STRUCTURE_VALIDATION_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "REGLE_STRUCTURE_VALIDATION__UN" UNIQUE ("TYPE_VOLUME_HORAIRE_ID","TYPE_INTERVENANT_ID") ENABLE,
	CONSTRAINT "RSV_TYPE_INTERVENANT_FK" FOREIGN KEY ("TYPE_INTERVENANT_ID")
	 REFERENCES "OSE"."TYPE_INTERVENANT" ("ID") ENABLE,
	CONSTRAINT "RSV_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ENABLE
   );

---------------------------
--Modifié TABLE
--PERSONNEL
---------------------------
ALTER TABLE "OSE"."PERSONNEL" ADD ("CODE" VARCHAR2(60 CHAR));
ALTER TABLE "OSE"."PERSONNEL" ADD ("SUPANN_EMP_ID" VARCHAR2(60 CHAR));
ALTER TABLE "OSE"."PERSONNEL" ADD CONSTRAINT "PERSONNEL_CODE_UN" UNIQUE ("CODE") ENABLE;
ALTER TABLE "OSE"."PERSONNEL" ADD CONSTRAINT "PERSONNEL_SUPANN_UN" UNIQUE ("SUPANN_EMP_ID") ENABLE;

---------------------------
--Modifié TABLE
--PIECE_JOINTE_FICHIER
---------------------------
ALTER TABLE "OSE"."PIECE_JOINTE_FICHIER" DROP CONSTRAINT "PIECE_JOINTE_FICHIER_FFK";
ALTER TABLE "OSE"."PIECE_JOINTE_FICHIER" DROP CONSTRAINT "PIECE_JOINTE_FICHIER_PJFK";
ALTER TABLE "OSE"."PIECE_JOINTE_FICHIER" ADD CONSTRAINT "PIECE_JOINTE_FICHIER_FFK" FOREIGN KEY ("FICHIER_ID") REFERENCES "OSE"."FICHIER"("ID") ENABLE;
ALTER TABLE "OSE"."PIECE_JOINTE_FICHIER" ADD CONSTRAINT "PIECE_JOINTE_FICHIER_PJFK" FOREIGN KEY ("PIECE_JOINTE_ID") REFERENCES "OSE"."PIECE_JOINTE"("ID") ENABLE;

---------------------------
--Nouveau TABLE
--PACKAGE_DEPS
---------------------------
  CREATE TABLE "OSE"."PACKAGE_DEPS" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"P1" VARCHAR2(80 CHAR) NOT NULL ENABLE,
	"P2" VARCHAR2(80 CHAR) NOT NULL ENABLE,
	CONSTRAINT "PACKAGE_DEPS_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "PACKAGE_DEPS__UN" UNIQUE ("P1","P2") ENABLE
   );

---------------------------
--Nouveau TABLE
--CAMPAGNE_SAISIE
---------------------------
  CREATE TABLE "OSE"."CAMPAGNE_SAISIE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"DATE_DEBUT" DATE,
	"DATE_FIN" DATE,
	"MESSAGE_INTERVENANT" VARCHAR2(300 CHAR) NOT NULL ENABLE,
	"MESSAGE_AUTRES" VARCHAR2(300 CHAR),
	CONSTRAINT "CAMPAGNE_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "CS_TYPE_INTERVENANT_FK" FOREIGN KEY ("TYPE_INTERVENANT_ID")
	 REFERENCES "OSE"."TYPE_INTERVENANT" ("ID") ENABLE,
	CONSTRAINT "CS_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ENABLE
   );
---------------------------
--Nouveau VIEW
--V_WORKFLOW_ETAPE_PERTINENTE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_WORKFLOW_ETAPE_PERTINENTE" 
 ( "ANNEE_ID", "INTERVENANT_ID", "ETAPE_CODE"
  )  AS 
  WITH peut_pj AS (
  SELECT DISTINCT 
    statut_intervenant_id,
    1 tem
  FROM
    type_piece_jointe_statut tpjs
  WHERE
    1 = ose_divers.comprise_entre( tpjs.histo_creation, tpjs.histo_destruction )
),
peut_agr AS (
  SELECT
    tas.statut_intervenant_id,
    ta.code,
    tas.premier_recrutement
  FROM
    type_agrement_statut tas
    JOIN type_agrement ta ON ta.id = tas.type_agrement_id
  WHERE
    1 = ose_divers.comprise_entre( tas.histo_creation, tas.histo_destruction )
)
SELECT
  i.annee_id annee_id,
  i.id intervenant_id,
  e.code etape_code
FROM
            intervenant i
       JOIN statut_intervenant si ON si.id = i.statut_id
  LEFT JOIN peut_pj ON peut_pj.statut_intervenant_id = si.id
  LEFT JOIN peut_agr peut_cr ON peut_cr.code = 'CONSEIL_RESTREINT'  AND peut_cr.statut_intervenant_id = si.id AND (peut_cr.premier_recrutement IS NULL OR NVL(i.premier_recrutement,0) = peut_cr.premier_recrutement)
  LEFT JOIN peut_agr peut_ca ON peut_ca.code = 'CONSEIL_ACADEMIQUE' AND peut_ca.statut_intervenant_id = si.id AND (peut_ca.premier_recrutement IS NULL OR NVL(i.premier_recrutement,0) = peut_ca.premier_recrutement)
       JOIN wf_etape e ON 1 = CASE e.code

    WHEN 'DONNEES_PERSO_SAISIE' THEN
      si.peut_saisir_dossier

    WHEN 'SERVICE_SAISIE' THEN
      CASE WHEN si.peut_saisir_service + si.peut_saisir_referentiel = 0 THEN 0 ELSE 1 END

    WHEN 'PJ_SAISIE' THEN
      peut_pj.tem

    WHEN 'PJ_VALIDATION' THEN
      peut_pj.tem

    WHEN 'DONNEES_PERSO_VALIDATION' THEN
      si.peut_saisir_dossier

    WHEN 'SERVICE_VALIDATION' THEN
      si.peut_saisir_service

    WHEN 'REFERENTIEL_VALIDATION' THEN
      si.peut_saisir_referentiel

    WHEN 'CONSEIL_RESTREINT' THEN
      CASE WHEN peut_cr.code IS NULL THEN 0 ELSE 1 END

    WHEN 'CONSEIL_ACADEMIQUE' THEN
      CASE WHEN peut_ca.code IS NULL THEN 0 ELSE 1 END

    WHEN 'CONTRAT' THEN
      si.peut_avoir_contrat

    WHEN 'SERVICE_SAISIE_REALISE' THEN
      CASE WHEN si.peut_saisir_service + si.peut_saisir_referentiel = 0 THEN 0 ELSE 1 END

    WHEN 'CLOTURE_REALISE' THEN
      si.peut_cloturer_saisie

    WHEN 'SERVICE_VALIDATION_REALISE' THEN
      si.peut_saisir_service

    WHEN 'REFERENTIEL_VALIDATION_REALISE' THEN
      si.peut_saisir_referentiel

    WHEN 'DEMANDE_MEP' THEN
      CASE WHEN si.peut_saisir_service + si.peut_saisir_referentiel = 0 THEN 0 ELSE 1 END

    WHEN 'SAISIE_MEP' THEN
      CASE WHEN si.peut_saisir_service + si.peut_saisir_referentiel = 0 THEN 0 ELSE 1 END

  END
WHERE
  1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction );
---------------------------
--Nouveau VIEW
--V_TBL_WORKFLOW
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_WORKFLOW" 
 ( "ETAPE_CODE", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "OBJECTIF", "REALISATION"
  )  AS 
  WITH pj AS (
  SELECT 
    annee_id,
    intervenant_id,
    SUM(demandee) demandees,
    SUM(fournie)  fournies,
    SUM(validee)  validees
  FROM 
    tbl_piece_jointe
  WHERE 
    demandee > 0
  GROUP BY
    annee_id,
    intervenant_id
),
mep AS (
  SELECT
    annee_id,
    intervenant_id,
    structure_id,
    SUM(heures_a_payer / heures_a_payer_pond) sap,
    SUM(heures_demandees) dmep,
    SUM(heures_payees) mep
    --COUNT(*)  sap,
    --SUM(CASE WHEN mise_en_paiement_id IS NULL THEN 0 ELSE 1 END) dmep,
    --SUM(CASE WHEN periode_paiement_id IS NULL THEN 0 ELSE 1 END) mep
  FROM
    tbl_paiement
  GROUP BY
    annee_id,
    intervenant_id,
    structure_id
)
SELECT
  e.code                                                    etape_code,
  d.annee_id                                                annee_id,
  d.intervenant_id                                          intervenant_id,
  null                                                      structure_id,
  1                                                         objectif,
  CASE
    WHEN e.code = 'DONNEES_PERSO_SAISIE' THEN
      CASE WHEN d.dossier_id IS NULL THEN 0 ELSE 1 END
      
    WHEN e.code = 'DONNEES_PERSO_VALIDATION' THEN
      CASE WHEN d.validation_id IS NULL THEN 0 ELSE 1 END
      
  END                                                       realisation
FROM
  tbl_dossier d
  JOIN (       
          SELECT 'DONNEES_PERSO_SAISIE'     code FROM dual 
    UNION SELECT 'DONNEES_PERSO_VALIDATION' code FROM dual
  ) e ON 1=1
WHERE
  d. peut_saisir_dossier = 1

UNION ALL  

SELECT
  e.code                                                    etape_code,
  tss.annee_id                                              annee_id,
  tss.intervenant_id                                        intervenant_id,
  NULL                                                      structure_id,
  1                                                         objectif,
  CASE
    WHEN e.code = 'SERVICE_SAISIE' THEN
      CASE WHEN tss.heures_service_prev + tss.heures_referentiel_prev > 0 THEN 1 ELSE 0 END

    WHEN e.code = 'SERVICE_SAISIE_REALISE' THEN
      CASE WHEN tss.heures_service_real + tss.heures_referentiel_real > 0 THEN 1 ELSE 0 END

  END                                                       realisation
FROM
  TBL_SERVICE_SAISIE tss
  JOIN (       
          SELECT 'SERVICE_SAISIE'                 code FROM dual
    UNION SELECT 'SERVICE_SAISIE_REALISE'         code FROM dual
  ) e ON 1=1
WHERE
  (tss.peut_saisir_service = 1 OR tss.peut_saisir_referentiel = 1)
  
UNION ALL

SELECT
  CASE 
    WHEN tvh.code = 'PREVU'   THEN 'SERVICE_VALIDATION' 
    WHEN tvh.code = 'REALISE' THEN 'SERVICE_VALIDATION_REALISE'
  END                                                        etape_code,
  tve.annee_id                                               annee_id,
  tve.intervenant_id                                         intervenant_id,
  tve.structure_id                                           structure_id,
  COUNT(*)                                                   objectif,
  SUM(CASE WHEN tve.validation_id IS NOT NULL THEN 1 ELSE 0 END) realisation
FROM
  tbl_validation_enseignement tve
  JOIN type_volume_horaire tvh ON tvh.id = tve.type_volume_horaire_id
GROUP BY
  tve.annee_id,
  tve.intervenant_id,
  tve.structure_id,
  tvh.code

UNION ALL

SELECT
  CASE 
    WHEN tvh.code = 'PREVU'   THEN 'REFERENTIEL_VALIDATION' 
    WHEN tvh.code = 'REALISE' THEN 'REFERENTIEL_VALIDATION_REALISE'
  END                                                        etape_code,
  tvr.annee_id                                               annee_id,
  tvr.intervenant_id                                         intervenant_id,
  tvr.structure_id                                           structure_id,
  count(*)                                                   objectif,
  SUM(CASE WHEN tvr.validation_id IS NOT NULL THEN 1 ELSE 0 END) realisation
FROM
  tbl_validation_referentiel tvr
  JOIN type_volume_horaire tvh ON tvh.id = tvr.type_volume_horaire_id
GROUP BY
  tvr.annee_id,
  tvr.intervenant_id,
  tvr.structure_id,
  tvh.code

UNION ALL

SELECT
  e.code                                                    etape_code,
  pj.annee_id                                               annee_id,
  pj.intervenant_id                                         intervenant_id,
  null                                                      structure_id,
  CASE
    WHEN e.code = 'PJ_SAISIE' THEN pj.demandees
    WHEN e.code = 'PJ_VALIDATION' THEN pj.demandees
  END                                                       objectif,
  CASE
    WHEN e.code = 'PJ_SAISIE' THEN pj.fournies
    WHEN e.code = 'PJ_VALIDATION' THEN pj.validees
  END                                                       realisation
FROM
  pj
  JOIN (       
          SELECT 'PJ_SAISIE'      code FROM dual 
    UNION SELECT 'PJ_VALIDATION'  code FROM dual
  ) e ON (
       (e.code = 'PJ_SAISIE'     AND pj.demandees > 0)
    OR (e.code = 'PJ_VALIDATION' AND pj.fournies  > 0)
  )
  
UNION ALL

SELECT
  ta.code                                                   etape_code,
  a.annee_id                                                annee_id,
  a.intervenant_id                                          intervenant_id,
  a.structure_id                                            structure_id,
  1                                                         objectif,
  CASE WHEN a.agrement_id IS NULL THEN 0 ELSE 1 END         realisation
FROM 
  tbl_agrement a
  JOIN type_agrement ta ON ta.id = a.type_agrement_id
  
UNION ALL

SELECT 
  'CLOTURE_REALISE'                                         etape_code,
  c.annee_id                                                annee_id,
  c.intervenant_id                                          intervenant_id,
  null                                                      structure_id,
  1                                                         objectif,
  c.cloture                                                 realisation
FROM
  tbl_cloture_realise c
WHERE 
  c.peut_cloturer_saisie = 1

UNION ALL

SELECT
  e.code                                                    etape_code,
  mep.annee_id                                              annee_id,
  mep.intervenant_id                                        intervenant_id,
  mep.structure_id                                          structure_id,
  CASE
    WHEN e.code = 'DEMANDE_MEP' THEN mep.sap
    WHEN e.code = 'SAISIE_MEP' THEN mep.dmep
  END                                                       objectif,
  CASE
    WHEN e.code = 'DEMANDE_MEP' THEN mep.dmep
    WHEN e.code = 'SAISIE_MEP' THEN mep.mep
  END                                                       realisation
FROM
  mep
  JOIN (       
          SELECT 'DEMANDE_MEP'  code FROM dual 
    UNION SELECT 'SAISIE_MEP'   code FROM dual
  ) e ON (
       (e.code = 'DEMANDE_MEP' AND mep.sap > 0)
    OR (e.code = 'SAISIE_MEP'  AND mep.dmep > 0)
  )
  
  
UNION ALL

SELECT
  'CONTRAT'                                                 etape_code,
  annee_id                                                  annee_id,
  intervenant_id                                            intervenant_id,
  structure_id                                              structure_id,
  nbvh                                                      objectif,
  edite                                                     realisation
FROM 
  tbl_contrat c
WHERE
  peut_avoir_contrat = 1
  AND nbvh > 0;

---------------------------
--Nouveau VIEW
--V_TBL_VOLUME_HORAIRE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_VOLUME_HORAIRE" 
 ( "ANNEE_ID", "INTERVENANT_ID", "INTERVENANT_STRUCTURE_ID", "STRUCTURE_ID", "TYPE_INTERVENANT_ID", "SERVICE_ID", "VOLUME_HORAIRE_ID", "TYPE_INTERVENTION_ID", "MOTIF_NON_PAIEMENT_ID", "VOLUME_HORAIRE_PERIODE_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID", "ELEMENT_PEDAGOGIQUE_ID", "ELEMENT_PEDAGOGIQUE_PERIODE_ID", "ETAPE_ID", "TYPE_INTERVENANT_CODE", "TYPE_VOLUME_HORAIRE_CODE", "ETAT_VOLUME_HORAIRE_CODE", "PEUT_SAISIR_SERVICE", "HEURES", "ELEMENT_PEDAGOGIQUE_HISTO", "ETAPE_HISTO", "PERIODE_CORRESP"
  )  AS 
  WITH has_cp AS (
SELECT
  etape_id
FROM
  chemin_pedagogique cp
WHERE
  1 = ose_divers.comprise_entre( cp.histo_creation, cp.histo_destruction )
GROUP BY
  etape_id
)
SELECT
  i.annee_id                                                                                annee_id,
  i.id                                                                                      intervenant_id,
  i.structure_id                                                                            intervenant_structure_id,
  NVL(ep.structure_id, i.structure_id)                                                      structure_id,
  ti.id                                                                                     type_intervenant_id,
  s.id                                                                                      service_id,
  vh.id                                                                                     volume_horaire_id,
  vh.type_intervention_id                                                                   type_intervention_id,
  vh.motif_non_paiement_id                                                                  motif_non_paiement_id,
  vh.periode_id                                                                             volume_horaire_periode_id,
  tvh.id                                                                                    type_volume_horaire_id,
  evh.id                                                                                    etat_volume_horaire_id,
  ep.id                                                                                     element_pedagogique_id,
  ep.periode_id                                                                             element_pedagogique_periode_id,
  etp.id                                                                                    etape_id,

  ti.code                                                                                   type_intervenant_code,  
  tvh.code                                                                                  type_volume_horaire_code,
  evh.code                                                                                  etat_volume_horaire_code,
  si.peut_saisir_service                                                                    peut_saisir_service,
  vh.heures                                                                                 heures,

  ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction )                      element_pedagogique_histo,
  CASE WHEN 1 = ose_divers.comprise_entre( etp.histo_creation, etp.histo_destruction ) OR has_cp.etape_id IS NOT NULL THEN 1 ELSE 0 END etape_histo,
  CASE WHEN ep.periode_id IS NOT NULL AND vh.periode_id <> ep.periode_id THEN 0 ELSE 1 END  periode_corresp

FROM
  intervenant                                   i
  JOIN statut_intervenant                      si ON si.id = i.statut_id
  JOIN type_intervenant                        ti ON ti.id = si.type_intervenant_id
  JOIN service                                  s ON s.intervenant_id = i.id 
                                                 AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
  JOIN element_pedagogique                     ep ON ep.id = s.element_pedagogique_id
  JOIN etape                                  etp ON etp.id = ep.etape_id
  JOIN volume_horaire                          vh ON vh.service_id = s.id 
                                                 AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  JOIN type_volume_horaire                    tvh ON tvh.id = vh.type_volume_horaire_id
  JOIN v_volume_horaire_etat                  vhe ON vhe.volume_horaire_id = vh.id
  JOIN etat_volume_horaire                    evh ON evh.id = vhe.etat_volume_horaire_id
  LEFT JOIN has_cp                                ON has_cp.etape_id = etp.id
WHERE
  1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  AND i.id = 548;
---------------------------
--Nouveau VIEW
--V_TBL_VALIDATION_REFERENTIEL
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_VALIDATION_REFERENTIEL" 
 ( "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "TYPE_VOLUME_HORAIRE_ID", "SERVICE_REFERENTIEL_ID", "VOLUME_HORAIRE_REF_ID", "VALIDATION_ID"
  )  AS 
  SELECT DISTINCT
  i.annee_id,
  i.id intervenant_id,
  CASE WHEN rsv.priorite = 'affectation' THEN
    COALESCE( i.structure_id, s.structure_id, str.id )
  ELSE
    COALESCE( s.structure_id, i.structure_id, str.id )
  END structure_id,
  vh.type_volume_horaire_id,
  s.id service_referentiel_id,
  vh.id volume_horaire_ref_id,
  v.id validation_id
FROM
  service_referentiel s
  JOIN volume_horaire_ref vh ON vh.service_referentiel_id = s.id AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  JOIN intervenant i ON i.id = s.intervenant_id AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  JOIN statut_intervenant si ON si.id = i.statut_id
  JOIN regle_structure_validation rsv ON rsv.type_intervenant_id = si.type_intervenant_id AND rsv.type_volume_horaire_id = vh.type_volume_horaire_id
  LEFT JOIN structure str ON str.niveau = 1 AND 1 = ose_divers.comprise_entre( str.histo_creation, str.histo_destruction )
  LEFT JOIN validation_vol_horaire_ref vvh ON vvh.volume_horaire_ref_id = vh.id
  LEFT JOIN validation v ON v.id = vvh.validation_id AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
WHERE
  1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction );
---------------------------
--Nouveau VIEW
--V_TBL_VALIDATION_ENSEIGNEMENT
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_VALIDATION_ENSEIGNEMENT" 
 ( "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "TYPE_VOLUME_HORAIRE_ID", "SERVICE_ID", "VOLUME_HORAIRE_ID", "VALIDATION_ID"
  )  AS 
  SELECT DISTINCT
  i.annee_id,
  i.id intervenant_id,
  CASE WHEN rsv.priorite = 'affectation' THEN
    COALESCE( i.structure_id, ep.structure_id, str.id )
  ELSE
    COALESCE( ep.structure_id, i.structure_id, str.id )
  END structure_id,
  vh.type_volume_horaire_id,
  s.id service_id,
  vh.id volume_horaire_id,
  v.id validation_id
FROM
  service s
  JOIN volume_horaire vh ON vh.service_id = s.id AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  JOIN intervenant i ON i.id = s.intervenant_id AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  JOIN statut_intervenant si ON si.id = i.statut_id
  JOIN regle_structure_validation rsv ON rsv.type_intervenant_id = si.type_intervenant_id AND rsv.type_volume_horaire_id = vh.type_volume_horaire_id
  LEFT JOIN structure str ON str.niveau = 1 AND 1 = ose_divers.comprise_entre( str.histo_creation, str.histo_destruction )
  LEFT JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
  LEFT JOIN validation_vol_horaire vvh ON vvh.volume_horaire_id = vh.id
  LEFT JOIN validation v ON v.id = vvh.validation_id AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
WHERE
  1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction );
---------------------------
--Nouveau VIEW
--V_TBL_SERVICE_SAISIE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_SERVICE_SAISIE" 
 ( "ANNEE_ID", "INTERVENANT_ID", "PEUT_SAISIR_SERVICE", "PEUT_SAISIR_REFERENTIEL", "HEURES_SERVICE_PREV", "HEURES_REFERENTIEL_PREV", "HEURES_SERVICE_REAL", "HEURES_REFERENTIEL_REAL"
  )  AS 
  SELECT
  i.annee_id,
  i.id intervenant_id,
  si.peut_saisir_service,
  si.peut_saisir_referentiel,
  SUM( CASE WHEN tvhs.code = 'PREVU'   THEN NVL(vh .heures,0) ELSE 0 END ) heures_service_prev,
  SUM( CASE WHEN tvhs.code = 'PREVU'   THEN NVL(vhr.heures,0) ELSE 0 END ) heures_referentiel_prev,
  SUM( CASE WHEN tvhs.code = 'REALISE' THEN NVL(vh .heures,0) ELSE 0 END ) heures_service_real,
  SUM( CASE WHEN tvhs.code = 'REALISE' THEN NVL(vhr.heures,0) ELSE 0 END ) heures_referentiel_real
FROM
  intervenant i
  JOIN statut_intervenant si ON si.id = i.statut_id
  LEFT JOIN service s ON s.intervenant_id = i.id AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
  LEFT JOIN volume_horaire vh ON vh.service_id = s.id AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  LEFT JOIN type_volume_horaire tvhs ON tvhs.id = vh.type_volume_horaire_id

  LEFT JOIN service_referentiel sr ON sr.intervenant_id = i.id AND 1 = ose_divers.comprise_entre( sr.histo_creation, sr.histo_destruction )
  LEFT JOIN volume_horaire_ref vhr ON vhr.service_referentiel_id = sr.id AND 1 = ose_divers.comprise_entre( vhr.histo_creation, vhr.histo_destruction )
  LEFT JOIN type_volume_horaire tvhrs ON tvhrs.id = vhr.type_volume_horaire_id
WHERE
  1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
GROUP BY
  i.annee_id,
  i.id,
  si.peut_saisir_service,
  si.peut_saisir_referentiel;
---------------------------
--Nouveau VIEW
--V_TBL_SERVICE_REFERENTIEL
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_SERVICE_REFERENTIEL" 
 ( "ANNEE_ID", "INTERVENANT_ID", "PEUT_SAISIR_SERVICE", "TYPE_VOLUME_HORAIRE_ID", "STRUCTURE_ID", "NBVH", "VALIDE"
  )  AS 
  WITH t AS (

  SELECT
    i.annee_id,
    i.id intervenant_id,
    si.peut_saisir_referentiel peut_saisir_service,
    vh.type_volume_horaire_id,
    s.structure_id,
    CASE WHEN v.id IS NULL THEN 0 ELSE 1 END valide
  FROM
              intervenant                     i
              
         JOIN statut_intervenant          si ON si.id = i.statut_id
              
    LEFT JOIN service_referentiel          s ON s.intervenant_id = i.id
                                            AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
                                        
    LEFT JOIN volume_horaire_ref          vh ON vh.service_referentiel_id = s.id 
                                            AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
                                        
    LEFT JOIN validation_vol_horaire_ref vvh ON vvh.volume_horaire_ref_id = vh.id
    
    LEFT JOIN validation                   v ON v.id = vvh.validation_id
                                            AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
  WHERE
    1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )

)  
SELECT
  annee_id,
  intervenant_id,
  peut_saisir_service,
  type_volume_horaire_id,
  structure_id,
  CASE WHEN type_volume_horaire_id IS NULL THEN 0 ELSE count(*) END nbvh,
  sum(valide) valide
FROM
  t
WHERE 
  NOT (structure_id IS NOT NULL AND type_volume_horaire_id IS NULL)
GROUP BY
  annee_id,
  intervenant_id,
  peut_saisir_service,
  type_volume_horaire_id,
  structure_id;
---------------------------
--Modifié VIEW
--V_TBL_SERVICE
---------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_SERVICE" ("ANNEE_ID", "INTERVENANT_ID", "INTERVENANT_STRUCTURE_ID", "STRUCTURE_ID", "TYPE_INTERVENANT_ID", "TYPE_INTERVENANT_CODE", "PEUT_SAISIR_SERVICE", "ELEMENT_PEDAGOGIQUE_ID", "SERVICE_ID", "ELEMENT_PEDAGOGIQUE_PERIODE_ID", "ETAPE_ID", "TYPE_VOLUME_HORAIRE_ID", "TYPE_VOLUME_HORAIRE_CODE", "ELEMENT_PEDAGOGIQUE_HISTO", "ETAPE_HISTO", "HAS_HEURES_MAUVAISE_PERIODE", "NBVH", "HEURES", "VALIDE") AS 
  WITH t AS (
SELECT
  s.id                                                                                      service_id,
  s.intervenant_id                                                                          intervenant_id,
  ep.structure_id                                                                           structure_id,
  ep.id                                                                                     element_pedagogique_id,
  ep.periode_id                                                                             element_pedagogique_periode_id,
  etp.id                                                                                    etape_id,

  vh.type_volume_horaire_id                                                                 type_volume_horaire_id,
  vh.heures                                                                                 heures,
  tvh.code                                                                                  type_volume_horaire_code,

  ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction )                      element_pedagogique_histo,
  CASE WHEN 1 = ose_divers.comprise_entre( etp.histo_creation, etp.histo_destruction ) OR cp.id IS NOT NULL THEN 1 ELSE 0 END etape_histo,

  CASE WHEN ep.periode_id IS NOT NULL THEN
    SUM( CASE WHEN vh.periode_id <> ep.periode_id THEN 1 ELSE 0 END ) OVER( PARTITION BY vh.service_id, vh.periode_id, vh.type_volume_horaire_id, vh.type_intervention_id )
  ELSE 0 END has_heures_mauvaise_periode,

  CASE WHEN v.id IS NULL THEN 0 ELSE 1 END valide
FROM
  service                                       s
  LEFT JOIN element_pedagogique                ep ON ep.id = s.element_pedagogique_id
  LEFT JOIN etape                             etp ON etp.id = ep.etape_id
  LEFT JOIN chemin_pedagogique                 cp ON cp.etape_id = etp.id
                                                 AND cp.element_pedagogique_id = ep.id
                                                 AND 1 = ose_divers.comprise_entre( cp.histo_creation, cp.histo_destruction )

  LEFT JOIN volume_horaire                     vh ON vh.service_id = s.id
                                                 AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )

  LEFT JOIN type_volume_horaire               tvh ON tvh.id = vh.type_volume_horaire_id

  LEFT JOIN validation_vol_horaire            vvh ON vvh.volume_horaire_id = vh.id

  LEFT JOIN validation                          v ON v.id = vvh.validation_id
                                                 AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
WHERE
  1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
  AND (s.intervenant_id = OSE_SERVICE.GET_INTERVENANT OR OSE_SERVICE.GET_INTERVENANT IS NULL)
)
SELECT
  i.annee_id                                                                                annee_id,
  i.id                                                                                      intervenant_id,
  i.structure_id                                                                            intervenant_structure_id,
  NVL( t.structure_id, i.structure_id )                                                     structure_id,
  ti.id                                                                                     type_intervenant_id,
  ti.code                                                                                   type_intervenant_code,  
  si.peut_saisir_service                                                                    peut_saisir_service,  

  t.element_pedagogique_id,
  t.service_id,
  t.element_pedagogique_periode_id,
  t.etape_id,
  t.type_volume_horaire_id,
  t.type_volume_horaire_code,
  t.element_pedagogique_histo,
  t.etape_histo,

  CASE WHEN SUM(t.has_heures_mauvaise_periode) > 0 THEN 1 ELSE 0 END has_heures_mauvaise_periode,

  CASE WHEN type_volume_horaire_id IS NULL THEN 0 ELSE count(*) END nbvh,
  CASE WHEN type_volume_horaire_id IS NULL THEN 0 ELSE sum(t.heures) END heures,
  sum(valide) valide
FROM
  t
  JOIN intervenant                              i ON i.id = t.intervenant_id
  JOIN statut_intervenant                      si ON si.id = i.statut_id
  JOIN type_intervenant                        ti ON ti.id = si.type_intervenant_id
GROUP BY
  i.annee_id,
  i.id,
  i.structure_id,
  t.structure_id,
  i.structure_id,
  ti.id,
  ti.code,
  si.peut_saisir_service,
  t.element_pedagogique_id,
  t.service_id,
  t.element_pedagogique_periode_id,
  t.etape_id,
  t.type_volume_horaire_id,
  t.type_volume_horaire_code,
  t.element_pedagogique_histo,
  t.etape_histo;

---------------------------
--Modifié VIEW
--V_TBL_PIECE_JOINTE_FOURNIE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_PIECE_JOINTE_FOURNIE" 
 ( "ANNEE_ID", "TYPE_PIECE_JOINTE_ID", "INTERVENANT_ID", "PIECE_JOINTE_ID", "VALIDATION_ID", "FICHIER_ID"
  )  AS 
  SELECT 
  i.annee_id,
  pj.type_piece_jointe_id,
  pj.intervenant_id,
  pj.id piece_jointe_id,
  v.id validation_id,
  f.id fichier_id
FROM
            piece_jointe          pj
       JOIN intervenant            i ON i.id = pj.intervenant_id
                                    AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
       
       JOIN piece_jointe_fichier pjf ON pjf.piece_jointe_id = pj.id
       JOIN fichier                f ON f.id = pjf.fichier_id
                                    AND 1 = ose_divers.comprise_entre( f.histo_creation, f.histo_destruction )
                                    
  LEFT JOIN validation             v ON v.id = pj.validation_id
                                    AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
WHERE
  1 = ose_divers.comprise_entre( pj.histo_creation, pj.histo_destruction );
---------------------------
--Modifié VIEW
--V_TBL_PIECE_JOINTE_DEMANDE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_PIECE_JOINTE_DEMANDE" 
 ( "ANNEE_ID", "INTERVENANT_ID", "TYPE_PIECE_JOINTE_ID", "HEURES_POUR_SEUIL"
  )  AS 
  WITH i_h AS (
  SELECT
    s.intervenant_id,
    sum(vh.heures) heures
  FROM
         service               s
    JOIN type_volume_horaire tvh ON tvh.code = 'PREVU'
    JOIN volume_horaire       vh ON vh.service_id = s.id 
                                AND vh.type_volume_horaire_id = tvh.id
                                AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  WHERE
    1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
    AND s.element_pedagogique_id IS NOT NULL -- Service sur l'établissement
    AND vh.motif_non_paiement_id IS NULL -- pas de motif de non paiement
  GROUP BY
    s.intervenant_id
)
SELECT
  i.annee_id                      annee_id,
  i.id                            intervenant_id,
  tpj.id                          type_piece_jointe_id,
  NVL(i_h.heures, 0)              heures_pour_seuil   
FROM
            intervenant                 i

  LEFT JOIN dossier                     d ON d.intervenant_id = i.id
                                         AND 1 = ose_divers.comprise_entre( d.histo_creation, d.histo_destruction )
                                        
       JOIN type_piece_jointe_statut tpjs ON tpjs.statut_intervenant_id = i.statut_id
                                         AND 1 = ose_divers.comprise_entre( tpjs.histo_creation, tpjs.histo_destruction )
                                         
       JOIN type_piece_jointe         tpj ON tpj.id = tpjs.type_piece_jointe_id
                                         AND 1 = ose_divers.comprise_entre( tpj.histo_creation, tpj.histo_destruction )
                                         
  LEFT JOIN                           i_h ON i_h.intervenant_id = i.id
WHERE
  -- Gestion de l'historique
  1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  
  -- le nb d'heures doit être au moins égal au seuil
  AND 1 = CASE WHEN tpjs.seuil_hetd IS NOT NULL THEN

    CASE WHEN i_h.heures > tpjs.seuil_hetd THEN 1 ELSE 0 END
    
  ELSE 1 END
  
  -- En fonction du premier recrutement ou non
  AND (tpjs.premier_recrutement IS NULL OR NVL(i.premier_recrutement,0) = tpjs.premier_recrutement)

  -- Le RIB n'est demandé QUE s'il est différent!!  
  AND (
    tpj.code <> 'RIB' OR
    replace(i.bic, ' ', '') || '-' || replace(i.iban, ' ', '') <> d.rib
  );
---------------------------
--Modifié VIEW
--V_TBL_PIECE_JOINTE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_PIECE_JOINTE" 
 ( "ANNEE_ID", "TYPE_PIECE_JOINTE_ID", "INTERVENANT_ID", "DEMANDEE", "FOURNIE", "VALIDEE", "HEURES_POUR_SEUIL"
  )  AS 
  WITH pjf AS (
  SELECT
    pjf.annee_id,
    pjf.type_piece_jointe_id,
    pjf.intervenant_id,
    COUNT(*) count,
    SUM(CASE WHEN validation_id IS NULL THEN 0 ELSE 1 END) validation,
    SUM(CASE WHEN fichier_id IS NULL THEN 0 ELSE 1 END) fichier
  FROM
    tbl_piece_jointe_fournie pjf
  GROUP BY
    pjf.annee_id,
    pjf.type_piece_jointe_id,
    pjf.intervenant_id
)
SELECT
  NVL( pjd.annee_id, pjf.annee_id ) annee_id,
  NVL( pjd.type_piece_jointe_id, pjf.type_piece_jointe_id ) type_piece_jointe_id,
  NVL( pjd.intervenant_id, pjf.intervenant_id ) intervenant_id,
  CASE WHEN pjd.intervenant_id IS NULL THEN 0 ELSE 1 END demandee,
  CASE WHEN pjf.fichier = pjf.count THEN 1 ELSE 0 END fournie,
  CASE WHEN pjf.validation = pjf.count THEN 1 ELSE 0 END validee,
  NVL(pjd.heures_pour_seuil,0) heures_pour_seuil
FROM
  tbl_piece_jointe_demande pjd
  FULL JOIN pjf ON pjf.type_piece_jointe_id = pjd.type_piece_jointe_id AND pjf.intervenant_id = pjd.intervenant_id;
---------------------------
--Modifié VIEW
--V_TBL_PAIEMENT
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_PAIEMENT" 
 ( "ANNEE_ID", "SERVICE_A_PAYER_TYPE", "SERVICE_A_PAYER_ID", "INTERVENANT_ID", "STRUCTURE_ID", "MISE_EN_PAIEMENT_ID", "PERIODE_PAIEMENT_ID", "HEURES_A_PAYER", "HEURES_A_PAYER_POND", "HEURES_DEMANDEES", "HEURES_PAYEES"
  )  AS 
  SELECT
  i.annee_id                                  annee_id,
  'service'                                   service_a_payer_type,
  frs.id                                      service_a_payer_id,
  i.id                                        intervenant_id,
  COALESCE( ep.structure_id, i.structure_id ) structure_id,
  mep.id                                      mise_en_paiement_id,
  mep.periode_paiement_id                     periode_paiement_id,
  frs.heures_compl_fi + frs.heures_compl_fc + frs.heures_compl_fa + frs.heures_compl_fc_majorees heures_a_payer,
  count(*) OVER(PARTITION BY frs.id)          heures_a_payer_pond,
  NVL(mep.heures,0)                           heures_demandees,
  CASE WHEN mep.periode_paiement_id IS NULL THEN 0 ELSE mep.heures END heures_payees
FROM
            formule_resultat_service        frs
       JOIN type_volume_horaire             tvh ON tvh.code = 'REALISE'
       JOIN etat_volume_horaire             evh ON evh.code = 'valide'
       JOIN formule_resultat                 fr ON fr.id = frs.formule_resultat_id
                                               AND fr.type_volume_horaire_id = tvh.id
                                               AND fr.etat_volume_horaire_id = evh.id

       JOIN intervenant                       i ON i.id = fr.intervenant_id  
       JOIN service                           s ON s.id = frs.service_id
  LEFT JOIN element_pedagogique              ep ON ep.id = s.element_pedagogique_id
  LEFT JOIN mise_en_paiement                mep ON mep.formule_res_service_id = frs.id
                                               AND 1 = ose_divers.comprise_entre( mep.histo_creation, mep.histo_destruction )

UNION ALL

SELECT
  i.annee_id                                  annee_id,
  'referentiel'                               service_a_payer_type,
  frs.id                                      service_a_payer_id,
  i.id                                        intervenant_id,
  s.structure_id                              structure_id,
  mep.id                                      mise_en_paiement_id,
  mep.periode_paiement_id                     periode_paiement_id,
  frs.heures_compl_referentiel                heures_a_payer,
  count(*) OVER(PARTITION BY frs.id)          heures_a_payer_pond,
  NVL(mep.heures,0)                           heures_demandees,
  CASE WHEN mep.periode_paiement_id IS NULL THEN 0 ELSE mep.heures END heures_payees
FROM
            formule_resultat_service_ref    frs
       JOIN type_volume_horaire             tvh ON tvh.code = 'REALISE'
       JOIN etat_volume_horaire             evh ON evh.code = 'valide'
       JOIN formule_resultat                 fr ON fr.id = frs.formule_resultat_id
                                               AND fr.type_volume_horaire_id = tvh.id
                                               AND fr.etat_volume_horaire_id = evh.id

       JOIN intervenant                       i ON i.id = fr.intervenant_id  
       JOIN service_referentiel               s ON s.id = frs.service_referentiel_id
  LEFT JOIN mise_en_paiement                mep ON mep.formule_res_service_ref_id = frs.id
                                               AND 1 = ose_divers.comprise_entre( mep.histo_creation, mep.histo_destruction );
---------------------------
--Nouveau VIEW
--V_TBL_CONTRAT
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_CONTRAT" 
 ( "ANNEE_ID", "INTERVENANT_ID", "PEUT_AVOIR_CONTRAT", "STRUCTURE_ID", "NBVH", "EDITE", "SIGNE"
  )  AS 
  WITH t AS (
  SELECT 
    i.annee_id                                                                annee_id,
    i.id                                                                      intervenant_id,
    si.peut_avoir_contrat                                                     peut_avoir_contrat,
    NVL(ep.structure_id, i.structure_id)                                      structure_id,
    CASE WHEN evh.code IN ('contrat-edite','contrat-signe') THEN 1 ELSE 0 END edite,
    CASE WHEN evh.code IN ('contrat-signe')                 THEN 1 ELSE 0 END signe
  FROM
              intervenant                 i
              
         JOIN statut_intervenant         si ON si.id = i.statut_id
         
         JOIN service                     s ON s.intervenant_id = i.id
                                           AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
         
         JOIN type_volume_horaire       tvh ON tvh.code = 'PREVU'
         
         JOIN volume_horaire             vh ON vh.service_id = s.id
                                           AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
                                           AND vh.heures <> 0
                                           AND vh.type_volume_horaire_id = tvh.id
    
         JOIN v_volume_horaire_etat     vhe ON vhe.volume_horaire_id = vh.id
         
         JOIN etat_volume_horaire       evh ON evh.id = vhe.etat_volume_horaire_id
                                           AND evh.code IN ('valide', 'contrat-edite', 'contrat-signe')
  
         JOIN element_pedagogique        ep ON ep.id = s.element_pedagogique_id
    
  WHERE
    1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
    AND NOT (si.peut_avoir_contrat = 0 AND evh.code = 'valide')
  
  UNION ALL
  
  SELECT 
    i.annee_id                                                                annee_id,
    i.id                                                                      intervenant_id,
    si.peut_avoir_contrat                                                     peut_avoir_contrat,
    s.structure_id                                                            structure_id,
    CASE WHEN evh.code IN ('contrat-edite','contrat-signe') THEN 1 ELSE 0 END edite,
    CASE WHEN evh.code IN ('contrat-signe')                 THEN 1 ELSE 0 END signe
  FROM
              intervenant                 i
              
         JOIN statut_intervenant         si ON si.id = i.statut_id
         
         JOIN service_referentiel         s ON s.intervenant_id = i.id
                                           AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
         
         JOIN type_volume_horaire       tvh ON tvh.code = 'PREVU'
         
         JOIN volume_horaire_ref         vh ON vh.service_referentiel_id = s.id
                                           AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
                                           AND vh.heures <> 0
                                           AND vh.type_volume_horaire_id = tvh.id
    
         JOIN v_volume_horaire_ref_etat vhe ON vhe.volume_horaire_ref_id = vh.id
         
         JOIN etat_volume_horaire       evh ON evh.id = vhe.etat_volume_horaire_id
                                           AND evh.code IN ('valide', 'contrat-edite', 'contrat-signe')
  
  WHERE
    1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
    AND NOT (si.peut_avoir_contrat = 0 AND evh.code = 'valide')
)
SELECT
  annee_id,
  intervenant_id,
  peut_avoir_contrat,
  structure_id,
  count(*) as nbvh,
  sum(edite) as edite,
  sum(signe) as signe
FROM
  t
GROUP BY
  annee_id,
  intervenant_id,
  peut_avoir_contrat,
  structure_id;
---------------------------
--Nouveau VIEW
--V_TBL_CLOTURE_REALISE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_CLOTURE_REALISE" 
 ( "ANNEE_ID", "INTERVENANT_ID", "PEUT_CLOTURER_SAISIE", "CLOTURE"
  )  AS 
  WITH t AS (
  SELECT
    i.annee_id              annee_id,
    i.id                    intervenant_id,
    si.peut_cloturer_saisie peut_cloturer_saisie,
    CASE WHEN v.id IS NULL THEN 0 ELSE 1 END cloture
  FROM
              intervenant         i
         JOIN statut_intervenant si ON si.id = i.statut_id
         JOIN type_validation    tv ON tv.code = 'CLOTURE_REALISE'
         
    LEFT JOIN validation          v ON v.intervenant_id = i.id
                                   AND v.type_validation_id = tv.id
                                   AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )

  WHERE
    1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
)
SELECT
  annee_id,
  intervenant_id,
  peut_cloturer_saisie,
  CASE WHEN sum(cloture) = 0 THEN 0 ELSE 1 END cloture
FROM 
  t
GROUP BY
  annee_id,
  intervenant_id,
  peut_cloturer_saisie;
---------------------------
--Modifié VIEW
--V_TBL_AGREMENT
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_AGREMENT" 
 ( "ANNEE_ID", "TYPE_AGREMENT_ID", "INTERVENANT_ID", "STRUCTURE_ID", "OBLIGATOIRE", "AGREMENT_ID"
  )  AS 
  WITH i_s AS (
  SELECT DISTINCT
    fr.intervenant_id,
    ep.structure_id
  FROM
    formule_resultat fr
    JOIN type_volume_horaire  tvh ON tvh.code = 'PREVU' AND tvh.id = fr.type_volume_horaire_id
    JOIN etat_volume_horaire  evh ON evh.code = 'valide' AND evh.id = fr.etat_volume_horaire_id

    JOIN formule_resultat_service frs ON frs.formule_resultat_id = fr.id
    JOIN service s ON s.id = frs.service_id
    JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
  WHERE
    frs.total > 0
)
SELECT
  i.annee_id              annee_id,
  tas.type_agrement_id    type_agrement_id,
  i.id                    intervenant_id,
  null                    structure_id,
  tas.obligatoire         obligatoire,
  a.id                    agrement_id
FROM
  type_agrement                  ta
  JOIN type_agrement_statut      tas ON tas.type_agrement_id = ta.id
                                    AND 1 = ose_divers.comprise_entre( tas.histo_creation, tas.histo_destruction )
                               
  JOIN intervenant                 i ON 1 = ose_divers.comprise_entre(i.histo_creation, i.histo_destruction )
                                    AND (tas.premier_recrutement IS NULL OR NVL(i.premier_recrutement,0) = tas.premier_recrutement)
                                    AND i.statut_id = tas.statut_intervenant_id
                            
  LEFT JOIN agrement               a ON a.type_agrement_id = ta.id 
                                    AND a.intervenant_id = i.id
                                    AND 1 = ose_divers.comprise_entre( a.histo_creation, a.histo_destruction )
WHERE
  ta.code = 'CONSEIL_ACADEMIQUE'

UNION ALL

SELECT
  i.annee_id              annee_id,
  tas.type_agrement_id    type_agrement_id,
  i.id                    intervenant_id,
  i_s.structure_id        structure_id,
  tas.obligatoire         obligatoire,
  a.id                    agrement_id
FROM
  type_agrement                   ta
  JOIN type_agrement_statut      tas ON tas.type_agrement_id = ta.id
                                    AND 1 = ose_divers.comprise_entre( tas.histo_creation, tas.histo_destruction )

  JOIN intervenant                 i ON 1 = ose_divers.comprise_entre(i.histo_creation, i.histo_destruction )
                                    AND (tas.premier_recrutement IS NULL OR NVL(i.premier_recrutement,0) = tas.premier_recrutement)
                                    AND i.statut_id = tas.statut_intervenant_id

  JOIN                           i_s ON i_s.intervenant_id = i.id

  LEFT JOIN agrement               a ON a.type_agrement_id = ta.id 
                                    AND a.intervenant_id = i.id
                                    AND a.structure_id = i_s.structure_id
                                    AND 1 = ose_divers.comprise_entre( a.histo_creation, a.histo_destruction )
WHERE
  ta.code = 'CONSEIL_RESTREINT';
---------------------------
--Nouveau VIEW
--V_REF_INTERVENANT
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_REF_INTERVENANT" 
 ( "C_INTERVENANT"
  )  AS 
  SELECT DISTINCT
  i.source_code C_INTERVENANT
FROM
  tbl_service s
  JOIN intervenant i ON i.id = s.intervenant_id
  JOIN annee a ON a.id = s.annee_id
WHERE
  s.nbvh > 0
  AND SYSDATE BETWEEN a.date_debut AND a.date_fin;
---------------------------
--Modifié VIEW
--V_PRIVILEGES_ROLES
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_PRIVILEGES_ROLES" 
 ( "PRIVILEGE", "ROLE"
  )  AS 
  WITH statuts_roles AS (
SELECT
  rp.privilege_id,
  r.code role
FROM
  role_privilege rp
  JOIN role r ON r.id = rp.role_id AND r.histo_destruction IS NULL

UNION ALL

SELECT
  sp.privilege_id,
  'statut/' || s.source_code role
FROM
  statut_privilege sp
  JOIN statut_intervenant s ON s.id = sp.statut_id AND s.histo_destruction IS NULL
)
SELECT
  cp.code || '-' || p.code privilege,
  sr.role
FROM
  privilege p
  JOIN categorie_privilege cp ON cp.id = p.categorie_id
  LEFT JOIN statuts_roles sr ON sr.privilege_id = p.id;
---------------------------
--Modifié VIEW
--V_PLAFOND_FC_MAJ
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_PLAFOND_FC_MAJ" 
 ( "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID", "PLAFOND", "HEURES"
  )  AS 
  SELECT
  i.annee_id annee_id,
  fr.intervenant_id intervenant_id,
  i.structure_id structure_id,
  fr.type_volume_horaire_id,
  fr.etat_volume_horaire_id,
  ROUND( (NVL(si.plafond_hc_remu_fc,0) - NVL(montant_indemnite_fc,0)) / NVL(thh.valeur,1), 2 ) plafond,
  fr.heures_compl_fc_majorees heures
FROM
       intervenant                i 
  JOIN statut_intervenant        si ON si.id = i.statut_id
  JOIN taux_horaire_hetd        thh ON 1 = ose_divers.comprise_entre( thh.histo_creation, thh.histo_destruction )
  JOIN formule_resultat          fr ON fr.intervenant_id = i.id;
---------------------------
--Modifié VIEW
--V_INDIC_DIFF_DOSSIER
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDIC_DIFF_DOSSIER" 
 ( "ID", "NOM_USUEL", "ADRESSE_DOSSIER", "ADRESSE_IMPORT", "RIB_DOSSIER", "RIB_IMPORT", "NOM_USUEL_DOSSIER", "NOM_USUEL_IMPORT", "PRENOM_DOSSIER", "PRENOM_IMPORT"
  )  AS 
  WITH aa AS (
  SELECT a.*, ose_divers.formatted_adresse(
      a.NO_VOIE,
      a.NOM_VOIE,
      a.BATIMENT,
      a.MENTION_COMPLEMENTAIRE,
      a.LOCALITE,
      a.CODE_POSTAL,
      a.VILLE,
      a.PAYS_LIBELLE) to_string FROM adresse_intervenant a
)
select 
    i.id,
    i.nom_usuel,
    case when d.adresse <> a.to_string                                              then d.adresse                            else null end adresse_dossier,
    case when d.adresse <> a.to_string                                              then a.to_string                          else null end adresse_import,
    case when d.rib <> REPLACE(i.BIC || '-' || i.IBAN, ' ')                         then d.rib                                else null end rib_dossier,
    case when d.rib <> REPLACE(i.BIC || '-' || i.IBAN, ' ')                         then REPLACE(i.BIC || '-' || i.IBAN, ' ') else null end rib_import,
    case when UPPER(REPLACE(d.nom_usuel, ' ')) <> UPPER(REPLACE(i.nom_usuel, ' '))  then REPLACE(d.nom_usuel, ' ')            else null end nom_usuel_dossier,
    case when UPPER(REPLACE(d.nom_usuel, ' ')) <> UPPER(REPLACE(i.nom_usuel, ' '))  then REPLACE(i.nom_usuel, ' ')            else null end nom_usuel_import,
    case when UPPER(REPLACE(d.prenom, ' ')) <> UPPER(REPLACE(i.prenom, ' '))        then REPLACE(d.prenom, ' ')               else null end prenom_dossier,
    case when UPPER(REPLACE(d.prenom, ' ')) <> UPPER(REPLACE(i.prenom, ' '))        then REPLACE(i.prenom, ' ')               else null end prenom_import
  from intervenant i
  join dossier d on d.intervenant_id = i.id
  left join aa a on a.intervenant_id = i.id;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_920
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_920" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'SAISIE_MEP'
  AND w.type_intervenant_code = 'E'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_910
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_910" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'DEMANDE_MEP'
  AND w.type_intervenant_code = 'E'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_820
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_820" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'SAISIE_MEP'
  AND w.type_intervenant_code = 'P'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_810
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_810" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'DEMANDE_MEP'
  AND w.type_intervenant_code = 'P'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_720
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_720" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'SERVICE_VALIDATION_REALISE'
  AND w.type_intervenant_code = 'E'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_710
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_710" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'SERVICE_VALIDATION'
  AND w.type_intervenant_code = 'E'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_690
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_690" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "PLAFOND", "HEURES"
  )  AS 
  SELECT
  fr.id id,
  i.annee_id annee_id,
  i.id intervenant_id,
  i.structure_id structure_id,
  si.plafond_referentiel plafond,
  fr.heures_compl_referentiel heures
FROM
  formule_resultat fr
  JOIN type_volume_horaire tvh ON tvh.id = fr.type_volume_horaire_id
  JOIN etat_volume_horaire evh ON evh.id = fr.etat_volume_horaire_id
  JOIN intervenant i ON i.id = fr.intervenant_id
  JOIN statut_intervenant si ON si.id = i.statut_id
WHERE
  tvh.code = 'REALISE'
  AND evh.code = 'saisi'
  AND si.plafond_referentiel < fr.heures_compl_referentiel;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_680
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_680" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "PLAFOND", "HEURES"
  )  AS 
  SELECT
  fr.id id,
  i.annee_id annee_id,
  i.id intervenant_id,
  i.structure_id structure_id,
  si.plafond_referentiel plafond,
  fr.heures_compl_referentiel heures
FROM
  formule_resultat fr
  JOIN type_volume_horaire tvh ON tvh.id = fr.type_volume_horaire_id
  JOIN etat_volume_horaire evh ON evh.id = fr.etat_volume_horaire_id
  JOIN intervenant i ON i.id = fr.intervenant_id
  JOIN statut_intervenant si ON si.id = i.statut_id
WHERE
  tvh.code = 'PREVU'
  AND evh.code = 'saisi'
  AND si.plafond_referentiel < fr.heures_compl_referentiel;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_670
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_670" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
  JOIN tbl_workflow wc ON wc.intervenant_id = w.intervenant_id
WHERE
  w.etape_code = 'REFERENTIEL_VALIDATION_REALISE'
  AND w.objectif > w.realisation
  AND w.atteignable = 1
  
  AND wc.etape_code = 'CLOTURE_REALISE'
  AND wc.objectif = wc.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_660
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_660" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
  JOIN tbl_workflow wc ON wc.intervenant_id = w.intervenant_id
WHERE
  w.etape_code = 'REFERENTIEL_VALIDATION_REALISE'
  AND w.objectif > w.realisation
  AND w.atteignable = 1
  
  AND wc.etape_code = 'CLOTURE_REALISE'
  AND wc.objectif = wc.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_650
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_650" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
  JOIN tbl_workflow wc ON wc.intervenant_id = w.intervenant_id
WHERE
  w.etape_code = 'SERVICE_VALIDATION_REALISE'
  AND w.objectif > w.realisation
  AND w.atteignable = 1
  
  AND wc.etape_code = 'CLOTURE_REALISE'
  AND wc.objectif = wc.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_640
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_640" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
  JOIN tbl_workflow wc ON wc.intervenant_id = w.intervenant_id
WHERE
  w.etape_code = 'SERVICE_VALIDATION_REALISE'
  AND w.objectif > w.realisation
  AND w.atteignable = 1
  
  AND wc.etape_code = 'CLOTURE_REALISE'
  AND wc.objectif = wc.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_630
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_630" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  i.structure_id
FROM
  tbl_workflow w
  JOIN intervenant i ON i.id = w.intervenant_id
WHERE
  w.etape_code = 'CLOTURE_REALISE'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_620
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_620" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'REFERENTIEL_VALIDATION'
  AND w.type_intervenant_code = 'P'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_610
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_610" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'SERVICE_VALIDATION'
  AND w.type_intervenant_code = 'P'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_550
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_550" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "PLAFOND", "HEURES"
  )  AS 
  SELECT
  rownum id,
  p.annee_id annee_id,
  p.intervenant_id intervenant_id,
  p.structure_id structure_id,
  p.plafond plafond,
  p.heures heures
FROM
  v_plafond_fc_maj p
  JOIN type_volume_horaire tvh ON tvh.id = p.type_volume_horaire_id
  JOIN etat_volume_horaire evh ON evh.id = p.etat_volume_horaire_id
WHERE
  tvh.code = 'REALISE'
  AND evh.code = 'saisi'
  AND heures > plafond;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_540
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_540" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "PLAFOND", "HEURES"
  )  AS 
  SELECT
  rownum id,
  p.annee_id annee_id,
  p.intervenant_id intervenant_id,
  p.structure_id structure_id,
  p.plafond plafond,
  p.heures heures
FROM
  v_plafond_fc_maj p
  JOIN type_volume_horaire tvh ON tvh.id = p.type_volume_horaire_id
  JOIN etat_volume_horaire evh ON evh.id = p.etat_volume_horaire_id
WHERE
  tvh.code = 'PREVU'
  AND evh.code = 'saisi'
  AND heures > plafond;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_530
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_530" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "PLAFOND", "HEURES"
  )  AS 
  SELECT
  fr.id id,
  i.annee_id annee_id,
  i.id intervenant_id,
  i.structure_id structure_id,
  si.plafond_hc_hors_remu_fc plafond,
  fr.heures_compl_fa + fr.heures_compl_fc + fr.heures_compl_fi + fr.heures_compl_referentiel heures
FROM
  formule_resultat fr
  JOIN type_volume_horaire tvh ON tvh.id = fr.type_volume_horaire_id
  JOIN etat_volume_horaire evh ON evh.id = fr.etat_volume_horaire_id
  JOIN intervenant i ON i.id = fr.intervenant_id
  JOIN statut_intervenant si ON si.id = i.statut_id
WHERE
  tvh.code = 'REALISE'
  AND evh.code = 'saisi'
  AND si.plafond_hc_hors_remu_fc < fr.heures_compl_fa + fr.heures_compl_fc + fr.heures_compl_fi + fr.heures_compl_referentiel;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_520
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_520" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "PLAFOND", "HEURES"
  )  AS 
  SELECT
  fr.id id,
  i.annee_id annee_id,
  i.id intervenant_id,
  i.structure_id structure_id,
  si.plafond_hc_hors_remu_fc plafond,
  fr.heures_compl_fa + fr.heures_compl_fc + fr.heures_compl_fi + fr.heures_compl_referentiel heures
FROM
  formule_resultat fr
  JOIN type_volume_horaire tvh ON tvh.id = fr.type_volume_horaire_id
  JOIN etat_volume_horaire evh ON evh.id = fr.etat_volume_horaire_id
  JOIN intervenant i ON i.id = fr.intervenant_id
  JOIN statut_intervenant si ON si.id = i.statut_id
WHERE
  tvh.code = 'PREVU'
  AND evh.code = 'saisi'
  AND si.plafond_hc_hors_remu_fc < fr.heures_compl_fa + fr.heures_compl_fc + fr.heures_compl_fi + fr.heures_compl_referentiel;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_510
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_510" 
 ( "ID", "INTERVENANT_ID", "ANNEE_ID", "STRUCTURE_ID", "ELEMENTS"
  )  AS 
  WITH t AS (
SELECT
  s.intervenant_id,
  s.annee_id,
  s.structure_id,
  listagg( ep.source_code || ' - ' || ep.libelle, '||') WITHIN GROUP (ORDER BY ep.libelle) elements
FROM
  tbl_service s
  LEFT JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
WHERE
  (
    s.has_heures_mauvaise_periode = 1
    OR s.etape_histo = 0
    OR s.element_pedagogique_histo = 0
  )
  AND s.heures > 0
GROUP BY
  s.intervenant_id,
  s.annee_id,
  s.structure_id
)
SELECT
  rownum id, t."INTERVENANT_ID",t."ANNEE_ID",t."STRUCTURE_ID", t.elements
FROM t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_420
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_420" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM (
  SELECT DISTINCT
    i.annee_id annee_id,
    i.id intervenant_id,
    null structure_id
  FROM
    indic_modif_dossier d
    JOIN intervenant i ON i.id = d.intervenant_id
  WHERE
    1 = ose_divers.comprise_entre( d.histo_creation, d.histo_destruction )
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_410
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_410" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT
  rownum id,
  d.annee_id,
  d.intervenant_id,
  null structure_id
FROM
  tbl_dossier d
WHERE
  d.dossier_id IS NOT NULL
  AND d.validation_id IS NULL;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_360
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_360" 
 ( "ID", "INTERVENANT_ID", "ANNEE_ID", "STRUCTURE_ID", "CONTRAT_ID"
  )  AS 
  SELECT
  rownum id,
  t."INTERVENANT_ID",t."ANNEE_ID",t."STRUCTURE_ID",t."CONTRAT_ID"
FROM (
SELECT DISTINCT
  i.id intervenant_id,
  i.annee_id annee_id,
  c.structure_id structure_id,
  c.id contrat_id
FROM
  contrat                c
  JOIN contrat_fichier  cf ON cf.contrat_id = c.id
  JOIN fichier           f ON f.id = cf.fichier_id
                          AND 1 = ose_divers.comprise_entre( f.histo_creation, f.histo_destruction )
  JOIN intervenant i ON i.id = c.intervenant_id
WHERE
  1 = ose_divers.comprise_entre( c.histo_creation, c.histo_destruction )
  AND c.date_retour_signe IS NULL
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_350
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_350" 
 ( "ID", "INTERVENANT_ID", "ANNEE_ID", "STRUCTURE_ID", "CONTRAT_ID"
  )  AS 
  SELECT
  rownum id,
  t."INTERVENANT_ID",t."ANNEE_ID",t."STRUCTURE_ID",t."CONTRAT_ID"
FROM (
SELECT DISTINCT
  i.id intervenant_id,
  i.annee_id annee_id,
  c.structure_id structure_id,
  c.id contrat_id
FROM
  contrat                c
  JOIN contrat_fichier  cf ON cf.contrat_id = c.id
  JOIN fichier           f ON f.id = cf.fichier_id
                          AND 1 = ose_divers.comprise_entre( f.histo_creation, f.histo_destruction )
  JOIN intervenant i ON i.id = c.intervenant_id
WHERE
  1 = ose_divers.comprise_entre( c.histo_creation, c.histo_destruction )
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_340
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_340" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT
  rownum id,
  s.annee_id,
  s.intervenant_id,
  s.structure_id
FROM
  tbl_service s
  JOIN tbl_workflow w ON w.intervenant_id = s.intervenant_id AND w.structure_id = s.structure_id
WHERE
  s.type_intervenant_code = 'V'
  AND s.type_volume_horaire_code = 'PREVU'
  AND nbvh <> valide
  AND w.etape_code = 'CONTRAT'
  AND w.atteignable = 1
  AND w.objectif > 0
  AND w.realisation = w.objectif;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_330
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_330" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  WITH has_contrat AS (
  SELECT DISTINCT
    intervenant_id
  FROM
    tbl_contrat
  WHERE
    edite > 0
)
SELECT
  rownum id,
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM 
  tbl_workflow w
  JOIN has_contrat hc ON hc.intervenant_id = w.intervenant_id
WHERE
  w.atteignable = 1
  AND w.etape_code = 'CONTRAT'
  AND w.objectif > 0
  AND w.realisation < w.objectif;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_320
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_320" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT
  rownum id,
  t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID"
FROM (
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM 
  tbl_workflow w
  LEFT JOIN tbl_contrat c ON c.INTERVENANT_ID = w.intervenant_id AND w.structure_id = c.structure_id
WHERE
  w.atteignable = 1
  AND w.etape_code = 'CONTRAT'
  AND w.objectif > 0
  AND w.realisation = 0
  AND NVL(c.EDITE,0) <> 1
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_310
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_310" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  WITH caok AS (
  SELECT
    w.intervenant_id
  FROM 
    tbl_workflow w
  WHERE
    w.objectif > 0
    AND w.etape_code = 'CONSEIL_ACADEMIQUE'
    AND w.realisation = w.objectif
)
SELECT
  rownum id,
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM 
  tbl_workflow w
  JOIN caok ON caok.intervenant_id = w.intervenant_id
WHERE
  w.atteignable = 1
  AND w.etape_code = 'CONTRAT'
  AND w.objectif > 0
  AND w.realisation < 1;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_220
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_220" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT
  rownum id,
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM 
  tbl_workflow w
WHERE
  w.atteignable = 1
  AND w.etape_code = 'CONSEIL_ACADEMIQUE'
  AND w.objectif > 0
  AND w.realisation < 1;
---------------------------
--Modifié VIEW
--V_INDICATEUR_210
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_210" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT
  rownum id,
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM 
  tbl_workflow w
WHERE
  w.atteignable = 1
  AND w.etape_code = 'CONSEIL_RESTREINT'
  AND w.objectif > 0
  AND w.realisation < 1;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_130
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_130" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT 
  rownum id, 
  t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM (

SELECT DISTINCT
  s.annee_id annee_id,
  s.intervenant_id intervenant_id,
  i.structure_id structure_id
FROM
  tbl_service s
  JOIN intervenant i ON i.id = s.intervenant_id
  JOIN statut_intervenant si ON si.id = i.statut_id
WHERE
  si.tem_biatss = 1
  AND s.type_volume_horaire_code = 'PREVU'
  AND s.intervenant_structure_id <> s.structure_id
  AND s.valide > 0
  AND s.structure_id IS NOT NULL

) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_120
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_120" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT 
  rownum id, 
  t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM (

SELECT DISTINCT
  s.annee_id annee_id,
  s.intervenant_id intervenant_id,
  s.structure_id structure_id
FROM
  tbl_service s
WHERE
  s.type_intervenant_code = 'P'
  AND s.type_volume_horaire_code = 'PREVU'
  AND s.intervenant_structure_id <> s.structure_id
  AND s.valide > 0
  AND s.structure_id IS NOT NULL

) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_110
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_110" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT 
  rownum id, 
  t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM (

SELECT DISTINCT
  s.annee_id       annee_id,
  s.intervenant_id intervenant_id,
  s.structure_id   structure_id
FROM
  tbl_service s
WHERE
  s.type_intervenant_code = 'P'
  AND s.type_volume_horaire_code = 'PREVU'
  AND s.intervenant_structure_id <> s.structure_id
  AND s.valide > 0
  AND s.structure_id IS NOT NULL

) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_1020
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_1020" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'PJ_VALIDATION'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
---------------------------
--Nouveau VIEW
--V_INDICATEUR_1010
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_1010" 
 ( "ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID"
  )  AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'PJ_SAISIE'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
---------------------------
--Modifié VIEW
--V_FORMULE_INTERVENANT
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_FORMULE_INTERVENANT" 
 ( "ID", "ANNEE_ID", "STRUCTURE_ID", "HEURES_SERVICE_STATUTAIRE", "DEPASSEMENT_SERVICE_DU_SANS_HC"
  )  AS 
  SELECT
  i.id,
  i.annee_id,
  i.structure_id,
  si.service_statutaire heures_service_statutaire,
  si.depassement_service_du_sans_hc
FROM
  intervenant i
  JOIN statut_intervenant si ON si.id = i.statut_id
WHERE
  1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction, ose_formule.get_date_obs );
---------------------------
--Nouveau VIEW
--V_EXPORT_SERVICE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_EXPORT_SERVICE" 
 ( "ID", "SERVICE_ID", "INTERVENANT_ID", "TYPE_INTERVENANT_ID", "ANNEE_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID", "ETABLISSEMENT_ID", "STRUCTURE_AFF_ID", "STRUCTURE_ENS_ID", "NIVEAU_FORMATION_ID", "ETAPE_ID", "ELEMENT_PEDAGOGIQUE_ID", "PERIODE_ID", "TYPE_INTERVENTION_ID", "FONCTION_REFERENTIEL_ID", "TYPE_ETAT", "INTERVENANT_CODE", "INTERVENANT_NOM", "INTERVENANT_DATE_NAISSANCE", "INTERVENANT_STATUT_LIBELLE", "INTERVENANT_TYPE_CODE", "INTERVENANT_TYPE_LIBELLE", "INTERVENANT_GRADE_CODE", "INTERVENANT_GRADE_LIBELLE", "INTERVENANT_DISCIPLINE_CODE", "INTERVENANT_DISCIPLINE_LIBELLE", "SERVICE_STRUCTURE_AFF_LIBELLE", "SERVICE_STRUCTURE_ENS_LIBELLE", "ETABLISSEMENT_LIBELLE", "GROUPE_TYPE_FORMATION_LIBELLE", "TYPE_FORMATION_LIBELLE", "ETAPE_NIVEAU", "ETAPE_CODE", "ETAPE_LIBELLE", "ELEMENT_CODE", "ELEMENT_LIBELLE", "ELEMENT_DISCIPLINE_CODE", "ELEMENT_DISCIPLINE_LIBELLE", "FONCTION_REFERENTIEL_LIBELLE", "ELEMENT_TAUX_FI", "ELEMENT_TAUX_FC", "ELEMENT_TAUX_FA", "COMMENTAIRES", "PERIODE_LIBELLE", "ELEMENT_PONDERATION_COMPL", "ELEMENT_SOURCE_LIBELLE", "HEURES", "HEURES_REF", "HEURES_NON_PAYEES", "SERVICE_STATUTAIRE", "SERVICE_DU_MODIFIE", "SERVICE_FI", "SERVICE_FA", "SERVICE_FC", "SERVICE_REFERENTIEL", "HEURES_COMPL_FI", "HEURES_COMPL_FA", "HEURES_COMPL_FC", "HEURES_COMPL_FC_MAJOREES", "HEURES_COMPL_REFERENTIEL", "TOTAL", "SOLDE", "DATE_CLOTURE_REALISE"
  )  AS 
  WITH t AS ( SELECT
  'vh_' || vh.id                    id,
  s.id                              service_id,
  s.intervenant_id                  intervenant_id,
  vh.type_volume_horaire_id         type_volume_horaire_id,
  fr.etat_volume_horaire_id         etat_volume_horaire_id,
  s.element_pedagogique_id          element_pedagogique_id,
  s.etablissement_id                etablissement_id,
  null                              structure_aff_id,
  null                              structure_ens_id,
  vh.periode_id                     periode_id,
  vh.type_intervention_id           type_intervention_id,
  null                              fonction_referentiel_id,
  
  s.description                     service_description,
  
  vh.heures                         heures,
  0                                 heures_ref,
  0                                 heures_non_payees,
  frvh.service_fi                   service_fi,
  frvh.service_fa                   service_fa,
  frvh.service_fc                   service_fc,
  0                                 service_referentiel,
  frvh.heures_compl_fi              heures_compl_fi,
  frvh.heures_compl_fa              heures_compl_fa,
  frvh.heures_compl_fc              heures_compl_fc,
  frvh.heures_compl_fc_majorees     heures_compl_fc_majorees,
  0                                 heures_compl_referentiel,
  frvh.total                        total,
  fr.solde                          solde,
  null                              commentaires
FROM
  formule_resultat_vh                frvh
  JOIN formule_resultat                fr ON fr.id = frvh.formule_resultat_id
  JOIN volume_horaire                  vh ON vh.id = frvh.volume_horaire_id AND vh.motif_non_paiement_id IS NULL AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  JOIN service                          s ON s.id = vh.service_id AND s.intervenant_id = fr.intervenant_id AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )

UNION ALL

SELECT
  'vh_' || vh.id                    id,
  s.id                              service_id,
  s.intervenant_id                  intervenant_id,
  vh.type_volume_horaire_id         type_volume_horaire_id,
  vhe.etat_volume_horaire_id        etat_volume_horaire_id,
  s.element_pedagogique_id          element_pedagogique_id,
  s.etablissement_id                etablissement_id,
  null                              structure_aff_id,
  null                              structure_ens_id,
  vh.periode_id                     periode_id,
  vh.type_intervention_id           type_intervention_id,
  null                              fonction_referentiel_id,
  
  s.description                     service_description,
  
  vh.heures                         heures,
  0                                 heures_ref,
  1                                 heures_non_payees,
  0                                 service_fi,
  0                                 service_fa,
  0                                 service_fc,
  0                                 service_referentiel,
  0                                 heures_compl_fi,
  0                                 heures_compl_fa,
  0                                 heures_compl_fc,
  0                                 heures_compl_fc_majorees,
  0                                 heures_compl_referentiel,
  0                                 total,
  fr.solde                          solde,
  null                              commentaires 
FROM
  volume_horaire                  vh
  JOIN service                     s ON s.id = vh.service_id
  JOIN v_volume_horaire_etat     vhe ON vhe.volume_horaire_id = vh.id
  JOIN formule_resultat           fr ON fr.intervenant_id = s.intervenant_id AND fr.type_volume_horaire_id = vh.type_volume_horaire_id AND fr.etat_volume_horaire_id = vhe.etat_volume_horaire_id
WHERE
  vh.motif_non_paiement_id IS NOT NULL
  AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )

UNION ALL

SELECT
  'vh_ref_' || vhr.id               id,
  sr.id                             service_id,
  sr.intervenant_id                 intervenant_id,
  fr.type_volume_horaire_id         type_volume_horaire_id,
  fr.etat_volume_horaire_id         etat_volume_horaire_id,
  NULL                              element_pedagogique_id,
  OSE_PARAMETRE.GET_ETABLISSEMENT   etablissement_id,
  NULL                              structure_aff_id,
  sr.structure_id                   structure_ens_id,
  NULL                              periode_id,
  NULL                              type_intervention_id,
  sr.fonction_id                    fonction_referentiel_id,
  
  NULL                              service_description,
  
  0                                 heures,
  vhr.heures                        heures_ref,
  0                                 heures_non_payees,
  0                                 service_fi,
  0                                 service_fa,
  0                                 service_fc,
  frvr.service_referentiel          service_referentiel,
  0                                 heures_compl_fi,
  0                                 heures_compl_fa,
  0                                 heures_compl_fc,
  0                                 heures_compl_fc_majorees,
  frvr.heures_compl_referentiel     heures_compl_referentiel,
  frvr.total                        total,
  fr.solde                          solde,
  sr.commentaires                   commentaires
FROM
  formule_resultat_vh_ref       frvr
  JOIN formule_resultat           fr ON fr.id = frvr.formule_resultat_id
  JOIN volume_horaire_ref        vhr ON vhr.id =  frvr.volume_horaire_ref_id
  JOIN service_referentiel        sr ON sr.id = vhr.service_referentiel_id AND sr.intervenant_id = fr.intervenant_id AND 1 = ose_divers.comprise_entre( sr.histo_creation, sr.histo_destruction )
  
UNION ALL

SELECT
  'vh_0_' || i.id                   id,
  NULL                              service_id,
  i.id                              intervenant_id,
  tvh.id                            type_volume_horaire_id,
  evh.id                            etat_volume_horaire_id,
  NULL                              element_pedagogique_id,
  OSE_PARAMETRE.GET_ETABLISSEMENT   etablissement_id,
  NULL                              structure_aff_id,
  NULL                              structure_ens_id,
  NULL                              periode_id,
  NULL                              type_intervention_id,
  NULL                              fonction_referentiel_id,
  
  NULL                              service_description,
  
  0                                 heures,
  0                                 heures_ref,
  0                                 heures_non_payees,
  0                                 service_fi,
  0                                 service_fa,
  0                                 service_fc,
  0                                 service_referentiel,
  0                                 heures_compl_fi,
  0                                 heures_compl_fa,
  0                                 heures_compl_fc,
  0                                 heures_compl_fc_majorees,
  NULL                              heures_compl_referentiel,
  0                                 total,
  0                                 solde,
  NULL                              commentaires
FROM
  intervenant i
  JOIN statut_intervenant si ON si.id = i.statut_id
  JOIN etat_volume_horaire evh ON evh.code IN ('saisi','valide')
  JOIN type_volume_horaire tvh ON tvh.code IN ('PREVU','REALISE')
  LEFT JOIN modification_service_du msd ON msd.intervenant_id = i.id AND 1 = ose_divers.comprise_entre( msd.histo_creation, msd.histo_destruction )
  LEFT JOIN motif_modification_service mms ON mms.id = msd.motif_id
WHERE
  1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  AND si.service_statutaire > 0
GROUP BY
  i.id, si.service_statutaire, evh.id, tvh.id
HAVING 
  si.service_statutaire + SUM(msd.heures * mms.multiplicateur) = 0


)
SELECT
  t.id                            id,
  t.service_id                    service_id,
  i.id                            intervenant_id,
  ti.id                           type_intervenant_id,  
  i.annee_id                      annee_id,
  t.type_volume_horaire_id        type_volume_horaire_id,
  t.etat_volume_horaire_id        etat_volume_horaire_id,
  etab.id                         etablissement_id,
  saff.id                         structure_aff_id,
  sens.id                         structure_ens_id,
  ose_divers.niveau_formation_id_calc( gtf.id, gtf.pertinence_niveau, etp.niveau ) niveau_formation_id,
  etp.id                          etape_id,
  ep.id                           element_pedagogique_id,
  t.periode_id                    periode_id,
  t.type_intervention_id          type_intervention_id,
  t.fonction_referentiel_id       fonction_referentiel_id,
  
  tvh.libelle || ' ' || evh.libelle type_etat,
  i.source_code                   intervenant_code,
  i.nom_usuel || ' ' || i.prenom  intervenant_nom,
  i.date_naissance                intervenant_date_naissance,
  si.libelle                      intervenant_statut_libelle,
  ti.code                         intervenant_type_code,
  ti.libelle                      intervenant_type_libelle,
  g.source_code                   intervenant_grade_code,
  g.libelle_court                 intervenant_grade_libelle,
  di.source_code                  intervenant_discipline_code,
  di.libelle_court                intervenant_discipline_libelle,
  saff.libelle_court              service_structure_aff_libelle,

  sens.libelle_court              service_structure_ens_libelle,
  etab.libelle                    etablissement_libelle,
  gtf.libelle_court               groupe_type_formation_libelle,
  tf.libelle_court                type_formation_libelle,
  etp.niveau                      etape_niveau,
  etp.source_code                 etape_code,
  etp.libelle                     etape_libelle,
  ep.source_code                  element_code,
  COALESCE(ep.libelle,to_char(t.service_description)) element_libelle,
  de.source_code                  element_discipline_code,
  de.libelle_court                element_discipline_libelle,
  fr.libelle_long                 fonction_referentiel_libelle,
  ep.taux_fi                      element_taux_fi,
  ep.taux_fc                      element_taux_fc,
  ep.taux_fa                      element_taux_fa,
  null                            commentaires,
  p.libelle_court                 periode_libelle,
  CASE WHEN fs.ponderation_service_compl = 1 THEN NULL ELSE fs.ponderation_service_compl END element_ponderation_compl,
  src.libelle                     element_source_libelle,
  
  t.heures                        heures,
  t.heures_ref                    heures_ref,
  t.heures_non_payees             heures_non_payees,
  si.service_statutaire           service_statutaire,
  fsm.heures                      service_du_modifie,
  t.service_fi                    service_fi,
  t.service_fa                    service_fa,
  t.service_fc                    service_fc,
  t.service_referentiel           service_referentiel,
  t.heures_compl_fi               heures_compl_fi,
  t.heures_compl_fa               heures_compl_fa,
  t.heures_compl_fc               heures_compl_fc,
  t.heures_compl_fc_majorees      heures_compl_fc_majorees,
  t.heures_compl_referentiel      heures_compl_referentiel,
  t.total                         total,
  t.solde                         solde,
  v.histo_modification            date_cloture_realise

FROM
  t
  JOIN intervenant                        i ON i.id     = t.intervenant_id AND ose_divers.comprise_entre(  i.histo_creation,  i.histo_destruction ) = 1
  JOIN statut_intervenant                si ON si.id    = i.statut_id            
  JOIN type_intervenant                  ti ON ti.id    = si.type_intervenant_id 
  JOIN etablissement                   etab ON etab.id  = t.etablissement_id
  JOIN type_volume_horaire              tvh ON tvh.id   = t.type_volume_horaire_id
  JOIN etat_volume_horaire              evh ON evh.id   = t.etat_volume_horaire_id
  LEFT JOIN grade                         g ON g.id     = i.grade_id
  LEFT JOIN discipline                   di ON di.id    = i.discipline_id
  LEFT JOIN structure                  saff ON saff.id  = i.structure_id AND ti.code = 'P'
  LEFT JOIN element_pedagogique          ep ON ep.id    = t.element_pedagogique_id
  LEFT JOIN discipline                   de ON de.id    = ep.discipline_id
  LEFT JOIN structure                  sens ON sens.id  = NVL(t.structure_ens_id, ep.structure_id)
  LEFT JOIN periode                       p ON p.id     = t.periode_id
  LEFT JOIN source                      src ON src.id   = ep.source_id OR (ep.source_id IS NULL AND src.code = 'OSE')
  LEFT JOIN etape                       etp ON etp.id   = ep.etape_id
  LEFT JOIN type_formation               tf ON tf.id    = etp.type_formation_id AND ose_divers.comprise_entre( tf.histo_creation, tf.histo_destruction ) = 1
  LEFT JOIN groupe_type_formation       gtf ON gtf.id   = tf.groupe_id AND ose_divers.comprise_entre( gtf.histo_creation, gtf.histo_destruction ) = 1
  LEFT JOIN v_formule_service_modifie   fsm ON fsm.intervenant_id = i.id
  LEFT JOIN v_formule_service            fs ON fs.id    = t.service_id
  LEFT JOIN fonction_referentiel         fr ON fr.id    = t.fonction_referentiel_id
  LEFT JOIN type_validation              tv ON tvh.code = 'REALISE' AND tv.code = 'CLOTURE_REALISE'
  LEFT JOIN validation                    v ON v.intervenant_id = i.id AND v.type_validation_id = tv.id AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction );
---------------------------
--Nouveau VIEW
--V_EXPORT_PILOTAGE_ECARTS_ETATS
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_EXPORT_PILOTAGE_ECARTS_ETATS" 
 ( "ANNEE_ID", "ANNEE", "ETAT", "TYPE_HEURES_ID", "TYPE_HEURES", "STRUCTURE_ID", "STRUCTURE", "INTERVENANT_ID", "INTERVENANT_TYPE", "INTERVENANT_CODE", "INTERVENANT", "HETD_PAYABLES"
  )  AS 
  SELECT 
  t3.annee_id annee_id,
  t3.annee_id || '-' || (t3.annee_id+1) annee,
  t3.etat,
  t3.type_heures_id,
  t3.type_heures,
  s.id structure_id,
  s.libelle_court structure,
  i.id intervenant_id,
  ti.libelle intervenant_type,
  i.source_code intervenant_code,
  i.prenom || ' ' || i.nom_usuel intervenant,
  t3.hetd_payables
FROM

(
SELECT
  annee_id,
  etat,
  type_heures_id,
  type_heures,
  structure_id,
  intervenant_id,
  sum(hetd) hetd_payables
FROM (
  SELECT
    annee_id,
    LOWER(tvh.code) || '-' || evh.code etat,
    10*tvh.ordre + evh.ordre ordre,
    type_heures_id,
    type_heures,
    structure_id,
    intervenant_id,
    SUM(hetd) hetd
  FROM (
    SELECT
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id type_heures_id,
      th.code type_heures,
      COALESCE(ep.structure_id,i.structure_id) structure_id,
      fr.intervenant_id,
      SUM(frs.heures_compl_fi) hetd
    FROM
           formule_resultat_service  frs
      JOIN formule_resultat           fr ON fr.id = frs.formule_resultat_id
      JOIN service                     s ON s.id = frs.service_id
      JOIN intervenant                 i ON i.id = fr.intervenant_id
      JOIN type_heures                th ON th.code = 'fi'
      LEFT JOIN element_pedagogique   ep ON ep.id = s.element_pedagogique_id
    GROUP BY
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id, th.code,
      fr.intervenant_id,
      ep.structure_id,
      i.structure_id
    
    UNION ALL
    
    SELECT
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id type_heures_id,
      th.code type_heures,
      COALESCE(ep.structure_id,i.structure_id) structure_id,
      fr.intervenant_id,
      SUM(frs.heures_compl_fa) hetd
    FROM
           formule_resultat_service  frs
      JOIN formule_resultat           fr ON fr.id = frs.formule_resultat_id
      JOIN service                     s ON s.id = frs.service_id
      JOIN intervenant                 i ON i.id = fr.intervenant_id
      JOIN type_heures                th ON th.code = 'fa'
      LEFT JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
    GROUP BY
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id, th.code,
      fr.intervenant_id,
      ep.structure_id,
      i.structure_id
      
    UNION ALL
      
    SELECT
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id type_heures_id,
      th.code type_heures,
      COALESCE(ep.structure_id,i.structure_id) structure_id,
      fr.intervenant_id,
      SUM(frs.heures_compl_fc) hetd
    FROM
           formule_resultat_service  frs
      JOIN formule_resultat           fr ON fr.id = frs.formule_resultat_id
      JOIN service                     s ON s.id = frs.service_id
      JOIN intervenant                 i ON i.id = fr.intervenant_id
      JOIN type_heures                th ON th.code = 'fc'
      LEFT JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
    GROUP BY
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id, th.code,
      fr.intervenant_id,
      ep.structure_id,
      i.structure_id
    
    UNION ALL
    
    SELECT
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id type_heures_id,
      th.code type_heures,
      sr.structure_id,
      fr.intervenant_id,
      sum( frsr.heures_compl_referentiel ) hetd
    FROM
           formule_resultat_service_ref  frsr
      JOIN formule_resultat                fr ON fr.id = frsr.formule_resultat_id
      JOIN service_referentiel             sr ON sr.id = frsr.service_referentiel_id
      JOIN intervenant                      i ON i.id = fr.intervenant_id
      JOIN type_heures                th ON th.code = 'referentiel'
    GROUP BY
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id, th.code,
      fr.intervenant_id,
      sr.structure_id
  ) t1
    JOIN type_volume_horaire            tvh ON tvh.id = t1.type_volume_horaire_id
    JOIN etat_volume_horaire            evh ON evh.id = t1.etat_volume_horaire_id
  GROUP BY
    annee_id, tvh.code, evh.code, tvh.ordre, evh.ordre, type_heures_id, type_heures, structure_id, intervenant_id
  
  UNION ALL
  
  SELECT
    annee_id,
    etat,
    ordre,
    type_heures_id,
    type_heures,
    structure_id,
    intervenant_id,
    SUM(hetd) hetd
  FROM (
    SELECT
      i.annee_id,
      'demande-mise-en-paiement' etat,
      90 ordre, 
      th.id   type_heures_id,
      th.code type_heures,
      COALESCE( sr.structure_id, ep.structure_id, i.structure_id ) structure_id,
      i.id intervenant_id,
      mep.heures hetd
    FROM
                mise_en_paiement              mep 
           JOIN type_heures                    th ON th.id = mep.type_heures_id
           JOIN centre_cout                    cc ON cc.id = mep.centre_cout_id
      LEFT JOIN formule_resultat_service      frs ON frs.id = mep.formule_res_service_id
      LEFT JOIN formule_resultat_service_ref frsr ON frsr.id = mep.formule_res_service_ref_id
      LEFT JOIN formule_resultat               fr ON fr.id = COALESCE(frs.formule_resultat_id, frsr.formule_resultat_id)
      LEFT JOIN service                         s ON s.id = frs.service_id
      LEFT JOIN element_pedagogique            ep ON ep.id = s.element_pedagogique_id
      LEFT JOIN service_referentiel            sr ON sr.id = frsr.service_referentiel_id
      LEFT JOIN intervenant                     i ON i.id = fr.intervenant_id
    WHERE
      1 = ose_divers.comprise_entre(mep.histo_creation,mep.histo_destruction) 
      AND th.eligible_extraction_paie = 1

    UNION ALL

    SELECT
      i.annee_id,
      'mise-en-paiement' etat,
      91 ordre,
      th.id type_heures_id,
      th.code type_heures,
      COALESCE( sr.structure_id, ep.structure_id, i.structure_id ) structure_id,
      i.id intervenant_id,
      mep.heures hetd     
    FROM
                mise_en_paiement              mep 
           JOIN type_heures                    th ON th.id = mep.type_heures_id
           JOIN centre_cout                    cc ON cc.id = mep.centre_cout_id
      LEFT JOIN formule_resultat_service      frs ON frs.id = mep.formule_res_service_id
      LEFT JOIN formule_resultat_service_ref frsr ON frsr.id = mep.formule_res_service_ref_id
      LEFT JOIN formule_resultat               fr ON fr.id = COALESCE(frs.formule_resultat_id, frsr.formule_resultat_id)
      LEFT JOIN service                         s ON s.id = frs.service_id
      LEFT JOIN element_pedagogique            ep ON ep.id = s.element_pedagogique_id
      LEFT JOIN service_referentiel            sr ON sr.id = frsr.service_referentiel_id
      LEFT JOIN intervenant                     i ON i.id = fr.intervenant_id
    WHERE
      1 = ose_divers.comprise_entre(mep.histo_creation,mep.histo_destruction) 
      AND th.eligible_extraction_paie = 1
      AND mep.PERIODE_PAIEMENT_ID IS NOT NULL
  ) t1
  GROUP BY
    annee_id, etat, ordre, type_heures_id, type_heures, structure_id, intervenant_id
) t2
GROUP BY
  annee_id, 
  etat, ordre
  ,type_heures_id, type_heures
  ,structure_id
  ,intervenant_id
ORDER BY
  annee_id, ordre
  
) t3
  JOIN intervenant i ON i.id = t3.intervenant_id
  JOIN statut_intervenant si ON si.id = i.statut_id
  JOIN type_intervenant ti ON ti.id = si.type_intervenant_id
  JOIN structure s ON s.id = t3.structure_id;
---------------------------
--Nouveau VIEW
--V_EXPORT_DMEP
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_EXPORT_DMEP" 
 ( "INTERVENANT_ID", "TYPE_INTERVENANT_ID", "ANNEE_ID", "STRUCTURE_AFF_ID", "STRUCTURE_ENS_ID", "STRUCTURE_ID", "CENTRE_COUT_ID", "ELEMENT_PEDAGOGIQUE_ID", "ETAPE_ID", "TYPE_FORMATION_ID", "GROUPE_TYPE_FORMATION_ID", "STATUT_INTERVENANT_ID", "PERIODE_ID", "INTERVENANT_CODE", "INTERVENANT_NOM", "INTERVENANT_DATE_NAISSANCE", "INTERVENANT_STATUT_LIBELLE", "INTERVENANT_TYPE_CODE", "INTERVENANT_TYPE_LIBELLE", "INTERVENANT_GRADE_CODE", "INTERVENANT_GRADE_LIBELLE", "INTERVENANT_DISCIPLINE_CODE", "INTERVENANT_DISCIPLINE_LIBELLE", "SERVICE_STRUCTURE_AFF_LIBELLE", "SERVICE_STRUCTURE_ENS_LIBELLE", "ETABLISSEMENT_LIBELLE", "GROUPE_TYPE_FORMATION_LIBELLE", "TYPE_FORMATION_LIBELLE", "ETAPE_NIVEAU", "ETAPE_CODE", "ETAPE_LIBELLE", "ELEMENT_CODE", "ELEMENT_LIBELLE", "ELEMENT_DISCIPLINE_CODE", "ELEMENT_DISCIPLINE_LIBELLE", "FONCTION_REFERENTIEL_LIBELLE", "ELEMENT_TAUX_FI", "ELEMENT_TAUX_FC", "ELEMENT_TAUX_FA", "ELEMENT_SOURCE_LIBELLE", "COMMENTAIRES", "ETAT", "TYPE_RESSOURCE_LIBELLE", "CENTRE_COUTS_CODE", "CENTRE_COUTS_LIBELLE", "DOMAINE_FONCTIONNEL_CODE", "DOMAINE_FONCTIONNEL_LIBELLE", "PERIODE_LIBELLE", "DATE_MISE_EN_PAIEMENT", "HEURES_FI", "HEURES_FA", "HEURES_FC", "HEURES_FC_MAJOREES", "HEURES_REFERENTIEL"
  )  AS 
  WITH mep AS (
  SELECT
    frs.service_id,
    frsr.service_referentiel_id,
    mep.date_mise_en_paiement,
    mep.periode_paiement_id,
    mep.centre_cout_id,
    mep.domaine_fonctionnel_id,
  
    sum(case when th.code = 'fi' then mep.heures else 0 end) heures_fi,
    sum(case when th.code = 'fa' then mep.heures else 0 end) heures_fa,
    sum(case when th.code = 'fc' then mep.heures else 0 end) heures_fc,
    sum(case when th.code = 'fc_majorees' then mep.heures else 0 end) heures_fc_majorees,
    sum(case when th.code = 'referentiel' then mep.heures else 0 end) heures_referentiel
  FROM
              mise_en_paiement              mep
         JOIN type_heures                    th ON th.id   = mep.type_heures_id
    LEFT JOIN formule_resultat_service      frs ON frs.id  = mep.formule_res_service_id
    LEFT JOIN formule_resultat_service_ref frsr ON frsr.id = mep.formule_res_service_ref_id
  WHERE
    1 = ose_divers.comprise_entre( mep.histo_creation, mep.histo_destruction )
  GROUP BY
    frs.service_id,
    frsr.service_referentiel_id,
    mep.date_mise_en_paiement,
    mep.periode_paiement_id,
    mep.centre_cout_id,
    mep.domaine_fonctionnel_id
)
SELECT 
  i.id                            intervenant_id,
  ti.id                           type_intervenant_id,
  i.annee_id                      annee_id,
  saff.id                         structure_aff_id,
  sens.id                         structure_ens_id,
  NVL(sens.id,saff.id)            structure_id,
  cc.id                           centre_cout_id,
  ep.id                           element_pedagogique_id,
  etp.id                          etape_id,
  tf.id                           type_formation_id,
  gtf.id                          groupe_type_formation_id,
  si.id                           statut_intervenant_id,
  p.id                            periode_id,
    
  i.source_code                   intervenant_code,
  i.nom_usuel || ' ' || i.prenom  intervenant_nom,
  i.date_naissance                intervenant_date_naissance,
  si.libelle                      intervenant_statut_libelle,
  ti.code                         intervenant_type_code,
  ti.libelle                      intervenant_type_libelle,
  g.source_code                   intervenant_grade_code,
  g.libelle_court                 intervenant_grade_libelle,
  di.source_code                  intervenant_discipline_code,
  di.libelle_court                intervenant_discipline_libelle,
  saff.libelle_court              service_structure_aff_libelle,
  
  sens.libelle_court              service_structure_ens_libelle,
  etab.libelle                    etablissement_libelle,
  gtf.libelle_court               groupe_type_formation_libelle,
  tf.libelle_court                type_formation_libelle,
  etp.niveau                      etape_niveau,
  etp.source_code                 etape_code,
  etp.libelle                     etape_libelle,
  ep.source_code                  element_code,
  ep.libelle                      element_libelle,
  de.source_code                  element_discipline_code,
  de.libelle_court                element_discipline_libelle,
  fr.libelle_long                 fonction_referentiel_libelle,
  ep.taux_fi                      element_taux_fi,
  ep.taux_fc                      element_taux_fc,
  ep.taux_fa                      element_taux_fa,
  src.libelle                     element_source_libelle,
  COALESCE(to_char(s.description),to_char(sr.commentaires)) commentaires,
  
  CASE
    WHEN mep.date_mise_en_paiement IS NULL THEN 'a-mettre-en-paiement'
    ELSE 'mis-en-paiement'
  END                             etat,
  tr.libelle                      type_ressource_libelle,
  cc.source_code                  centre_couts_code,
  cc.libelle                      centre_couts_libelle,
  df.source_code                  domaine_fonctionnel_code,
  df.libelle                      domaine_fonctionnel_libelle,
  p.libelle_long                  periode_libelle,
  mep.date_mise_en_paiement       date_mise_en_paiement,
  mep.heures_fi                   heures_fi,
  mep.heures_fa                   heures_fa,
  mep.heures_fc                   heures_fc,
  mep.heures_fc_majorees          heures_fc_majorees,
  mep.heures_referentiel          heures_referentiel
FROM
              mep
         JOIN centre_cout               cc ON cc.id   = mep.centre_cout_id
         JOIN type_ressource            tr ON tr.id   = cc.type_ressource_id
    LEFT JOIN service                    s ON s.id    = mep.service_id
    LEFT JOIN element_pedagogique       ep ON ep.id   = s.element_pedagogique_id
    LEFT JOIN source                   src ON src.id  = ep.source_id OR (ep.source_id IS NULL AND src.code = 'OSE')
    LEFT JOIN discipline                de ON de.id   = ep.discipline_id
    LEFT JOIN etape                    etp ON etp.id  = ep.etape_id
    LEFT JOIN type_formation            tf ON tf.id   = etp.type_formation_id
    LEFT JOIN groupe_type_formation    gtf ON gtf.id  = tf.groupe_id
    LEFT JOIN service_referentiel       sr ON sr.id   = mep.service_referentiel_id
    LEFT JOIN fonction_referentiel      fr ON fr.id   = sr.fonction_id
         JOIN intervenant                i ON i.id    = NVL( s.intervenant_id, sr.intervenant_id )
         JOIN statut_intervenant        si ON si.id   = i.statut_id
         JOIN type_intervenant          ti ON ti.id   = si.type_intervenant_id
    LEFT JOIN grade                      g ON g.id    = i.grade_id
    LEFT JOIN discipline                di ON di.id   = i.discipline_id
    LEFT JOIN structure               saff ON saff.id = i.structure_id AND ti.code = 'P'
    LEFT JOIN structure               sens ON sens.id = NVL( ep.structure_id, sr.structure_id )
         JOIN etablissement           etab ON etab.id = NVL( s.etablissement_id, sens.etablissement_id )
    LEFT JOIN periode                    p ON p.id    = mep.periode_paiement_id
    LEFT JOIN domaine_fonctionnel       df ON df.id   = mep.domaine_fonctionnel_id
ORDER BY
  intervenant_nom,
  service_structure_aff_libelle, 
  service_structure_ens_libelle, 
  etape_libelle, 
  element_libelle;
---------------------------
--Modifié VIEW
--V_DIFF_TYPE_MODULATEUR_EP
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_TYPE_MODULATEUR_EP" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ELEMENT_PEDAGOGIQUE_ID", "TYPE_MODULATEUR_ID", "U_ELEMENT_PEDAGOGIQUE_ID", "U_TYPE_MODULATEUR_ID"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ELEMENT_PEDAGOGIQUE_ID",diff."TYPE_MODULATEUR_ID",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_TYPE_MODULATEUR_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND rt.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_MODULATEUR_ID ELSE S.TYPE_MODULATEUR_ID END TYPE_MODULATEUR_ID,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.TYPE_MODULATEUR_ID <> S.TYPE_MODULATEUR_ID OR (D.TYPE_MODULATEUR_ID IS NULL AND S.TYPE_MODULATEUR_ID IS NOT NULL) OR (D.TYPE_MODULATEUR_ID IS NOT NULL AND S.TYPE_MODULATEUR_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_MODULATEUR_ID
FROM
  TYPE_MODULATEUR_EP D
  LEFT JOIN ELEMENT_PEDAGOGIQUE rt ON rt.ID = d.ELEMENT_PEDAGOGIQUE_ID
  FULL JOIN SRC_TYPE_MODULATEUR_EP S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.TYPE_MODULATEUR_ID <> S.TYPE_MODULATEUR_ID OR (D.TYPE_MODULATEUR_ID IS NULL AND S.TYPE_MODULATEUR_ID IS NOT NULL) OR (D.TYPE_MODULATEUR_ID IS NOT NULL AND S.TYPE_MODULATEUR_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
---------------------------
--Modifié VIEW
--V_DIFF_TYPE_INTERVENTION_EP
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_TYPE_INTERVENTION_EP" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ELEMENT_PEDAGOGIQUE_ID", "TYPE_INTERVENTION_ID", "VISIBLE", "U_ELEMENT_PEDAGOGIQUE_ID", "U_TYPE_INTERVENTION_ID", "U_VISIBLE"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ELEMENT_PEDAGOGIQUE_ID",diff."TYPE_INTERVENTION_ID",diff."VISIBLE",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_TYPE_INTERVENTION_ID",diff."U_VISIBLE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND rt.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_INTERVENTION_ID ELSE S.TYPE_INTERVENTION_ID END TYPE_INTERVENTION_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VISIBLE ELSE S.VISIBLE END VISIBLE,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.TYPE_INTERVENTION_ID <> S.TYPE_INTERVENTION_ID OR (D.TYPE_INTERVENTION_ID IS NULL AND S.TYPE_INTERVENTION_ID IS NOT NULL) OR (D.TYPE_INTERVENTION_ID IS NOT NULL AND S.TYPE_INTERVENTION_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_INTERVENTION_ID,
    CASE WHEN D.VISIBLE <> S.VISIBLE OR (D.VISIBLE IS NULL AND S.VISIBLE IS NOT NULL) OR (D.VISIBLE IS NOT NULL AND S.VISIBLE IS NULL) THEN 1 ELSE 0 END U_VISIBLE
FROM
  TYPE_INTERVENTION_EP D
  LEFT JOIN ELEMENT_PEDAGOGIQUE rt ON rt.ID = d.ELEMENT_PEDAGOGIQUE_ID
  FULL JOIN SRC_TYPE_INTERVENTION_EP S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.TYPE_INTERVENTION_ID <> S.TYPE_INTERVENTION_ID OR (D.TYPE_INTERVENTION_ID IS NULL AND S.TYPE_INTERVENTION_ID IS NOT NULL) OR (D.TYPE_INTERVENTION_ID IS NOT NULL AND S.TYPE_INTERVENTION_ID IS NULL)
  OR D.VISIBLE <> S.VISIBLE OR (D.VISIBLE IS NULL AND S.VISIBLE IS NOT NULL) OR (D.VISIBLE IS NOT NULL AND S.VISIBLE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
---------------------------
--Modifié VIEW
--V_DIFF_PERSONNEL
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_PERSONNEL" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "CIVILITE_ID", "CODE", "EMAIL", "NOM_PATRONYMIQUE", "NOM_USUEL", "PRENOM", "STRUCTURE_ID", "SUPANN_EMP_ID", "U_CIVILITE_ID", "U_CODE", "U_EMAIL", "U_NOM_PATRONYMIQUE", "U_NOM_USUEL", "U_PRENOM", "U_STRUCTURE_ID", "U_SUPANN_EMP_ID"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CIVILITE_ID",diff."CODE",diff."EMAIL",diff."NOM_PATRONYMIQUE",diff."NOM_USUEL",diff."PRENOM",diff."STRUCTURE_ID",diff."SUPANN_EMP_ID",diff."U_CIVILITE_ID",diff."U_CODE",diff."U_EMAIL",diff."U_NOM_PATRONYMIQUE",diff."U_NOM_USUEL",diff."U_PRENOM",diff."U_STRUCTURE_ID",diff."U_SUPANN_EMP_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CIVILITE_ID ELSE S.CIVILITE_ID END CIVILITE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.EMAIL ELSE S.EMAIL END EMAIL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_PATRONYMIQUE ELSE S.NOM_PATRONYMIQUE END NOM_PATRONYMIQUE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_USUEL ELSE S.NOM_USUEL END NOM_USUEL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PRENOM ELSE S.PRENOM END PRENOM,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.SUPANN_EMP_ID ELSE S.SUPANN_EMP_ID END SUPANN_EMP_ID,
    CASE WHEN D.CIVILITE_ID <> S.CIVILITE_ID OR (D.CIVILITE_ID IS NULL AND S.CIVILITE_ID IS NOT NULL) OR (D.CIVILITE_ID IS NOT NULL AND S.CIVILITE_ID IS NULL) THEN 1 ELSE 0 END U_CIVILITE_ID,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.EMAIL <> S.EMAIL OR (D.EMAIL IS NULL AND S.EMAIL IS NOT NULL) OR (D.EMAIL IS NOT NULL AND S.EMAIL IS NULL) THEN 1 ELSE 0 END U_EMAIL,
    CASE WHEN D.NOM_PATRONYMIQUE <> S.NOM_PATRONYMIQUE OR (D.NOM_PATRONYMIQUE IS NULL AND S.NOM_PATRONYMIQUE IS NOT NULL) OR (D.NOM_PATRONYMIQUE IS NOT NULL AND S.NOM_PATRONYMIQUE IS NULL) THEN 1 ELSE 0 END U_NOM_PATRONYMIQUE,
    CASE WHEN D.NOM_USUEL <> S.NOM_USUEL OR (D.NOM_USUEL IS NULL AND S.NOM_USUEL IS NOT NULL) OR (D.NOM_USUEL IS NOT NULL AND S.NOM_USUEL IS NULL) THEN 1 ELSE 0 END U_NOM_USUEL,
    CASE WHEN D.PRENOM <> S.PRENOM OR (D.PRENOM IS NULL AND S.PRENOM IS NOT NULL) OR (D.PRENOM IS NOT NULL AND S.PRENOM IS NULL) THEN 1 ELSE 0 END U_PRENOM,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID,
    CASE WHEN D.SUPANN_EMP_ID <> S.SUPANN_EMP_ID OR (D.SUPANN_EMP_ID IS NULL AND S.SUPANN_EMP_ID IS NOT NULL) OR (D.SUPANN_EMP_ID IS NOT NULL AND S.SUPANN_EMP_ID IS NULL) THEN 1 ELSE 0 END U_SUPANN_EMP_ID
FROM
  PERSONNEL D
  FULL JOIN SRC_PERSONNEL S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CIVILITE_ID <> S.CIVILITE_ID OR (D.CIVILITE_ID IS NULL AND S.CIVILITE_ID IS NOT NULL) OR (D.CIVILITE_ID IS NOT NULL AND S.CIVILITE_ID IS NULL)
  OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.EMAIL <> S.EMAIL OR (D.EMAIL IS NULL AND S.EMAIL IS NOT NULL) OR (D.EMAIL IS NOT NULL AND S.EMAIL IS NULL)
  OR D.NOM_PATRONYMIQUE <> S.NOM_PATRONYMIQUE OR (D.NOM_PATRONYMIQUE IS NULL AND S.NOM_PATRONYMIQUE IS NOT NULL) OR (D.NOM_PATRONYMIQUE IS NOT NULL AND S.NOM_PATRONYMIQUE IS NULL)
  OR D.NOM_USUEL <> S.NOM_USUEL OR (D.NOM_USUEL IS NULL AND S.NOM_USUEL IS NOT NULL) OR (D.NOM_USUEL IS NOT NULL AND S.NOM_USUEL IS NULL)
  OR D.PRENOM <> S.PRENOM OR (D.PRENOM IS NULL AND S.PRENOM IS NOT NULL) OR (D.PRENOM IS NOT NULL AND S.PRENOM IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
  OR D.SUPANN_EMP_ID <> S.SUPANN_EMP_ID OR (D.SUPANN_EMP_ID IS NULL AND S.SUPANN_EMP_ID IS NOT NULL) OR (D.SUPANN_EMP_ID IS NOT NULL AND S.SUPANN_EMP_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
---------------------------
--Modifié VIEW
--V_DIFF_INTERVENANT
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_INTERVENANT" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ANNEE_ID", "BIC", "CIVILITE_ID", "CODE", "CRITERE_RECHERCHE", "DATE_NAISSANCE", "DEP_NAISSANCE_CODE_INSEE", "DEP_NAISSANCE_LIBELLE", "DISCIPLINE_ID", "EMAIL", "GRADE_ID", "IBAN", "NOM_PATRONYMIQUE", "NOM_USUEL", "NUMERO_INSEE", "NUMERO_INSEE_CLE", "NUMERO_INSEE_PROVISOIRE", "PAYS_NAISSANCE_CODE_INSEE", "PAYS_NAISSANCE_LIBELLE", "PAYS_NATIONALITE_CODE_INSEE", "PAYS_NATIONALITE_LIBELLE", "PRENOM", "STATUT_ID", "STRUCTURE_ID", "SUPANN_EMP_ID", "TEL_MOBILE", "TEL_PRO", "VILLE_NAISSANCE_CODE_INSEE", "VILLE_NAISSANCE_LIBELLE", "U_ANNEE_ID", "U_BIC", "U_CIVILITE_ID", "U_CODE", "U_CRITERE_RECHERCHE", "U_DATE_NAISSANCE", "U_DEP_NAISSANCE_CODE_INSEE", "U_DEP_NAISSANCE_LIBELLE", "U_DISCIPLINE_ID", "U_EMAIL", "U_GRADE_ID", "U_IBAN", "U_NOM_PATRONYMIQUE", "U_NOM_USUEL", "U_NUMERO_INSEE", "U_NUMERO_INSEE_CLE", "U_NUMERO_INSEE_PROVISOIRE", "U_PAYS_NAISSANCE_CODE_INSEE", "U_PAYS_NAISSANCE_LIBELLE", "U_PAYS_NATIONALITE_CODE_INSEE", "U_PAYS_NATIONALITE_LIBELLE", "U_PRENOM", "U_STATUT_ID", "U_STRUCTURE_ID", "U_SUPANN_EMP_ID", "U_TEL_MOBILE", "U_TEL_PRO", "U_VILLE_NAISSANCE_CODE_INSEE", "U_VILLE_NAISSANCE_LIBELLE"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_ID",diff."BIC",diff."CIVILITE_ID",diff."CODE",diff."CRITERE_RECHERCHE",diff."DATE_NAISSANCE",diff."DEP_NAISSANCE_CODE_INSEE",diff."DEP_NAISSANCE_LIBELLE",diff."DISCIPLINE_ID",diff."EMAIL",diff."GRADE_ID",diff."IBAN",diff."NOM_PATRONYMIQUE",diff."NOM_USUEL",diff."NUMERO_INSEE",diff."NUMERO_INSEE_CLE",diff."NUMERO_INSEE_PROVISOIRE",diff."PAYS_NAISSANCE_CODE_INSEE",diff."PAYS_NAISSANCE_LIBELLE",diff."PAYS_NATIONALITE_CODE_INSEE",diff."PAYS_NATIONALITE_LIBELLE",diff."PRENOM",diff."STATUT_ID",diff."STRUCTURE_ID",diff."SUPANN_EMP_ID",diff."TEL_MOBILE",diff."TEL_PRO",diff."VILLE_NAISSANCE_CODE_INSEE",diff."VILLE_NAISSANCE_LIBELLE",diff."U_ANNEE_ID",diff."U_BIC",diff."U_CIVILITE_ID",diff."U_CODE",diff."U_CRITERE_RECHERCHE",diff."U_DATE_NAISSANCE",diff."U_DEP_NAISSANCE_CODE_INSEE",diff."U_DEP_NAISSANCE_LIBELLE",diff."U_DISCIPLINE_ID",diff."U_EMAIL",diff."U_GRADE_ID",diff."U_IBAN",diff."U_NOM_PATRONYMIQUE",diff."U_NOM_USUEL",diff."U_NUMERO_INSEE",diff."U_NUMERO_INSEE_CLE",diff."U_NUMERO_INSEE_PROVISOIRE",diff."U_PAYS_NAISSANCE_CODE_INSEE",diff."U_PAYS_NAISSANCE_LIBELLE",diff."U_PAYS_NATIONALITE_CODE_INSEE",diff."U_PAYS_NATIONALITE_LIBELLE",diff."U_PRENOM",diff."U_STATUT_ID",diff."U_STRUCTURE_ID",diff."U_SUPANN_EMP_ID",diff."U_TEL_MOBILE",diff."U_TEL_PRO",diff."U_VILLE_NAISSANCE_CODE_INSEE",diff."U_VILLE_NAISSANCE_LIBELLE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND d.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_ID ELSE S.ANNEE_ID END ANNEE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.BIC ELSE S.BIC END BIC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CIVILITE_ID ELSE S.CIVILITE_ID END CIVILITE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CRITERE_RECHERCHE ELSE S.CRITERE_RECHERCHE END CRITERE_RECHERCHE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_NAISSANCE ELSE S.DATE_NAISSANCE END DATE_NAISSANCE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DEP_NAISSANCE_CODE_INSEE ELSE S.DEP_NAISSANCE_CODE_INSEE END DEP_NAISSANCE_CODE_INSEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DEP_NAISSANCE_LIBELLE ELSE S.DEP_NAISSANCE_LIBELLE END DEP_NAISSANCE_LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DISCIPLINE_ID ELSE S.DISCIPLINE_ID END DISCIPLINE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.EMAIL ELSE S.EMAIL END EMAIL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.GRADE_ID ELSE S.GRADE_ID END GRADE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.IBAN ELSE S.IBAN END IBAN,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_PATRONYMIQUE ELSE S.NOM_PATRONYMIQUE END NOM_PATRONYMIQUE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_USUEL ELSE S.NOM_USUEL END NOM_USUEL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NUMERO_INSEE ELSE S.NUMERO_INSEE END NUMERO_INSEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NUMERO_INSEE_CLE ELSE S.NUMERO_INSEE_CLE END NUMERO_INSEE_CLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NUMERO_INSEE_PROVISOIRE ELSE S.NUMERO_INSEE_PROVISOIRE END NUMERO_INSEE_PROVISOIRE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PAYS_NAISSANCE_CODE_INSEE ELSE S.PAYS_NAISSANCE_CODE_INSEE END PAYS_NAISSANCE_CODE_INSEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PAYS_NAISSANCE_LIBELLE ELSE S.PAYS_NAISSANCE_LIBELLE END PAYS_NAISSANCE_LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PAYS_NATIONALITE_CODE_INSEE ELSE S.PAYS_NATIONALITE_CODE_INSEE END PAYS_NATIONALITE_CODE_INSEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PAYS_NATIONALITE_LIBELLE ELSE S.PAYS_NATIONALITE_LIBELLE END PAYS_NATIONALITE_LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PRENOM ELSE S.PRENOM END PRENOM,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STATUT_ID ELSE S.STATUT_ID END STATUT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.SUPANN_EMP_ID ELSE S.SUPANN_EMP_ID END SUPANN_EMP_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TEL_MOBILE ELSE S.TEL_MOBILE END TEL_MOBILE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TEL_PRO ELSE S.TEL_PRO END TEL_PRO,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VILLE_NAISSANCE_CODE_INSEE ELSE S.VILLE_NAISSANCE_CODE_INSEE END VILLE_NAISSANCE_CODE_INSEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VILLE_NAISSANCE_LIBELLE ELSE S.VILLE_NAISSANCE_LIBELLE END VILLE_NAISSANCE_LIBELLE,
    CASE WHEN D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL) THEN 1 ELSE 0 END U_ANNEE_ID,
    CASE WHEN D.BIC <> S.BIC OR (D.BIC IS NULL AND S.BIC IS NOT NULL) OR (D.BIC IS NOT NULL AND S.BIC IS NULL) THEN 1 ELSE 0 END U_BIC,
    CASE WHEN D.CIVILITE_ID <> S.CIVILITE_ID OR (D.CIVILITE_ID IS NULL AND S.CIVILITE_ID IS NOT NULL) OR (D.CIVILITE_ID IS NOT NULL AND S.CIVILITE_ID IS NULL) THEN 1 ELSE 0 END U_CIVILITE_ID,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.CRITERE_RECHERCHE <> S.CRITERE_RECHERCHE OR (D.CRITERE_RECHERCHE IS NULL AND S.CRITERE_RECHERCHE IS NOT NULL) OR (D.CRITERE_RECHERCHE IS NOT NULL AND S.CRITERE_RECHERCHE IS NULL) THEN 1 ELSE 0 END U_CRITERE_RECHERCHE,
    CASE WHEN D.DATE_NAISSANCE <> S.DATE_NAISSANCE OR (D.DATE_NAISSANCE IS NULL AND S.DATE_NAISSANCE IS NOT NULL) OR (D.DATE_NAISSANCE IS NOT NULL AND S.DATE_NAISSANCE IS NULL) THEN 1 ELSE 0 END U_DATE_NAISSANCE,
    CASE WHEN D.DEP_NAISSANCE_CODE_INSEE <> S.DEP_NAISSANCE_CODE_INSEE OR (D.DEP_NAISSANCE_CODE_INSEE IS NULL AND S.DEP_NAISSANCE_CODE_INSEE IS NOT NULL) OR (D.DEP_NAISSANCE_CODE_INSEE IS NOT NULL AND S.DEP_NAISSANCE_CODE_INSEE IS NULL) THEN 1 ELSE 0 END U_DEP_NAISSANCE_CODE_INSEE,
    CASE WHEN D.DEP_NAISSANCE_LIBELLE <> S.DEP_NAISSANCE_LIBELLE OR (D.DEP_NAISSANCE_LIBELLE IS NULL AND S.DEP_NAISSANCE_LIBELLE IS NOT NULL) OR (D.DEP_NAISSANCE_LIBELLE IS NOT NULL AND S.DEP_NAISSANCE_LIBELLE IS NULL) THEN 1 ELSE 0 END U_DEP_NAISSANCE_LIBELLE,
    CASE WHEN D.DISCIPLINE_ID <> S.DISCIPLINE_ID OR (D.DISCIPLINE_ID IS NULL AND S.DISCIPLINE_ID IS NOT NULL) OR (D.DISCIPLINE_ID IS NOT NULL AND S.DISCIPLINE_ID IS NULL) THEN 1 ELSE 0 END U_DISCIPLINE_ID,
    CASE WHEN D.EMAIL <> S.EMAIL OR (D.EMAIL IS NULL AND S.EMAIL IS NOT NULL) OR (D.EMAIL IS NOT NULL AND S.EMAIL IS NULL) THEN 1 ELSE 0 END U_EMAIL,
    CASE WHEN D.GRADE_ID <> S.GRADE_ID OR (D.GRADE_ID IS NULL AND S.GRADE_ID IS NOT NULL) OR (D.GRADE_ID IS NOT NULL AND S.GRADE_ID IS NULL) THEN 1 ELSE 0 END U_GRADE_ID,
    CASE WHEN D.IBAN <> S.IBAN OR (D.IBAN IS NULL AND S.IBAN IS NOT NULL) OR (D.IBAN IS NOT NULL AND S.IBAN IS NULL) THEN 1 ELSE 0 END U_IBAN,
    CASE WHEN D.NOM_PATRONYMIQUE <> S.NOM_PATRONYMIQUE OR (D.NOM_PATRONYMIQUE IS NULL AND S.NOM_PATRONYMIQUE IS NOT NULL) OR (D.NOM_PATRONYMIQUE IS NOT NULL AND S.NOM_PATRONYMIQUE IS NULL) THEN 1 ELSE 0 END U_NOM_PATRONYMIQUE,
    CASE WHEN D.NOM_USUEL <> S.NOM_USUEL OR (D.NOM_USUEL IS NULL AND S.NOM_USUEL IS NOT NULL) OR (D.NOM_USUEL IS NOT NULL AND S.NOM_USUEL IS NULL) THEN 1 ELSE 0 END U_NOM_USUEL,
    CASE WHEN D.NUMERO_INSEE <> S.NUMERO_INSEE OR (D.NUMERO_INSEE IS NULL AND S.NUMERO_INSEE IS NOT NULL) OR (D.NUMERO_INSEE IS NOT NULL AND S.NUMERO_INSEE IS NULL) THEN 1 ELSE 0 END U_NUMERO_INSEE,
    CASE WHEN D.NUMERO_INSEE_CLE <> S.NUMERO_INSEE_CLE OR (D.NUMERO_INSEE_CLE IS NULL AND S.NUMERO_INSEE_CLE IS NOT NULL) OR (D.NUMERO_INSEE_CLE IS NOT NULL AND S.NUMERO_INSEE_CLE IS NULL) THEN 1 ELSE 0 END U_NUMERO_INSEE_CLE,
    CASE WHEN D.NUMERO_INSEE_PROVISOIRE <> S.NUMERO_INSEE_PROVISOIRE OR (D.NUMERO_INSEE_PROVISOIRE IS NULL AND S.NUMERO_INSEE_PROVISOIRE IS NOT NULL) OR (D.NUMERO_INSEE_PROVISOIRE IS NOT NULL AND S.NUMERO_INSEE_PROVISOIRE IS NULL) THEN 1 ELSE 0 END U_NUMERO_INSEE_PROVISOIRE,
    CASE WHEN D.PAYS_NAISSANCE_CODE_INSEE <> S.PAYS_NAISSANCE_CODE_INSEE OR (D.PAYS_NAISSANCE_CODE_INSEE IS NULL AND S.PAYS_NAISSANCE_CODE_INSEE IS NOT NULL) OR (D.PAYS_NAISSANCE_CODE_INSEE IS NOT NULL AND S.PAYS_NAISSANCE_CODE_INSEE IS NULL) THEN 1 ELSE 0 END U_PAYS_NAISSANCE_CODE_INSEE,
    CASE WHEN D.PAYS_NAISSANCE_LIBELLE <> S.PAYS_NAISSANCE_LIBELLE OR (D.PAYS_NAISSANCE_LIBELLE IS NULL AND S.PAYS_NAISSANCE_LIBELLE IS NOT NULL) OR (D.PAYS_NAISSANCE_LIBELLE IS NOT NULL AND S.PAYS_NAISSANCE_LIBELLE IS NULL) THEN 1 ELSE 0 END U_PAYS_NAISSANCE_LIBELLE,
    CASE WHEN D.PAYS_NATIONALITE_CODE_INSEE <> S.PAYS_NATIONALITE_CODE_INSEE OR (D.PAYS_NATIONALITE_CODE_INSEE IS NULL AND S.PAYS_NATIONALITE_CODE_INSEE IS NOT NULL) OR (D.PAYS_NATIONALITE_CODE_INSEE IS NOT NULL AND S.PAYS_NATIONALITE_CODE_INSEE IS NULL) THEN 1 ELSE 0 END U_PAYS_NATIONALITE_CODE_INSEE,
    CASE WHEN D.PAYS_NATIONALITE_LIBELLE <> S.PAYS_NATIONALITE_LIBELLE OR (D.PAYS_NATIONALITE_LIBELLE IS NULL AND S.PAYS_NATIONALITE_LIBELLE IS NOT NULL) OR (D.PAYS_NATIONALITE_LIBELLE IS NOT NULL AND S.PAYS_NATIONALITE_LIBELLE IS NULL) THEN 1 ELSE 0 END U_PAYS_NATIONALITE_LIBELLE,
    CASE WHEN D.PRENOM <> S.PRENOM OR (D.PRENOM IS NULL AND S.PRENOM IS NOT NULL) OR (D.PRENOM IS NOT NULL AND S.PRENOM IS NULL) THEN 1 ELSE 0 END U_PRENOM,
    CASE WHEN D.STATUT_ID <> S.STATUT_ID OR (D.STATUT_ID IS NULL AND S.STATUT_ID IS NOT NULL) OR (D.STATUT_ID IS NOT NULL AND S.STATUT_ID IS NULL) THEN 1 ELSE 0 END U_STATUT_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID,
    CASE WHEN D.SUPANN_EMP_ID <> S.SUPANN_EMP_ID OR (D.SUPANN_EMP_ID IS NULL AND S.SUPANN_EMP_ID IS NOT NULL) OR (D.SUPANN_EMP_ID IS NOT NULL AND S.SUPANN_EMP_ID IS NULL) THEN 1 ELSE 0 END U_SUPANN_EMP_ID,
    CASE WHEN D.TEL_MOBILE <> S.TEL_MOBILE OR (D.TEL_MOBILE IS NULL AND S.TEL_MOBILE IS NOT NULL) OR (D.TEL_MOBILE IS NOT NULL AND S.TEL_MOBILE IS NULL) THEN 1 ELSE 0 END U_TEL_MOBILE,
    CASE WHEN D.TEL_PRO <> S.TEL_PRO OR (D.TEL_PRO IS NULL AND S.TEL_PRO IS NOT NULL) OR (D.TEL_PRO IS NOT NULL AND S.TEL_PRO IS NULL) THEN 1 ELSE 0 END U_TEL_PRO,
    CASE WHEN D.VILLE_NAISSANCE_CODE_INSEE <> S.VILLE_NAISSANCE_CODE_INSEE OR (D.VILLE_NAISSANCE_CODE_INSEE IS NULL AND S.VILLE_NAISSANCE_CODE_INSEE IS NOT NULL) OR (D.VILLE_NAISSANCE_CODE_INSEE IS NOT NULL AND S.VILLE_NAISSANCE_CODE_INSEE IS NULL) THEN 1 ELSE 0 END U_VILLE_NAISSANCE_CODE_INSEE,
    CASE WHEN D.VILLE_NAISSANCE_LIBELLE <> S.VILLE_NAISSANCE_LIBELLE OR (D.VILLE_NAISSANCE_LIBELLE IS NULL AND S.VILLE_NAISSANCE_LIBELLE IS NOT NULL) OR (D.VILLE_NAISSANCE_LIBELLE IS NOT NULL AND S.VILLE_NAISSANCE_LIBELLE IS NULL) THEN 1 ELSE 0 END U_VILLE_NAISSANCE_LIBELLE
FROM
  INTERVENANT D
  FULL JOIN SRC_INTERVENANT S ON S.source_id = D.source_id AND S.source_code = D.source_code AND S.ANNEE_ID = d.ANNEE_ID
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL)
  OR D.BIC <> S.BIC OR (D.BIC IS NULL AND S.BIC IS NOT NULL) OR (D.BIC IS NOT NULL AND S.BIC IS NULL)
  OR D.CIVILITE_ID <> S.CIVILITE_ID OR (D.CIVILITE_ID IS NULL AND S.CIVILITE_ID IS NOT NULL) OR (D.CIVILITE_ID IS NOT NULL AND S.CIVILITE_ID IS NULL)
  OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.CRITERE_RECHERCHE <> S.CRITERE_RECHERCHE OR (D.CRITERE_RECHERCHE IS NULL AND S.CRITERE_RECHERCHE IS NOT NULL) OR (D.CRITERE_RECHERCHE IS NOT NULL AND S.CRITERE_RECHERCHE IS NULL)
  OR D.DATE_NAISSANCE <> S.DATE_NAISSANCE OR (D.DATE_NAISSANCE IS NULL AND S.DATE_NAISSANCE IS NOT NULL) OR (D.DATE_NAISSANCE IS NOT NULL AND S.DATE_NAISSANCE IS NULL)
  OR D.DEP_NAISSANCE_CODE_INSEE <> S.DEP_NAISSANCE_CODE_INSEE OR (D.DEP_NAISSANCE_CODE_INSEE IS NULL AND S.DEP_NAISSANCE_CODE_INSEE IS NOT NULL) OR (D.DEP_NAISSANCE_CODE_INSEE IS NOT NULL AND S.DEP_NAISSANCE_CODE_INSEE IS NULL)
  OR D.DEP_NAISSANCE_LIBELLE <> S.DEP_NAISSANCE_LIBELLE OR (D.DEP_NAISSANCE_LIBELLE IS NULL AND S.DEP_NAISSANCE_LIBELLE IS NOT NULL) OR (D.DEP_NAISSANCE_LIBELLE IS NOT NULL AND S.DEP_NAISSANCE_LIBELLE IS NULL)
  OR D.DISCIPLINE_ID <> S.DISCIPLINE_ID OR (D.DISCIPLINE_ID IS NULL AND S.DISCIPLINE_ID IS NOT NULL) OR (D.DISCIPLINE_ID IS NOT NULL AND S.DISCIPLINE_ID IS NULL)
  OR D.EMAIL <> S.EMAIL OR (D.EMAIL IS NULL AND S.EMAIL IS NOT NULL) OR (D.EMAIL IS NOT NULL AND S.EMAIL IS NULL)
  OR D.GRADE_ID <> S.GRADE_ID OR (D.GRADE_ID IS NULL AND S.GRADE_ID IS NOT NULL) OR (D.GRADE_ID IS NOT NULL AND S.GRADE_ID IS NULL)
  OR D.IBAN <> S.IBAN OR (D.IBAN IS NULL AND S.IBAN IS NOT NULL) OR (D.IBAN IS NOT NULL AND S.IBAN IS NULL)
  OR D.NOM_PATRONYMIQUE <> S.NOM_PATRONYMIQUE OR (D.NOM_PATRONYMIQUE IS NULL AND S.NOM_PATRONYMIQUE IS NOT NULL) OR (D.NOM_PATRONYMIQUE IS NOT NULL AND S.NOM_PATRONYMIQUE IS NULL)
  OR D.NOM_USUEL <> S.NOM_USUEL OR (D.NOM_USUEL IS NULL AND S.NOM_USUEL IS NOT NULL) OR (D.NOM_USUEL IS NOT NULL AND S.NOM_USUEL IS NULL)
  OR D.NUMERO_INSEE <> S.NUMERO_INSEE OR (D.NUMERO_INSEE IS NULL AND S.NUMERO_INSEE IS NOT NULL) OR (D.NUMERO_INSEE IS NOT NULL AND S.NUMERO_INSEE IS NULL)
  OR D.NUMERO_INSEE_CLE <> S.NUMERO_INSEE_CLE OR (D.NUMERO_INSEE_CLE IS NULL AND S.NUMERO_INSEE_CLE IS NOT NULL) OR (D.NUMERO_INSEE_CLE IS NOT NULL AND S.NUMERO_INSEE_CLE IS NULL)
  OR D.NUMERO_INSEE_PROVISOIRE <> S.NUMERO_INSEE_PROVISOIRE OR (D.NUMERO_INSEE_PROVISOIRE IS NULL AND S.NUMERO_INSEE_PROVISOIRE IS NOT NULL) OR (D.NUMERO_INSEE_PROVISOIRE IS NOT NULL AND S.NUMERO_INSEE_PROVISOIRE IS NULL)
  OR D.PAYS_NAISSANCE_CODE_INSEE <> S.PAYS_NAISSANCE_CODE_INSEE OR (D.PAYS_NAISSANCE_CODE_INSEE IS NULL AND S.PAYS_NAISSANCE_CODE_INSEE IS NOT NULL) OR (D.PAYS_NAISSANCE_CODE_INSEE IS NOT NULL AND S.PAYS_NAISSANCE_CODE_INSEE IS NULL)
  OR D.PAYS_NAISSANCE_LIBELLE <> S.PAYS_NAISSANCE_LIBELLE OR (D.PAYS_NAISSANCE_LIBELLE IS NULL AND S.PAYS_NAISSANCE_LIBELLE IS NOT NULL) OR (D.PAYS_NAISSANCE_LIBELLE IS NOT NULL AND S.PAYS_NAISSANCE_LIBELLE IS NULL)
  OR D.PAYS_NATIONALITE_CODE_INSEE <> S.PAYS_NATIONALITE_CODE_INSEE OR (D.PAYS_NATIONALITE_CODE_INSEE IS NULL AND S.PAYS_NATIONALITE_CODE_INSEE IS NOT NULL) OR (D.PAYS_NATIONALITE_CODE_INSEE IS NOT NULL AND S.PAYS_NATIONALITE_CODE_INSEE IS NULL)
  OR D.PAYS_NATIONALITE_LIBELLE <> S.PAYS_NATIONALITE_LIBELLE OR (D.PAYS_NATIONALITE_LIBELLE IS NULL AND S.PAYS_NATIONALITE_LIBELLE IS NOT NULL) OR (D.PAYS_NATIONALITE_LIBELLE IS NOT NULL AND S.PAYS_NATIONALITE_LIBELLE IS NULL)
  OR D.PRENOM <> S.PRENOM OR (D.PRENOM IS NULL AND S.PRENOM IS NOT NULL) OR (D.PRENOM IS NOT NULL AND S.PRENOM IS NULL)
  OR D.STATUT_ID <> S.STATUT_ID OR (D.STATUT_ID IS NULL AND S.STATUT_ID IS NOT NULL) OR (D.STATUT_ID IS NOT NULL AND S.STATUT_ID IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
  OR D.SUPANN_EMP_ID <> S.SUPANN_EMP_ID OR (D.SUPANN_EMP_ID IS NULL AND S.SUPANN_EMP_ID IS NOT NULL) OR (D.SUPANN_EMP_ID IS NOT NULL AND S.SUPANN_EMP_ID IS NULL)
  OR D.TEL_MOBILE <> S.TEL_MOBILE OR (D.TEL_MOBILE IS NULL AND S.TEL_MOBILE IS NOT NULL) OR (D.TEL_MOBILE IS NOT NULL AND S.TEL_MOBILE IS NULL)
  OR D.TEL_PRO <> S.TEL_PRO OR (D.TEL_PRO IS NULL AND S.TEL_PRO IS NOT NULL) OR (D.TEL_PRO IS NOT NULL AND S.TEL_PRO IS NULL)
  OR D.VILLE_NAISSANCE_CODE_INSEE <> S.VILLE_NAISSANCE_CODE_INSEE OR (D.VILLE_NAISSANCE_CODE_INSEE IS NULL AND S.VILLE_NAISSANCE_CODE_INSEE IS NOT NULL) OR (D.VILLE_NAISSANCE_CODE_INSEE IS NOT NULL AND S.VILLE_NAISSANCE_CODE_INSEE IS NULL)
  OR D.VILLE_NAISSANCE_LIBELLE <> S.VILLE_NAISSANCE_LIBELLE OR (D.VILLE_NAISSANCE_LIBELLE IS NULL AND S.VILLE_NAISSANCE_LIBELLE IS NOT NULL) OR (D.VILLE_NAISSANCE_LIBELLE IS NOT NULL AND S.VILLE_NAISSANCE_LIBELLE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
---------------------------
--Modifié VIEW
--V_DIFF_ELEMENT_TAUX_REGIMES
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_ELEMENT_TAUX_REGIMES" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ELEMENT_PEDAGOGIQUE_ID", "TAUX_FA", "TAUX_FC", "TAUX_FI", "U_ELEMENT_PEDAGOGIQUE_ID", "U_TAUX_FA", "U_TAUX_FC", "U_TAUX_FI"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ELEMENT_PEDAGOGIQUE_ID",diff."TAUX_FA",diff."TAUX_FC",diff."TAUX_FI",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_TAUX_FA",diff."U_TAUX_FC",diff."U_TAUX_FI" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND rt.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FA ELSE S.TAUX_FA END TAUX_FA,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FC ELSE S.TAUX_FC END TAUX_FC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FI ELSE S.TAUX_FI END TAUX_FI,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.TAUX_FA <> S.TAUX_FA OR (D.TAUX_FA IS NULL AND S.TAUX_FA IS NOT NULL) OR (D.TAUX_FA IS NOT NULL AND S.TAUX_FA IS NULL) THEN 1 ELSE 0 END U_TAUX_FA,
    CASE WHEN D.TAUX_FC <> S.TAUX_FC OR (D.TAUX_FC IS NULL AND S.TAUX_FC IS NOT NULL) OR (D.TAUX_FC IS NOT NULL AND S.TAUX_FC IS NULL) THEN 1 ELSE 0 END U_TAUX_FC,
    CASE WHEN D.TAUX_FI <> S.TAUX_FI OR (D.TAUX_FI IS NULL AND S.TAUX_FI IS NOT NULL) OR (D.TAUX_FI IS NOT NULL AND S.TAUX_FI IS NULL) THEN 1 ELSE 0 END U_TAUX_FI
FROM
  ELEMENT_TAUX_REGIMES D
  LEFT JOIN ELEMENT_PEDAGOGIQUE rt ON rt.ID = d.ELEMENT_PEDAGOGIQUE_ID
  FULL JOIN SRC_ELEMENT_TAUX_REGIMES S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.TAUX_FA <> S.TAUX_FA OR (D.TAUX_FA IS NULL AND S.TAUX_FA IS NOT NULL) OR (D.TAUX_FA IS NOT NULL AND S.TAUX_FA IS NULL)
  OR D.TAUX_FC <> S.TAUX_FC OR (D.TAUX_FC IS NULL AND S.TAUX_FC IS NOT NULL) OR (D.TAUX_FC IS NOT NULL AND S.TAUX_FC IS NULL)
  OR D.TAUX_FI <> S.TAUX_FI OR (D.TAUX_FI IS NULL AND S.TAUX_FI IS NOT NULL) OR (D.TAUX_FI IS NOT NULL AND S.TAUX_FI IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
---------------------------
--Modifié VIEW
--V_DIFF_ELEMENT_PEDAGOGIQUE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_ELEMENT_PEDAGOGIQUE" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ANNEE_ID", "DISCIPLINE_ID", "ETAPE_ID", "FA", "FC", "FI", "LIBELLE", "PERIODE_ID", "STRUCTURE_ID", "TAUX_FA", "TAUX_FC", "TAUX_FI", "TAUX_FOAD", "U_ANNEE_ID", "U_DISCIPLINE_ID", "U_ETAPE_ID", "U_FA", "U_FC", "U_FI", "U_LIBELLE", "U_PERIODE_ID", "U_STRUCTURE_ID", "U_TAUX_FA", "U_TAUX_FC", "U_TAUX_FI", "U_TAUX_FOAD"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_ID",diff."DISCIPLINE_ID",diff."ETAPE_ID",diff."FA",diff."FC",diff."FI",diff."LIBELLE",diff."PERIODE_ID",diff."STRUCTURE_ID",diff."TAUX_FA",diff."TAUX_FC",diff."TAUX_FI",diff."TAUX_FOAD",diff."U_ANNEE_ID",diff."U_DISCIPLINE_ID",diff."U_ETAPE_ID",diff."U_FA",diff."U_FC",diff."U_FI",diff."U_LIBELLE",diff."U_PERIODE_ID",diff."U_STRUCTURE_ID",diff."U_TAUX_FA",diff."U_TAUX_FC",diff."U_TAUX_FI",diff."U_TAUX_FOAD" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND d.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_ID ELSE S.ANNEE_ID END ANNEE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DISCIPLINE_ID ELSE S.DISCIPLINE_ID END DISCIPLINE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETAPE_ID ELSE S.ETAPE_ID END ETAPE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FA ELSE S.FA END FA,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FC ELSE S.FC END FC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FI ELSE S.FI END FI,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE ELSE S.LIBELLE END LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PERIODE_ID ELSE S.PERIODE_ID END PERIODE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FA ELSE S.TAUX_FA END TAUX_FA,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FC ELSE S.TAUX_FC END TAUX_FC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FI ELSE S.TAUX_FI END TAUX_FI,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FOAD ELSE S.TAUX_FOAD END TAUX_FOAD,
    CASE WHEN D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL) THEN 1 ELSE 0 END U_ANNEE_ID,
    CASE WHEN D.DISCIPLINE_ID <> S.DISCIPLINE_ID OR (D.DISCIPLINE_ID IS NULL AND S.DISCIPLINE_ID IS NOT NULL) OR (D.DISCIPLINE_ID IS NOT NULL AND S.DISCIPLINE_ID IS NULL) THEN 1 ELSE 0 END U_DISCIPLINE_ID,
    CASE WHEN D.ETAPE_ID <> S.ETAPE_ID OR (D.ETAPE_ID IS NULL AND S.ETAPE_ID IS NOT NULL) OR (D.ETAPE_ID IS NOT NULL AND S.ETAPE_ID IS NULL) THEN 1 ELSE 0 END U_ETAPE_ID,
    CASE WHEN D.FA <> S.FA OR (D.FA IS NULL AND S.FA IS NOT NULL) OR (D.FA IS NOT NULL AND S.FA IS NULL) THEN 1 ELSE 0 END U_FA,
    CASE WHEN D.FC <> S.FC OR (D.FC IS NULL AND S.FC IS NOT NULL) OR (D.FC IS NOT NULL AND S.FC IS NULL) THEN 1 ELSE 0 END U_FC,
    CASE WHEN D.FI <> S.FI OR (D.FI IS NULL AND S.FI IS NOT NULL) OR (D.FI IS NOT NULL AND S.FI IS NULL) THEN 1 ELSE 0 END U_FI,
    CASE WHEN D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL) THEN 1 ELSE 0 END U_LIBELLE,
    CASE WHEN D.PERIODE_ID <> S.PERIODE_ID OR (D.PERIODE_ID IS NULL AND S.PERIODE_ID IS NOT NULL) OR (D.PERIODE_ID IS NOT NULL AND S.PERIODE_ID IS NULL) THEN 1 ELSE 0 END U_PERIODE_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID,
    CASE WHEN D.TAUX_FA <> S.TAUX_FA OR (D.TAUX_FA IS NULL AND S.TAUX_FA IS NOT NULL) OR (D.TAUX_FA IS NOT NULL AND S.TAUX_FA IS NULL) THEN 1 ELSE 0 END U_TAUX_FA,
    CASE WHEN D.TAUX_FC <> S.TAUX_FC OR (D.TAUX_FC IS NULL AND S.TAUX_FC IS NOT NULL) OR (D.TAUX_FC IS NOT NULL AND S.TAUX_FC IS NULL) THEN 1 ELSE 0 END U_TAUX_FC,
    CASE WHEN D.TAUX_FI <> S.TAUX_FI OR (D.TAUX_FI IS NULL AND S.TAUX_FI IS NOT NULL) OR (D.TAUX_FI IS NOT NULL AND S.TAUX_FI IS NULL) THEN 1 ELSE 0 END U_TAUX_FI,
    CASE WHEN D.TAUX_FOAD <> S.TAUX_FOAD OR (D.TAUX_FOAD IS NULL AND S.TAUX_FOAD IS NOT NULL) OR (D.TAUX_FOAD IS NOT NULL AND S.TAUX_FOAD IS NULL) THEN 1 ELSE 0 END U_TAUX_FOAD
FROM
  ELEMENT_PEDAGOGIQUE D
  FULL JOIN SRC_ELEMENT_PEDAGOGIQUE S ON S.source_id = D.source_id AND S.source_code = D.source_code AND S.ANNEE_ID = d.ANNEE_ID
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL)
  OR D.DISCIPLINE_ID <> S.DISCIPLINE_ID OR (D.DISCIPLINE_ID IS NULL AND S.DISCIPLINE_ID IS NOT NULL) OR (D.DISCIPLINE_ID IS NOT NULL AND S.DISCIPLINE_ID IS NULL)
  OR D.ETAPE_ID <> S.ETAPE_ID OR (D.ETAPE_ID IS NULL AND S.ETAPE_ID IS NOT NULL) OR (D.ETAPE_ID IS NOT NULL AND S.ETAPE_ID IS NULL)
  OR D.FA <> S.FA OR (D.FA IS NULL AND S.FA IS NOT NULL) OR (D.FA IS NOT NULL AND S.FA IS NULL)
  OR D.FC <> S.FC OR (D.FC IS NULL AND S.FC IS NOT NULL) OR (D.FC IS NOT NULL AND S.FC IS NULL)
  OR D.FI <> S.FI OR (D.FI IS NULL AND S.FI IS NOT NULL) OR (D.FI IS NOT NULL AND S.FI IS NULL)
  OR D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL)
  OR D.PERIODE_ID <> S.PERIODE_ID OR (D.PERIODE_ID IS NULL AND S.PERIODE_ID IS NOT NULL) OR (D.PERIODE_ID IS NOT NULL AND S.PERIODE_ID IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
  OR D.TAUX_FA <> S.TAUX_FA OR (D.TAUX_FA IS NULL AND S.TAUX_FA IS NOT NULL) OR (D.TAUX_FA IS NOT NULL AND S.TAUX_FA IS NULL)
  OR D.TAUX_FC <> S.TAUX_FC OR (D.TAUX_FC IS NULL AND S.TAUX_FC IS NOT NULL) OR (D.TAUX_FC IS NOT NULL AND S.TAUX_FC IS NULL)
  OR D.TAUX_FI <> S.TAUX_FI OR (D.TAUX_FI IS NULL AND S.TAUX_FI IS NOT NULL) OR (D.TAUX_FI IS NOT NULL AND S.TAUX_FI IS NULL)
  OR D.TAUX_FOAD <> S.TAUX_FOAD OR (D.TAUX_FOAD IS NULL AND S.TAUX_FOAD IS NOT NULL) OR (D.TAUX_FOAD IS NOT NULL AND S.TAUX_FOAD IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
---------------------------
--Modifié VIEW
--V_DIFF_EFFECTIFS
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_EFFECTIFS" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ANNEE_ID", "ELEMENT_PEDAGOGIQUE_ID", "FA", "FC", "FI", "U_ANNEE_ID", "U_ELEMENT_PEDAGOGIQUE_ID", "U_FA", "U_FC", "U_FI"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_ID",diff."ELEMENT_PEDAGOGIQUE_ID",diff."FA",diff."FC",diff."FI",diff."U_ANNEE_ID",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_FA",diff."U_FC",diff."U_FI" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND d.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_ID ELSE S.ANNEE_ID END ANNEE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FA ELSE S.FA END FA,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FC ELSE S.FC END FC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FI ELSE S.FI END FI,
    CASE WHEN D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL) THEN 1 ELSE 0 END U_ANNEE_ID,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.FA <> S.FA OR (D.FA IS NULL AND S.FA IS NOT NULL) OR (D.FA IS NOT NULL AND S.FA IS NULL) THEN 1 ELSE 0 END U_FA,
    CASE WHEN D.FC <> S.FC OR (D.FC IS NULL AND S.FC IS NOT NULL) OR (D.FC IS NOT NULL AND S.FC IS NULL) THEN 1 ELSE 0 END U_FC,
    CASE WHEN D.FI <> S.FI OR (D.FI IS NULL AND S.FI IS NOT NULL) OR (D.FI IS NOT NULL AND S.FI IS NULL) THEN 1 ELSE 0 END U_FI
FROM
  EFFECTIFS D
  FULL JOIN SRC_EFFECTIFS S ON S.source_id = D.source_id AND S.source_code = D.source_code AND S.ANNEE_ID = d.ANNEE_ID
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL)
  OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.FA <> S.FA OR (D.FA IS NULL AND S.FA IS NOT NULL) OR (D.FA IS NOT NULL AND S.FA IS NULL)
  OR D.FC <> S.FC OR (D.FC IS NULL AND S.FC IS NOT NULL) OR (D.FC IS NOT NULL AND S.FC IS NULL)
  OR D.FI <> S.FI OR (D.FI IS NULL AND S.FI IS NOT NULL) OR (D.FI IS NOT NULL AND S.FI IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
---------------------------
--Modifié VIEW
--V_DIFF_CHEMIN_PEDAGOGIQUE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_CHEMIN_PEDAGOGIQUE" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ELEMENT_PEDAGOGIQUE_ID", "ETAPE_ID", "ORDRE", "U_ELEMENT_PEDAGOGIQUE_ID", "U_ETAPE_ID", "U_ORDRE"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ELEMENT_PEDAGOGIQUE_ID",diff."ETAPE_ID",diff."ORDRE",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_ETAPE_ID",diff."U_ORDRE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND rt.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETAPE_ID ELSE S.ETAPE_ID END ETAPE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ORDRE ELSE S.ORDRE END ORDRE,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.ETAPE_ID <> S.ETAPE_ID OR (D.ETAPE_ID IS NULL AND S.ETAPE_ID IS NOT NULL) OR (D.ETAPE_ID IS NOT NULL AND S.ETAPE_ID IS NULL) THEN 1 ELSE 0 END U_ETAPE_ID,
    CASE WHEN D.ORDRE <> S.ORDRE OR (D.ORDRE IS NULL AND S.ORDRE IS NOT NULL) OR (D.ORDRE IS NOT NULL AND S.ORDRE IS NULL) THEN 1 ELSE 0 END U_ORDRE
FROM
  CHEMIN_PEDAGOGIQUE D
  LEFT JOIN ELEMENT_PEDAGOGIQUE rt ON rt.ID = d.ELEMENT_PEDAGOGIQUE_ID
  FULL JOIN SRC_CHEMIN_PEDAGOGIQUE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.ETAPE_ID <> S.ETAPE_ID OR (D.ETAPE_ID IS NULL AND S.ETAPE_ID IS NOT NULL) OR (D.ETAPE_ID IS NOT NULL AND S.ETAPE_ID IS NULL)
  OR D.ORDRE <> S.ORDRE OR (D.ORDRE IS NULL AND S.ORDRE IS NOT NULL) OR (D.ORDRE IS NOT NULL AND S.ORDRE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
---------------------------
--Modifié VIEW
--V_DIFF_AFFECTATION_RECHERCHE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_AFFECTATION_RECHERCHE" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "INTERVENANT_ID", "STRUCTURE_ID", "U_INTERVENANT_ID", "U_STRUCTURE_ID"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."INTERVENANT_ID",diff."STRUCTURE_ID",diff."U_INTERVENANT_ID",diff."U_STRUCTURE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND rt.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.INTERVENANT_ID ELSE S.INTERVENANT_ID END INTERVENANT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN D.INTERVENANT_ID <> S.INTERVENANT_ID OR (D.INTERVENANT_ID IS NULL AND S.INTERVENANT_ID IS NOT NULL) OR (D.INTERVENANT_ID IS NOT NULL AND S.INTERVENANT_ID IS NULL) THEN 1 ELSE 0 END U_INTERVENANT_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID
FROM
  AFFECTATION_RECHERCHE D
  LEFT JOIN INTERVENANT rt ON rt.ID = d.INTERVENANT_ID
  FULL JOIN SRC_AFFECTATION_RECHERCHE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.INTERVENANT_ID <> S.INTERVENANT_ID OR (D.INTERVENANT_ID IS NULL AND S.INTERVENANT_ID IS NOT NULL) OR (D.INTERVENANT_ID IS NOT NULL AND S.INTERVENANT_ID IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
---------------------------
--Modifié VIEW
--V_DIFF_ADRESSE_INTERVENANT
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_ADRESSE_INTERVENANT" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "CODE_POSTAL", "INTERVENANT_ID", "LOCALITE", "MENTION_COMPLEMENTAIRE", "NOM_VOIE", "NO_VOIE", "PAYS_CODE_INSEE", "PAYS_LIBELLE", "TEL_DOMICILE", "VILLE", "U_CODE_POSTAL", "U_INTERVENANT_ID", "U_LOCALITE", "U_MENTION_COMPLEMENTAIRE", "U_NOM_VOIE", "U_NO_VOIE", "U_PAYS_CODE_INSEE", "U_PAYS_LIBELLE", "U_TEL_DOMICILE", "U_VILLE"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CODE_POSTAL",diff."INTERVENANT_ID",diff."LOCALITE",diff."MENTION_COMPLEMENTAIRE",diff."NOM_VOIE",diff."NO_VOIE",diff."PAYS_CODE_INSEE",diff."PAYS_LIBELLE",diff."TEL_DOMICILE",diff."VILLE",diff."U_CODE_POSTAL",diff."U_INTERVENANT_ID",diff."U_LOCALITE",diff."U_MENTION_COMPLEMENTAIRE",diff."U_NOM_VOIE",diff."U_NO_VOIE",diff."U_PAYS_CODE_INSEE",diff."U_PAYS_LIBELLE",diff."U_TEL_DOMICILE",diff."U_VILLE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND rt.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE_POSTAL ELSE S.CODE_POSTAL END CODE_POSTAL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.INTERVENANT_ID ELSE S.INTERVENANT_ID END INTERVENANT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LOCALITE ELSE S.LOCALITE END LOCALITE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.MENTION_COMPLEMENTAIRE ELSE S.MENTION_COMPLEMENTAIRE END MENTION_COMPLEMENTAIRE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_VOIE ELSE S.NOM_VOIE END NOM_VOIE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NO_VOIE ELSE S.NO_VOIE END NO_VOIE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PAYS_CODE_INSEE ELSE S.PAYS_CODE_INSEE END PAYS_CODE_INSEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PAYS_LIBELLE ELSE S.PAYS_LIBELLE END PAYS_LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TEL_DOMICILE ELSE S.TEL_DOMICILE END TEL_DOMICILE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VILLE ELSE S.VILLE END VILLE,
    CASE WHEN D.CODE_POSTAL <> S.CODE_POSTAL OR (D.CODE_POSTAL IS NULL AND S.CODE_POSTAL IS NOT NULL) OR (D.CODE_POSTAL IS NOT NULL AND S.CODE_POSTAL IS NULL) THEN 1 ELSE 0 END U_CODE_POSTAL,
    CASE WHEN D.INTERVENANT_ID <> S.INTERVENANT_ID OR (D.INTERVENANT_ID IS NULL AND S.INTERVENANT_ID IS NOT NULL) OR (D.INTERVENANT_ID IS NOT NULL AND S.INTERVENANT_ID IS NULL) THEN 1 ELSE 0 END U_INTERVENANT_ID,
    CASE WHEN D.LOCALITE <> S.LOCALITE OR (D.LOCALITE IS NULL AND S.LOCALITE IS NOT NULL) OR (D.LOCALITE IS NOT NULL AND S.LOCALITE IS NULL) THEN 1 ELSE 0 END U_LOCALITE,
    CASE WHEN D.MENTION_COMPLEMENTAIRE <> S.MENTION_COMPLEMENTAIRE OR (D.MENTION_COMPLEMENTAIRE IS NULL AND S.MENTION_COMPLEMENTAIRE IS NOT NULL) OR (D.MENTION_COMPLEMENTAIRE IS NOT NULL AND S.MENTION_COMPLEMENTAIRE IS NULL) THEN 1 ELSE 0 END U_MENTION_COMPLEMENTAIRE,
    CASE WHEN D.NOM_VOIE <> S.NOM_VOIE OR (D.NOM_VOIE IS NULL AND S.NOM_VOIE IS NOT NULL) OR (D.NOM_VOIE IS NOT NULL AND S.NOM_VOIE IS NULL) THEN 1 ELSE 0 END U_NOM_VOIE,
    CASE WHEN D.NO_VOIE <> S.NO_VOIE OR (D.NO_VOIE IS NULL AND S.NO_VOIE IS NOT NULL) OR (D.NO_VOIE IS NOT NULL AND S.NO_VOIE IS NULL) THEN 1 ELSE 0 END U_NO_VOIE,
    CASE WHEN D.PAYS_CODE_INSEE <> S.PAYS_CODE_INSEE OR (D.PAYS_CODE_INSEE IS NULL AND S.PAYS_CODE_INSEE IS NOT NULL) OR (D.PAYS_CODE_INSEE IS NOT NULL AND S.PAYS_CODE_INSEE IS NULL) THEN 1 ELSE 0 END U_PAYS_CODE_INSEE,
    CASE WHEN D.PAYS_LIBELLE <> S.PAYS_LIBELLE OR (D.PAYS_LIBELLE IS NULL AND S.PAYS_LIBELLE IS NOT NULL) OR (D.PAYS_LIBELLE IS NOT NULL AND S.PAYS_LIBELLE IS NULL) THEN 1 ELSE 0 END U_PAYS_LIBELLE,
    CASE WHEN D.TEL_DOMICILE <> S.TEL_DOMICILE OR (D.TEL_DOMICILE IS NULL AND S.TEL_DOMICILE IS NOT NULL) OR (D.TEL_DOMICILE IS NOT NULL AND S.TEL_DOMICILE IS NULL) THEN 1 ELSE 0 END U_TEL_DOMICILE,
    CASE WHEN D.VILLE <> S.VILLE OR (D.VILLE IS NULL AND S.VILLE IS NOT NULL) OR (D.VILLE IS NOT NULL AND S.VILLE IS NULL) THEN 1 ELSE 0 END U_VILLE
FROM
  ADRESSE_INTERVENANT D
  LEFT JOIN INTERVENANT rt ON rt.ID = d.INTERVENANT_ID
  FULL JOIN SRC_ADRESSE_INTERVENANT S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CODE_POSTAL <> S.CODE_POSTAL OR (D.CODE_POSTAL IS NULL AND S.CODE_POSTAL IS NOT NULL) OR (D.CODE_POSTAL IS NOT NULL AND S.CODE_POSTAL IS NULL)
  OR D.INTERVENANT_ID <> S.INTERVENANT_ID OR (D.INTERVENANT_ID IS NULL AND S.INTERVENANT_ID IS NOT NULL) OR (D.INTERVENANT_ID IS NOT NULL AND S.INTERVENANT_ID IS NULL)
  OR D.LOCALITE <> S.LOCALITE OR (D.LOCALITE IS NULL AND S.LOCALITE IS NOT NULL) OR (D.LOCALITE IS NOT NULL AND S.LOCALITE IS NULL)
  OR D.MENTION_COMPLEMENTAIRE <> S.MENTION_COMPLEMENTAIRE OR (D.MENTION_COMPLEMENTAIRE IS NULL AND S.MENTION_COMPLEMENTAIRE IS NOT NULL) OR (D.MENTION_COMPLEMENTAIRE IS NOT NULL AND S.MENTION_COMPLEMENTAIRE IS NULL)
  OR D.NOM_VOIE <> S.NOM_VOIE OR (D.NOM_VOIE IS NULL AND S.NOM_VOIE IS NOT NULL) OR (D.NOM_VOIE IS NOT NULL AND S.NOM_VOIE IS NULL)
  OR D.NO_VOIE <> S.NO_VOIE OR (D.NO_VOIE IS NULL AND S.NO_VOIE IS NOT NULL) OR (D.NO_VOIE IS NOT NULL AND S.NO_VOIE IS NULL)
  OR D.PAYS_CODE_INSEE <> S.PAYS_CODE_INSEE OR (D.PAYS_CODE_INSEE IS NULL AND S.PAYS_CODE_INSEE IS NOT NULL) OR (D.PAYS_CODE_INSEE IS NOT NULL AND S.PAYS_CODE_INSEE IS NULL)
  OR D.PAYS_LIBELLE <> S.PAYS_LIBELLE OR (D.PAYS_LIBELLE IS NULL AND S.PAYS_LIBELLE IS NOT NULL) OR (D.PAYS_LIBELLE IS NOT NULL AND S.PAYS_LIBELLE IS NULL)
  OR D.TEL_DOMICILE <> S.TEL_DOMICILE OR (D.TEL_DOMICILE IS NULL AND S.TEL_DOMICILE IS NOT NULL) OR (D.TEL_DOMICILE IS NOT NULL AND S.TEL_DOMICILE IS NULL)
  OR D.VILLE <> S.VILLE OR (D.VILLE IS NULL AND S.VILLE IS NOT NULL) OR (D.VILLE IS NOT NULL AND S.VILLE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
---------------------------
--Modifié VIEW
--SRC_PERSONNEL
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."SRC_PERSONNEL" 
 ( "ID", "CODE", "SUPANN_EMP_ID", "CIVILITE_ID", "NOM_USUEL", "PRENOM", "NOM_PATRONYMIQUE", "EMAIL", "DATE_NAISSANCE", "STRUCTURE_ID", "SOURCE_ID", "SOURCE_CODE"
  )  AS 
  SELECT
  NULL id,
  p.source_code code, p.source_code supann_emp_id,
  p.civilite_id,
  p.nom_usuel,
  p.prenom,
  p.nom_patronymique,
  p.email,
  p.date_naissance,
  NVL(s.STRUCTURE_NIV2_ID,s.id) structure_id,
  p.source_id,
  p.source_code
FROM
  mv_personnel p
  JOIN structure s ON s.source_code = p.z_structure_id;
---------------------------
--Modifié VIEW
--SRC_INTERVENANT
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."SRC_INTERVENANT" 
 ( "ID", "CODE", "SUPANN_EMP_ID", "CIVILITE_ID", "NOM_USUEL", "PRENOM", "NOM_PATRONYMIQUE", "DATE_NAISSANCE", "PAYS_NAISSANCE_CODE_INSEE", "PAYS_NAISSANCE_LIBELLE", "DEP_NAISSANCE_CODE_INSEE", "DEP_NAISSANCE_LIBELLE", "VILLE_NAISSANCE_CODE_INSEE", "VILLE_NAISSANCE_LIBELLE", "PAYS_NATIONALITE_CODE_INSEE", "PAYS_NATIONALITE_LIBELLE", "TEL_PRO", "TEL_MOBILE", "EMAIL", "STATUT_ID", "STRUCTURE_ID", "SOURCE_ID", "SOURCE_CODE", "NUMERO_INSEE", "NUMERO_INSEE_CLE", "NUMERO_INSEE_PROVISOIRE", "IBAN", "BIC", "GRADE_ID", "DISCIPLINE_ID", "ANNEE_ID", "CRITERE_RECHERCHE"
  )  AS 
  WITH srci as (
SELECT
  i.civilite_id,
  i.nom_usuel, i.prenom, i.nom_patronymique,
  COALESCE(i.date_naissance,TO_DATE('2099-01-01','YYYY-MM-DD')) date_naissance,
  i.pays_naissance_code_insee,   i.pays_naissance_libelle,
  i.dep_naissance_code_insee,    i.dep_naissance_libelle,
  i.ville_naissance_code_insee,  i.ville_naissance_libelle,
  i.pays_nationalite_code_insee, i.pays_nationalite_libelle,
  i.tel_pro, i.tel_mobile, i.email,
  i.statut_id, i.statut_code,
  NVL(s.structure_niv2_id,s.id) structure_id,
  i.source_id, i.source_code,
  i.numero_insee, i.numero_insee_cle, i.numero_insee_provisoire,
  i.iban, i.bic,
  g.id grade_id,
  NVL( d.id, d99.id ) discipline_id,
  i.critere_recherche
FROM
            mv_intervenant  i
       JOIN structure       s ON s.source_code = i.z_structure_id
  LEFT JOIN grade           g ON g.source_code = i.z_grade_id
  LEFT JOIN discipline d99 ON d99.source_code = '99'
  LEFT JOIN discipline d ON
    1 = ose_divers.comprise_entre( d.histo_creation, d.histo_destruction )
    AND 1 = CASE WHEN -- si rien n'ac été défini
    
      COALESCE( i.z_discipline_id_cnu, i.z_discipline_id_sous_cnu, i.z_discipline_id_spe_cnu, i.z_discipline_id_dis2deg ) IS NULL
      AND d.source_code = '00'
    
    THEN 1 WHEN -- si une CNU ou une spécialité a été définie...
      
      COALESCE( i.z_discipline_id_cnu, i.z_discipline_id_sous_cnu, z_discipline_id_spe_cnu ) IS NOT NULL
    
    THEN CASE WHEN -- alors on teste par les sections CNU et spécialités

      (
           ',' || d.CODES_CORRESP_2 || ',' LIKE '%,' || i.z_discipline_id_cnu || NVL(i.z_discipline_id_sous_cnu,'') || ',%'
        OR ',' || d.CODES_CORRESP_2 || ',' LIKE '%,' || i.z_discipline_id_cnu || NVL(i.z_discipline_id_sous_cnu,'00') || ',%'
      )
      AND ',' || NVL(d.CODES_CORRESP_3,'000') || ',' LIKE  '%,' || NVL(CASE WHEN d.CODES_CORRESP_3 IS NOT NULL THEN z_discipline_id_spe_cnu ELSE NULL END,'000') || ',%'
    
    THEN 1 ELSE 0 END ELSE CASE WHEN -- sinon on teste par les disciplines du 2nd degré
    
      i.z_discipline_id_dis2deg IS NOT NULL
      AND ',' || NVL(d.CODES_CORRESP_4,'') || ',' LIKE  '%,' || i.z_discipline_id_dis2deg || ',%'
      
    THEN 1 ELSE 0 END END -- fin du test
WHERE
  i.ordre = i.min_ordre
)
SELECT
  null id,
  i.source_code code, i.source_code supann_emp_id,
  i.civilite_id,
  i.nom_usuel, i.prenom, i.nom_patronymique,
  i.date_naissance,
  i.pays_naissance_code_insee,   i.pays_naissance_libelle,
  i.dep_naissance_code_insee,    i.dep_naissance_libelle,
  i.ville_naissance_code_insee,  i.ville_naissance_libelle,
  i.pays_nationalite_code_insee, i.pays_nationalite_libelle,
  i.tel_pro, i.tel_mobile, i.email,
  CASE WHEN i.statut_code = 'AUTRES' AND d.statut_id IS NOT NULL THEN d.statut_id ELSE i.statut_id END statut_id,
  i. structure_id,
  i.source_id, i.source_code,
  i.numero_insee, i.numero_insee_cle, i.numero_insee_provisoire,
  i.iban, i.bic,
  i.grade_id,
  i.discipline_id,
  unicaen_import.get_current_annee annee_id,
  i.critere_recherche
FROM
  srci i
  LEFT JOIN intervenant           i2 ON i2.source_code = i.source_code AND i2.annee_id = unicaen_import.get_current_annee
  LEFT JOIN dossier               d  ON d.intervenant_id = i2.id

UNION ALL

SELECT
  null id,
  i.source_code code, i.source_code supann_emp_id,
  i.civilite_id,
  i.nom_usuel, i.prenom, i.nom_patronymique,
  i.date_naissance,
  i.pays_naissance_code_insee,   i.pays_naissance_libelle,
  i.dep_naissance_code_insee,    i.dep_naissance_libelle,
  i.ville_naissance_code_insee,  i.ville_naissance_libelle,
  i.pays_nationalite_code_insee, i.pays_nationalite_libelle,
  i.tel_pro, i.tel_mobile, i.email,
  COALESCE(i2.statut_id,i.statut_id) statut_id,
  COALESCE(i2.structure_id,i.structure_id) structure_id,
  i.source_id, i.source_code,
  i.numero_insee, i.numero_insee_cle, i.numero_insee_provisoire,
  i.iban, i.bic,
  i.grade_id,
  i.discipline_id,
  unicaen_import.get_current_annee - 1 annee_id,
  i.critere_recherche
FROM
  srci i
  LEFT JOIN intervenant           i2 ON i2.source_code = i.source_code AND i2.annee_id = unicaen_import.get_current_annee - 1
  LEFT JOIN dossier               d  ON d.intervenant_id = i2.id AND 1 = ose_divers.comprise_entre( d.histo_creation, d.histo_destruction );
---------------------------
--Modifié VIEW
--SRC_ELEMENT_PEDAGOGIQUE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."SRC_ELEMENT_PEDAGOGIQUE" 
 ( "ID", "LIBELLE", "ETAPE_ID", "STRUCTURE_ID", "PERIODE_ID", "TAUX_FI", "TAUX_FC", "TAUX_FA", "TAUX_FOAD", "FC", "FI", "FA", "SOURCE_ID", "SOURCE_CODE", "ANNEE_ID", "DISCIPLINE_ID"
  )  AS 
  SELECT
  null id,
  E.LIBELLE,
  etp.id ETAPE_ID,
  NVL(str.structure_niv2_id,str.id) structure_id,
  per.id periode_id,
  CASE 
    WHEN etr.id IS NOT NULL
    THEN ose_divers.calcul_taux_fi( etr.taux_fi, etr.taux_fc, etr.taux_fa, e.fi, e.fc, e.fa )
    ELSE ose_divers.calcul_taux_fi( e.fi, e.fc, e.fa, e.fi, e.fc, e.fa )
  END taux_fi,
  CASE 
    WHEN etr.id IS NOT NULL
    THEN ose_divers.calcul_taux_fc( etr.taux_fi, etr.taux_fc, etr.taux_fa, e.fi, e.fc, e.fa )
    ELSE ose_divers.calcul_taux_fc( e.fi, e.fc, e.fa, e.fi, e.fc, e.fa )
  END taux_fc,
  CASE 
    WHEN etr.id IS NOT NULL
    THEN ose_divers.calcul_taux_fa( etr.taux_fi, etr.taux_fc, etr.taux_fa, e.fi, e.fc, e.fa )
    ELSE ose_divers.calcul_taux_fa( e.fi, e.fc, e.fa, e.fi, e.fc, e.fa )
  END taux_fa,
  e.taux_foad,
  e.fc,
  e.fi,
  e.fa,
  E.SOURCE_ID,
  E.SOURCE_CODE,
  unicaen_import.get_current_annee annee_id,
  NVL( d.id, d99.id ) discipline_id
FROM
  MV_ELEMENT_PEDAGOGIQUE E
  LEFT JOIN etape etp ON etp.source_code = E.Z_ETAPE_ID
  LEFT JOIN structure str ON str.source_code = E.Z_STRUCTURE_ID
  LEFT JOIN periode per ON per.libelle_court = E.Z_PERIODE_ID
  LEFT JOIN element_pedagogique ep ON ep.source_code = e.source_code AND ep.annee_id = unicaen_import.get_current_annee
  LEFT JOIN element_taux_regimes etr ON
    etr.element_pedagogique_id = ep.id
    AND 1 = OSE_DIVERS.COMPRISE_ENTRE( etr.histo_creation, etr.histo_destruction )
  LEFT JOIN discipline d99 ON d99.source_code = '99'
  LEFT JOIN discipline d ON 
    ',' || d.CODES_CORRESP_1 || ',' LIKE '%,' || NVL(e.z_discipline_id,'00') || ',%'
    AND 1 = ose_divers.comprise_entre( d.histo_creation, d.histo_destruction );
---------------------------
--Modifié VIEW
--SRC_CHEMIN_PEDAGOGIQUE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."SRC_CHEMIN_PEDAGOGIQUE" 
 ( "ID", "ELEMENT_PEDAGOGIQUE_ID", "ETAPE_ID", "ORDRE", "SOURCE_ID", "SOURCE_CODE"
  )  AS 
  SELECT
  null id,
  elp.id element_pedagogique_id,
  etp.id ETAPE_ID,
  c.ordre,
  c.source_id,
  C.SOURCE_CODE || '_' || unicaen_import.get_current_annee SOURCE_CODE
FROM
  MV_CHEMIN_PEDAGOGIQUE C
  LEFT JOIN ELEMENT_PEDAGOGIQUE elp ON elp.source_code = C.Z_ELEMENT_PEDAGOGIQUE_ID AND elp.annee_id = unicaen_import.get_current_annee
  LEFT JOIN ETAPE etp ON etp.source_code = C.Z_ETAPE_ID;
---------------------------
--Modifié VIEW
--SRC_AFFECTATION_RECHERCHE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."SRC_AFFECTATION_RECHERCHE" 
 ( "ID", "INTERVENANT_ID", "STRUCTURE_ID", "SOURCE_ID", "SOURCE_CODE"
  )  AS 
  SELECT
  NULL id,
  i.id intervenant_id,
  NVL(s.structure_niv2_id,s.id) structure_id,
  aff.source_id,
  aff.source_code || '_' || unicaen_import.get_current_annee source_code
FROM
  mv_affectation_recherche aff
  LEFT JOIN intervenant i ON i.source_code = aff.z_intervenant_id AND i.annee_id = unicaen_import.get_current_annee
  LEFT JOIN structure s ON s.source_code = aff.z_structure_id;
---------------------------
--Modifié VIEW
--SRC_ADRESSE_STRUCTURE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."SRC_ADRESSE_STRUCTURE" 
 ( "ID", "STRUCTURE_ID", "PRINCIPALE", "TELEPHONE", "NO_VOIE", "NOM_VOIE", "LOCALITE", "CODE_POSTAL", "VILLE", "PAYS_CODE_INSEE", "PAYS_LIBELLE", "SOURCE_ID", "SOURCE_CODE"
  )  AS 
  SELECT
  NULL id,
  s.id structure_id,
  astr.PRINCIPALE,
  astr.TELEPHONE,
  astr.NO_VOIE,
  astr.NOM_VOIE,
  astr.LOCALITE,
  astr.CODE_POSTAL,
  astr.VILLE,
  astr.PAYS_CODE_INSEE,
  astr.PAYS_LIBELLE,
  astr.SOURCE_ID,
  astr.SOURCE_CODE
FROM
  mv_adresse_structure astr
  JOIN structure s ON s.source_code = astr.z_structure_id;
---------------------------
--Modifié VIEW
--SRC_ADRESSE_INTERVENANT
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."SRC_ADRESSE_INTERVENANT" 
 ( "ID", "INTERVENANT_ID", "TEL_DOMICILE", "MENTION_COMPLEMENTAIRE", "NO_VOIE", "NOM_VOIE", "LOCALITE", "CODE_POSTAL", "VILLE", "PAYS_CODE_INSEE", "PAYS_LIBELLE", "SOURCE_ID", "SOURCE_CODE"
  )  AS 
  SELECT
  NULL id,
  i.ID  INTERVENANT_ID,
  AI.TEL_DOMICILE,
  AI.MENTION_COMPLEMENTAIRE,
  AI.NO_VOIE,
  AI.NOM_VOIE,
  AI.LOCALITE,
  AI.CODE_POSTAL,
  AI.VILLE,
  AI.PAYS_CODE_INSEE,
  AI.PAYS_LIBELLE,
  AI.SOURCE_ID,
  AI.SOURCE_CODE || '_' || unicaen_import.get_current_annee SOURCE_CODE
FROM
  MV_ADRESSE_intervenant ai
  LEFT JOIN INTERVENANT i ON i.SOURCE_CODE = AI.Z_INTERVENANT_ID AND i.annee_id = unicaen_import.get_current_annee;

---------------------------
--Modifié TABLE
--WF_ETAPE
---------------------------
delete from WF_INTERVENANT_ETAPE;
delete from wf_etape;

ALTER TABLE "OSE"."WF_ETAPE" ADD ("DESC_NON_FRANCHIE" VARCHAR2(250 CHAR) NOT NULL ENABLE);
ALTER TABLE "OSE"."WF_ETAPE" ADD ("DESC_SANS_OBJECTIF" VARCHAR2(250 CHAR));
ALTER TABLE "OSE"."WF_ETAPE" ADD ("LIBELLE_AUTRES" VARCHAR2(150 CHAR) NOT NULL ENABLE);
ALTER TABLE "OSE"."WF_ETAPE" ADD ("LIBELLE_INTERVENANT" VARCHAR2(150 CHAR) NOT NULL ENABLE);
ALTER TABLE "OSE"."WF_ETAPE" ADD ("OBLIGATOIRE" NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE);
ALTER TABLE "OSE"."WF_ETAPE" ADD ("ROUTE" VARCHAR2(200 CHAR) NOT NULL ENABLE);
ALTER TABLE "OSE"."WF_ETAPE" DROP CONSTRAINT "WF_ETAPE_AFK";
ALTER TABLE "OSE"."WF_ETAPE" DROP CONSTRAINT "WF_ETAPE_CODE_UN";
ALTER TABLE "OSE"."WF_ETAPE" DROP ("ANNEE_ID");
ALTER TABLE "OSE"."WF_ETAPE" DROP ("FRANCH_FUNC");
ALTER TABLE "OSE"."WF_ETAPE" DROP ("LIBELLE");
ALTER TABLE "OSE"."WF_ETAPE" DROP ("PERTIN_FUNC");
ALTER TABLE "OSE"."WF_ETAPE" DROP ("STEP_CLASS");
ALTER TABLE "OSE"."WF_ETAPE" DROP ("STRUCTURES_IDS_FUNC");
ALTER TABLE "OSE"."WF_ETAPE" DROP ("STRUCTURE_DEPENDANT");
ALTER TABLE "OSE"."WF_ETAPE" DROP ("VISIBLE");
ALTER TABLE "OSE"."WF_ETAPE" ADD CONSTRAINT "WF_ETAPE_CODE_UN" UNIQUE ("CODE") ENABLE;
ALTER TABLE "OSE"."WF_ETAPE" ADD CONSTRAINT "WF_ETAPE_ORDRE_UN" UNIQUE ("ORDRE") ENABLE;

---------------------------
--Nouveau TABLE
--TBL_WORKFLOW
---------------------------
  CREATE TABLE "OSE"."TBL_WORKFLOW" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ETAPE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"STRUCTURE_ID" NUMBER(*,0) DEFAULT null,
	"ATTEIGNABLE" NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE,
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"REALISATION" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"OBJECTIF" FLOAT(126) DEFAULT 1 NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_INTERVENANT_CODE" VARCHAR2(5 CHAR) NOT NULL ENABLE,
	"ETAPE_CODE" VARCHAR2(50 CHAR) NOT NULL ENABLE,
	CONSTRAINT "TBL_WORKFLOW_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TBL_WORKFLOW_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_WORKFLOW_TINTERVENANT_FK" FOREIGN KEY ("TYPE_INTERVENANT_ID")
	 REFERENCES "OSE"."TYPE_INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_WORKFLOW_EFK" FOREIGN KEY ("ETAPE_ID")
	 REFERENCES "OSE"."WF_ETAPE" ("ID") ENABLE,
	CONSTRAINT "TBL_WORKFLOW_IFK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TBL_WORKFLOW_SFK" FOREIGN KEY ("STRUCTURE_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE
   );

---------------------------
--Nouveau TABLE
--WF_DEP_BLOQUANTE
---------------------------
  CREATE TABLE "OSE"."WF_DEP_BLOQUANTE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"WF_ETAPE_DEP_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TBL_WORKFLOW_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TO_DELETE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "WF_DEPS_BLOQUANTES_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "WF_DB_ETAPE_DEP_FK" FOREIGN KEY ("WF_ETAPE_DEP_ID")
	 REFERENCES "OSE"."WF_ETAPE_DEP" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "WF_DB_TBL_WORKFLOW_FK" FOREIGN KEY ("TBL_WORKFLOW_ID")
	 REFERENCES "OSE"."TBL_WORKFLOW" ("ID") ON DELETE CASCADE ENABLE
   );


Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('J''accède aux mises en paiement','Aucune mise en paiement n''a été faite',null,'179','SAISIE_MEP','150','Je visualise les mises en paiement me concernant','paiement/etat-demande-paiement','1');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('J''accède aux demandes de mise en paiement','Aucune demande de mise en paiement n''a été faite','Le nombre d''heures de service réalisées ET validées n''est pas suffisant pour déclencher le paiement d''heures complémentaires.','180','DEMANDE_MEP','140','Je visualise les demandes de mise en paiement me concernant','intervenant/demande-mise-en-paiement','1');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('J''accède aux données personnelles','Les données personnelles n''ont pas été saisies',null,'182','DONNEES_PERSO_SAISIE','10','Je saisis mes données personnelles','intervenant/dossier','1');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('J''accède aux enseignements prévisionnels','Aucun enseignement prévisionnel n''a été saisi',null,'183','SERVICE_SAISIE','20','Je saisis mes enseignements prévisionnels','intervenant/services','1');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('J''accède aux pièces justificatives','Les pièces justificatives n''ont pas été fournies',null,'184','PJ_SAISIE','30','Je fournis les pièces justificatives','piece-jointe/intervenant','1');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('Je visualise la validation des pièces justificatives','Les pièces justificatives n''ont pas été validées',null,'185','PJ_VALIDATION','40','Je visualise la validation des pièces justificatives','piece-jointe/intervenant','1');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('Je visualise la validation des données personnelles','Les données personnelles n''ont pas été validées',null,'186','DONNEES_PERSO_VALIDATION','50','Je visualise la validation de mes données personnelles','intervenant/dossier','1');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('Je visualise la validation des enseignements prévisionnels','Les enseignements prévisionnels n''ont pas été validés',null,'187','SERVICE_VALIDATION','60','Je visualise la validation de mes services prévisionnels','intervenant/validation/service/prevu','1');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('Je visualise la validation du référentiel prévisionnel','Le référentiel prévisionnel n''a pas été validé',null,'188','REFERENTIEL_VALIDATION','70','Je visualise la validation de mon référentiel prévisionnel','intervenant/validation/referentiel/prevu','0');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('Je visualise l''agrément ''Conseil restreint''','L''agrément du Conseil Restreint n''a pas été saisi',null,'189','CONSEIL_RESTREINT','80','Je visualise l''agrément ''Conseil restreint''','intervenant/agrement/conseil-restreint','1');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('Je visualise l''agrément ''Conseil académique''','L''agrément du Conseil académique n''a pas été saisi',null,'190','CONSEIL_ACADEMIQUE','90','Je visualise l''agrément ''Conseil académique''','intervenant/agrement/conseil-academique','1');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('Je visualise les contrat et avenants','Le contrat n''a pas été établi',null,'191','CONTRAT','100','Je visualise mes contrat/avenants','intervenant/contrat','1');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('J''accède aux enseignements réalisés','Aucun enseignement réalisé n''a été saisi',null,'192','SERVICE_SAISIE_REALISE','110','Je saisis mes enseignements réalisés','intervenant/services-realises','1');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('Je visualise la validation des enseignements réalisés','Le service réalisé n''a été intégralement validé',null,'193','SERVICE_VALIDATION_REALISE','120','Je visualise la validation de mes services réalisés','intervenant/validation/service/realise','1');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('Je visualise la validation du référentiel réalisé','Le référentiel réalisé n''a pas été intégralement validé',null,'194','REFERENTIEL_VALIDATION_REALISE','130','Je visualise la validation de mon référentiel réalisé','intervenant/validation/referentiel/realise','0');
Insert into WF_ETAPE (LIBELLE_AUTRES,DESC_NON_FRANCHIE,DESC_SANS_OBJECTIF,ID,CODE,ORDRE,LIBELLE_INTERVENANT,ROUTE,OBLIGATOIRE) values ('Je visualise la clôture de la saisie des services réalisés','La clôture de saisie des services réalisés n''a pas été effectuée',null,'196','CLOTURE_REALISE','115','Je visualise la clôture de la saisie de mes services réalisés','intervenant/services-realises','1');


---------------------------
--Modifié TABLE
--PIECE_JOINTE
---------------------------
ALTER TABLE "OSE"."PIECE_JOINTE" ADD ("INTERVENANT_ID" NUMBER(*,0));
ALTER TABLE "OSE"."PIECE_JOINTE" DROP ("FORCE");
ALTER TABLE "OSE"."PIECE_JOINTE" DROP ("OBLIGATOIRE");
ALTER TABLE "OSE"."PIECE_JOINTE" DROP CONSTRAINT "PJ_DOSSIER_FK";
ALTER TABLE "OSE"."PIECE_JOINTE" ADD CONSTRAINT "PIECE_JOINTE_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID") REFERENCES "OSE"."INTERVENANT"("ID") ON DELETE CASCADE ENABLE;

drop trigger WF_TRG_DOSSIER;
drop trigger WF_TRG_PJ_VALIDATION;
drop trigger WF_TRG_SERVICE;
drop trigger WF_TRG_PJ_VALIDATION_S;
drop trigger WF_TRG_VOLUME_HORAIRE_S;
drop trigger WF_TRG_VH_REF_VALIDATION;
drop trigger WF_TRG_VOLUME_HORAIRE;
drop trigger WF_TRG_VH_REF_VALIDATION_S;
drop trigger WF_TRG_PJ;
drop trigger WF_TRG_PJ_S;
drop trigger WF_TRG_DOSSIER_S;
drop trigger WF_TRG_AGREMENT;
drop trigger WF_TRG_VH_VALIDATION_S;
drop trigger WF_TRG_DOSSIER_VALIDATION_S;
drop trigger WF_TRG_CONTRAT_S;
drop trigger WF_TRG_CONTRAT;
drop trigger WF_TRG_AGREMENT_S;
drop trigger WF_TRG_SERVICE_VALIDATION;
drop trigger WF_TRG_SERVICE_VALIDATION_S;
drop trigger WF_TRG_VH_VALIDATION;
drop trigger WF_TRG_SERVICE_S;
drop trigger WF_TRG_DOSSIER_VALIDATION;
drop trigger WF_TRG_CLOTURE_REALISE_S;
drop trigger WF_TRG_CLOTURE_REALISE;

update piece_jointe set intervenant_id = (SELECT intervenant_id FROM dossier where dossier.id = dossier_id );
ALTER TABLE PIECE_JOINTE MODIFY (INTERVENANT_ID NOT NULL);

select
  TYPE_PIECE_JOINTE_ID, 
  INTERVENANT_ID
from
  piece_jointe
WHERE
  HISTO_DESTRUCTION is null
group by
  TYPE_PIECE_JOINTE_ID, 
  INTERVENANT_ID
having count(*) > 1;

delete from piece_jointe_fichier where piece_jointe_id in (156,563,5812,5813);
delete from piece_jointe where id in (156,563,5812,5813);

ALTER TABLE "OSE"."PIECE_JOINTE" ADD CONSTRAINT "PIECE_JOINTE__UN" UNIQUE ("TYPE_PIECE_JOINTE_ID","INTERVENANT_ID","HISTO_DESTRUCTION") ENABLE;
ALTER TABLE "OSE"."PIECE_JOINTE" DROP ("DOSSIER_ID");




---------------------------
--Modifié TABLE
--NOTIFICATION_INDICATEUR
---------------------------
ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" ADD ("AFFECTATION_ID" NUMBER(*,0) );
ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" ADD ("IN_HOME" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE);
ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" MODIFY ("FREQUENCE" NULL);
update NOTIFICATION_INDICATEUR set in_home = 1;
ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" DROP CONSTRAINT "NOTIF_INDICATEUR_IFK";
ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" DROP CONSTRAINT "NOTIF_INDICATEUR_SFK";
ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" DROP CONSTRAINT "NOTIF_INDICATEUR_UFK";
ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" ADD CONSTRAINT "NI_AFFECTATION_FK" FOREIGN KEY ("AFFECTATION_ID") REFERENCES "OSE"."AFFECTATION"("ID") ON DELETE CASCADE ENABLE;
ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" ADD CONSTRAINT "NOTIF_INDICATEUR_IFK" FOREIGN KEY ("INDICATEUR_ID") REFERENCES "OSE"."INDICATEUR"("ID") ON DELETE CASCADE ENABLE;

update NOTIFICATION_INDICATEUR ni set ni.affectation_id = (
SELECT id FROM affectation a WHERE
  a.structure_id = ni.structure_id
  AND a.personnel_id = ni.personnel_id
  AND rownum = 1
);
delete from NOTIFICATION_INDICATEUR where affectation_id is null;
ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" ADD CONSTRAINT "NOTIFICATION_INDICATEUR__UN" UNIQUE ("INDICATEUR_ID","AFFECTATION_ID") ENABLE;
ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" DROP ("PERSONNEL_ID");
ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" DROP ("STRUCTURE_ID");


---------------------------
--Modifié TABLE
--INTERVENANT
---------------------------
ALTER TABLE "OSE"."INTERVENANT" ADD ("CODE" VARCHAR2(60 CHAR));
ALTER TABLE "OSE"."INTERVENANT" ADD ("SUPANN_EMP_ID" VARCHAR2(60 CHAR));
ALTER TABLE "OSE"."INTERVENANT" DROP CONSTRAINT "INTERVENANT_DOSSIER_FK";
ALTER TABLE "OSE"."INTERVENANT" DROP CONSTRAINT "INTERVENANT_DOSSIER_UN";

ALTER TABLE "OSE"."INTERVENANT" DROP ("DOSSIER_ID");
drop trigger pj_intervenant;
drop trigger pj_intervenant_s;
drop trigger f_intervenant;
drop trigger f_intervenant_s;
update intervenant set code=source_code, SUPANN_EMP_ID=source_code;
ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_CODE_UN" UNIQUE ("CODE","ANNEE_ID") ENABLE;
ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_SUPANN_UN" UNIQUE ("SUPANN_EMP_ID","ANNEE_ID") ENABLE;


---------------------------
--Modifié TABLE
--INDICATEUR
---------------------------
ALTER TABLE "OSE"."INDICATEUR" ADD ("MESSAGE" VARCHAR2(800 CHAR));
ALTER TABLE "OSE"."INDICATEUR" ADD ("ROUTE" VARCHAR2(250 CHAR));
ALTER TABLE "OSE"."INDICATEUR" ADD ("TEM_DISTINCT" NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE);
ALTER TABLE "OSE"."INDICATEUR" ADD ("TEM_NOT_STRUCTURE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE);
ALTER TABLE "OSE"."INDICATEUR" DROP ("CODE");
ALTER TABLE "OSE"."INDICATEUR" DROP CONSTRAINT "INDICATEUR_CODE_UN";



UPDATE indicateur SET

  libelle_singulier = q'[%s permanent affecté dans une autre structure a des enseignements <i>prévisionnels validés</i> dans ma structure]',
  libelle_pluriel   = q'[%s permanents affectés dans une autre structure ont des enseignements <i>prévisionnels validés</i> dans ma structure]',
  route             = q'[intervenant/validation/service/prevu]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 110;


UPDATE indicateur SET

  libelle_singulier = q'[%s permanent affecté dans ma structure a des enseignements <i>prévisionnels validés</i> dans une autre structure]',
  libelle_pluriel   = q'[%s permanents affectés dans ma structure ont des enseignements <i>prévisionnels validés</i> dans une autre structure]',
  route             = q'[intervenant/validation/service/prevu]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 120;


UPDATE indicateur SET

  libelle_singulier = q'[%s intervenant 'BIATSS' affecté dans ma structure a des enseignements <i>prévisionnels validés</i> dans une autre structure]',
  libelle_pluriel   = q'[%s intervenants 'BIATSS' affectés dans ma structure ont des enseignements <i>prévisionnels validés</i> dans une autre structure]',
  route             = q'[intervenant/validation/service/prevu]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 130;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire est en attente d'agrément du conseil restreint]',
  libelle_pluriel   = q'[%s vacataires sont en attente d'agrément du conseil restreint]',
  route             = q'[intervenant/agrement/conseil-restreint]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 210;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire est en attente d'agrément du conseil académique]',
  libelle_pluriel   = q'[%s vacataires sont en attente d'agrément du conseil académique]',
  route             = q'[intervenant/agrement/conseil-academique]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 220;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire a reçu l'agrément du Conseil Académique et n'a pas encore de contrat/avenant]',
  libelle_pluriel   = q'[%s vacataires ont reçu l'agrément du Conseil Académique et n'ont pas encore de contrat/avenant]',
  route             = q'[intervenant/contrat]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 310;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire est en attente de son contrat initial]',
  libelle_pluriel   = q'[%s vacataires sont en attente de leur contrat initial]',
  route             = q'[intervenant/contrat]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 320;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire est en attente de son avenant]',
  libelle_pluriel   = q'[%s vacataires sont en attente de leur avenant]',
  route             = q'[intervenant/contrat]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 330;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire a saisi des heures d'enseignements prévisionnels supplémentaires depuis l'édition de son contrat ou avenant]',
  libelle_pluriel   = q'[%s vacataires ont saisi des heures d'enseignements <i>prévisionnels</i> supplémentaires depuis l'édition de leur contrat ou avenant]',
  route             = q'[intervenant/validation/service/prevu]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 340;


UPDATE indicateur SET

  libelle_singulier = q'[%s contrat/avenant de vacataire a été déposé]',
  libelle_pluriel   = q'[%s contrats/avenants de vacataire ont été déposés]',
  route             = q'[intervenant/contrat]',
  tem_distinct      = 0,
  tem_not_structure = 0

WHERE numero = 350;


UPDATE indicateur SET

  libelle_singulier = q'[%s contrat de vacataire est en attente de retour]',
  libelle_pluriel   = q'[%s contrats de vacataires sont en attente de retour]',
  route             = q'[intervenant/contrat]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 360;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire est en attente de validation de ses données personnelles]',
  libelle_pluriel   = q'[%s vacataires sont en attente de validation de leurs données personnelles]',
  route             = q'[intervenant/dossier]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 410;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire a saisi des données personnelles qui diffèrent de celles importées]',
  libelle_pluriel   = q'[%s vacataires ont saisi des données personnelles qui diffèrent de celles importées]',
  route             = q'[intervenant/dossier/differences]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 420;


UPDATE indicateur SET

  libelle_singulier = q'[%s intervenant a saisi des enseignements dont l'étape, l'élément pédagogique ou la période ont disparu]',
  libelle_pluriel   = q'[%s intervenants ont saisi des enseignements dont l'étape, l'élément pédagogique ou la période ont disparu]',
  route             = q'[intervenant/services]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 510;


UPDATE indicateur SET

  libelle_singulier = q'[%s intervenant a un total HC hors rémunération FC D714-60 <i>prévisionnel saisi</i> qui dépasse le plafond correspondant à son statut]',
  libelle_pluriel   = q'[%s intervenants ont un total HC hors rémunération FC D714-60 <i>prévisionnel saisi</i> qui dépasse le plafond correspondant à leur statut]',
  route             = q'[intervenant/services]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 520;


UPDATE indicateur SET

  libelle_singulier = q'[%s intervenant a un total HC hors rémunération FC D714-60 <i>réalisé saisi</i> qui dépasse le plafond correspondant à son statut]',
  libelle_pluriel   = q'[%s intervenants ont un total HC hors rémunération FC D714-60 <i>réalisé saisi</i> qui dépasse le plafond correspondant à leur statut]',
  route             = q'[intervenant/services-realises]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 530;


UPDATE indicateur SET

  libelle_singulier = q'[%s intervenant a un total HC <i>prévisionnel saisi</i> qui dépasse le plafond de la rémunération FC D714-60]',
  libelle_pluriel   = q'[%s intervenants ont un total HC <i>prévisionnel saisi</i> qui dépasse le plafond de la rémunération FC D714-60]',
  route             = q'[intervenant/services]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 540;


UPDATE indicateur SET

  libelle_singulier = q'[%s intervenant a un total HC <i>réalisé saisi</i> qui dépasse le plafond de la rémunération FC D714-60]',
  libelle_pluriel   = q'[%s intervenants ont un total HC <i>réalisé saisi</i> qui dépasse le plafond de la rémunération FC D714-60]',
  route             = q'[intervenant/services]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 550;


UPDATE indicateur SET

  libelle_singulier = q'[%s permanent est en attente de validation de ses enseignements <i>prévisionnels</i>]',
  libelle_pluriel   = q'[%s permanents sont en attente de validation de leurs enseignements <i>prévisionnels</i>]',
  route             = q'[intervenant/validation/service/prevu]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 610;


UPDATE indicateur SET

  libelle_singulier = q'[%s permanent est en attente de validation de son référentiel <i>prévisionnel</i>]',
  libelle_pluriel   = q'[%s permanents sont en attente de validation de leur référentiel <i>prévisionnel</i>]',
  route             = q'[intervenant/validation/referentiel/prevu]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 620;


UPDATE indicateur SET

  libelle_singulier = q'[%s permanent n'a pas clôturé la saisie de ses services <i>réalisés</i>]',
  libelle_pluriel   = q'[%s permanents n'ont pas clôturé la saisie de leurs services <i>réalisés</i>]',
  route             = q'[intervenant/services-realises]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 630;


UPDATE indicateur SET

  libelle_singulier = q'[%s permanent a clôturé la saisie de ses services réalisés et est en attente de validation de ses enseignements <i>réalisés</i>]',
  libelle_pluriel   = q'[%s permanents ont clôturé la saisie de leurs services réalisés et sont en attente de validation de leurs enseignements <i>réalisés</i>]',
  route             = q'[intervenant/validation/service/realise]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 640;


UPDATE indicateur SET

  libelle_singulier = q'[%s permanent a clôturé la saisie de ses services réalisés et est en attente de validation de ses enseignements <i>réalisés</i> par d'autres composantes]',
  libelle_pluriel   = q'[%s permanents ont clôturé la saisie de leurs services réalisés et sont en attente de validation de leurs enseignements <i>réalisés</i> par d'autres composantes]',
  route             = q'[intervenant/validation/service/realise]',
  tem_distinct      = 1,
  tem_not_structure = 1

WHERE numero = 650;


UPDATE indicateur SET

  libelle_singulier = q'[%s permanent a clôturé la saisie de ses services réalisés et est en attente de validation de son référentiel <i>réalisé</i>]',
  libelle_pluriel   = q'[%s permanents ont clôturé la saisie de leurs services réalisés et sont en attente de validation de leur référentiel <i>réalisé</i>]',
  route             = q'[intervenant/validation/referentiel/realise]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 660;


UPDATE indicateur SET

  libelle_singulier = q'[%s permanent a clôturé la saisie de ses services réalisés et est en attente de validation de son référentiel <i>réalisé</i> par d'autres composantes]',
  libelle_pluriel   = q'[%s permanents ont clôturé la saisie de leurs services réalisés et sont en attente de validation de leur référentiel <i>réalisé</i> par d'autres composantes]',
  route             = q'[intervenant/validation/referentiel/realise]',
  tem_distinct      = 1,
  tem_not_structure = 1

WHERE numero = 670;


UPDATE indicateur SET

  libelle_singulier = q'[%s intervenant a un total Référentiel <i>prévisionnel</i> qui dépasse le plafond correspondant à son statut]',
  libelle_pluriel   = q'[%s intervenants ont un total Référentiel <i>prévisionnel</i> qui dépasse les plafonds correspondant à leurs statuts]',
  route             = q'[intervenant/services]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 680;


UPDATE indicateur SET

  libelle_singulier = q'[%s intervenant a un total Référentiel <i>réalisé</i> qui dépasse le plafond correspondant à son statut]',
  libelle_pluriel   = q'[%s intervenants ont un total Référentiel <i>réalisé</i> qui dépasse le plafond correspondant à leur statut]',
  route             = q'[intervenant/services-realises]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 690;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire est en attente de validation de ses enseignements <i>prévisionnels</i>]',
  libelle_pluriel   = q'[%s vacataires sont en attente de validation de leurs enseignements <i>prévisionnels</i>]',
  route             = q'[intervenant/validation/service/prevu]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 710;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire est en attente de validation de ses enseignements <i>réalisés</i>]',
  libelle_pluriel   = q'[%s vacataires sont en attente de validation de leurs enseignements <i>réalisés</i>]',
  route             = q'[intervenant/validation/service/realise]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 720;


UPDATE indicateur SET

  libelle_singulier = q'[%s permanent peut faire l'objet d'une demande de mise en paiement]',
  libelle_pluriel   = q'[%s permanents peuvent faire l'objet d'une demande de mise en paiement]',
  route             = q'[intervenant/demande-mise-en-paiement]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 810;


UPDATE indicateur SET

  libelle_singulier = q'[%s permanent peut faire l'objet d'une mise en paiement]',
  libelle_pluriel   = q'[%s permanents peuvent faire l'objet d'une mise en paiement]',
  route             = q'[paiement/etat-demande-paiement]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 820;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire peut faire l'objet d'une demande de mise en paiement]',
  libelle_pluriel   = q'[%s vacataires peuvent faire l'objet d'une demande de mise en paiement]',
  route             = q'[intervenant/demande-mise-en-paiement]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 910;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire peut faire l'objet d'une mise en paiement]',
  libelle_pluriel   = q'[%s vacataires peuvent faire l'objet d'une mise en paiement]',
  route             = q'[paiement/etat-demande-paiement]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 920;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire n'a pas fourni toutes les pièces justificatives obligatoires]',
  libelle_pluriel   = q'[%s vacataires n'ont pas fourni toutes les pièces justificatives obligatoires]',
  route             = q'[piece-jointe/intervenant]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 1010;


UPDATE indicateur SET

  libelle_singulier = q'[%s vacataire est en attente de validation de ses pièces justificatives obligatoires]',
  libelle_pluriel   = q'[%s vacataires sont en attente de validation de leurs pièces justificatives obligatoires]',
  route             = q'[piece-jointe/intervenant]',
  tem_distinct      = 1,
  tem_not_structure = 0

WHERE numero = 1020;

delete from indicateur where numero = 430;

Insert into INDICATEUR (NUMERO,LIBELLE_SINGULIER,ROUTE,ORDRE,ID,TYPE,ENABLED,LIBELLE_PLURIEL,TEM_DISTINCT,TEM_NOT_STRUCTURE,MESSAGE) values ('540','%s intervenant a un total HC <i>prévisionnel saisi</i> qui dépasse le plafond de la rémunération FC D714-60','intervenant/services','540','262','Enseignements et référentiel','1','%s intervenants ont un total HC <i>prévisionnel saisi</i> qui dépasse le plafond de la rémunération FC D714-60','1','0',null);
Insert into INDICATEUR (NUMERO,LIBELLE_SINGULIER,ROUTE,ORDRE,ID,TYPE,ENABLED,LIBELLE_PLURIEL,TEM_DISTINCT,TEM_NOT_STRUCTURE,MESSAGE) values ('550','%s intervenant a un total HC <i>réalisé saisi</i> qui dépasse le plafond de la rémunération FC D714-60','intervenant/services','550','261','Enseignements et référentiel','1','%s intervenants ont un total HC <i>réalisé saisi</i> qui dépasse le plafond de la rémunération FC D714-60','1','0',null);

ALTER TABLE INDICATEUR MODIFY (ROUTE NOT NULL);

---------------------------
--Modifié TABLE
--FORMULE_RESULTAT
---------------------------

ALTER TABLE "OSE"."FORMULE_RESULTAT" ADD ("TYPE_INTERVENANT_CODE" VARCHAR2(5 CHAR));


---------------------------
--Modifié TABLE
--AFFECTATION
---------------------------
ALTER TABLE "OSE"."AFFECTATION" ADD CONSTRAINT "AFFECTATION__UN" UNIQUE ("PERSONNEL_ID","ROLE_ID","STRUCTURE_ID","HISTO_DESTRUCTION") ENABLE;

---------------------------
--Nouveau INDEX
--MV_INTERVENANT_RECHERCHE_PK
---------------------------
  CREATE UNIQUE INDEX "OSE"."MV_INTERVENANT_RECHERCHE_PK" ON "OSE"."MV_INTERVENANT_RECHERCHE" ("SOURCE_CODE","ANNEE_ID");
---------------------------
--Nouveau INDEX
--TBL_SERVICE_TYPE_INT_IDX
---------------------------
  CREATE INDEX "OSE"."TBL_SERVICE_TYPE_INT_IDX" ON "OSE"."TBL_SERVICE" ("TYPE_INTERVENANT_CODE");
---------------------------
--Modifié INDEX
--PJ_DOSSIER_FK_IDX
---------------------------
  CREATE INDEX "OSE"."PJ_DOSSIER_FK_IDX" ON "OSE"."PIECE_JOINTE" ("INTERVENANT_ID");
---------------------------
--Nouveau INDEX
--TBL_WORKFLOW_ETAPE_IDX
---------------------------
  CREATE INDEX "OSE"."TBL_WORKFLOW_ETAPE_IDX" ON "OSE"."TBL_WORKFLOW" ("ETAPE_CODE");
---------------------------
--Nouveau INDEX
--MV_INTERVENANT_PK
---------------------------
  CREATE UNIQUE INDEX "OSE"."MV_INTERVENANT_PK" ON "OSE"."MV_INTERVENANT" ("SOURCE_CODE","ORDRE");
---------------------------
--Nouveau INDEX
--TBL_WORKFLOW_TYPE_INT_IDX
---------------------------
  CREATE INDEX "OSE"."TBL_WORKFLOW_TYPE_INT_IDX" ON "OSE"."TBL_WORKFLOW" ("TYPE_INTERVENANT_CODE");

---------------------------
--Nouveau INDEX
--NOTIF_INDICATEUR_AFK_IDX
---------------------------
  CREATE INDEX "OSE"."NOTIF_INDICATEUR_AFK_IDX" ON "OSE"."NOTIFICATION_INDICATEUR" ("AFFECTATION_ID");















































---------------------------
--Nouveau TRIGGER
--WF_ETAPE_DEP_CK
---------------------------
/

CREATE OR REPLACE TRIGGER "OSE"."WF_ETAPE_DEP_CK"
  BEFORE INSERT OR UPDATE ON "OSE"."WF_ETAPE_DEP"
  REFERENCING FOR EACH ROW
BEGIN

  OSE_WORKFLOW.DEP_CHECK( :new.etape_suiv_id, :new.etape_prec_id );

END;

/
---------------------------
--Modifié TRIGGER
--VOLUME_HORAIRE_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."VOLUME_HORAIRE_CK"
  BEFORE INSERT OR UPDATE ON "OSE"."VOLUME_HORAIRE"
  REFERENCING FOR EACH ROW
  DECLARE
    has_validation NUMERIC;
    modified       BOOLEAN;
    intervenant_id NUMERIC;
  BEGIN
    IF :OLD.motif_non_paiement_id IS NULL AND :NEW.motif_non_paiement_id IS NOT NULL THEN
      SELECT s.intervenant_id INTO intervenant_id FROM service s WHERE s.id = :NEW.service_id;
      IF 0 = ose_divers.intervenant_has_privilege( intervenant_id, 'saisie_motif_non_paiement') THEN
        raise_application_error(-20101, 'Il est impossible d''associer un motif de non paiement à cet intervenant.');
      END IF;
    END IF;
    
    IF :NEW.motif_non_paiement_id IS NOT NULL AND :NEW.contrat_id IS NOT NULL THEN
      raise_application_error(-20101, 'Les heures ayant un motif de non paiement ne peuvent faire l''objet d''une contractualisation');
    END IF;

    modified := 
      NVL(:NEW.id,0) <> NVL(:OLD.id,0)
      OR NVL(:NEW.type_volume_horaire_id,0) <> NVL(:OLD.type_volume_horaire_id,0)
      OR NVL(:NEW.service_id,0) <> NVL(:OLD.service_id,0)
      OR NVL(:NEW.periode_id,0) <> NVL(:OLD.periode_id,0)
      OR NVL(:NEW.type_intervention_id,0) <> NVL(:OLD.type_intervention_id,0)
      OR NVL(:NEW.heures,0) <> NVL(:OLD.heures,0)
      OR NVL(:NEW.motif_non_paiement_id,0) <> NVL(:OLD.motif_non_paiement_id,0)
      OR NVL(:NEW.histo_creation,SYSDATE) <> NVL(:OLD.histo_creation,SYSDATE)
      OR NVL(:NEW.histo_createur_id,0) <> NVL(:OLD.histo_createur_id,0)
      OR NVL(:NEW.histo_destruction,SYSDATE) <> NVL(:OLD.histo_destruction,SYSDATE)
      OR NVL(:NEW.histo_destructeur_id,0) <> NVL(:OLD.histo_destructeur_id,0);
    
    SELECT
      COUNT(*)
    INTO
      has_validation
    FROM
      VALIDATION_VOL_HORAIRE vvh
      JOIN validation v ON v.id = VVH.VALIDATION_ID
    WHERE
      V.HISTO_DESTRUCTION IS NULL
      AND vvh.VOLUME_HORAIRE_ID  = :NEW.ID;
      
    IF modified AND 0 <> has_validation THEN
      raise_application_error(-20101, 'Il est impossible de modifier des heures déjà validées.');
    END IF;
  END;
/
---------------------------
--Modifié TRIGGER
--VALIDATION_VOL_HORAIRE_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."VALIDATION_VOL_HORAIRE_CK"
  BEFORE INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION_VOL_HORAIRE"
  REFERENCING FOR EACH ROW
  DECLARE 
  contrat_blinde NUMERIC; 
  donnee_historisee NUMERIC;  
  pragma autonomous_transaction;
BEGIN

  if updating or deleting then  
  
    SELECT count(*) INTO contrat_blinde 
    FROM volume_horaire vh
    JOIN contrat c ON c.id = vh.contrat_id AND 1 = ose_divers.comprise_entre( c.histo_creation, c.histo_destruction )
    WHERE vh.id = :OLD.volume_horaire_id;
      
    -- Si des volumes horaires ont déjà fait l'objet de contrats alors pas de dévalidation possible des heures
    IF contrat_blinde = 1 THEN
      raise_application_error(-20101, 'La dévalidation est impossible car un contrat a déjà été édité sur la base de ces heures.');
    END IF;
    
  else
  
    -- si on en trouve un service, EP, étape ou VH historisé, problème
    select count(*) into donnee_historisee
    from service s
    join element_pedagogique ep on s.element_pedagogique_id = ep.id
    --join etape e on ep.etape_id = e.id
    join volume_horaire vh on vh.service_id = s.id
    where
      vh.id = :NEW.volume_horaire_id 
      AND (
        s.histo_destructeur_id is not null
        or ep.histo_destructeur_id is not null
        --or e.histo_destructeur_id is not null
        or (vh.histo_destructeur_id is not null)
      )
      AND vh.heures > 0;
    
    IF donnee_historisee > 0 THEN
      raise_application_error(-20101, :NEW.volume_horaire_id || ' La validation est impossible car elle porte sur des données historisées (supprimées).');
    END IF;
    
  end if;
  
END;
/
---------------------------
--Modifié TRIGGER
--VALIDATION_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."VALIDATION_CK"
  BEFORE DELETE OR UPDATE OF HISTO_DESTRUCTION, HISTO_DESTRUCTEUR_ID ON "OSE"."VALIDATION"
  REFERENCING FOR EACH ROW
  DECLARE
  v validation%rowtype;
  err varchar2(500) default null;
  pragma autonomous_transaction;
BEGIN

  IF deleting THEN
    v.id                  := :OLD.id;
    v.type_validation_id  := :OLD.type_validation_id;
    v.intervenant_id      := :OLD.intervenant_id;
    v.structure_id        := :OLD.structure_id;
    

  ELSIF :OLD.histo_destruction IS NULL AND :NEW.histo_destruction IS NOT NULL THEN

    v.id                  := :NEW.id;
    v.type_validation_id  := :NEW.type_validation_id;
    v.intervenant_id      := :NEW.intervenant_id;
    v.structure_id        := :NEW.structure_id;

  END IF;
  
  err := ose_validation.can_devalider( v );
  
  IF err is not null THEN
    raise_application_error(-20101, err);
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_VOLUME_HORAIRE_REF_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_VOLUME_HORAIRE_REF_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VOLUME_HORAIRE_REF"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_VOLUME_HORAIRE_REF
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_VOLUME_HORAIRE_REF"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_VOLUME_HORAIRE_ID, SERVICE_REFERENTIEL_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VOLUME_HORAIRE_REF"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service_referentiel s
    WHERE
      s.id = :NEW.service_referentiel_id
      OR s.id = :OLD.service_referentiel_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_VAL_VOL_HORAIRE_REF_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_VAL_VOL_HORAIRE_REF_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION_VOL_HORAIRE_REF"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_VAL_VOL_HORAIRE_REF
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_VAL_VOL_HORAIRE_REF"
  AFTER INSERT OR DELETE OR UPDATE OF VALIDATION_ID, VOLUME_HORAIRE_REF_ID ON "OSE"."VALIDATION_VOL_HORAIRE_REF"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service_referentiel s
      JOIN volume_horaire_ref vh ON vh.service_referentiel_id = s.id
    WHERE
      vh.id = :NEW.volume_horaire_ref_id
      OR vh.id = :OLD.volume_horaire_ref_id    

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_VALIDATION_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_VALIDATION_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_VALIDATION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_VALIDATION"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VALIDATION"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_STRUCTURE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_STRUCTURE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."STRUCTURE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_STRUCTURE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_STRUCTURE"
  AFTER UPDATE OF NIVEAU, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."STRUCTURE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      tve.intervenant_id
    FROM
      tbl_validation_enseignement tve
    WHERE
         tve.structure_id = :NEW.id
      OR tve.structure_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_STATUT_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_STATUT_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."STATUT_INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_STATUT_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_STATUT_INTERVENANT"
  AFTER UPDATE OF TYPE_INTERVENANT_ID ON "OSE"."STATUT_INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_SERVICE_REFERENTIEL_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_SERVICE_REFERENTIEL_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE_REFERENTIEL"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_SERVICE_REFERENTIEL
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_SERVICE_REFERENTIEL"
  AFTER INSERT OR DELETE OR UPDATE OF INTERVENANT_ID, STRUCTURE_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."SERVICE_REFERENTIEL"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, :NEW.intervenant_id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_REGLE_STRUCTURE_VAL_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_REGLE_STRUCTURE_VAL_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."REGLE_STRUCTURE_VALIDATION"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_REGLE_STRUCTURE_VAL
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_REGLE_STRUCTURE_VAL"
  AFTER UPDATE OF TYPE_VOLUME_HORAIRE_ID, TYPE_INTERVENANT_ID, PRIORITE ON "OSE"."REGLE_STRUCTURE_VALIDATION"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
      JOIN statut_intervenant si ON si.id = i.id
    WHERE
         si.type_intervenant_id = :NEW.type_intervenant_id
      OR si.type_intervenant_id = :OLD.type_intervenant_id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire vh ON vh.service_id = s.id
    WHERE
         vh.type_volume_horaire_id = :NEW.type_volume_horaire_id
      OR vh.type_volume_horaire_id = :OLD.type_volume_horaire_id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAR_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF STATUT_ID, STRUCTURE_ID, HISTO_CREATION, HISTO_DESTRUCTION, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, :OLD.id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_VOLUME_HORAIRE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_VOLUME_HORAIRE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VOLUME_HORAIRE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_VOLUME_HORAIRE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_VOLUME_HORAIRE"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_VOLUME_HORAIRE_ID, SERVICE_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VOLUME_HORAIRE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      s.id = :NEW.service_id
      OR s.id = :OLD.service_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_VALIDATION_VOL_HORAIRE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_VALIDATION_VOL_HORAIRE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION_VOL_HORAIRE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_VALIDATION_VOL_HORAIRE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_VALIDATION_VOL_HORAIRE"
  AFTER INSERT OR DELETE OR UPDATE OF VALIDATION_ID, VOLUME_HORAIRE_ID ON "OSE"."VALIDATION_VOL_HORAIRE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire vh ON vh.service_id = s.id
    WHERE
      vh.id = :NEW.volume_horaire_id
      OR vh.id = :OLD.volume_horaire_id    

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_VALIDATION_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_VALIDATION_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_VALIDATION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_VALIDATION"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VALIDATION"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_STRUCTURE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_STRUCTURE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."STRUCTURE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_STRUCTURE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_STRUCTURE"
  AFTER UPDATE OF NIVEAU, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."STRUCTURE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      tve.intervenant_id
    FROM
      tbl_validation_enseignement tve
    WHERE
         tve.structure_id = :NEW.id
      OR tve.structure_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_STATUT_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_STATUT_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."STATUT_INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_STATUT_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_STATUT_INTERVENANT"
  AFTER UPDATE OF TYPE_INTERVENANT_ID ON "OSE"."STATUT_INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_SERVICE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_SERVICE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_SERVICE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_SERVICE"
  AFTER INSERT OR DELETE OR UPDATE OF INTERVENANT_ID, ELEMENT_PEDAGOGIQUE_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, :NEW.intervenant_id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_REGLE_STRUCTURE_VAL_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_REGLE_STRUCTURE_VAL_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."REGLE_STRUCTURE_VALIDATION"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_REGLE_STRUCTURE_VAL
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_REGLE_STRUCTURE_VAL"
  AFTER UPDATE OF TYPE_VOLUME_HORAIRE_ID, TYPE_INTERVENANT_ID, PRIORITE ON "OSE"."REGLE_STRUCTURE_VALIDATION"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
      JOIN statut_intervenant si ON si.id = i.id
    WHERE
         si.type_intervenant_id = :NEW.type_intervenant_id
      OR si.type_intervenant_id = :OLD.type_intervenant_id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire vh ON vh.service_id = s.id
    WHERE
         vh.type_volume_horaire_id = :NEW.type_volume_horaire_id
      OR vh.type_volume_horaire_id = :OLD.type_volume_horaire_id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF STATUT_ID, STRUCTURE_ID, HISTO_CREATION, HISTO_DESTRUCTION, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, :OLD.id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_ELEMENT_PEDAGOGIQUE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_ELEMENT_PEDAGOGIQUE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."ELEMENT_PEDAGOGIQUE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_VAE_ELEMENT_PEDAGOGIQUE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_ELEMENT_PEDAGOGIQUE"
  AFTER INSERT OR DELETE OR UPDATE OF STRUCTURE_ID ON "OSE"."ELEMENT_PEDAGOGIQUE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
         s.element_pedagogique_id = :NEW.id
      OR s.element_pedagogique_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_VOLUME_HORAIRE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_VOLUME_HORAIRE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VOLUME_HORAIRE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_VOLUME_HORAIRE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_VOLUME_HORAIRE"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_VOLUME_HORAIRE_ID, SERVICE_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VOLUME_HORAIRE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      s.id = :NEW.service_id
      OR s.id = :OLD.service_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_VALIDATION_VOL_HORAIRE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_VALIDATION_VOL_HORAIRE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION_VOL_HORAIRE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_VALIDATION_VOL_HORAIRE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_VALIDATION_VOL_HORAIRE"
  AFTER INSERT OR DELETE OR UPDATE OF VALIDATION_ID, VOLUME_HORAIRE_ID ON "OSE"."VALIDATION_VOL_HORAIRE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire vh ON vh.service_id = s.id
    WHERE
      vh.id = :NEW.volume_horaire_id
      OR vh.id = :OLD.volume_horaire_id    

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_VALIDATION_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_VALIDATION_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_VALIDATION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_VALIDATION"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VALIDATION"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_STATUT_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_STATUT_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."STATUT_INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_STATUT_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_STATUT_INTERVENANT"
  AFTER UPDATE OF PEUT_SAISIR_SERVICE ON "OSE"."STATUT_INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_SERVICE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_SERVICE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_SERVICE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_SERVICE"
  AFTER INSERT OR DELETE OR UPDATE OF INTERVENANT_ID, ELEMENT_PEDAGOGIQUE_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF STATUT_ID, STRUCTURE_ID, HISTO_CREATION, HISTO_DESTRUCTION, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, :OLD.id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_ELEMENT_PEDAGOGIQUE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_ELEMENT_PEDAGOGIQUE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."ELEMENT_PEDAGOGIQUE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRV_ELEMENT_PEDAGOGIQUE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_ELEMENT_PEDAGOGIQUE"
  AFTER INSERT OR DELETE OR UPDATE OF STRUCTURE_ID ON "OSE"."ELEMENT_PEDAGOGIQUE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
         s.element_pedagogique_id = :NEW.id
      OR s.element_pedagogique_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRS_VOLUME_HORAIRE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_VOLUME_HORAIRE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VOLUME_HORAIRE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRS_VOLUME_HORAIRE_REF_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_VOLUME_HORAIRE_REF_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VOLUME_HORAIRE_REF"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRS_VOLUME_HORAIRE_REF
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_VOLUME_HORAIRE_REF"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_VOLUME_HORAIRE_ID, SERVICE_REFERENTIEL_ID, HEURES, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VOLUME_HORAIRE_REF"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service_referentiel s
    WHERE
      s.id = :NEW.service_referentiel_id
      OR s.id = :OLD.service_referentiel_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRS_VOLUME_HORAIRE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_VOLUME_HORAIRE"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_VOLUME_HORAIRE_ID, SERVICE_ID, HEURES, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VOLUME_HORAIRE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      s.id = :NEW.service_id
      OR s.id = :OLD.service_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRS_STATUT_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_STATUT_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."STATUT_INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRS_STATUT_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_STATUT_INTERVENANT"
  AFTER UPDATE OF PEUT_SAISIR_SERVICE, PEUT_SAISIR_REFERENTIEL ON "OSE"."STATUT_INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRS_SERVICE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_SERVICE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRS_SERVICE_REFERENTIEL_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_SERVICE_REFERENTIEL_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE_REFERENTIEL"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRS_SERVICE_REFERENTIEL
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_SERVICE_REFERENTIEL"
  AFTER INSERT OR DELETE OR UPDATE OF INTERVENANT_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."SERVICE_REFERENTIEL"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRS_SERVICE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_SERVICE"
  AFTER INSERT OR DELETE OR UPDATE OF INTERVENANT_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRS_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRS_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF STATUT_ID, HISTO_CREATION, HISTO_DESTRUCTION, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, :OLD.id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRR_VOLUME_HORAIRE_REF_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_VOLUME_HORAIRE_REF_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VOLUME_HORAIRE_REF"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRR_VOLUME_HORAIRE_REF
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_VOLUME_HORAIRE_REF"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_VOLUME_HORAIRE_ID, SERVICE_REFERENTIEL_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VOLUME_HORAIRE_REF"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service_referentiel s
    WHERE
      s.id = :NEW.service_referentiel_id
      OR s.id = :OLD.service_referentiel_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRR_VAL_VOL_HORAIRE_REF_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_VAL_VOL_HORAIRE_REF_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION_VOL_HORAIRE_REF"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRR_VAL_VOL_HORAIRE_REF
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_VAL_VOL_HORAIRE_REF"
  AFTER INSERT OR DELETE OR UPDATE OF VALIDATION_ID, VOLUME_HORAIRE_REF_ID ON "OSE"."VALIDATION_VOL_HORAIRE_REF"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire_ref vh ON vh.service_referentiel_id = s.id
    WHERE
      vh.id = :NEW.volume_horaire_ref_id
      OR vh.id = :OLD.volume_horaire_ref_id    

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRR_VALIDATION_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_VALIDATION_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRR_VALIDATION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_VALIDATION"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VALIDATION"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRR_STATUT_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_STATUT_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."STATUT_INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRR_STATUT_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_STATUT_INTERVENANT"
  AFTER UPDATE OF PEUT_SAISIR_REFERENTIEL ON "OSE"."STATUT_INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRR_SERVICE_REFERENTIEL_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_SERVICE_REFERENTIEL_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE_REFERENTIEL"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRR_SERVICE_REFERENTIEL
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_SERVICE_REFERENTIEL"
  AFTER INSERT OR DELETE OR UPDATE OF INTERVENANT_ID, STRUCTURE_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."SERVICE_REFERENTIEL"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_SRR_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_SRR_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF STATUT_ID, HISTO_CREATION, HISTO_DESTRUCTION, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, :OLD.id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJ_PJ_FOURNIE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJ_PJ_FOURNIE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."TBL_PIECE_JOINTE_FOURNIE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJ_PJ_FOURNIE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJ_PJ_FOURNIE"
  AFTER INSERT OR DELETE OR UPDATE OF ANNEE_ID, TYPE_PIECE_JOINTE_ID, INTERVENANT_ID, VALIDATION_ID, FICHIER_ID ON "OSE"."TBL_PIECE_JOINTE_FOURNIE"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJ_PJ_DEMANDE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJ_PJ_DEMANDE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."TBL_PIECE_JOINTE_DEMANDE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJ_PJ_DEMANDE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJ_PJ_DEMANDE"
  AFTER INSERT OR DELETE OR UPDATE OF ANNEE_ID, TYPE_PIECE_JOINTE_ID, INTERVENANT_ID ON "OSE"."TBL_PIECE_JOINTE_DEMANDE"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJF_VALIDATION_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_VALIDATION_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJF_VALIDATION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_VALIDATION"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VALIDATION"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :NEW.intervenant_id );
  END IF;

  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJF_PIECE_JOINTE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_PIECE_JOINTE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."PIECE_JOINTE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJF_PIECE_JOINTE_FICHER_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_PIECE_JOINTE_FICHER_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."PIECE_JOINTE_FICHIER"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJF_PIECE_JOINTE_FICHER
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_PIECE_JOINTE_FICHER"
  AFTER INSERT OR DELETE OR UPDATE OF PIECE_JOINTE_ID, FICHIER_ID ON "OSE"."PIECE_JOINTE_FICHIER"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      pj.intervenant_id
    FROM
      piece_jointe pj
    WHERE
         pj.id = :NEW.piece_jointe_id
      OR pj.id = :OLD.piece_jointe_id

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJF_PIECE_JOINTE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_PIECE_JOINTE"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_PIECE_JOINTE_ID, INTERVENANT_ID, HISTO_CREATION, HISTO_DESTRUCTION, VALIDATION_ID ON "OSE"."PIECE_JOINTE"
  REFERENCING FOR EACH ROW
  BEGIN
  
  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :NEW.intervenant_id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJF_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJF_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_CREATION, HISTO_DESTRUCTION, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :OLD.id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJF_FICHER_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_FICHER_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."FICHIER"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJF_FICHER
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_FICHER"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."FICHIER"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      pj.intervenant_id
    FROM
      piece_jointe pj
      JOIN piece_jointe_fichier pjf ON pjf.piece_jointe_id = pj.id
    WHERE
         pjf.fichier_id = :NEW.id
      OR pjf.fichier_id = :OLD.id

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJF_DOSSIER_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_DOSSIER_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."DOSSIER"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJF_DOSSIER
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_DOSSIER"
  AFTER INSERT OR DELETE OR UPDATE OF INTERVENANT_ID ON "OSE"."DOSSIER"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJD_VOLUME_HORAIRE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_VOLUME_HORAIRE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VOLUME_HORAIRE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJD_VOLUME_HORAIRE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_VOLUME_HORAIRE"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_VOLUME_HORAIRE_ID, SERVICE_ID, HEURES, MOTIF_NON_PAIEMENT_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VOLUME_HORAIRE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      s.id = :NEW.service_id
      OR s.id = :OLD.service_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJD_TYPE_PIECE_JOINTE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_TYPE_PIECE_JOINTE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."TYPE_PIECE_JOINTE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJD_TYPE_PIECE_JOINTE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_TYPE_PIECE_JOINTE"
  AFTER INSERT OR DELETE OR UPDATE OF CODE, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."TYPE_PIECE_JOINTE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
      JOIN statut_intervenant si ON si.id = i.statut_id
      JOIN type_piece_jointe_statut tpjs ON tpjs.statut_intervenant_id = si.id
    WHERE
         TPJS.TYPE_PIECE_JOINTE_ID = :NEW.id
      OR TPJS.TYPE_PIECE_JOINTE_ID = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJD_T_PIECE_JOINTE_STATUT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_T_PIECE_JOINTE_STATUT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."TYPE_PIECE_JOINTE_STATUT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJD_T_PIECE_JOINTE_STATUT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_T_PIECE_JOINTE_STATUT"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_PIECE_JOINTE_ID, STATUT_INTERVENANT_ID, SEUIL_HETD, PREMIER_RECRUTEMENT, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."TYPE_PIECE_JOINTE_STATUT"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.statut_intervenant_id
      OR i.statut_id = :OLD.statut_intervenant_id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJD_SERVICE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_SERVICE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJD_SERVICE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_SERVICE"
  AFTER INSERT OR DELETE OR UPDATE OF INTERVENANT_ID, ELEMENT_PEDAGOGIQUE_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJD_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJD_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF STATUT_ID, IBAN, BIC, HISTO_CREATION, HISTO_DESTRUCTION, PREMIER_RECRUTEMENT, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, :OLD.id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PJD_DOSSIER_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_DOSSIER_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."DOSSIER"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PJD_DOSSIER
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_DOSSIER"
  AFTER INSERT OR DELETE OR UPDATE OF RIB, HISTO_CREATION, HISTO_DESTRUCTION, INTERVENANT_ID ON "OSE"."DOSSIER"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PAI_SERVICE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_SERVICE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PAI_SERVICE_REFERENTIEL_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_SERVICE_REFERENTIEL_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE_REFERENTIEL"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PAI_SERVICE_REFERENTIEL
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_SERVICE_REFERENTIEL"
  AFTER INSERT OR DELETE OR UPDATE OF STRUCTURE_ID ON "OSE"."SERVICE_REFERENTIEL"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PAI_SERVICE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_SERVICE"
  AFTER INSERT OR DELETE OR UPDATE OF ELEMENT_PEDAGOGIQUE_ID ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PAI_MISE_EN_PAIEMENT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_MISE_EN_PAIEMENT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."MISE_EN_PAIEMENT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PAI_MISE_EN_PAIEMENT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_MISE_EN_PAIEMENT"
  AFTER INSERT OR DELETE OR UPDATE OF FORMULE_RES_SERVICE_ID, FORMULE_RES_SERVICE_REF_ID, PERIODE_PAIEMENT_ID, HEURES, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."MISE_EN_PAIEMENT"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      fr.intervenant_id
    FROM
      formule_resultat fr
      LEFT JOIN formule_resultat_service frs ON frs.formule_resultat_id = fr.id
      LEFT JOIN formule_resultat_service_ref frsr ON frsr.formule_resultat_id = fr.id
    WHERE
         (frs.id  IS NOT NULL AND (frs.id  = :NEW.formule_res_service_id     OR frs.id  = :NEW.formule_res_service_id    ))
      OR (frsr.id IS NOT NULL AND (frsr.id = :NEW.formule_res_service_ref_id OR frsr.id = :NEW.formule_res_service_ref_id))
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PAI_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PAI_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF STRUCTURE_ID, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, :OLD.id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_PAI_ELEMENT_PEDAGOGIQUE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_ELEMENT_PEDAGOGIQUE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."ELEMENT_PEDAGOGIQUE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_PAI_ELEMENT_PEDAGOGIQUE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_ELEMENT_PEDAGOGIQUE"
  AFTER INSERT OR DELETE OR UPDATE OF STRUCTURE_ID ON "OSE"."ELEMENT_PEDAGOGIQUE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
         s.element_pedagogique_id = :NEW.id
      OR s.element_pedagogique_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_DOS_VALIDATION_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_VALIDATION_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_DOS_VALIDATION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_VALIDATION"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_VALIDATION_ID, INTERVENANT_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VALIDATION"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_DOS_STATUT_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_STATUT_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."STATUT_INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_DOS_STATUT_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_STATUT_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF PEUT_SAISIR_DOSSIER ON "OSE"."STATUT_INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_DOS_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_DOS_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_CREATION, HISTO_DESTRUCTION, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, :NEW.id );
  END IF;
  
  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, :OLD.id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_DOS_DOSSIER_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_DOSSIER_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_DOS_DOSSIER
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_DOSSIER"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_CREATION, HISTO_DESTRUCTION, INTERVENANT_ID ON "OSE"."DOSSIER"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_VOLUME_HORAIRE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VOLUME_HORAIRE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VOLUME_HORAIRE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_VOLUME_HORAIRE_REF_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VOLUME_HORAIRE_REF_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VOLUME_HORAIRE_REF"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_VOLUME_HORAIRE_REF
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VOLUME_HORAIRE_REF"
  AFTER INSERT OR DELETE OR UPDATE OF SERVICE_REFERENTIEL_ID, HEURES, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VOLUME_HORAIRE_REF"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service_referentiel s
    WHERE
      s.id = :NEW.service_referentiel_id
      OR s.id = :OLD.service_referentiel_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_VOLUME_HORAIRE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VOLUME_HORAIRE"
  AFTER INSERT OR DELETE OR UPDATE OF SERVICE_ID, HEURES, CONTRAT_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VOLUME_HORAIRE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      s.id = :NEW.service_id
      OR s.id = :OLD.service_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_VAL_VOL_HORAIRE_REF_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VAL_VOL_HORAIRE_REF_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION_VOL_HORAIRE_REF"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_VAL_VOL_HORAIRE_REF
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VAL_VOL_HORAIRE_REF"
  AFTER INSERT OR DELETE OR UPDATE OF VALIDATION_ID, VOLUME_HORAIRE_REF_ID ON "OSE"."VALIDATION_VOL_HORAIRE_REF"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire_ref vh ON vh.service_referentiel_id = s.id
    WHERE
      vh.id = :NEW.volume_horaire_ref_id
      OR vh.id = :OLD.volume_horaire_ref_id    

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_VALIDATION_VOL_HORAIRE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VALIDATION_VOL_HORAIRE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION_VOL_HORAIRE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_VALIDATION_VOL_HORAIRE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VALIDATION_VOL_HORAIRE"
  AFTER INSERT OR DELETE OR UPDATE OF VALIDATION_ID, VOLUME_HORAIRE_ID ON "OSE"."VALIDATION_VOL_HORAIRE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire vh ON vh.service_id = s.id
    WHERE
      vh.id = :NEW.volume_horaire_id
      OR vh.id = :OLD.volume_horaire_id    

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_VALIDATION_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VALIDATION_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_VALIDATION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VALIDATION"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VALIDATION"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_STATUT_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_STATUT_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."STATUT_INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_STATUT_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_STATUT_INTERVENANT"
  AFTER UPDATE OF PEUT_AVOIR_CONTRAT ON "OSE"."STATUT_INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_SERVICE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_SERVICE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_SERVICE_REFERENTIEL_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_SERVICE_REFERENTIEL_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE_REFERENTIEL"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_SERVICE_REFERENTIEL
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_SERVICE_REFERENTIEL"
  AFTER INSERT OR DELETE OR UPDATE OF INTERVENANT_ID, STRUCTURE_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."SERVICE_REFERENTIEL"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_SERVICE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_SERVICE"
  AFTER INSERT OR DELETE OR UPDATE OF INTERVENANT_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF STATUT_ID, STRUCTURE_ID, HISTO_CREATION, HISTO_DESTRUCTION, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :OLD.id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_ELEMENT_PEDAGOGIQUE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_ELEMENT_PEDAGOGIQUE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."ELEMENT_PEDAGOGIQUE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_ELEMENT_PEDAGOGIQUE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_ELEMENT_PEDAGOGIQUE"
  AFTER INSERT OR DELETE OR UPDATE OF STRUCTURE_ID ON "OSE"."ELEMENT_PEDAGOGIQUE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
         s.element_pedagogique_id = :NEW.id
      OR s.element_pedagogique_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_CONTRAT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_CONTRAT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."CONTRAT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CRT_CONTRAT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_CONTRAT"
  AFTER INSERT OR DELETE OR UPDATE OF VALIDATION_ID, DATE_RETOUR_SIGNE, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."CONTRAT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CLO_VALIDATION_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CLO_VALIDATION_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CLO_VALIDATION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CLO_VALIDATION"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_VALIDATION_ID, INTERVENANT_ID, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."VALIDATION"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CLOTURE_REALISE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CLOTURE_REALISE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CLO_STATUT_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CLO_STATUT_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."STATUT_INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CLO_STATUT_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CLO_STATUT_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF PEUT_CLOTURER_SAISIE ON "OSE"."STATUT_INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_CLOTURE_REALISE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_CLO_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CLO_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_CLO_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CLO_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF STATUT_ID, HISTO_CREATION, HISTO_DESTRUCTION, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CLOTURE_REALISE.package_sujet, :NEW.id );
  END IF;
  
  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CLOTURE_REALISE.package_sujet, :OLD.id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_AGR_TA_STATUT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_TA_STATUT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."TYPE_AGREMENT_STATUT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_AGR_TA_STATUT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_TA_STATUT"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_AGREMENT_ID, STATUT_INTERVENANT_ID, OBLIGATOIRE, PREMIER_RECRUTEMENT, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."TYPE_AGREMENT_STATUT"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      statut_intervenant si
      JOIN intervenant i ON i.statut_id = si.id
    WHERE
         si.id = :NEW.statut_intervenant_id
      OR si.id = :OLD.statut_intervenant_id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_AGR_SERVICE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_SERVICE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_AGR_SERVICE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_SERVICE"
  AFTER INSERT OR DELETE OR UPDATE OF ELEMENT_PEDAGOGIQUE_ID ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_AGR_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_INTERVENANT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_AGR_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_INTERVENANT"
  AFTER INSERT OR DELETE OR UPDATE OF STATUT_ID, HISTO_CREATION, HISTO_DESTRUCTION, PREMIER_RECRUTEMENT, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :NEW.id );
  END IF;
  
  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :OLD.id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--T_AGR_ELEMENT_PEDAGOGIQUE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_ELEMENT_PEDAGOGIQUE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."ELEMENT_PEDAGOGIQUE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_AGR_ELEMENT_PEDAGOGIQUE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_ELEMENT_PEDAGOGIQUE"
  AFTER INSERT OR DELETE OR UPDATE OF STRUCTURE_ID ON "OSE"."ELEMENT_PEDAGOGIQUE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
         s.element_pedagogique_id = :NEW.id
      OR s.element_pedagogique_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--T_AGR_AGREMENT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_AGREMENT_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."AGREMENT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Nouveau TRIGGER
--T_AGR_AGREMENT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_AGREMENT"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_AGREMENT_ID, INTERVENANT_ID, HISTO_CREATION, HISTO_DESTRUCTION, STRUCTURE_ID ON "OSE"."AGREMENT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--SERVICE_REFERENTIEL_HISTO_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."SERVICE_REFERENTIEL_HISTO_CK"
  BEFORE UPDATE OF FONCTION_ID, INTERVENANT_ID, STRUCTURE_ID, HISTO_DESTRUCTION ON "OSE"."SERVICE_REFERENTIEL"
  REFERENCING FOR EACH ROW
  DECLARE
  has_validation integer;
BEGIN
  SELECT COUNT(*) INTO has_validation
  FROM
    VALIDATION_VOL_HORAIRE_REF vvh
    JOIN validation v ON v.id = VVH.VALIDATION_ID
    JOIN volume_horaire_ref vh ON vh.id = vvh.volume_horaire_ref_id
  WHERE
    V.HISTO_DESTRUCTION IS NULL
    AND vh.service_referentiel_id = :OLD.ID;

  IF 0 <> has_validation THEN
    raise_application_error(-20101, 'Il est impossible de modifier ou supprimer du référentiel dont des heures ont déjà été validées.');
  END IF;

END;
/
---------------------------
--Modifié TRIGGER
--SERVICE_HISTO_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."SERVICE_HISTO_CK"
  BEFORE UPDATE OF INTERVENANT_ID, ELEMENT_PEDAGOGIQUE_ID, ETABLISSEMENT_ID ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  DECLARE
  has_validation integer;
BEGIN
  SELECT COUNT(*) INTO has_validation
  FROM
    VALIDATION_VOL_HORAIRE vvh
    JOIN validation v ON v.id = VVH.VALIDATION_ID
    JOIN volume_horaire vh ON vh.id = VVH.VOLUME_HORAIRE_ID
  WHERE
    V.HISTO_DESTRUCTION IS NULL
    AND vh.service_ID = :NEW.ID;

  IF 0 <> has_validation THEN
    raise_application_error(-20101, 'Il est impossible de modifier ou supprimer un service dont des heures ont déjà été validées.');
  END IF;

END;
/
---------------------------
--Modifié TRIGGER
--SERVICE_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."SERVICE_CK"
  BEFORE INSERT OR UPDATE ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  DECLARE 
  etablissement integer;
  res integer;
BEGIN
  
  etablissement := OSE_PARAMETRE.GET_ETABLISSEMENT();
  
  IF :NEW.etablissement_id = etablissement AND :NEW.element_pedagogique_id IS NULL THEN
    raise_application_error(-20101, 'Un enseignement doit obligatoirement être renseigné si le service est réalisé en interne.');
  END IF;


  IF :NEW.etablissement_id <> etablissement AND OSE_DIVERS.INTERVENANT_HAS_PRIVILEGE(:NEW.intervenant_id, 'saisie_service_exterieur') = 0 THEN
    raise_application_error(-20101, 'Les intervenants vacataires n''ont pas la possibilité de renseigner des enseignements pris à l''extérieur.');
  END IF;

  IF :NEW.intervenant_id IS NOT NULL AND :NEW.element_pedagogique_id IS NOT NULL THEN
    SELECT
      count(*) INTO res
    FROM
      intervenant i,
      element_pedagogique ep
    WHERE
          i.id        = :NEW.intervenant_id
      AND ep.id       = :NEW.element_pedagogique_id
      AND ep.annee_id = i.annee_id
    ;
    
    IF 0 = res THEN -- années non concomitantes
      raise_application_error(-20101, 'L''année de l''intervenant ne correspond pas à l''année de l''élément pédagogique.');
    END IF;
  END IF;

  --IF :OLD.id IS NOT NULL AND ( :NEW.etablissement_id <> :OLD.etablissement_id OR :NEW.element_pedagogique_id <> :OLD.element_pedagogique_id ) THEN
    --UPDATE volume_horaire SET histo_destruction = SYSDATE, histo_destructeur_id = :NEW.histo_modificateur_id WHERE service_id = :NEW.id;
  --END IF;

END;
/
---------------------------
--Modifié TRIGGER
--F_VOLUME_HORAIRE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_VOLUME_HORAIRE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VOLUME_HORAIRE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_VOLUME_HORAIRE_REF_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_VOLUME_HORAIRE_REF_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VOLUME_HORAIRE_REF"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_VOLUME_HORAIRE_REF
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_VOLUME_HORAIRE_REF"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VOLUME_HORAIRE_REF"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service_referentiel s
    WHERE
      1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
      AND (s.id = :NEW.service_referentiel_id OR s.id = :OLD.service_referentiel_id)
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  END LOOP;
END;
/
---------------------------
--Modifié TRIGGER
--F_VOLUME_HORAIRE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_VOLUME_HORAIRE"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_VOLUME_HORAIRE_ID, SERVICE_ID, PERIODE_ID, TYPE_INTERVENTION_ID, HEURES, MOTIF_NON_PAIEMENT_ID, CONTRAT_ID, HISTO_CREATION, HISTO_MODIFICATION, HISTO_DESTRUCTION ON "OSE"."VOLUME_HORAIRE"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
      AND (s.id = :NEW.service_id OR s.id = :OLD.service_id)
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  
  END LOOP;
END;
/
---------------------------
--Modifié TRIGGER
--F_VALIDATION_VOL_HORAIRE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION_VOL_HORAIRE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION_VOL_HORAIRE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_VALIDATION_VOL_HORAIRE_REF_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION_VOL_HORAIRE_REF_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION_VOL_HORAIRE_REF"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_VALIDATION_VOL_HORAIRE_REF
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION_VOL_HORAIRE_REF"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION_VOL_HORAIRE_REF"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      volume_horaire_ref vh
      JOIN service_referentiel s ON s.id = vh.service_referentiel_id AND 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
    WHERE
      1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      AND (vh.id = :NEW.volume_horaire_ref_id OR vh.id = :OLD.volume_horaire_ref_id)
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  
  END LOOP;
END;
/
---------------------------
--Modifié TRIGGER
--F_VALIDATION_VOL_HORAIRE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION_VOL_HORAIRE"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION_VOL_HORAIRE"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      volume_horaire vh
      JOIN service s ON s.id = vh.service_id AND 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
    WHERE
      1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      AND (vh.id = :NEW.volume_horaire_id OR vh.id = :OLD.volume_horaire_id)
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  
  END LOOP;
END;
/
---------------------------
--Modifié TRIGGER
--F_VALIDATION_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION_S"
  AFTER UPDATE ON "OSE"."VALIDATION"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_VALIDATION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION"
  AFTER UPDATE ON "OSE"."VALIDATION"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN ( -- validations de volume horaire

    SELECT DISTINCT
      s.intervenant_id
    FROM
      validation_vol_horaire vvh
      JOIN volume_horaire vh ON vh.id = vvh.volume_horaire_id AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      JOIN service s ON s.id = vh.service_id AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
    WHERE
      (vvh.validation_id = :OLD.ID OR vvh.validation_id = :NEW.id)

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );

  END LOOP;

  FOR p IN ( -- validations de contrat

    SELECT DISTINCT
      s.intervenant_id
    FROM
      contrat c
      JOIN volume_horaire vh ON vh.contrat_id = c.id AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      JOIN service s ON s.id = vh.service_id AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
    WHERE
      (c.validation_id = :OLD.ID OR c.validation_id = :NEW.id)

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
---------------------------
--Modifié TRIGGER
--F_TYPE_INTERVENTION_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_TYPE_INTERVENTION_S"
  AFTER UPDATE ON "OSE"."TYPE_INTERVENTION"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_TYPE_INTERVENTION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_TYPE_INTERVENTION"
  AFTER UPDATE ON "OSE"."TYPE_INTERVENTION"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      volume_horaire vh
      JOIN service s ON s.id = vh.service_id AND 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
    WHERE
      1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      AND (vh.type_intervention_id = :NEW.id OR vh.type_intervention_id = :OLD.id)
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  
  END LOOP;
END;
/
---------------------------
--Modifié TRIGGER
--F_STATUT_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_STATUT_INTERVENANT_S"
  AFTER UPDATE ON "OSE"."STATUT_INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_STATUT_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_STATUT_INTERVENANT"
  AFTER UPDATE ON "OSE"."STATUT_INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (
  
    SELECT DISTINCT
      fr.intervenant_id
    FROM
      intervenant i
      JOIN formule_resultat fr ON fr.intervenant_id = i.id
    WHERE
      (i.statut_id = :NEW.id OR i.statut_id = :OLD.id)
      AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  
  END LOOP;
END;
/
---------------------------
--Modifié TRIGGER
--F_SERVICE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_SERVICE_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_SERVICE_REFERENTIEL_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_SERVICE_REFERENTIEL_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE_REFERENTIEL"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_SERVICE_REFERENTIEL
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_SERVICE_REFERENTIEL"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE_REFERENTIEL"
  REFERENCING FOR EACH ROW
  BEGIN

  IF DELETING OR UPDATING THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, :OLD.intervenant_id );
  END IF;
  IF INSERTING OR UPDATING THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, :NEW.intervenant_id );
  END IF;

END;
/
---------------------------
--Modifié TRIGGER
--F_SERVICE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_SERVICE"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  BEGIN

  IF DELETING OR UPDATING THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, :OLD.intervenant_id );
  END IF;
  IF INSERTING OR UPDATING THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, :NEW.intervenant_id );
  END IF;
END;
/
---------------------------
--Modifié TRIGGER
--FORMULE_RES_SERVICE_REF_DEL_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."FORMULE_RES_SERVICE_REF_DEL_CK"
  BEFORE DELETE ON "OSE"."FORMULE_RESULTAT_SERVICE_REF"
  REFERENCING FOR EACH ROW
  BEGIN

  --OSE_PAIEMENT.CHECK_BAD_PAIEMENTS( null, :OLD.id );
  RETURN;
END;
/
---------------------------
--Modifié TRIGGER
--FORMULE_RES_SERVICE_DEL_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."FORMULE_RES_SERVICE_DEL_CK"
  BEFORE DELETE ON "OSE"."FORMULE_RESULTAT_SERVICE"
  REFERENCING FOR EACH ROW
  BEGIN

  --OSE_PAIEMENT.CHECK_BAD_PAIEMENTS( :OLD.id );
  RETURN;
END;
/
---------------------------
--Modifié TRIGGER
--F_MOTIF_MODIFICATION_SERVICE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_MOTIF_MODIFICATION_SERVICE_S"
  AFTER DELETE OR UPDATE ON "OSE"."MOTIF_MODIFICATION_SERVICE"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_MOTIF_MODIFICATION_SERVICE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_MOTIF_MODIFICATION_SERVICE"
  AFTER DELETE OR UPDATE ON "OSE"."MOTIF_MODIFICATION_SERVICE"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (
  
    SELECT DISTINCT
      intervenant_id
    FROM
      modification_service_du msd
    WHERE
      1 = OSE_DIVERS.COMPRISE_ENTRE( msd.histo_creation, msd.histo_destruction )
      AND (msd.motif_id = :NEW.id OR msd.motif_id = :OLD.id)
      
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Modifié TRIGGER
--F_MODULATEUR_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_MODULATEUR_S"
  AFTER DELETE OR UPDATE ON "OSE"."MODULATEUR"
  BEGIN
    OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_MODULATEUR
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_MODULATEUR"
  AFTER DELETE OR UPDATE ON "OSE"."MODULATEUR"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN element_modulateur em ON 
        em.element_id   = s.element_pedagogique_id 
        AND 1 = ose_divers.comprise_entre( em.histo_creation, em.histo_destruction )
    WHERE
      1 = OSE_DIVERS.COMPRISE_ENTRE( s.histo_creation, s.histo_destruction )
      AND (em.modulateur_id = :OLD.id OR em.modulateur_id = :NEW.id)

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );

  END LOOP;
END;
/
---------------------------
--Modifié TRIGGER
--F_MODIF_SERVICE_DU_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_MODIF_SERVICE_DU_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."MODIFICATION_SERVICE_DU"
  BEGIN
    OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_MODIF_SERVICE_DU
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_MODIF_SERVICE_DU"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."MODIFICATION_SERVICE_DU"
  REFERENCING FOR EACH ROW
  BEGIN

  IF DELETING OR UPDATING THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, :OLD.intervenant_id );
  END IF;
  IF INSERTING OR UPDATING THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, :NEW.intervenant_id );
  END IF;

END;
/
---------------------------
--Modifié TRIGGER
--F_INTERVENANT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_INTERVENANT_S"
  AFTER UPDATE ON "OSE"."INTERVENANT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_INTERVENANT"
  AFTER UPDATE OF ID, DATE_NAISSANCE, STATUT_ID, STRUCTURE_ID, HISTO_CREATION, HISTO_DESTRUCTION, PREMIER_RECRUTEMENT, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
      
    SELECT DISTINCT
      fr.intervenant_id
    FROM
      formule_resultat fr
    WHERE
      fr.intervenant_id = :NEW.id OR fr.intervenant_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );

  END LOOP;
  
END;
/
---------------------------
--Modifié TRIGGER
--F_ELEMENT_PEDAGOGIQUE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_ELEMENT_PEDAGOGIQUE_S"
  AFTER DELETE OR UPDATE ON "OSE"."ELEMENT_PEDAGOGIQUE"
  BEGIN 
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_ELEMENT_PEDAGOGIQUE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_ELEMENT_PEDAGOGIQUE"
  AFTER DELETE OR UPDATE OF ID, STRUCTURE_ID, PERIODE_ID, TAUX_FI, TAUX_FC, TAUX_FA, TAUX_FOAD, FI, FC, FA, HISTO_CREATION, HISTO_DESTRUCTION, ANNEE_ID ON "OSE"."ELEMENT_PEDAGOGIQUE"
  REFERENCING FOR EACH ROW
  BEGIN FOR p IN
    ( SELECT DISTINCT s.intervenant_id
    FROM service s
    WHERE (s.element_pedagogique_id = :NEW.id
    OR s.element_pedagogique_id     = :OLD.id)
    AND 1                           = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
    ) LOOP OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
END LOOP;
END;
/
---------------------------
--Modifié TRIGGER
--F_ELEMENT_MODULATEUR_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_ELEMENT_MODULATEUR_S"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."ELEMENT_MODULATEUR"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_ELEMENT_MODULATEUR
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_ELEMENT_MODULATEUR"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."ELEMENT_MODULATEUR"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      1 = OSE_DIVERS.COMPRISE_ENTRE( s.histo_creation, s.histo_destruction )
      AND (s.element_pedagogique_id = :OLD.element_id OR s.element_pedagogique_id = :NEW.element_id)
      
  ) LOOP
    
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
    
  END LOOP;

END;
/
---------------------------
--Modifié TRIGGER
--F_CONTRAT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_CONTRAT_S"
  AFTER DELETE OR UPDATE ON "OSE"."CONTRAT"
  BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
---------------------------
--Modifié TRIGGER
--F_CONTRAT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_CONTRAT"
  AFTER DELETE OR UPDATE OF INTERVENANT_ID, STRUCTURE_ID, VALIDATION_ID, DATE_RETOUR_SIGNE, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."CONTRAT"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      volume_horaire vh
      JOIN service s ON s.id = vh.service_id AND 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
    WHERE
      1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      AND (vh.contrat_id = :OLD.id OR vh.contrat_id = :NEW.id)

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
---------------------------
--Nouveau TRIGGER
--AGREMENT_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."AGREMENT_CK"
  BEFORE UPDATE ON "OSE"."AGREMENT"
  REFERENCING FOR EACH ROW
  DECLARE
  contrat_found INTEGER;
BEGIN

  SELECT
    COUNT(*) INTO contrat_found
  FROM
    contrat c
  WHERE
    c.INTERVENANT_ID = :NEW.intervenant_id
    AND c.structure_id = NVL(:NEW.structure_id,c.structure_id)
    AND 1 = OSE_DIVERS.COMPRISE_ENTRE( c.histo_creation, c.histo_destruction )
    AND ROWNUM = 1;

  IF 
    1 = contrat_found 
    AND :NEW.histo_destruction IS NOT NULL AND :OLD.histo_destruction IS NULL
  THEN 
  
    IF :NEW.structure_id IS NULL THEN
      raise_application_error(-20101, 'Cet agrément ne peut pas être supprimé car un contrat a été signé.');    
    ELSE
      raise_application_error(-20101, 'Cet agrément ne peut pas être supprimé car un contrat a été signé dans la même composante.');    
    END IF;
  END IF;
  
END;


create or replace TRIGGER "OSE"."SERVICE_HISTO_CK"
  BEFORE UPDATE OF intervenant_id, element_pedagogique_id, etablissement_id, description ON "OSE"."SERVICE" 
  REFERENCING FOR EACH ROW
  DECLARE
  has_validation integer;
BEGIN
  SELECT COUNT(*) INTO has_validation
  FROM
    VALIDATION_VOL_HORAIRE vvh
    JOIN validation v ON v.id = VVH.VALIDATION_ID
    JOIN volume_horaire vh ON vh.id = VVH.VOLUME_HORAIRE_ID
  WHERE
    V.HISTO_DESTRUCTION IS NULL
    AND vh.service_ID = :NEW.ID;

  IF 0 <> has_validation THEN
    raise_application_error(-20101, 'Il est impossible de modifier ou supprimer un service dont des heures ont déjà été validées.');
  END IF;

END;
/
---------------------------
--Modifié PACKAGE
--UNICAEN_OSE_FORMULE
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."UNICAEN_OSE_FORMULE" AS 

  PROCEDURE CALCUL_RESULTAT_V2( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC );
  
  PROCEDURE CALCUL_RESULTAT_V3( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC );

  PROCEDURE PURGE_EM_NON_FC;

END UNICAEN_OSE_FORMULE;
/
---------------------------
--Nouveau PACKAGE
--UNICAEN_IMPORT
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."UNICAEN_IMPORT" AS 

  PROCEDURE set_current_user(p_current_user IN INTEGER);
  FUNCTION get_current_user return INTEGER;

  FUNCTION get_current_annee RETURN INTEGER;
  PROCEDURE set_current_annee (p_current_annee INTEGER);

  FUNCTION get_sql_criterion( table_name varchar2, sql_criterion VARCHAR2 ) RETURN CLOB;
  PROCEDURE SYNC_LOG( message CLOB, table_name VARCHAR2 DEFAULT NULL, source_code VARCHAR2 DEFAULT NULL );

  -- AUTOMATIC GENERATION --

  PROCEDURE MAJ_TYPE_MODULATEUR_EP(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_TYPE_INTERVENTION_EP(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_TYPE_FORMATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_PERSONNEL(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_PAYS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_INTERVENANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_GROUPE_TYPE_FORMATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_GRADE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ETAPE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ETABLISSEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ELEMENT_TAUX_REGIMES(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ELEMENT_PEDAGOGIQUE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_EFFECTIFS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_DOMAINE_FONCTIONNEL(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_DEPARTEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_CORPS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_CHEMIN_PEDAGOGIQUE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_CENTRE_COUT_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_CENTRE_COUT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_AFFECTATION_RECHERCHE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_AFFECTATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ADRESSE_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ADRESSE_INTERVENANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');

  -- END OF AUTOMATIC GENERATION --
END UNICAEN_IMPORT;
/
---------------------------
--Modifié PACKAGE
--OSE_WORKFLOW
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_WORKFLOW" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_WORKFLOW';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE DEP_CHECK( etape_suiv_id NUMERIC, etape_prec_id NUMERIC );

END OSE_WORKFLOW;
/
---------------------------
--Nouveau PACKAGE
--OSE_VALIDATION_REFERENTIEL
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_VALIDATION_REFERENTIEL" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_VALIDATION_REFERENTIEL';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

END OSE_VALIDATION_REFERENTIEL;
/
---------------------------
--Nouveau PACKAGE
--OSE_VALIDATION_ENSEIGNEMENT
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_VALIDATION_ENSEIGNEMENT" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_VALIDATION_ENSEIGNEMENT';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

END OSE_VALIDATION_ENSEIGNEMENT;
/
---------------------------
--Nouveau PACKAGE
--OSE_VALIDATION
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_VALIDATION" AS 

  FUNCTION can_devalider ( v validation%rowtype ) RETURN varchar2;

END OSE_VALIDATION;
/
---------------------------
--Modifié PACKAGE
--OSE_TEST
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_TEST" AS 

  DEBUG_ENABLED BOOLEAN DEFAULT FALSE;

  -- SET SERVEROUTPUT ON

  PROCEDURE SHOW_SUCCES;

  PROCEDURE HIDE_SUCCES;

  PROCEDURE ECHO( MSG CLOB );

  PROCEDURE INIT;

  PROCEDURE SHOW_STATS;

  PROCEDURE DEBUT( TEST_NAME CLOB );
  
  PROCEDURE FIN;

  PROCEDURE ASSERT( condition BOOLEAN, MSG CLOB );
  
  PROCEDURE DELETE_TEST_DATA;

  FUNCTION GET_USER RETURN NUMERIC;

  FUNCTION GET_SOURCE RETURN NUMERIC;


  FUNCTION GET_CIVILITE( libelle_court VARCHAR2 DEFAULT NULL ) RETURN civilite%rowtype;

  FUNCTION GET_TYPE_INTERVENANT( code VARCHAR2 DEFAULT NULL ) RETURN type_intervenant%rowtype;

  FUNCTION GET_TYPE_INTERVENANT_BY_ID( id NUMERIC ) RETURN type_intervenant%rowtype;

  FUNCTION GET_STATUT_INTERVENANT( source_code VARCHAR2 DEFAULT NULL ) RETURN statut_intervenant%rowtype;
  
  FUNCTION GET_STATUT_INTERVENANT_BY_ID( id NUMERIC ) RETURN statut_intervenant%rowtype;

  FUNCTION GET_TYPE_STRUCTURE( code VARCHAR2 DEFAULT NULL ) RETURN type_structure%rowtype;

  FUNCTION GET_STRUCTURE( source_code VARCHAR2 DEFAULT NULL ) RETURN structure%rowtype;
  
  FUNCTION GET_STRUCTURE_BY_ID( id NUMERIC ) RETURN structure%rowtype;
  
  FUNCTION GET_STRUCTURE_ENS_BY_NIVEAU( niveau NUMERIC ) RETURN structure%rowtype;

  FUNCTION GET_STRUCTURE_UNIV RETURN "STRUCTURE"%rowtype;

  FUNCTION ADD_STRUCTURE(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    parente_id    NUMERIC,
    type_id       NUMERIC,
    source_code   VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_INTERVENANT( source_code VARCHAR2 DEFAULT NULL ) RETURN intervenant%rowtype;

  FUNCTION GET_INTERVENANT_BY_ID( id NUMERIC DEFAULT NULL ) RETURN intervenant%rowtype;

  FUNCTION GET_INTERVENANT_BY_STATUT( statut_id NUMERIC ) RETURN intervenant%rowtype;

  FUNCTION ADD_INTERVENANT(
    civilite_id     NUMERIC,
    nom_usuel       VARCHAR2,
    prenom          VARCHAR2,
    date_naissance  DATE,
    email           VARCHAR2,
    statut_id       NUMERIC,
    structure_id    NUMERIC,
    source_code     VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_GROUPE_TYPE_FORMATION( source_code VARCHAR2 DEFAULT NULL ) RETURN groupe_type_formation%rowtype;
  
  FUNCTION ADD_GROUPE_TYPE_FORMATION(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    source_code   VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_TYPE_FORMATION( source_code VARCHAR2 ) RETURN type_formation%rowtype;
  
  FUNCTION ADD_TYPE_FORMATION(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    groupe_id     NUMERIC,
    source_code   VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_ETAPE( source_code VARCHAR2 DEFAULT NULL ) RETURN etape%rowtype;
  
  FUNCTION ADD_ETAPE(
    libelle           VARCHAR2,
    type_formation_id NUMERIC,
    niveau            NUMERIC,
    structure_id      NUMERIC,
    source_code       VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_PERIODE( code VARCHAR2 DEFAULT NULL ) RETURN periode%rowtype;

  FUNCTION GET_ELEMENT_PEDAGOGIQUE( source_code VARCHAR2 DEFAULT NULL ) RETURN element_pedagogique%rowtype;
  
  FUNCTION GET_ELEMENT_PEDAGOGIQUE_BY_ID( ID NUMERIC ) RETURN element_pedagogique%rowtype;
  
  FUNCTION ADD_ELEMENT_PEDAGOGIQUE(
    libelle       VARCHAR2,
    etape_id      NUMERIC,
    structure_id  NUMERIC,
    periode_id    NUMERIC,
    taux_foad     FLOAT,
    taux_fi       FLOAT,
    taux_fc       FLOAT,
    taux_fa       FLOAT,
    source_code   VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_TYPE_MODULATEUR( code VARCHAR2 DEFAULT NULL ) RETURN type_modulateur%rowtype;
  
  FUNCTION ADD_TYPE_MODULATEUR(
    code        VARCHAR2,
    libelle     VARCHAR2,
    publique    NUMERIC,
    obligatoire NUMERIC
  ) RETURN NUMERIC;

  FUNCTION GET_MODULATEUR( code VARCHAR2 DEFAULT NULL ) RETURN modulateur%rowtype;
  
  FUNCTION ADD_MODULATEUR(
    code                      VARCHAR2,
    libelle                   VARCHAR2,
    type_modulateur_id        NUMERIC,
    ponderation_service_du    FLOAT,
    ponderation_service_compl FLOAT
  ) RETURN NUMERIC;

  FUNCTION ADD_ELEMENT_MODULATEUR(
    element_id    NUMERIC,
    modulateur_id NUMERIC
  ) RETURN NUMERIC;

  FUNCTION GET_FONCTION_REFERENTIEL( code VARCHAR2 DEFAULT NULL ) RETURN fonction_referentiel%rowtype;
  
  FUNCTION ADD_FONCTION_REFERENTIEL(
    code          VARCHAR2,
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    plafond       FLOAT
  ) RETURN NUMERIC;
  
  FUNCTION ADD_SERVICE_REFERENTIEL(
    fonction_id     NUMERIC,
    intervenant_id  NUMERIC,
    structure_id    NUMERIC
  ) RETURN NUMERIC;
  
  FUNCTION ADD_MODIFICATION_SERVICE_DU(
    intervenant_id  NUMERIC,
    heures          FLOAT,
    motif_id        NUMERIC,
    commentaires    CLOB DEFAULT NULL
  ) RETURN NUMERIC;

  FUNCTION GET_MOTIF_MODIFICATION_SERVICE( code VARCHAR2 DEFAULT NULL, multiplicateur FLOAT DEFAULT NULL ) RETURN motif_modification_service%rowtype;

  FUNCTION GET_ETABLISSEMENT( source_code VARCHAR2 DEFAULT NULL ) RETURN etablissement%rowtype;
  
  FUNCTION GET_SERVICE_BY_ID( id NUMERIC ) RETURN service%rowtype;

  FUNCTION ADD_SERVICE(
    intervenant_id          NUMERIC,
    element_pedagogique_id  NUMERIC,
    etablissement_id        NUMERIC DEFAULT NULL
  ) RETURN NUMERIC;

  FUNCTION GET_ETAT_VOLUME_HORAIRE( code VARCHAR2 DEFAULT NULL ) RETURN etat_volume_horaire%rowtype;
  
  FUNCTION GET_TYPE_VOLUME_HORAIRE( code VARCHAR2 DEFAULT NULL ) RETURN type_volume_horaire%rowtype;
  
  FUNCTION GET_TYPE_INTERVENTION( code VARCHAR2 DEFAULT NULL ) RETURN type_intervention%rowtype;

  FUNCTION GET_TYPE_INTERVENTION_BY_ID( id NUMERIC ) RETURN type_intervention%rowtype;

  FUNCTION GET_TYPE_INTERVENTION_BY_ELEMT( ELEMENT_ID NUMERIC ) RETURN type_intervention%rowtype;

  FUNCTION GET_MOTIF_NON_PAIEMENT( code VARCHAR2 DEFAULT NULL ) RETURN motif_non_paiement%rowtype;
  
  FUNCTION GET_VOLUME_HORAIRE( id NUMERIC DEFAULT NULL ) RETURN volume_horaire%rowtype;
  
  FUNCTION ADD_VOLUME_HORAIRE(
    type_volume_horaire_id  NUMERIC,
    service_id              NUMERIC,
    periode_id              NUMERIC,
    type_intervention_id    NUMERIC,
    heures                  FLOAT,
    motif_non_paiement_id   NUMERIC DEFAULT NULL
  ) RETURN NUMERIC;

  FUNCTION ADD_VALIDATION_VOLUME_HORAIRE(
    structure_id      NUMERIC DEFAULT NULL,
    intervenant_id    NUMERIC DEFAULT NULL,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL
  ) RETURN NUMERIC;

  PROCEDURE DEL_VALIDATION_VOLUME_HORAIRE(
    structure_id      NUMERIC DEFAULT NULL,
    intervenant_id    NUMERIC DEFAULT NULL,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL,
    validation_id     NUMERIC DEFAULT NULL
  );

  FUNCTION GET_CONTRAT_BY_ID( ID NUMERIC ) RETURN contrat%rowtype;

  FUNCTION GET_WF_ETAPE_BY_ID( ID NUMERIC ) RETURN wf_etape%rowtype;

  FUNCTION ADD_CONTRAT(
    structure_id      NUMERIC DEFAULT NULL,
    intervenant_id    NUMERIC DEFAULT NULL,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL    
  ) RETURN NUMERIC;
  
  FUNCTION SIGNATURE_CONTRAT( contrat_id NUMERIC ) RETURN NUMERIC;
  
  FUNCTION ADD_CONTRAT_VALIDATION( contrat_id NUMERIC ) RETURN NUMERIC;

  FUNCTION DEL_CONTRAT_VALIDATION( contrat_id NUMERIC ) RETURN NUMERIC;

  FUNCTION GET_TYPE_VALIDATION( code VARCHAR2 DEFAULT NULL ) RETURN type_validation%rowtype;
END OSE_TEST;
/
---------------------------
--Nouveau PACKAGE
--OSE_SERVICE_SAISIE
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_SERVICE_SAISIE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_SERVICE_SAISIE';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

END OSE_SERVICE_SAISIE;
/
---------------------------
--Nouveau PACKAGE
--OSE_SERVICE_REFERENTIEL
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_SERVICE_REFERENTIEL" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_SERVICE_REFERENTIEL';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

END OSE_SERVICE_REFERENTIEL;
/
---------------------------
--Modifié PACKAGE
--OSE_SERVICE
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_SERVICE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_SERVICE';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE controle_plafond_fc_maj( intervenant_id NUMERIC, type_volume_horaire_id NUMERIC );

END OSE_SERVICE;
/
---------------------------
--Nouveau PACKAGE
--OSE_PIECE_JOINTE_FOURNIE
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_PIECE_JOINTE_FOURNIE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_PIECE_JOINTE_FOURNIE';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

END OSE_PIECE_JOINTE_FOURNIE;
/
---------------------------
--Nouveau PACKAGE
--OSE_PIECE_JOINTE_DEMANDE
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_PIECE_JOINTE_DEMANDE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_PIECE_JOINTE_DEMANDE';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

END OSE_PIECE_JOINTE_DEMANDE;
/
---------------------------
--Nouveau PACKAGE
--OSE_PIECE_JOINTE
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_PIECE_JOINTE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_PIECE_JOINTE';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

END OSE_PIECE_JOINTE;
/
---------------------------
--Nouveau PACKAGE
--OSE_PAIEMENT
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_PAIEMENT" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_PAIEMENT';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE CHECK_BAD_PAIEMENTS( FORMULE_RES_SERVICE_ID NUMERIC DEFAULT NULL, FORMULE_RES_SERVICE_REF_ID NUMERIC DEFAULT NULL );

END OSE_PAIEMENT;
/
---------------------------
--Modifié PACKAGE
--OSE_IMPORT
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_IMPORT" IS

  PROCEDURE REFRESH_MVS;
  PROCEDURE SYNC_TABLES;
  PROCEDURE SYNCHRONISATION;

END ose_import;
/
---------------------------
--Modifié PACKAGE
--OSE_HISTO
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_HISTO" AS 

  FUNCTION FILTRE( histo_debut NUMERIC, histo_fin NUMERIC ) RETURN NUMERIC;

END OSE_HISTO;
/
---------------------------
--Modifié PACKAGE
--OSE_FORMULE
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_FORMULE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_FORMULE';

  TYPE t_intervenant IS RECORD (
    structure_id                   NUMERIC,
    annee_id                       NUMERIC,
    heures_decharge                FLOAT DEFAULT 0,
    heures_service_statutaire      FLOAT DEFAULT 0,
    heures_service_modifie         FLOAT DEFAULT 0,
    depassement_service_du_sans_hc FLOAT DEFAULT 0
  );
  
  TYPE t_type_etat_vh IS RECORD (
    type_volume_horaire_id    NUMERIC,
    etat_volume_horaire_id    NUMERIC
  );
  TYPE t_lst_type_etat_vh   IS TABLE OF t_type_etat_vh INDEX BY PLS_INTEGER;
  
  TYPE t_service_ref IS RECORD (
    id                        NUMERIC,
    structure_id              NUMERIC
  );
  TYPE t_lst_service_ref      IS TABLE OF t_service_ref INDEX BY PLS_INTEGER;
  
  TYPE t_service IS RECORD (
    id                        NUMERIC,
    taux_fi                   FLOAT   DEFAULT 1,
    taux_fa                   FLOAT   DEFAULT 0,
    taux_fc                   FLOAT   DEFAULT 0,
    ponderation_service_du    FLOAT   DEFAULT 1,
    ponderation_service_compl FLOAT   DEFAULT 1,
    structure_aff_id          NUMERIC,
    structure_ens_id          NUMERIC
  );
  TYPE t_lst_service          IS TABLE OF t_service INDEX BY PLS_INTEGER;
  
  TYPE t_volume_horaire_ref IS RECORD (
    id                        NUMERIC,
    service_referentiel_id    NUMERIC,
    type_volume_horaire_id    NUMERIC,
    etat_volume_horaire_id    NUMERIC,
    etat_volume_horaire_ordre NUMERIC,
    heures                    FLOAT   DEFAULT 0
  );
  TYPE t_lst_volume_horaire_ref   IS TABLE OF t_volume_horaire_ref INDEX BY PLS_INTEGER;
  
  TYPE t_volume_horaire IS RECORD (
    id                        NUMERIC,
    service_id                NUMERIC,
    type_volume_horaire_id    NUMERIC,
    etat_volume_horaire_id    NUMERIC,
    etat_volume_horaire_ordre NUMERIC,
    heures                    FLOAT   DEFAULT 0,
    taux_service_du           FLOAT   DEFAULT 1,
    taux_service_compl        FLOAT   DEFAULT 1
  );
  TYPE t_lst_volume_horaire   IS TABLE OF t_volume_horaire INDEX BY PLS_INTEGER;



  TYPE t_resultat_hetd IS RECORD (
    service_fi                FLOAT DEFAULT 0,
    service_fa                FLOAT DEFAULT 0,
    service_fc                FLOAT DEFAULT 0,
    heures_compl_fi           FLOAT DEFAULT 0,
    heures_compl_fa           FLOAT DEFAULT 0,
    heures_compl_fc           FLOAT DEFAULT 0,
    heures_compl_fc_majorees  FLOAT DEFAULT 0
  );
  TYPE t_lst_resultat_hetd   IS TABLE OF t_resultat_hetd INDEX BY PLS_INTEGER;

  TYPE t_resultat_hetd_ref IS RECORD (
    service_referentiel       FLOAT DEFAULT 0,
    heures_compl_referentiel  FLOAT DEFAULT 0
  );
  TYPE t_lst_resultat_hetd_ref   IS TABLE OF t_resultat_hetd_ref INDEX BY PLS_INTEGER;

  TYPE t_resultat IS RECORD (
    intervenant_id            NUMERIC,
    type_volume_horaire_id    NUMERIC,
    etat_volume_horaire_id    NUMERIC,
    service_du                FLOAT DEFAULT 0,
    solde                     FLOAT DEFAULT 0,
    sous_service              FLOAT DEFAULT 0,
    heures_compl              FLOAT DEFAULT 0,
    volume_horaire            t_lst_resultat_hetd,
    volume_horaire_ref        t_lst_resultat_hetd_ref
  );

  d_intervenant         t_intervenant;
  d_type_etat_vh        t_lst_type_etat_vh;
  d_service_ref         t_lst_service_ref;
  d_service             t_lst_service;
  d_volume_horaire_ref  t_lst_volume_horaire_ref;
  d_volume_horaire      t_lst_volume_horaire;
  d_resultat            t_resultat;

  FUNCTION  GET_DATE_OBS RETURN DATE;
  FUNCTION  SET_DATE_OBS( DATE_OBS DATE DEFAULT NULL ) RETURN DATE;

  PROCEDURE SET_DEBUG_LEVEL( DEBUG_LEVEL NUMERIC );
  FUNCTION GET_DEBUG_LEVEL RETURN NUMERIC;

  FUNCTION GET_TAUX_HORAIRE_HETD( DATE_OBS DATE DEFAULT NULL ) RETURN FLOAT;

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );        -- mise à jour de TOUTES les données ! ! ! !
END OSE_FORMULE;
/
---------------------------
--Modifié PACKAGE
--OSE_EVENT
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_EVENT" AS 

  PROCEDURE CALCULER( PACKAGE_SUJET VARCHAR2, INTERVENANT_ID NUMERIC,
    WITH_DEPS BOOLEAN DEFAULT FALSE, WITH_SUCS BOOLEAN DEFAULT TRUE  );
    
  PROCEDURE CALCULER_TOUT( PACKAGE_SUJET VARCHAR2, ANNEE_ID NUMERIC DEFAULT NULL, 
    WITH_DEPS BOOLEAN DEFAULT FALSE, WITH_SUCS BOOLEAN DEFAULT TRUE  );
    
  PROCEDURE DEMANDE_CALCUL( PACKAGE_SUJET VARCHAR2, INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_DEMANDES( PACKAGE_SUJET VARCHAR2 DEFAULT NULL );

  PROCEDURE ON_BEFORE_FORMULE_RES_DELETE( INTERVENANT_ID NUMERIC );

END OSE_EVENT;
/
---------------------------
--Nouveau PACKAGE
--OSE_DOSSIER
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_DOSSIER" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_DOSSIER';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

END OSE_DOSSIER;
/
---------------------------
--Modifié PACKAGE
--OSE_DIVERS
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_DIVERS" AS 

  FUNCTION GET_MSG( code VARCHAR2 ) RETURN CLOB;

  FUNCTION INTERVENANT_HAS_PRIVILEGE( intervenant_id NUMERIC, privilege_name VARCHAR2 ) RETURN NUMERIC;

  FUNCTION implode(i_query VARCHAR2, i_seperator VARCHAR2 DEFAULT ',') RETURN VARCHAR2;

  FUNCTION intervenant_est_permanent( INTERVENANT_ID NUMERIC ) RETURN NUMERIC;

  FUNCTION intervenant_est_non_autorise( INTERVENANT_ID NUMERIC ) RETURN NUMERIC;

  FUNCTION intervenant_peut_saisir_serv( INTERVENANT_ID NUMERIC ) RETURN NUMERIC;

  PROCEDURE intervenant_horodatage_service( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, REFERENTIEL NUMERIC, HISTO_MODIFICATEUR_ID NUMERIC, HISTO_MODIFICATION DATE );

  FUNCTION NIVEAU_FORMATION_ID_CALC( gtf_id NUMERIC, gtf_pertinence_niveau NUMERIC, niveau NUMERIC DEFAULT NULL ) RETURN NUMERIC;

  FUNCTION STRUCTURE_DANS_STRUCTURE( structure_testee NUMERIC, structure_cible NUMERIC ) RETURN NUMERIC;

  FUNCTION STR_REDUCE( str CLOB ) RETURN CLOB;
  
  FUNCTION STR_FIND( haystack CLOB, needle VARCHAR2 ) RETURN NUMERIC;
  
  FUNCTION LIKED( haystack CLOB, needle CLOB ) RETURN NUMERIC;

  FUNCTION COMPRISE_ENTRE( date_debut DATE, date_fin DATE, date_obs DATE DEFAULT NULL, inclusif NUMERIC DEFAULT 0 ) RETURN NUMERIC;

  PROCEDURE DO_NOTHING;

  FUNCTION VOLUME_HORAIRE_VALIDE( volume_horaire_id NUMERIC ) RETURN NUMERIC;

  FUNCTION CALCUL_TAUX_FI( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT;
  
  FUNCTION CALCUL_TAUX_FC( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT;
  
  FUNCTION CALCUL_TAUX_FA( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT;

  FUNCTION STRUCTURE_UNIV_GET_ID RETURN NUMERIC;

  FUNCTION ANNEE_UNIVERSITAIRE( date_ref DATE DEFAULT SYSDATE, mois_deb_au NUMERIC DEFAULT 9, jour_deb_au NUMERIC DEFAULT 1 ) RETURN NUMERIC;

  PROCEDURE SYNC_LOG( msg CLOB );

  FUNCTION FORMATTED_RIB (bic VARCHAR2, iban VARCHAR2) RETURN VARCHAR2;
  
  FUNCTION FORMATTED_ADRESSE(
    no_voie                VARCHAR2,
    nom_voie               VARCHAR2,
    batiment               VARCHAR2,
    mention_complementaire VARCHAR2,
    localite               VARCHAR2,
    code_postal            VARCHAR2,
    ville                  VARCHAR2,
    pays_libelle           VARCHAR2)
  RETURN VARCHAR2;
  
  FUNCTION GET_TRIGGER_BODY( TRIGGER_NAME VARCHAR2 ) RETURN VARCHAR2;
  
END OSE_DIVERS;
/
---------------------------
--Nouveau PACKAGE
--OSE_CONTRAT
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_CONTRAT" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_CONTRAT';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

END OSE_CONTRAT;
/
---------------------------
--Nouveau PACKAGE
--OSE_CLOTURE_REALISE
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_CLOTURE_REALISE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_CLOTURE_REALISE';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

END OSE_CLOTURE_REALISE;
/
---------------------------
--Nouveau PACKAGE
--OSE_AGREMENT
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_AGREMENT" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_AGREMENT';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

END OSE_AGREMENT;
/
---------------------------
--Modifié PACKAGE BODY
--UNICAEN_OSE_FORMULE
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."UNICAEN_OSE_FORMULE" AS

  /* Stockage des valeurs intermédiaires */
  TYPE t_valeurs IS TABLE OF FLOAT INDEX BY PLS_INTEGER;
  TYPE t_tableau IS RECORD (
    valeurs t_valeurs,
    total   FLOAT DEFAULT 0
  );  
  TYPE t_tableaux       IS TABLE OF t_tableau INDEX BY PLS_INTEGER;
  t                     t_tableaux;
  current_id            PLS_INTEGER;

  /* Accès au stockage des valeurs intermédiaires */
  -- Initialisation des tableaux de valeurs intermédiaires
  PROCEDURE V_INIT IS
  BEGIN
    t.delete;
  END;

  -- Setter d'une valeur intermédiaire au niveau case
  PROCEDURE SV( tab_index PLS_INTEGER, id PLS_INTEGER, val FLOAT ) IS
  BEGIN
    t(tab_index).valeurs(id) := val;
    t(tab_index).total       := t(tab_index).total + val;
  END;

  -- Setter d'une valeur intermédiaire au niveau tableau
  PROCEDURE SV( tab_index PLS_INTEGER, val FLOAT ) IS
  BEGIN
    t(tab_index).total      := val;
  END;

  -- Getter d'une valeur intermédiaire, au niveau case
  FUNCTION GV( tab_index PLS_INTEGER, id PLS_INTEGER DEFAULT NULL ) RETURN FLOAT IS
  BEGIN
    IF NOT t.exists(tab_index) THEN RETURN 0; END IF;
    IF NOT t(tab_index).valeurs.exists( NVL(id,current_id) ) THEN RETURN 0; END IF;
    RETURN t(tab_index).valeurs( NVL(id,current_id) );
  END;

  -- Getter d'une valeur intermédiaire, au niveau tableau
  FUNCTION GT( tab_index PLS_INTEGER ) RETURN FLOAT IS
  BEGIN 
    IF NOT t.exists(tab_index) THEN RETURN 0; END IF;
    RETURN t(tab_index).total;
  END;


  /* Débogage des valeurs intermédiaires */
  PROCEDURE DEBUG_TAB( tab_index PLS_INTEGER ) IS
    id PLS_INTEGER;
  BEGIN
    ose_test.echo( 'Tableau numéro ' || tab_index );
    
    id := ose_formule.d_service.FIRST;
    LOOP EXIT WHEN id IS NULL;
      dbms_output.put( 'Service id=' || lpad(id,6,' ') || ', data = ' );

      current_id := ose_formule.d_volume_horaire.FIRST;
      LOOP EXIT WHEN current_id IS NULL;
        dbms_output.put( lpad(gv(tab_index),10,' ') || ' | ' );
        current_id := ose_formule.d_volume_horaire.NEXT(current_id);
      END LOOP;
      dbms_output.new_line;
      id := ose_formule.d_service.NEXT(id);
    END LOOP;

    ose_test.echo( 'TOTAL = ' || LPAD(gt(tab_index), 10, ' ') );
  END;



  /* Calcul des valeurs intermédiaires */
  FUNCTION C2_11( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF NVL(s.structure_ens_id,0) = NVL(s.structure_aff_id,0) AND s.taux_fc < 1 THEN
      RETURN vh.heures;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C3_11( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF NVL(s.structure_ens_id,0) = NVL(s.structure_aff_id,0) THEN
      RETURN vh.heures * (s.taux_fi + s.taux_fa);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_12( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF NVL(s.structure_ens_id,0) <> NVL(s.structure_aff_id,0) AND s.taux_fc < 1 THEN
      RETURN vh.heures;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C3_12( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF NVL(s.structure_ens_id,0) <> NVL(s.structure_aff_id,0) THEN
      RETURN vh.heures * (s.taux_fi + s.taux_fa);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_13( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
  
    IF NVL(s.structure_ens_id,0) = NVL(s.structure_aff_id,0) AND s.taux_fc = 1 THEN
      RETURN vh.heures;
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C3_13( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
  
    IF NVL(s.structure_ens_id,0) = NVL(s.structure_aff_id,0) THEN
      RETURN vh.heures * s.taux_fc;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_14( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
  
    IF NVL(s.structure_ens_id,0) <> NVL(s.structure_aff_id,0) AND s.taux_fc = 1 THEN
      RETURN vh.heures;
    ELSE
      RETURN 0;
    END IF;
  END;  

  FUNCTION C3_14( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
  
    IF NVL(s.structure_ens_id,0) <> NVL(s.structure_aff_id,0) THEN
      RETURN vh.heures * s.taux_fc;
    ELSE
      RETURN 0;
    END IF;
  END;  

  FUNCTION C2_15( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
    f ose_formule.t_service_ref;
  BEGIN
    f := ose_formule.d_service_ref( fr.service_referentiel_id );
  
    IF NVL(ose_formule.d_intervenant.structure_id,0) = NVL(f.structure_id,0) THEN
      RETURN fr.heures;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_16( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
    f ose_formule.t_service_ref;
  BEGIN
    f := ose_formule.d_service_ref( fr.service_referentiel_id );
    
    IF NVL(ose_formule.d_intervenant.structure_id,0) <> NVL(f.structure_id,0) AND NVL(f.structure_id,0) <> ose_divers.STRUCTURE_UNIV_GET_ID THEN
      RETURN fr.heures;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_17( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
    f ose_formule.t_service_ref;
  BEGIN
    f := ose_formule.d_service_ref( fr.service_referentiel_id );
    
    IF NVL(f.structure_id,0) = ose_divers.STRUCTURE_UNIV_GET_ID THEN
      RETURN fr.heures;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_21( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(11) * vh.taux_service_du;
  END;

  FUNCTION C2_22( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(12) * vh.taux_service_du;
  END;
  
  FUNCTION C2_23( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(13) * vh.taux_service_du;
  END;
  
  FUNCTION C2_24( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(14) * vh.taux_service_du;
  END;

  FUNCTION C2_25( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN gv(15);
  END;
  
  FUNCTION C2_26( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN gv(16);
  END;
  
  FUNCTION C2_27( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN gv(17);
  END;

  FUNCTION C2_31 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( ose_formule.d_resultat.service_du - gt(21), 0 );
  END;

  FUNCTION C2_32 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( gt(31) - gt(22), 0 );
  END;

  FUNCTION C2_33 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( gt(32) - gt(23), 0 );
  END;

  FUNCTION C2_34 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( gt(33) - gt(24), 0 );
  END;
  
  FUNCTION C2_35 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( gt(34) - gt(25), 0 );
  END;

  FUNCTION C2_36 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( gt(35) - gt(26), 0 );
  END;

  FUNCTION C2_37 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( gt(36) - gt(27), 0 );
  END;

  FUNCTION C2_41( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(21) <> 0 THEN
      RETURN gv(21) / gt(21);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_42( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(22) <> 0 THEN
      RETURN gv(22) / gt(22);
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_43( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(23) <> 0 THEN
      RETURN gv(23) / gt(23);
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_44( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(24) <> 0 THEN
      RETURN gv(24) / gt(24);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_45( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gt(25) <> 0 THEN
      RETURN gv(25) / gt(25);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_46( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gt(26) <> 0 THEN
      RETURN gv(26) / gt(26);
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_47( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gt(27) <> 0 THEN
      RETURN gv(27) / gt(27);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_51( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( ose_formule.d_resultat.service_du, gt(21) ) * gv(41);
  END;

  FUNCTION C2_52( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( gt(31), gt(22) ) * gv(42);
  END;

  FUNCTION C2_53( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( gt(32), gt(23) ) * gv(43);
  END;

  FUNCTION C2_54( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( gt(33), gt(24) ) * gv(44);
  END;

  FUNCTION C2_55( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( gt(34), gt(25) ) * gv(45);
  END;

  FUNCTION C2_56( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( gt(35), gt(26) ) * gv(46);
  END;
  
  FUNCTION C2_57( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( gt(36), gt(27) ) * gv(47);
  END;  

  FUNCTION C2_61( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(51) * s.taux_fi;
  END;

  FUNCTION C3_61( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(51) / (s.taux_fi + s.taux_fa) * s.taux_fi;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_62( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(52) * s.taux_fi;
  END;
  
  FUNCTION C3_62( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(52) / (s.taux_fi + s.taux_fa) * s.taux_fi;
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_71( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(51) * s.taux_fa;
  END;

  FUNCTION C3_71( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(51) / (s.taux_fi + s.taux_fa) * s.taux_fa;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_72( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(52) * s.taux_fa;
  END;
  
  FUNCTION C3_72( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(52) / (s.taux_fi + s.taux_fa) * s.taux_fa;
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_81( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(51) * s.taux_fc;
  END;

  FUNCTION C2_82( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(52) * s.taux_fc;
  END;
  
  FUNCTION C2_83( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(53) * s.taux_fc;
  END;

  FUNCTION C3_83( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(53);
  END;

  FUNCTION C2_84( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(54) * s.taux_fc;
  END;
  
  FUNCTION C3_84( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(54);
  END;
  
  FUNCTION C2_91( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gv(21) <> 0 THEN
      RETURN gv(51) / gv(21);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_92( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gv(22) <> 0 THEN
      RETURN gv(52) / gv(22);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_93( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gv(23) <> 0 THEN
      RETURN gv(53) / gv(23);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_94( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gv(24) <> 0 THEN
      RETURN gv(54) / gv(24);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_95( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gv(25) <> 0 THEN
      RETURN gv(55) / gv(25);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_96( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gv(26) <> 0 THEN
      RETURN gv(56) / gv(26);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_97( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gv(27) <> 0 THEN
      RETURN gv(57) / gv(27);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_101( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(91);
    END IF;
  END;

  FUNCTION C2_102( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(92);
    END IF;
  END;

  FUNCTION C2_103( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(93);
    END IF;
  END;

  FUNCTION C2_104( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(94);
    END IF;
  END;

  FUNCTION C2_105( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(95);
    END IF;
  END;

  FUNCTION C2_106( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(96);
    END IF;
  END;
  
  FUNCTION C2_107( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(97);
    END IF;
  END;
  
  FUNCTION C2_111( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(11) * vh.taux_service_compl * gv(101);
  END;

  FUNCTION C2_112( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(12) * vh.taux_service_compl * gv(102);
  END;

  FUNCTION C2_113( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(13) * vh.taux_service_compl * gv(103);
  END;
  
  FUNCTION C2_114( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(14) * vh.taux_service_compl * gv(104);
  END;

  FUNCTION C2_115( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN gv(15) * gv(105);
  END;

  FUNCTION C2_116( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN gv(16) * gv(106);
  END;

  FUNCTION C2_117( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN gv(17) * gv(107);
  END;

  FUNCTION C2_123( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF s.taux_fc = 1 THEN
      RETURN gv(113) * s.ponderation_service_compl;
    ELSE
      RETURN gv(113);
    END IF;
  END;

  FUNCTION C3_123( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF s.taux_fc > 0 THEN
      RETURN gv(113) * s.ponderation_service_compl;
    ELSE
      RETURN gv(113);
    END IF;
  END;
  
  FUNCTION C2_124( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF s.taux_fc = 1 THEN
      RETURN gv(114) * s.ponderation_service_compl;
    ELSE
      RETURN gv(114);
    END IF;    
  END;

  FUNCTION C3_124( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF s.taux_fc > 0 THEN
      RETURN gv(114) * s.ponderation_service_compl;
    ELSE
      RETURN gv(114);
    END IF;
  END;

  FUNCTION C2_131( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(111) * s.taux_fi;
  END;

  FUNCTION C3_131( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(111) / (s.taux_fi + s.taux_fa) * s.taux_fi;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_132( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(112) * s.taux_fi;
  END;

  FUNCTION C3_132( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(112) / (s.taux_fi + s.taux_fa) * s.taux_fi;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_141( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(111) * s.taux_fa;
  END;

  FUNCTION C3_141( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(111) / (s.taux_fi + s.taux_fa) * s.taux_fa;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_142( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(112) * s.taux_fa;
  END;
  
  FUNCTION C3_142( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(112) / (s.taux_fi + s.taux_fa) * s.taux_fa;
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_151( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(111) * s.taux_fc;
  END;

  FUNCTION C2_152( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(112) * s.taux_fc;
  END;
  
  FUNCTION C2_153( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(123) = gv(113) THEN
      RETURN gv(113) * s.taux_fc;
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C3_153( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(123) = gv(113) THEN
      RETURN gv(113);
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_154( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(124) = gv(114) THEN
      RETURN gv(114) * s.taux_fc;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C3_154( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(124) = gv(114) THEN
      RETURN gv(114);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_163( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(123) <> gv(113) THEN
      RETURN gv(123) * s.taux_fc;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C3_163( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(123) <> gv(113) THEN
      RETURN gv(123);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_164( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(124) <> gv(114) THEN
      RETURN gv(124) * s.taux_fc;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C3_164( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(124) <> gv(114) THEN
      RETURN gv(124);
    ELSE
      RETURN 0;
    END IF;
  END;










  PROCEDURE CALCUL_RESULTAT_V2( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) IS
    current_tableau           PLS_INTEGER;
    id                        PLS_INTEGER;
    val                       FLOAT;
    TYPE t_liste_tableaux   IS VARRAY (100) OF PLS_INTEGER;
    liste_tableaux            t_liste_tableaux;
    resultat_total            FLOAT;
    res                       FLOAT;
    vh                        ose_formule.t_volume_horaire;
    vhr                       ose_formule.t_volume_horaire_ref;
  BEGIN
    V_INIT;

    ose_formule.d_resultat.service_du := CASE
      WHEN ose_formule.d_intervenant.depassement_service_du_sans_hc = 1 -- HC traitées comme du service
        OR ose_formule.d_intervenant.heures_decharge < 0 -- s'il y a une décharge => aucune HC     
        
      THEN 9999 
      ELSE ose_formule.d_intervenant.heures_service_statutaire + ose_formule.d_intervenant.heures_service_modifie
    END;

    liste_tableaux := t_liste_tableaux(
       11,  12,  13,  14,  15,  16,  17,
       21,  22,  23,  24,  25,  26,  27,
       31,  32,  33,  34,  35,  36,  37,
       41,  42,  43,  44,  45,  46,  47,
       51,  52,  53,  54,  55,  56,  57,
       61,  62,
       71,  72,
       81,  82,  83,  84,       
       91,  92,  93,  94,  95,  96,  97,
      101, 102, 103, 104, 105, 106, 107,
      111, 112, 113, 114, 115, 116, 117,
                123, 124,
      131, 132,
      141, 142,
      151, 152, 153, 154,
                163, 164
    );

    FOR i IN liste_tableaux.FIRST .. liste_tableaux.LAST
    LOOP
      current_tableau := liste_tableaux(i);

      IF current_tableau IN ( -- calcul pour les volumes horaires des services
         11,  12,  13,  14,
         21,  22,  23,  24,
         41,  42,  43,  44,
         51,  52,  53,  54,
         61,  62,
         71,  72,
         81,  82,  83,  84,
         91,  92,  93,  94,
        101, 102, 103, 104,
        111, 112, 113, 114,
                  123, 124,
        131, 132,
        141, 142,
        151, 152, 153, 154,
                  163, 164
      ) THEN
      
        current_id := ose_formule.d_volume_horaire.FIRST;
        LOOP EXIT WHEN current_id IS NULL;
          vh := ose_formule.d_volume_horaire(current_id);
          res := CASE current_tableau
            WHEN  11 THEN  C2_11 (vh) WHEN  12 THEN  C2_12 (vh) WHEN  13 THEN  C2_13 (vh) WHEN  14 THEN  C2_14 (vh)
            WHEN  21 THEN  C2_21 (vh) WHEN  22 THEN  C2_22 (vh) WHEN  23 THEN  C2_23 (vh) WHEN  24 THEN  C2_24 (vh)
            WHEN  41 THEN  C2_41 (vh) WHEN  42 THEN  C2_42 (vh) WHEN  43 THEN  C2_43 (vh) WHEN  44 THEN  C2_44 (vh)
            WHEN  51 THEN  C2_51 (vh) WHEN  52 THEN  C2_52 (vh) WHEN  53 THEN  C2_53 (vh) WHEN  54 THEN  C2_54 (vh)
            WHEN  61 THEN  C2_61 (vh) WHEN  62 THEN  C2_62 (vh)
            WHEN  71 THEN  C2_71 (vh) WHEN  72 THEN  C2_72 (vh)
            WHEN  81 THEN  C2_81 (vh) WHEN  82 THEN  C2_82 (vh) WHEN  83 THEN  C2_83 (vh) WHEN  84 THEN  C2_84 (vh)
            WHEN  91 THEN  C2_91 (vh) WHEN  92 THEN  C2_92 (vh) WHEN  93 THEN  C2_93 (vh) WHEN  94 THEN  C2_94 (vh)
            WHEN 101 THEN C2_101 (vh) WHEN 102 THEN C2_102 (vh) WHEN 103 THEN C2_103 (vh) WHEN 104 THEN C2_104 (vh)
            WHEN 111 THEN C2_111 (vh) WHEN 112 THEN C2_112 (vh) WHEN 113 THEN C2_113 (vh) WHEN 114 THEN C2_114 (vh)
                                                              WHEN 123 THEN C2_123 (vh) WHEN 124 THEN C2_124 (vh)
            WHEN 131 THEN C2_131 (vh) WHEN 132 THEN C2_132 (vh)
            WHEN 141 THEN C2_141 (vh) WHEN 142 THEN C2_142 (vh)
            WHEN 151 THEN C2_151 (vh) WHEN 152 THEN C2_152 (vh) WHEN 153 THEN C2_153 (vh) WHEN 154 THEN C2_154 (vh)
                                                              WHEN 163 THEN C2_163 (vh) WHEN 164 THEN C2_164 (vh)
          END;
          SV( current_tableau, current_id, res );
          current_id := ose_formule.d_volume_horaire.NEXT(current_id);
        END LOOP;
      
      ELSIF current_tableau IN ( -- calcul des services restants dus
        31, 32, 33, 34, 35, 36, 37
      ) THEN
      
        res := CASE current_tableau
          WHEN 31 THEN C2_31  WHEN 32 THEN C2_32  WHEN 33 THEN C2_33
          WHEN 34 THEN C2_34  WHEN 35 THEN C2_35  WHEN 36 THEN C2_36
          WHEN 37 THEN C2_37
        END;
        SV( current_tableau, res );
  
      ELSIF current_tableau IN ( -- tableaux de calcul des volumes horaires référentiels
         15,  16,  17,
         25,  26,  27,
         45,  46,  47,
         55,  56,  57,     
         95,  96,  97,
        105, 106, 107,
        115, 116, 117
      ) THEN  

        current_id := ose_formule.d_volume_horaire_ref.FIRST;
        LOOP EXIT WHEN current_id IS NULL;
          vhr := ose_formule.d_volume_horaire_ref(current_id);
          res := CASE current_tableau
            WHEN  15 THEN  C2_15 (vhr)  WHEN  16 THEN  C2_16 (vhr)  WHEN  17 THEN  C2_17 (vhr)
            WHEN  25 THEN  C2_25 (vhr)  WHEN  26 THEN  C2_26 (vhr)  WHEN  27 THEN  C2_27 (vhr)
            WHEN  45 THEN  C2_45 (vhr)  WHEN  46 THEN  C2_46 (vhr)  WHEN  47 THEN  C2_47 (vhr)
            WHEN  55 THEN  C2_55 (vhr)  WHEN  56 THEN  C2_56 (vhr)  WHEN  57 THEN  C2_57 (vhr)
            WHEN  95 THEN  C2_95 (vhr)  WHEN  96 THEN  C2_96 (vhr)  WHEN  97 THEN  C2_97 (vhr)
            WHEN 105 THEN C2_105 (vhr)  WHEN 106 THEN C2_106 (vhr)  WHEN 107 THEN C2_107 (vhr)
            WHEN 115 THEN C2_115 (vhr)  WHEN 116 THEN C2_116 (vhr)  WHEN 117 THEN C2_117 (vhr)
          END;
          SV(current_tableau, current_id, res);
          current_id := ose_formule.d_volume_horaire_ref.NEXT(current_id);
        END LOOP;

      END IF;
    END LOOP;

    resultat_total :=                                         gt( 55) + gt( 56) + gt( 57)
                    + gt( 61) + gt( 62)
                    + gt( 71) + gt( 72)
                    + gt( 81) + gt( 82) + gt( 83) + gt( 84)
                                                            + gt(115) + gt(116) + gt(117)                                       
                    + gt(131) + gt(132)
                    + gt(141) + gt(142)
                    + gt(151) + gt(152) + gt(153) + gt(154)
                                        + gt(163) + gt(164);

    ose_formule.d_resultat.service_du := CASE
      WHEN ose_formule.d_intervenant.depassement_service_du_sans_hc = 1 OR ose_formule.d_intervenant.heures_decharge < 0
      THEN GREATEST(resultat_total, ose_formule.d_intervenant.heures_service_statutaire + ose_formule.d_intervenant.heures_service_modifie)
      ELSE ose_formule.d_intervenant.heures_service_statutaire + ose_formule.d_intervenant.heures_service_modifie
    END;
    ose_formule.d_resultat.solde                    := resultat_total - ose_formule.d_resultat.service_du;
    IF ose_formule.d_resultat.solde >= 0 THEN
      ose_formule.d_resultat.sous_service           := 0;
      ose_formule.d_resultat.heures_compl           := ose_formule.d_resultat.solde;
    ELSE
      ose_formule.d_resultat.sous_service           := ose_formule.d_resultat.solde * -1;
      ose_formule.d_resultat.heures_compl           := 0;
    END IF;

     -- répartition des résultats par volumes horaires
    current_id := ose_formule.d_volume_horaire.FIRST;
    LOOP EXIT WHEN current_id IS NULL;
      ose_formule.d_resultat.volume_horaire(current_id).service_fi               := gv( 61) + gv( 62);
      ose_formule.d_resultat.volume_horaire(current_id).service_fa               := gv( 71) + gv( 72);
      ose_formule.d_resultat.volume_horaire(current_id).service_fc               := gv( 81) + gv( 82) + gv( 83) + gv( 84);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fi          := gv(131) + gv(132);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fa          := gv(141) + gv(142);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fc          := gv(151) + gv(152) + gv(153) + gv(154);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fc_majorees :=                     gv(163) + gv(164);
      current_id := ose_formule.d_volume_horaire.NEXT(current_id); 
    END LOOP;

    -- répartition des résultats par volumes horaires référentiel
    current_id := ose_formule.d_volume_horaire_ref.FIRST;
    LOOP EXIT WHEN current_id IS NULL;
      ose_formule.d_resultat.volume_horaire_ref(current_id).service_referentiel      := gv(55) + gv(56) + gv(57);
      ose_formule.d_resultat.volume_horaire_ref(current_id).heures_compl_referentiel := gv(115) + gv(116) + gv(117);
      current_id := ose_formule.d_volume_horaire_ref.NEXT(current_id); 
    END LOOP;

  END;














  PROCEDURE CALCUL_RESULTAT_V3( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) IS
    current_tableau           PLS_INTEGER;
    id                        PLS_INTEGER;
    val                       FLOAT;
    TYPE t_liste_tableaux   IS VARRAY (100) OF PLS_INTEGER;
    liste_tableaux            t_liste_tableaux;
    resultat_total            FLOAT;
    res                       FLOAT;
    vh                        ose_formule.t_volume_horaire;
    vhr                       ose_formule.t_volume_horaire_ref;
  BEGIN
    
    -- si l'année est antérieure à 2016/2017 alors on utilise la V2!!
    IF ose_formule.d_intervenant.annee_id < 2016 THEN
      CALCUL_RESULTAT_V2( INTERVENANT_ID, TYPE_VOLUME_HORAIRE_ID, ETAT_VOLUME_HORAIRE_ID );
      RETURN;
    END IF;
  
    V_INIT;

    ose_formule.d_resultat.service_du := CASE
      WHEN ose_formule.d_intervenant.depassement_service_du_sans_hc = 1 -- HC traitées comme du service
        OR ose_formule.d_intervenant.heures_decharge < 0 -- s'il y a une décharge => aucune HC     
        
      THEN 9999 
      ELSE ose_formule.d_intervenant.heures_service_statutaire + ose_formule.d_intervenant.heures_service_modifie
    END;

    liste_tableaux := t_liste_tableaux(
       11,  12,  13,  14,  15,  16,  17,
       21,  22,  23,  24,  25,  26,  27,
       31,  32,  33,  34,  35,  36,  37,
       41,  42,  43,  44,  45,  46,  47,
       51,  52,  53,  54,  55,  56,  57,
       61,  62,
       71,  72,
       81,  82,  83,  84,       
       91,  92,  93,  94,  95,  96,  97,
      101, 102, 103, 104, 105, 106, 107,
      111, 112, 113, 114, 115, 116, 117,
                123, 124,
      131, 132,
      141, 142,
      151, 152, 153, 154,
                163, 164
    );

    FOR i IN liste_tableaux.FIRST .. liste_tableaux.LAST
    LOOP
      current_tableau := liste_tableaux(i);

      IF current_tableau IN ( -- calcul pour les volumes horaires des services
         11,  12,  13,  14,
         21,  22,  23,  24,
         41,  42,  43,  44,
         51,  52,  53,  54,
         61,  62,
         71,  72,
         81,  82,  83,  84,
         91,  92,  93,  94,
        101, 102, 103, 104,
        111, 112, 113, 114,
                  123, 124,
        131, 132,
        141, 142,
        151, 152, 153, 154,
                  163, 164
      ) THEN
      
        current_id := ose_formule.d_volume_horaire.FIRST;
        LOOP EXIT WHEN current_id IS NULL;
          vh := ose_formule.d_volume_horaire(current_id);
          res := CASE current_tableau
            WHEN  11 THEN  C3_11 (vh) WHEN  12 THEN  C3_12 (vh) WHEN  13 THEN  C3_13 (vh) WHEN  14 THEN  C3_14 (vh)
            WHEN  21 THEN  C2_21 (vh) WHEN  22 THEN  C2_22 (vh) WHEN  23 THEN  C2_23 (vh) WHEN  24 THEN  C2_24 (vh)
            WHEN  41 THEN  C2_41 (vh) WHEN  42 THEN  C2_42 (vh) WHEN  43 THEN  C2_43 (vh) WHEN  44 THEN  C2_44 (vh)
            WHEN  51 THEN  C2_51 (vh) WHEN  52 THEN  C2_52 (vh) WHEN  53 THEN  C2_53 (vh) WHEN  54 THEN  C2_54 (vh)
            WHEN  61 THEN  C3_61 (vh) WHEN  62 THEN  C3_62 (vh)
            WHEN  71 THEN  C3_71 (vh) WHEN  72 THEN  C3_72 (vh)
                                                                WHEN  83 THEN  C3_83 (vh) WHEN  84 THEN  C3_84 (vh)
            WHEN  91 THEN  C2_91 (vh) WHEN  92 THEN  C2_92 (vh) WHEN  93 THEN  C2_93 (vh) WHEN  94 THEN  C2_94 (vh)
            WHEN 101 THEN C2_101 (vh) WHEN 102 THEN C2_102 (vh) WHEN 103 THEN C2_103 (vh) WHEN 104 THEN C2_104 (vh)
            WHEN 111 THEN C2_111 (vh) WHEN 112 THEN C2_112 (vh) WHEN 113 THEN C2_113 (vh) WHEN 114 THEN C2_114 (vh)
                                                                WHEN 123 THEN C3_123 (vh) WHEN 124 THEN C3_124 (vh)
            WHEN 131 THEN C3_131 (vh) WHEN 132 THEN C3_132 (vh)
            WHEN 141 THEN C3_141 (vh) WHEN 142 THEN C3_142 (vh)
                                                                WHEN 153 THEN C3_153 (vh) WHEN 154 THEN C3_154 (vh)
                                                                WHEN 163 THEN C3_163 (vh) WHEN 164 THEN C3_164 (vh)
          END;
          SV( current_tableau, current_id, res );
          current_id := ose_formule.d_volume_horaire.NEXT(current_id);
        END LOOP;
      
      ELSIF current_tableau IN ( -- calcul des services restants dus
        31, 32, 33, 34, 35, 36, 37
      ) THEN
      
        res := CASE current_tableau
          WHEN 31 THEN C2_31  WHEN 32 THEN C2_32  WHEN 33 THEN C2_33
          WHEN 34 THEN C2_34  WHEN 35 THEN C2_35  WHEN 36 THEN C2_36
          WHEN 37 THEN C2_37
        END;
        SV( current_tableau, res );
  
      ELSIF current_tableau IN ( -- tableaux de calcul des volumes horaires référentiels
         15,  16,  17,
         25,  26,  27,
         45,  46,  47,
         55,  56,  57,     
         95,  96,  97,
        105, 106, 107,
        115, 116, 117
      ) THEN  

        current_id := ose_formule.d_volume_horaire_ref.FIRST;
        LOOP EXIT WHEN current_id IS NULL;
          vhr := ose_formule.d_volume_horaire_ref(current_id);
          res := CASE current_tableau
            WHEN  15 THEN  C2_15 (vhr)  WHEN  16 THEN  C2_16 (vhr)  WHEN  17 THEN  C2_17 (vhr)
            WHEN  25 THEN  C2_25 (vhr)  WHEN  26 THEN  C2_26 (vhr)  WHEN  27 THEN  C2_27 (vhr)
            WHEN  45 THEN  C2_45 (vhr)  WHEN  46 THEN  C2_46 (vhr)  WHEN  47 THEN  C2_47 (vhr)
            WHEN  55 THEN  C2_55 (vhr)  WHEN  56 THEN  C2_56 (vhr)  WHEN  57 THEN  C2_57 (vhr)
            WHEN  95 THEN  C2_95 (vhr)  WHEN  96 THEN  C2_96 (vhr)  WHEN  97 THEN  C2_97 (vhr)
            WHEN 105 THEN C2_105 (vhr)  WHEN 106 THEN C2_106 (vhr)  WHEN 107 THEN C2_107 (vhr)
            WHEN 115 THEN C2_115 (vhr)  WHEN 116 THEN C2_116 (vhr)  WHEN 117 THEN C2_117 (vhr)
          END;
          SV(current_tableau, current_id, res);
          current_id := ose_formule.d_volume_horaire_ref.NEXT(current_id);
        END LOOP;

      END IF;
    END LOOP;

    resultat_total :=                                         gt( 55) + gt( 56) + gt( 57)
                    + gt( 61) + gt( 62)
                    + gt( 71) + gt( 72)
                    + gt( 83) + gt( 84)
                                                            + gt(115) + gt(116) + gt(117)                                       
                    + gt(131) + gt(132)
                    + gt(141) + gt(142)
                    + gt(153) + gt(154)
                                        + gt(163) + gt(164);

    ose_formule.d_resultat.service_du := CASE
      WHEN ose_formule.d_intervenant.depassement_service_du_sans_hc = 1 OR ose_formule.d_intervenant.heures_decharge < 0
      THEN GREATEST(resultat_total, ose_formule.d_intervenant.heures_service_statutaire + ose_formule.d_intervenant.heures_service_modifie)
      ELSE ose_formule.d_intervenant.heures_service_statutaire + ose_formule.d_intervenant.heures_service_modifie
    END;
    ose_formule.d_resultat.solde                    := resultat_total - ose_formule.d_resultat.service_du;
    IF ose_formule.d_resultat.solde >= 0 THEN
      ose_formule.d_resultat.sous_service           := 0;
      ose_formule.d_resultat.heures_compl           := ose_formule.d_resultat.solde;
    ELSE
      ose_formule.d_resultat.sous_service           := ose_formule.d_resultat.solde * -1;
      ose_formule.d_resultat.heures_compl           := 0;
    END IF;

     -- répartition des résultats par volumes horaires
    current_id := ose_formule.d_volume_horaire.FIRST;
    LOOP EXIT WHEN current_id IS NULL;
      ose_formule.d_resultat.volume_horaire(current_id).service_fi               := gv( 61) + gv( 62);
      ose_formule.d_resultat.volume_horaire(current_id).service_fa               := gv( 71) + gv( 72);
      ose_formule.d_resultat.volume_horaire(current_id).service_fc               := gv( 83) + gv( 84);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fi          := gv(131) + gv(132);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fa          := gv(141) + gv(142);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fc          := gv(153) + gv(154);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fc_majorees := gv(163) + gv(164);
      current_id := ose_formule.d_volume_horaire.NEXT(current_id); 
    END LOOP;

    -- répartition des résultats par volumes horaires référentiel
    current_id := ose_formule.d_volume_horaire_ref.FIRST;
    LOOP EXIT WHEN current_id IS NULL;
      ose_formule.d_resultat.volume_horaire_ref(current_id).service_referentiel      := gv(55) + gv(56) + gv(57);
      ose_formule.d_resultat.volume_horaire_ref(current_id).heures_compl_referentiel := gv(115) + gv(116) + gv(117);
      current_id := ose_formule.d_volume_horaire_ref.NEXT(current_id); 
    END LOOP;

  END;















  PROCEDURE PURGE_EM_NON_FC IS
  BEGIN
    FOR em IN (
      SELECT
        em.id
      FROM 
        ELEMENT_MODULATEUR em
        JOIN element_pedagogique ep ON ep.id = em.element_id AND 1 = ose_divers.comprise_entre(ep.histo_creation,ep.histo_destruction)
      WHERE
        1 = ose_divers.comprise_entre(em.histo_creation,em.histo_destruction)
        AND ep.taux_fc < 1
    ) LOOP
      UPDATE
        element_modulateur
      SET
        histo_destruction = SYSDATE,
        histo_destructeur_id = ose_parametre.get_ose_user 
      WHERE
        id = em.id
      ;
    END LOOP;
  END;

END UNICAEN_OSE_FORMULE;
/
---------------------------
--Nouveau PACKAGE BODY
--UNICAEN_IMPORT
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."UNICAEN_IMPORT" AS

  v_current_user INTEGER;
  v_current_annee INTEGER;



  FUNCTION get_current_user RETURN INTEGER IS
  BEGIN
    IF v_current_user IS NULL THEN
      v_current_user := OSE_PARAMETRE.GET_OSE_USER();
    END IF;
    RETURN v_current_user;
  END get_current_user;
 
  PROCEDURE set_current_user (p_current_user INTEGER) is
  BEGIN
    v_current_user := p_current_user;
  END set_current_user;



  FUNCTION get_current_annee RETURN INTEGER IS
  BEGIN
    IF v_current_annee IS NULL THEN
      v_current_annee := OSE_PARAMETRE.GET_ANNEE_IMPORT();
    END IF;
    RETURN v_current_annee;
  END get_current_annee;
 
  PROCEDURE set_current_annee (p_current_annee INTEGER) IS
  BEGIN
    v_current_annee := p_current_annee;
  END set_current_annee;
  


  FUNCTION get_sql_criterion( table_name varchar2, sql_criterion VARCHAR2 ) RETURN CLOB IS
  BEGIN
    IF sql_criterion <> '' OR sql_criterion IS NOT NULL THEN
      RETURN sql_criterion;
    END IF;
    RETURN CASE table_name
      WHEN 'INTERVENANT' THEN -- Met à jour toutes les données sauf le statut, qui sera traité à part
        'WHERE IMPORT_ACTION IN (''delete'',''update'',''undelete'')'
        
      WHEN 'AFFECTATION_RECHERCHE' THEN
        'WHERE INTERVENANT_ID IS NOT NULL'
        
      WHEN 'ADRESSE_INTERVENANT' THEN
        'WHERE INTERVENANT_ID IS NOT NULL'
        
      WHEN 'ELEMENT_TAUX_REGIMES' THEN
        'WHERE IMPORT_ACTION IN (''delete'',''insert'',''undelete'')'

      ELSE
        ''
    END;
  END;



  PROCEDURE SYNC_LOG( message CLOB, table_name VARCHAR2 DEFAULT NULL, source_code VARCHAR2 DEFAULT NULL ) IS
  BEGIN
    INSERT INTO OSE.SYNC_LOG("ID","DATE_SYNC","MESSAGE","TABLE_NAME","SOURCE_CODE") VALUES (SYNC_LOG_ID_SEQ.NEXTVAL, SYSDATE, message,table_name,source_code);
  END SYNC_LOG;



  FUNCTION IN_COLUMN_LIST( VALEUR VARCHAR2, CHAMPS CLOB ) RETURN NUMERIC IS
  BEGIN
    IF REGEXP_LIKE(CHAMPS, '(^|,)[ \t\r\n\v\f]*' || VALEUR || '[ \t\r\n\v\f]*(,|$)') THEN RETURN 1; END IF;
    RETURN 0;
  END;
  

  -- AUTOMATIC GENERATION --

  PROCEDURE MAJ_TYPE_MODULATEUR_EP(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_TYPE_MODULATEUR_EP%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_TYPE_MODULATEUR_EP.* FROM V_DIFF_TYPE_MODULATEUR_EP ' || get_sql_criterion('TYPE_MODULATEUR_EP',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.TYPE_MODULATEUR_EP
              ( id, ELEMENT_PEDAGOGIQUE_ID,TYPE_MODULATEUR_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,TYPE_MODULATEUR_EP_ID_SEQ.NEXTVAL), diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.TYPE_MODULATEUR_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_MODULATEUR_EP SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_MODULATEUR_ID = 1 AND IN_COLUMN_LIST('TYPE_MODULATEUR_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_MODULATEUR_EP SET TYPE_MODULATEUR_ID = diff_row.TYPE_MODULATEUR_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.TYPE_MODULATEUR_EP SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_MODULATEUR_EP SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_MODULATEUR_ID = 1 AND IN_COLUMN_LIST('TYPE_MODULATEUR_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_MODULATEUR_EP SET TYPE_MODULATEUR_ID = diff_row.TYPE_MODULATEUR_ID WHERE ID = diff_row.id; END IF;
            UPDATE OSE.TYPE_MODULATEUR_EP SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'TYPE_MODULATEUR_EP', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_TYPE_MODULATEUR_EP;



  PROCEDURE MAJ_TYPE_INTERVENTION_EP(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_TYPE_INTERVENTION_EP%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_TYPE_INTERVENTION_EP.* FROM V_DIFF_TYPE_INTERVENTION_EP ' || get_sql_criterion('TYPE_INTERVENTION_EP',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.TYPE_INTERVENTION_EP
              ( id, ELEMENT_PEDAGOGIQUE_ID,TYPE_INTERVENTION_ID,VISIBLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,TYPE_INTERVENTION_EP_ID_SEQ.NEXTVAL), diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.TYPE_INTERVENTION_ID,diff_row.VISIBLE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_INTERVENTION_EP SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_INTERVENTION_ID = 1 AND IN_COLUMN_LIST('TYPE_INTERVENTION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_INTERVENTION_EP SET TYPE_INTERVENTION_ID = diff_row.TYPE_INTERVENTION_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VISIBLE = 1 AND IN_COLUMN_LIST('VISIBLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_INTERVENTION_EP SET VISIBLE = diff_row.VISIBLE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.TYPE_INTERVENTION_EP SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_INTERVENTION_EP SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_INTERVENTION_ID = 1 AND IN_COLUMN_LIST('TYPE_INTERVENTION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_INTERVENTION_EP SET TYPE_INTERVENTION_ID = diff_row.TYPE_INTERVENTION_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VISIBLE = 1 AND IN_COLUMN_LIST('VISIBLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_INTERVENTION_EP SET VISIBLE = diff_row.VISIBLE WHERE ID = diff_row.id; END IF;
            UPDATE OSE.TYPE_INTERVENTION_EP SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'TYPE_INTERVENTION_EP', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_TYPE_INTERVENTION_EP;



  PROCEDURE MAJ_TYPE_FORMATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_TYPE_FORMATION%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_TYPE_FORMATION.* FROM V_DIFF_TYPE_FORMATION ' || get_sql_criterion('TYPE_FORMATION',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.TYPE_FORMATION
              ( id, GROUPE_ID,LIBELLE_COURT,LIBELLE_LONG, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,TYPE_FORMATION_ID_SEQ.NEXTVAL), diff_row.GROUPE_ID,diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_GROUPE_ID = 1 AND IN_COLUMN_LIST('GROUPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_FORMATION SET GROUPE_ID = diff_row.GROUPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_FORMATION SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_FORMATION SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.TYPE_FORMATION SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_GROUPE_ID = 1 AND IN_COLUMN_LIST('GROUPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_FORMATION SET GROUPE_ID = diff_row.GROUPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_FORMATION SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_FORMATION SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
            UPDATE OSE.TYPE_FORMATION SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'TYPE_FORMATION', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_TYPE_FORMATION;



  PROCEDURE MAJ_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_STRUCTURE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_STRUCTURE.* FROM V_DIFF_STRUCTURE ' || get_sql_criterion('STRUCTURE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.STRUCTURE
              ( id, ETABLISSEMENT_ID,LIBELLE_COURT,LIBELLE_LONG,NIVEAU,PARENTE_ID,STRUCTURE_NIV2_ID,TYPE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,STRUCTURE_ID_SEQ.NEXTVAL), diff_row.ETABLISSEMENT_ID,diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG,diff_row.NIVEAU,diff_row.PARENTE_ID,diff_row.STRUCTURE_NIV2_ID,diff_row.TYPE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET ETABLISSEMENT_ID = diff_row.ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NIVEAU = 1 AND IN_COLUMN_LIST('NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET NIVEAU = diff_row.NIVEAU WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PARENTE_ID = 1 AND IN_COLUMN_LIST('PARENTE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET PARENTE_ID = diff_row.PARENTE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_NIV2_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_NIV2_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET STRUCTURE_NIV2_ID = diff_row.STRUCTURE_NIV2_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_ID = 1 AND IN_COLUMN_LIST('TYPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET TYPE_ID = diff_row.TYPE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.STRUCTURE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET ETABLISSEMENT_ID = diff_row.ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NIVEAU = 1 AND IN_COLUMN_LIST('NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET NIVEAU = diff_row.NIVEAU WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PARENTE_ID = 1 AND IN_COLUMN_LIST('PARENTE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET PARENTE_ID = diff_row.PARENTE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_NIV2_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_NIV2_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET STRUCTURE_NIV2_ID = diff_row.STRUCTURE_NIV2_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_ID = 1 AND IN_COLUMN_LIST('TYPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET TYPE_ID = diff_row.TYPE_ID WHERE ID = diff_row.id; END IF;
            UPDATE OSE.STRUCTURE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'STRUCTURE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_STRUCTURE;



  PROCEDURE MAJ_PERSONNEL(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_PERSONNEL%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_PERSONNEL.* FROM V_DIFF_PERSONNEL ' || get_sql_criterion('PERSONNEL',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.PERSONNEL
              ( id, CIVILITE_ID,CODE,EMAIL,NOM_PATRONYMIQUE,NOM_USUEL,PRENOM,STRUCTURE_ID,SUPANN_EMP_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,PERSONNEL_ID_SEQ.NEXTVAL), diff_row.CIVILITE_ID,diff_row.CODE,diff_row.EMAIL,diff_row.NOM_PATRONYMIQUE,diff_row.NOM_USUEL,diff_row.PRENOM,diff_row.STRUCTURE_ID,diff_row.SUPANN_EMP_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CIVILITE_ID = 1 AND IN_COLUMN_LIST('CIVILITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET CIVILITE_ID = diff_row.CIVILITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM = 1 AND IN_COLUMN_LIST('PRENOM',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET PRENOM = diff_row.PRENOM WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SUPANN_EMP_ID = 1 AND IN_COLUMN_LIST('SUPANN_EMP_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET SUPANN_EMP_ID = diff_row.SUPANN_EMP_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.PERSONNEL SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CIVILITE_ID = 1 AND IN_COLUMN_LIST('CIVILITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET CIVILITE_ID = diff_row.CIVILITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM = 1 AND IN_COLUMN_LIST('PRENOM',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET PRENOM = diff_row.PRENOM WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SUPANN_EMP_ID = 1 AND IN_COLUMN_LIST('SUPANN_EMP_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET SUPANN_EMP_ID = diff_row.SUPANN_EMP_ID WHERE ID = diff_row.id; END IF;
            UPDATE OSE.PERSONNEL SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'PERSONNEL', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_PERSONNEL;



  PROCEDURE MAJ_PAYS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_PAYS%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_PAYS.* FROM V_DIFF_PAYS ' || get_sql_criterion('PAYS',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.PAYS
              ( id, LIBELLE_COURT,LIBELLE_LONG,TEMOIN_UE,VALIDITE_DEBUT,VALIDITE_FIN, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,PAYS_ID_SEQ.NEXTVAL), diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG,diff_row.TEMOIN_UE,diff_row.VALIDITE_DEBUT,diff_row.VALIDITE_FIN, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PAYS SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PAYS SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEMOIN_UE = 1 AND IN_COLUMN_LIST('TEMOIN_UE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PAYS SET TEMOIN_UE = diff_row.TEMOIN_UE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PAYS SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PAYS SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.PAYS SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PAYS SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PAYS SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEMOIN_UE = 1 AND IN_COLUMN_LIST('TEMOIN_UE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PAYS SET TEMOIN_UE = diff_row.TEMOIN_UE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PAYS SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PAYS SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;
            UPDATE OSE.PAYS SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'PAYS', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_PAYS;



  PROCEDURE MAJ_INTERVENANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_INTERVENANT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_INTERVENANT.* FROM V_DIFF_INTERVENANT ' || get_sql_criterion('INTERVENANT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.INTERVENANT
              ( id, ANNEE_ID,BIC,CIVILITE_ID,CODE,CRITERE_RECHERCHE,DATE_NAISSANCE,DEP_NAISSANCE_CODE_INSEE,DEP_NAISSANCE_LIBELLE,DISCIPLINE_ID,EMAIL,GRADE_ID,IBAN,NOM_PATRONYMIQUE,NOM_USUEL,NUMERO_INSEE,NUMERO_INSEE_CLE,NUMERO_INSEE_PROVISOIRE,PAYS_NAISSANCE_CODE_INSEE,PAYS_NAISSANCE_LIBELLE,PAYS_NATIONALITE_CODE_INSEE,PAYS_NATIONALITE_LIBELLE,PRENOM,STATUT_ID,STRUCTURE_ID,SUPANN_EMP_ID,TEL_MOBILE,TEL_PRO,VILLE_NAISSANCE_CODE_INSEE,VILLE_NAISSANCE_LIBELLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,INTERVENANT_ID_SEQ.NEXTVAL), diff_row.ANNEE_ID,diff_row.BIC,diff_row.CIVILITE_ID,diff_row.CODE,diff_row.CRITERE_RECHERCHE,diff_row.DATE_NAISSANCE,diff_row.DEP_NAISSANCE_CODE_INSEE,diff_row.DEP_NAISSANCE_LIBELLE,diff_row.DISCIPLINE_ID,diff_row.EMAIL,diff_row.GRADE_ID,diff_row.IBAN,diff_row.NOM_PATRONYMIQUE,diff_row.NOM_USUEL,diff_row.NUMERO_INSEE,diff_row.NUMERO_INSEE_CLE,diff_row.NUMERO_INSEE_PROVISOIRE,diff_row.PAYS_NAISSANCE_CODE_INSEE,diff_row.PAYS_NAISSANCE_LIBELLE,diff_row.PAYS_NATIONALITE_CODE_INSEE,diff_row.PAYS_NATIONALITE_LIBELLE,diff_row.PRENOM,diff_row.STATUT_ID,diff_row.STRUCTURE_ID,diff_row.SUPANN_EMP_ID,diff_row.TEL_MOBILE,diff_row.TEL_PRO,diff_row.VILLE_NAISSANCE_CODE_INSEE,diff_row.VILLE_NAISSANCE_LIBELLE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_BIC = 1 AND IN_COLUMN_LIST('BIC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET BIC = diff_row.BIC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CIVILITE_ID = 1 AND IN_COLUMN_LIST('CIVILITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET CIVILITE_ID = diff_row.CIVILITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CRITERE_RECHERCHE = 1 AND IN_COLUMN_LIST('CRITERE_RECHERCHE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET CRITERE_RECHERCHE = diff_row.CRITERE_RECHERCHE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_NAISSANCE = 1 AND IN_COLUMN_LIST('DATE_NAISSANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DATE_NAISSANCE = diff_row.DATE_NAISSANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DEP_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('DEP_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DEP_NAISSANCE_CODE_INSEE = diff_row.DEP_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DEP_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('DEP_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DEP_NAISSANCE_LIBELLE = diff_row.DEP_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DISCIPLINE_ID = 1 AND IN_COLUMN_LIST('DISCIPLINE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DISCIPLINE_ID = diff_row.DISCIPLINE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_GRADE_ID = 1 AND IN_COLUMN_LIST('GRADE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET GRADE_ID = diff_row.GRADE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_IBAN = 1 AND IN_COLUMN_LIST('IBAN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET IBAN = diff_row.IBAN WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NUMERO_INSEE = diff_row.NUMERO_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE_CLE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE_CLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NUMERO_INSEE_CLE = diff_row.NUMERO_INSEE_CLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE_PROVISOIRE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE_PROVISOIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NUMERO_INSEE_PROVISOIRE = diff_row.NUMERO_INSEE_PROVISOIRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NAISSANCE_CODE_INSEE = diff_row.PAYS_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NAISSANCE_LIBELLE = diff_row.PAYS_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NATIONALITE_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_NATIONALITE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NATIONALITE_CODE_INSEE = diff_row.PAYS_NATIONALITE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NATIONALITE_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_NATIONALITE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NATIONALITE_LIBELLE = diff_row.PAYS_NATIONALITE_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM = 1 AND IN_COLUMN_LIST('PRENOM',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PRENOM = diff_row.PRENOM WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STATUT_ID = 1 AND IN_COLUMN_LIST('STATUT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET STATUT_ID = diff_row.STATUT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SUPANN_EMP_ID = 1 AND IN_COLUMN_LIST('SUPANN_EMP_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET SUPANN_EMP_ID = diff_row.SUPANN_EMP_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_MOBILE = 1 AND IN_COLUMN_LIST('TEL_MOBILE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET TEL_MOBILE = diff_row.TEL_MOBILE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_PRO = 1 AND IN_COLUMN_LIST('TEL_PRO',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET TEL_PRO = diff_row.TEL_PRO WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('VILLE_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET VILLE_NAISSANCE_CODE_INSEE = diff_row.VILLE_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('VILLE_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET VILLE_NAISSANCE_LIBELLE = diff_row.VILLE_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.INTERVENANT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_BIC = 1 AND IN_COLUMN_LIST('BIC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET BIC = diff_row.BIC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CIVILITE_ID = 1 AND IN_COLUMN_LIST('CIVILITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET CIVILITE_ID = diff_row.CIVILITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CRITERE_RECHERCHE = 1 AND IN_COLUMN_LIST('CRITERE_RECHERCHE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET CRITERE_RECHERCHE = diff_row.CRITERE_RECHERCHE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_NAISSANCE = 1 AND IN_COLUMN_LIST('DATE_NAISSANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DATE_NAISSANCE = diff_row.DATE_NAISSANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DEP_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('DEP_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DEP_NAISSANCE_CODE_INSEE = diff_row.DEP_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DEP_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('DEP_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DEP_NAISSANCE_LIBELLE = diff_row.DEP_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DISCIPLINE_ID = 1 AND IN_COLUMN_LIST('DISCIPLINE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DISCIPLINE_ID = diff_row.DISCIPLINE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_GRADE_ID = 1 AND IN_COLUMN_LIST('GRADE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET GRADE_ID = diff_row.GRADE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_IBAN = 1 AND IN_COLUMN_LIST('IBAN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET IBAN = diff_row.IBAN WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NUMERO_INSEE = diff_row.NUMERO_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE_CLE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE_CLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NUMERO_INSEE_CLE = diff_row.NUMERO_INSEE_CLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE_PROVISOIRE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE_PROVISOIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NUMERO_INSEE_PROVISOIRE = diff_row.NUMERO_INSEE_PROVISOIRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NAISSANCE_CODE_INSEE = diff_row.PAYS_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NAISSANCE_LIBELLE = diff_row.PAYS_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NATIONALITE_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_NATIONALITE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NATIONALITE_CODE_INSEE = diff_row.PAYS_NATIONALITE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NATIONALITE_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_NATIONALITE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NATIONALITE_LIBELLE = diff_row.PAYS_NATIONALITE_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM = 1 AND IN_COLUMN_LIST('PRENOM',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PRENOM = diff_row.PRENOM WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STATUT_ID = 1 AND IN_COLUMN_LIST('STATUT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET STATUT_ID = diff_row.STATUT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SUPANN_EMP_ID = 1 AND IN_COLUMN_LIST('SUPANN_EMP_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET SUPANN_EMP_ID = diff_row.SUPANN_EMP_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_MOBILE = 1 AND IN_COLUMN_LIST('TEL_MOBILE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET TEL_MOBILE = diff_row.TEL_MOBILE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_PRO = 1 AND IN_COLUMN_LIST('TEL_PRO',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET TEL_PRO = diff_row.TEL_PRO WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('VILLE_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET VILLE_NAISSANCE_CODE_INSEE = diff_row.VILLE_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('VILLE_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET VILLE_NAISSANCE_LIBELLE = diff_row.VILLE_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;
            UPDATE OSE.INTERVENANT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'INTERVENANT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_INTERVENANT;



  PROCEDURE MAJ_GROUPE_TYPE_FORMATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_GROUPE_TYPE_FORMATION%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_GROUPE_TYPE_FORMATION.* FROM V_DIFF_GROUPE_TYPE_FORMATION ' || get_sql_criterion('GROUPE_TYPE_FORMATION',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.GROUPE_TYPE_FORMATION
              ( id, LIBELLE_COURT,LIBELLE_LONG,ORDRE,PERTINENCE_NIVEAU, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,GROUPE_TYPE_FORMATION_ID_SEQ.NEXTVAL), diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG,diff_row.ORDRE,diff_row.PERTINENCE_NIVEAU, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PERTINENCE_NIVEAU = 1 AND IN_COLUMN_LIST('PERTINENCE_NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET PERTINENCE_NIVEAU = diff_row.PERTINENCE_NIVEAU WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.GROUPE_TYPE_FORMATION SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PERTINENCE_NIVEAU = 1 AND IN_COLUMN_LIST('PERTINENCE_NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET PERTINENCE_NIVEAU = diff_row.PERTINENCE_NIVEAU WHERE ID = diff_row.id; END IF;
            UPDATE OSE.GROUPE_TYPE_FORMATION SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'GROUPE_TYPE_FORMATION', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_GROUPE_TYPE_FORMATION;



  PROCEDURE MAJ_GRADE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_GRADE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_GRADE.* FROM V_DIFF_GRADE ' || get_sql_criterion('GRADE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.GRADE
              ( id, CORPS_ID,ECHELLE,LIBELLE_COURT,LIBELLE_LONG, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,GRADE_ID_SEQ.NEXTVAL), diff_row.CORPS_ID,diff_row.ECHELLE,diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CORPS_ID = 1 AND IN_COLUMN_LIST('CORPS_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GRADE SET CORPS_ID = diff_row.CORPS_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ECHELLE = 1 AND IN_COLUMN_LIST('ECHELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GRADE SET ECHELLE = diff_row.ECHELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GRADE SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GRADE SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.GRADE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CORPS_ID = 1 AND IN_COLUMN_LIST('CORPS_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GRADE SET CORPS_ID = diff_row.CORPS_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ECHELLE = 1 AND IN_COLUMN_LIST('ECHELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GRADE SET ECHELLE = diff_row.ECHELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GRADE SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GRADE SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
            UPDATE OSE.GRADE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'GRADE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_GRADE;



  PROCEDURE MAJ_ETAPE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ETAPE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ETAPE.* FROM V_DIFF_ETAPE ' || get_sql_criterion('ETAPE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.ETAPE
              ( id, DOMAINE_FONCTIONNEL_ID,LIBELLE,NIVEAU,SPECIFIQUE_ECHANGES,STRUCTURE_ID,TYPE_FORMATION_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ETAPE_ID_SEQ.NEXTVAL), diff_row.DOMAINE_FONCTIONNEL_ID,diff_row.LIBELLE,diff_row.NIVEAU,diff_row.SPECIFIQUE_ECHANGES,diff_row.STRUCTURE_ID,diff_row.TYPE_FORMATION_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_DOMAINE_FONCTIONNEL_ID = 1 AND IN_COLUMN_LIST('DOMAINE_FONCTIONNEL_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET DOMAINE_FONCTIONNEL_ID = diff_row.DOMAINE_FONCTIONNEL_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NIVEAU = 1 AND IN_COLUMN_LIST('NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET NIVEAU = diff_row.NIVEAU WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SPECIFIQUE_ECHANGES = 1 AND IN_COLUMN_LIST('SPECIFIQUE_ECHANGES',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET SPECIFIQUE_ECHANGES = diff_row.SPECIFIQUE_ECHANGES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_FORMATION_ID = 1 AND IN_COLUMN_LIST('TYPE_FORMATION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET TYPE_FORMATION_ID = diff_row.TYPE_FORMATION_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.ETAPE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_DOMAINE_FONCTIONNEL_ID = 1 AND IN_COLUMN_LIST('DOMAINE_FONCTIONNEL_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET DOMAINE_FONCTIONNEL_ID = diff_row.DOMAINE_FONCTIONNEL_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NIVEAU = 1 AND IN_COLUMN_LIST('NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET NIVEAU = diff_row.NIVEAU WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SPECIFIQUE_ECHANGES = 1 AND IN_COLUMN_LIST('SPECIFIQUE_ECHANGES',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET SPECIFIQUE_ECHANGES = diff_row.SPECIFIQUE_ECHANGES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_FORMATION_ID = 1 AND IN_COLUMN_LIST('TYPE_FORMATION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET TYPE_FORMATION_ID = diff_row.TYPE_FORMATION_ID WHERE ID = diff_row.id; END IF;
            UPDATE OSE.ETAPE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ETAPE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ETAPE;



  PROCEDURE MAJ_ETABLISSEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ETABLISSEMENT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ETABLISSEMENT.* FROM V_DIFF_ETABLISSEMENT ' || get_sql_criterion('ETABLISSEMENT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.ETABLISSEMENT
              ( id, DEPARTEMENT,LIBELLE,LOCALISATION, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ETABLISSEMENT_ID_SEQ.NEXTVAL), diff_row.DEPARTEMENT,diff_row.LIBELLE,diff_row.LOCALISATION, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_DEPARTEMENT = 1 AND IN_COLUMN_LIST('DEPARTEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETABLISSEMENT SET DEPARTEMENT = diff_row.DEPARTEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETABLISSEMENT SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALISATION = 1 AND IN_COLUMN_LIST('LOCALISATION',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETABLISSEMENT SET LOCALISATION = diff_row.LOCALISATION WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.ETABLISSEMENT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_DEPARTEMENT = 1 AND IN_COLUMN_LIST('DEPARTEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETABLISSEMENT SET DEPARTEMENT = diff_row.DEPARTEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETABLISSEMENT SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALISATION = 1 AND IN_COLUMN_LIST('LOCALISATION',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETABLISSEMENT SET LOCALISATION = diff_row.LOCALISATION WHERE ID = diff_row.id; END IF;
            UPDATE OSE.ETABLISSEMENT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ETABLISSEMENT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ETABLISSEMENT;



  PROCEDURE MAJ_ELEMENT_TAUX_REGIMES(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ELEMENT_TAUX_REGIMES%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ELEMENT_TAUX_REGIMES.* FROM V_DIFF_ELEMENT_TAUX_REGIMES ' || get_sql_criterion('ELEMENT_TAUX_REGIMES',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.ELEMENT_TAUX_REGIMES
              ( id, ELEMENT_PEDAGOGIQUE_ID,TAUX_FA,TAUX_FC,TAUX_FI, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ELEMENT_TAUX_REGIMES_ID_SEQ.NEXTVAL), diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.TAUX_FA,diff_row.TAUX_FC,diff_row.TAUX_FI, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FA = 1 AND IN_COLUMN_LIST('TAUX_FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET TAUX_FA = diff_row.TAUX_FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FC = 1 AND IN_COLUMN_LIST('TAUX_FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET TAUX_FC = diff_row.TAUX_FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FI = 1 AND IN_COLUMN_LIST('TAUX_FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET TAUX_FI = diff_row.TAUX_FI WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.ELEMENT_TAUX_REGIMES SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FA = 1 AND IN_COLUMN_LIST('TAUX_FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET TAUX_FA = diff_row.TAUX_FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FC = 1 AND IN_COLUMN_LIST('TAUX_FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET TAUX_FC = diff_row.TAUX_FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FI = 1 AND IN_COLUMN_LIST('TAUX_FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET TAUX_FI = diff_row.TAUX_FI WHERE ID = diff_row.id; END IF;
            UPDATE OSE.ELEMENT_TAUX_REGIMES SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ELEMENT_TAUX_REGIMES', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ELEMENT_TAUX_REGIMES;



  PROCEDURE MAJ_ELEMENT_PEDAGOGIQUE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ELEMENT_PEDAGOGIQUE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ELEMENT_PEDAGOGIQUE.* FROM V_DIFF_ELEMENT_PEDAGOGIQUE ' || get_sql_criterion('ELEMENT_PEDAGOGIQUE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.ELEMENT_PEDAGOGIQUE
              ( id, ANNEE_ID,DISCIPLINE_ID,ETAPE_ID,FA,FC,FI,LIBELLE,PERIODE_ID,STRUCTURE_ID,TAUX_FA,TAUX_FC,TAUX_FI,TAUX_FOAD, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ELEMENT_PEDAGOGIQUE_ID_SEQ.NEXTVAL), diff_row.ANNEE_ID,diff_row.DISCIPLINE_ID,diff_row.ETAPE_ID,diff_row.FA,diff_row.FC,diff_row.FI,diff_row.LIBELLE,diff_row.PERIODE_ID,diff_row.STRUCTURE_ID,diff_row.TAUX_FA,diff_row.TAUX_FC,diff_row.TAUX_FI,diff_row.TAUX_FOAD, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DISCIPLINE_ID = 1 AND IN_COLUMN_LIST('DISCIPLINE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET DISCIPLINE_ID = diff_row.DISCIPLINE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FA = 1 AND IN_COLUMN_LIST('FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET FA = diff_row.FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FC = 1 AND IN_COLUMN_LIST('FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET FC = diff_row.FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FI = 1 AND IN_COLUMN_LIST('FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET FI = diff_row.FI WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PERIODE_ID = 1 AND IN_COLUMN_LIST('PERIODE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET PERIODE_ID = diff_row.PERIODE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FA = 1 AND IN_COLUMN_LIST('TAUX_FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FA = diff_row.TAUX_FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FC = 1 AND IN_COLUMN_LIST('TAUX_FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FC = diff_row.TAUX_FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FI = 1 AND IN_COLUMN_LIST('TAUX_FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FI = diff_row.TAUX_FI WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FOAD = 1 AND IN_COLUMN_LIST('TAUX_FOAD',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FOAD = diff_row.TAUX_FOAD WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.ELEMENT_PEDAGOGIQUE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DISCIPLINE_ID = 1 AND IN_COLUMN_LIST('DISCIPLINE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET DISCIPLINE_ID = diff_row.DISCIPLINE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FA = 1 AND IN_COLUMN_LIST('FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET FA = diff_row.FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FC = 1 AND IN_COLUMN_LIST('FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET FC = diff_row.FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FI = 1 AND IN_COLUMN_LIST('FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET FI = diff_row.FI WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PERIODE_ID = 1 AND IN_COLUMN_LIST('PERIODE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET PERIODE_ID = diff_row.PERIODE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FA = 1 AND IN_COLUMN_LIST('TAUX_FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FA = diff_row.TAUX_FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FC = 1 AND IN_COLUMN_LIST('TAUX_FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FC = diff_row.TAUX_FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FI = 1 AND IN_COLUMN_LIST('TAUX_FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FI = diff_row.TAUX_FI WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FOAD = 1 AND IN_COLUMN_LIST('TAUX_FOAD',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FOAD = diff_row.TAUX_FOAD WHERE ID = diff_row.id; END IF;
            UPDATE OSE.ELEMENT_PEDAGOGIQUE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ELEMENT_PEDAGOGIQUE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ELEMENT_PEDAGOGIQUE;



  PROCEDURE MAJ_EFFECTIFS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_EFFECTIFS%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_EFFECTIFS.* FROM V_DIFF_EFFECTIFS ' || get_sql_criterion('EFFECTIFS',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.EFFECTIFS
              ( id, ANNEE_ID,ELEMENT_PEDAGOGIQUE_ID,FA,FC,FI, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,EFFECTIFS_ID_SEQ.NEXTVAL), diff_row.ANNEE_ID,diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.FA,diff_row.FC,diff_row.FI, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FA = 1 AND IN_COLUMN_LIST('FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET FA = diff_row.FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FC = 1 AND IN_COLUMN_LIST('FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET FC = diff_row.FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FI = 1 AND IN_COLUMN_LIST('FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET FI = diff_row.FI WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.EFFECTIFS SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FA = 1 AND IN_COLUMN_LIST('FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET FA = diff_row.FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FC = 1 AND IN_COLUMN_LIST('FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET FC = diff_row.FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FI = 1 AND IN_COLUMN_LIST('FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET FI = diff_row.FI WHERE ID = diff_row.id; END IF;
            UPDATE OSE.EFFECTIFS SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'EFFECTIFS', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_EFFECTIFS;



  PROCEDURE MAJ_DOMAINE_FONCTIONNEL(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_DOMAINE_FONCTIONNEL%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_DOMAINE_FONCTIONNEL.* FROM V_DIFF_DOMAINE_FONCTIONNEL ' || get_sql_criterion('DOMAINE_FONCTIONNEL',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.DOMAINE_FONCTIONNEL
              ( id, LIBELLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,DOMAINE_FONCTIONNEL_ID_SEQ.NEXTVAL), diff_row.LIBELLE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.DOMAINE_FONCTIONNEL SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.DOMAINE_FONCTIONNEL SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.DOMAINE_FONCTIONNEL SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
            UPDATE OSE.DOMAINE_FONCTIONNEL SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'DOMAINE_FONCTIONNEL', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_DOMAINE_FONCTIONNEL;



  PROCEDURE MAJ_DEPARTEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_DEPARTEMENT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_DEPARTEMENT.* FROM V_DIFF_DEPARTEMENT ' || get_sql_criterion('DEPARTEMENT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.DEPARTEMENT
              ( id, LIBELLE_COURT,LIBELLE_LONG, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,DEPARTEMENT_ID_SEQ.NEXTVAL), diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.DEPARTEMENT SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.DEPARTEMENT SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.DEPARTEMENT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.DEPARTEMENT SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.DEPARTEMENT SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
            UPDATE OSE.DEPARTEMENT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'DEPARTEMENT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_DEPARTEMENT;



  PROCEDURE MAJ_CORPS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_CORPS%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_CORPS.* FROM V_DIFF_CORPS ' || get_sql_criterion('CORPS',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.CORPS
              ( id, LIBELLE_COURT,LIBELLE_LONG, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,CORPS_ID_SEQ.NEXTVAL), diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CORPS SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CORPS SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.CORPS SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CORPS SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CORPS SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
            UPDATE OSE.CORPS SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'CORPS', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_CORPS;



  PROCEDURE MAJ_CHEMIN_PEDAGOGIQUE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_CHEMIN_PEDAGOGIQUE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_CHEMIN_PEDAGOGIQUE.* FROM V_DIFF_CHEMIN_PEDAGOGIQUE ' || get_sql_criterion('CHEMIN_PEDAGOGIQUE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.CHEMIN_PEDAGOGIQUE
              ( id, ELEMENT_PEDAGOGIQUE_ID,ETAPE_ID,ORDRE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,CHEMIN_PEDAGOGIQUE_ID_SEQ.NEXTVAL), diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.ETAPE_ID,diff_row.ORDRE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.CHEMIN_PEDAGOGIQUE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;
            UPDATE OSE.CHEMIN_PEDAGOGIQUE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'CHEMIN_PEDAGOGIQUE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_CHEMIN_PEDAGOGIQUE;



  PROCEDURE MAJ_CENTRE_COUT_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_CENTRE_COUT_STRUCTURE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_CENTRE_COUT_STRUCTURE.* FROM V_DIFF_CENTRE_COUT_STRUCTURE ' || get_sql_criterion('CENTRE_COUT_STRUCTURE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.CENTRE_COUT_STRUCTURE
              ( id, CENTRE_COUT_ID,STRUCTURE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,CENTRE_COUT_STRUCTURE_ID_SEQ.NEXTVAL), diff_row.CENTRE_COUT_ID,diff_row.STRUCTURE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CENTRE_COUT_ID = 1 AND IN_COLUMN_LIST('CENTRE_COUT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT_STRUCTURE SET CENTRE_COUT_ID = diff_row.CENTRE_COUT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT_STRUCTURE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.CENTRE_COUT_STRUCTURE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CENTRE_COUT_ID = 1 AND IN_COLUMN_LIST('CENTRE_COUT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT_STRUCTURE SET CENTRE_COUT_ID = diff_row.CENTRE_COUT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT_STRUCTURE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
            UPDATE OSE.CENTRE_COUT_STRUCTURE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'CENTRE_COUT_STRUCTURE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_CENTRE_COUT_STRUCTURE;



  PROCEDURE MAJ_CENTRE_COUT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_CENTRE_COUT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_CENTRE_COUT.* FROM V_DIFF_CENTRE_COUT ' || get_sql_criterion('CENTRE_COUT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.CENTRE_COUT
              ( id, ACTIVITE_ID,LIBELLE,PARENT_ID,TYPE_RESSOURCE_ID,UNITE_BUDGETAIRE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,CENTRE_COUT_ID_SEQ.NEXTVAL), diff_row.ACTIVITE_ID,diff_row.LIBELLE,diff_row.PARENT_ID,diff_row.TYPE_RESSOURCE_ID,diff_row.UNITE_BUDGETAIRE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ACTIVITE_ID = 1 AND IN_COLUMN_LIST('ACTIVITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT SET ACTIVITE_ID = diff_row.ACTIVITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PARENT_ID = 1 AND IN_COLUMN_LIST('PARENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT SET PARENT_ID = diff_row.PARENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_RESSOURCE_ID = 1 AND IN_COLUMN_LIST('TYPE_RESSOURCE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT SET TYPE_RESSOURCE_ID = diff_row.TYPE_RESSOURCE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_UNITE_BUDGETAIRE = 1 AND IN_COLUMN_LIST('UNITE_BUDGETAIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT SET UNITE_BUDGETAIRE = diff_row.UNITE_BUDGETAIRE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.CENTRE_COUT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ACTIVITE_ID = 1 AND IN_COLUMN_LIST('ACTIVITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT SET ACTIVITE_ID = diff_row.ACTIVITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PARENT_ID = 1 AND IN_COLUMN_LIST('PARENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT SET PARENT_ID = diff_row.PARENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_RESSOURCE_ID = 1 AND IN_COLUMN_LIST('TYPE_RESSOURCE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT SET TYPE_RESSOURCE_ID = diff_row.TYPE_RESSOURCE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_UNITE_BUDGETAIRE = 1 AND IN_COLUMN_LIST('UNITE_BUDGETAIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CENTRE_COUT SET UNITE_BUDGETAIRE = diff_row.UNITE_BUDGETAIRE WHERE ID = diff_row.id; END IF;
            UPDATE OSE.CENTRE_COUT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'CENTRE_COUT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_CENTRE_COUT;



  PROCEDURE MAJ_AFFECTATION_RECHERCHE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_AFFECTATION_RECHERCHE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_AFFECTATION_RECHERCHE.* FROM V_DIFF_AFFECTATION_RECHERCHE ' || get_sql_criterion('AFFECTATION_RECHERCHE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.AFFECTATION_RECHERCHE
              ( id, INTERVENANT_ID,STRUCTURE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,AFFECTATION_RECHERCHE_ID_SEQ.NEXTVAL), diff_row.INTERVENANT_ID,diff_row.STRUCTURE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_INTERVENANT_ID = 1 AND IN_COLUMN_LIST('INTERVENANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION_RECHERCHE SET INTERVENANT_ID = diff_row.INTERVENANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION_RECHERCHE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.AFFECTATION_RECHERCHE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_INTERVENANT_ID = 1 AND IN_COLUMN_LIST('INTERVENANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION_RECHERCHE SET INTERVENANT_ID = diff_row.INTERVENANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION_RECHERCHE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
            UPDATE OSE.AFFECTATION_RECHERCHE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'AFFECTATION_RECHERCHE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_AFFECTATION_RECHERCHE;



  PROCEDURE MAJ_AFFECTATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_AFFECTATION%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_AFFECTATION.* FROM V_DIFF_AFFECTATION ' || get_sql_criterion('AFFECTATION',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.AFFECTATION
              ( id, PERSONNEL_ID,ROLE_ID,STRUCTURE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,AFFECTATION_ID_SEQ.NEXTVAL), diff_row.PERSONNEL_ID,diff_row.ROLE_ID,diff_row.STRUCTURE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_PERSONNEL_ID = 1 AND IN_COLUMN_LIST('PERSONNEL_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION SET PERSONNEL_ID = diff_row.PERSONNEL_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ROLE_ID = 1 AND IN_COLUMN_LIST('ROLE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION SET ROLE_ID = diff_row.ROLE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.AFFECTATION SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_PERSONNEL_ID = 1 AND IN_COLUMN_LIST('PERSONNEL_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION SET PERSONNEL_ID = diff_row.PERSONNEL_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ROLE_ID = 1 AND IN_COLUMN_LIST('ROLE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION SET ROLE_ID = diff_row.ROLE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
            UPDATE OSE.AFFECTATION SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'AFFECTATION', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_AFFECTATION;



  PROCEDURE MAJ_ADRESSE_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ADRESSE_STRUCTURE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ADRESSE_STRUCTURE.* FROM V_DIFF_ADRESSE_STRUCTURE ' || get_sql_criterion('ADRESSE_STRUCTURE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.ADRESSE_STRUCTURE
              ( id, CODE_POSTAL,LOCALITE,NOM_VOIE,NO_VOIE,PAYS_CODE_INSEE,PAYS_LIBELLE,PRINCIPALE,STRUCTURE_ID,TELEPHONE,VILLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ADRESSE_STRUCTURE_ID_SEQ.NEXTVAL), diff_row.CODE_POSTAL,diff_row.LOCALITE,diff_row.NOM_VOIE,diff_row.NO_VOIE,diff_row.PAYS_CODE_INSEE,diff_row.PAYS_LIBELLE,diff_row.PRINCIPALE,diff_row.STRUCTURE_ID,diff_row.TELEPHONE,diff_row.VILLE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CODE_POSTAL = 1 AND IN_COLUMN_LIST('CODE_POSTAL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET CODE_POSTAL = diff_row.CODE_POSTAL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALITE = 1 AND IN_COLUMN_LIST('LOCALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET LOCALITE = diff_row.LOCALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_VOIE = 1 AND IN_COLUMN_LIST('NOM_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET NOM_VOIE = diff_row.NOM_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NO_VOIE = 1 AND IN_COLUMN_LIST('NO_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET NO_VOIE = diff_row.NO_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET PAYS_CODE_INSEE = diff_row.PAYS_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET PAYS_LIBELLE = diff_row.PAYS_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRINCIPALE = 1 AND IN_COLUMN_LIST('PRINCIPALE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET PRINCIPALE = diff_row.PRINCIPALE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TELEPHONE = 1 AND IN_COLUMN_LIST('TELEPHONE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET TELEPHONE = diff_row.TELEPHONE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE = 1 AND IN_COLUMN_LIST('VILLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET VILLE = diff_row.VILLE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.ADRESSE_STRUCTURE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CODE_POSTAL = 1 AND IN_COLUMN_LIST('CODE_POSTAL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET CODE_POSTAL = diff_row.CODE_POSTAL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALITE = 1 AND IN_COLUMN_LIST('LOCALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET LOCALITE = diff_row.LOCALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_VOIE = 1 AND IN_COLUMN_LIST('NOM_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET NOM_VOIE = diff_row.NOM_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NO_VOIE = 1 AND IN_COLUMN_LIST('NO_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET NO_VOIE = diff_row.NO_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET PAYS_CODE_INSEE = diff_row.PAYS_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET PAYS_LIBELLE = diff_row.PAYS_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRINCIPALE = 1 AND IN_COLUMN_LIST('PRINCIPALE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET PRINCIPALE = diff_row.PRINCIPALE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TELEPHONE = 1 AND IN_COLUMN_LIST('TELEPHONE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET TELEPHONE = diff_row.TELEPHONE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE = 1 AND IN_COLUMN_LIST('VILLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET VILLE = diff_row.VILLE WHERE ID = diff_row.id; END IF;
            UPDATE OSE.ADRESSE_STRUCTURE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ADRESSE_STRUCTURE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ADRESSE_STRUCTURE;



  PROCEDURE MAJ_ADRESSE_INTERVENANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ADRESSE_INTERVENANT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ADRESSE_INTERVENANT.* FROM V_DIFF_ADRESSE_INTERVENANT ' || get_sql_criterion('ADRESSE_INTERVENANT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO OSE.ADRESSE_INTERVENANT
              ( id, CODE_POSTAL,INTERVENANT_ID,LOCALITE,MENTION_COMPLEMENTAIRE,NOM_VOIE,NO_VOIE,PAYS_CODE_INSEE,PAYS_LIBELLE,TEL_DOMICILE,VILLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ADRESSE_INTERVENANT_ID_SEQ.NEXTVAL), diff_row.CODE_POSTAL,diff_row.INTERVENANT_ID,diff_row.LOCALITE,diff_row.MENTION_COMPLEMENTAIRE,diff_row.NOM_VOIE,diff_row.NO_VOIE,diff_row.PAYS_CODE_INSEE,diff_row.PAYS_LIBELLE,diff_row.TEL_DOMICILE,diff_row.VILLE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CODE_POSTAL = 1 AND IN_COLUMN_LIST('CODE_POSTAL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET CODE_POSTAL = diff_row.CODE_POSTAL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_INTERVENANT_ID = 1 AND IN_COLUMN_LIST('INTERVENANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET INTERVENANT_ID = diff_row.INTERVENANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALITE = 1 AND IN_COLUMN_LIST('LOCALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET LOCALITE = diff_row.LOCALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_MENTION_COMPLEMENTAIRE = 1 AND IN_COLUMN_LIST('MENTION_COMPLEMENTAIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET MENTION_COMPLEMENTAIRE = diff_row.MENTION_COMPLEMENTAIRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_VOIE = 1 AND IN_COLUMN_LIST('NOM_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET NOM_VOIE = diff_row.NOM_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NO_VOIE = 1 AND IN_COLUMN_LIST('NO_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET NO_VOIE = diff_row.NO_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET PAYS_CODE_INSEE = diff_row.PAYS_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET PAYS_LIBELLE = diff_row.PAYS_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_DOMICILE = 1 AND IN_COLUMN_LIST('TEL_DOMICILE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET TEL_DOMICILE = diff_row.TEL_DOMICILE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE = 1 AND IN_COLUMN_LIST('VILLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET VILLE = diff_row.VILLE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE OSE.ADRESSE_INTERVENANT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CODE_POSTAL = 1 AND IN_COLUMN_LIST('CODE_POSTAL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET CODE_POSTAL = diff_row.CODE_POSTAL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_INTERVENANT_ID = 1 AND IN_COLUMN_LIST('INTERVENANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET INTERVENANT_ID = diff_row.INTERVENANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALITE = 1 AND IN_COLUMN_LIST('LOCALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET LOCALITE = diff_row.LOCALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_MENTION_COMPLEMENTAIRE = 1 AND IN_COLUMN_LIST('MENTION_COMPLEMENTAIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET MENTION_COMPLEMENTAIRE = diff_row.MENTION_COMPLEMENTAIRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_VOIE = 1 AND IN_COLUMN_LIST('NOM_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET NOM_VOIE = diff_row.NOM_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NO_VOIE = 1 AND IN_COLUMN_LIST('NO_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET NO_VOIE = diff_row.NO_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET PAYS_CODE_INSEE = diff_row.PAYS_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET PAYS_LIBELLE = diff_row.PAYS_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_DOMICILE = 1 AND IN_COLUMN_LIST('TEL_DOMICILE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET TEL_DOMICILE = diff_row.TEL_DOMICILE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE = 1 AND IN_COLUMN_LIST('VILLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET VILLE = diff_row.VILLE WHERE ID = diff_row.id; END IF;
            UPDATE OSE.ADRESSE_INTERVENANT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ADRESSE_INTERVENANT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ADRESSE_INTERVENANT;

  -- END OF AUTOMATIC GENERATION --
END UNICAEN_IMPORT;
/
---------------------------
--Modifié PACKAGE BODY
--OSE_WORKFLOW
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_WORKFLOW" AS

  TYPE t_workflow IS TABLE OF tbl_workflow%rowtype INDEX BY PLS_INTEGER;

  TYPE t_dep IS TABLE OF wf_etape_dep%rowtype INDEX BY PLS_INTEGER;
  TYPE t_deps IS TABLE OF t_dep INDEX BY PLS_INTEGER;
  TYPE t_deps_bloquantes IS TABLE OF wf_dep_bloquante%rowtype INDEX BY PLS_INTEGER;

  -- propre au calcul courant ! !
  etapes          t_workflow;
  deps            t_deps;
  deps_initialized boolean default false;
  deps_bloquantes t_deps_bloquantes;
  deps_bloquantes_index PLS_INTEGER DEFAULT 1;




  FUNCTION ETAPE_FRANCHIE( etape tbl_workflow%rowtype ) RETURN FLOAT IS
    res FLOAT DEFAULT 0;
  BEGIN

    IF etape.atteignable = 0 THEN RETURN 0; END IF;

    IF etape.objectif > 0 THEN
      res := etape.realisation / etape.objectif;
    END IF;

    IF res > 1 THEN 
      res := 1; 
    END IF;

    RETURN res;
  END;



  PROCEDURE POPULATE_ETAPES( INTERVENANT_ID NUMERIC ) IS
    i NUMERIC DEFAULT 0;
  BEGIN
    etapes.delete; -- initialisation

    FOR wie IN (
      SELECT
        wep.annee_id                                          annee_id,
        e.id                                                  etape_id,
        w.structure_id                                        structure_id,
        NVL(w.objectif,0)                                     objectif,
        CASE WHEN w.intervenant_id IS NULL THEN 0 ELSE 1 END  atteignable,
        NVL(w.realisation,0)                                  realisation,
        wep.etape_code                                        etape_code,
        ti.id                                                 type_intervenant_id,
        ti.code                                               type_intervenant_code
      FROM
        v_workflow_etape_pertinente wep
        JOIN wf_etape                 e ON e.code = wep.etape_code
        JOIN intervenant              i ON i.id = wep.intervenant_id
        JOIN statut_intervenant      si ON si.id = i.statut_id
        JOIN type_intervenant        ti ON ti.id = si.type_intervenant_id
        LEFT JOIN v_tbl_workflow      w ON w.intervenant_id = wep.intervenant_id AND w.etape_code = wep.etape_code
      WHERE
        wep.intervenant_id = POPULATE_ETAPES.INTERVENANT_ID
        AND (e.obligatoire = 1 OR w.intervenant_id IS NOT NULL)
      ORDER BY
        e.ordre
    ) LOOP
      etapes( i ).annee_id              := wie.annee_id;
      etapes( i ).intervenant_id        := intervenant_id;
      etapes( i ).etape_id              := wie.etape_id;
      etapes( i ).structure_id          := wie.structure_id;
      etapes( i ).atteignable           := wie.atteignable;
      etapes( i ).objectif              := wie.objectif;
      etapes( i ).realisation           := wie.realisation;
      etapes( i ).etape_code            := wie.etape_code;
      etapes( i ).type_intervenant_id   := wie.type_intervenant_id;
      etapes( i ).type_intervenant_code := wie.type_intervenant_code;
      i := i + 1;
    END LOOP;
  END;



  -- peuple l'arbre des dépendances entre étapes de workflow
  PROCEDURE POPULATE_DEPS( INTERVENANT_ID NUMERIC ) IS
    s PLS_INTEGER; -- index de l'étape suivante
    p PLS_INTEGER; -- index de l'étape précédente
  BEGIN
    IF deps_initialized THEN RETURN; END IF;

    FOR d IN (
      SELECT
        wed.*
      FROM
        wf_etape_dep wed
        JOIN intervenant i ON i.id = POPULATE_DEPS.INTERVENANT_ID
        JOIN statut_intervenant si ON si.id = i.statut_id
      WHERE
        active = 1
        AND wed.type_intervenant_id IS NULL OR wed.type_intervenant_id = si.type_intervenant_id
    ) LOOP
      deps(d.etape_suiv_id)(d.etape_prec_id) := d;
    END LOOP;

    deps_initialized := true;
  END;



  PROCEDURE ADD_DEP_BLOQUANTE( wf_etape_dep_id NUMERIC, tbl_workflow_id NUMERIC ) IS
  BEGIN
    deps_bloquantes_index := deps_bloquantes_index + 1;
    deps_bloquantes(deps_bloquantes_index).wf_etape_dep_id := wf_etape_dep_id;
    deps_bloquantes(deps_bloquantes_index).tbl_workflow_id := tbl_workflow_id;
  END;



  PROCEDURE CALCUL_ATTEIGNABLE( s PLS_INTEGER, d wf_etape_dep%rowtype ) IS
    count_tested PLS_INTEGER DEFAULT 0;
    count_na     PLS_INTEGER DEFAULT 0;
    p PLS_INTEGER; -- index de l'étape précédente
  BEGIN

    p := etapes.FIRST;
    LOOP EXIT WHEN p IS NULL;
      IF etapes(p).etape_id = d.etape_prec_id THEN
        -- on restreint en fonction du périmètre visé :
        --  - si la dépendance n'est pas locale alors on teste
        --  - si les structures aussi bien de l'étape testée que de l'étape dépendante sont nulles alors on teste aussi car elles sont "universelles"
        --  - si les structures sont équivalentes alors on teste, sinon elles ne sont pas dans le périmètre local
        IF
          (d.locale = 0) 
          OR etapes(s).structure_id IS NULL 
          OR etapes(p).structure_id IS NULL 
          OR etapes(s).structure_id = etapes(p).structure_id 
        THEN
          count_tested := count_tested + 1;

          -- on teste le type de franchissement désiré et si ce n'est pas bon alors on déclare l'étape courante non atteignable

          --  - idem si on a besoin d'une dépendance partiellement franchie est qu'elle ne l'est pas
          IF d.partielle = 1 THEN
            IF ETAPE_FRANCHIE(etapes(p)) = 0 THEN -- si le franchissement est totalement inexistant
              count_na := count_na + 1;
            END IF;
          --  - si on a besoin d'une dépendance complètement franchie est qu'elle ne l'est pas alors ce n'est pas atteignable  
          ELSE
            IF ETAPE_FRANCHIE(etapes(p)) < 1 THEN
              count_na := count_na + 1;
            END IF;
          END IF;
        END IF;

      END IF;
      p := etapes.next(p);
    END LOOP;

    -- on applique le résultat uniquement si des étapes dépendantes ont été trouvées
    IF count_tested > 0 THEN
      
      -- si les étapes dépendantes ont été intégralement franchies
      IF d.integrale = 1 THEN
        -- si l'intégralité des étapes est atteignable = NON si au moins une ne l'est pas
        IF count_na > 0 THEN
          etapes(s).atteignable := 0;
          ADD_DEP_BLOQUANTE( d.id, s );
        END IF;

      -- sinon...
      ELSE
        -- si au moins une étape est atteignable = NON si toutes ne sont pas atteignables
        IF count_tested = count_na THEN 
          etapes(s).atteignable := 0;
          ADD_DEP_BLOQUANTE( d.id, s );
        END IF;
      END IF;
    END IF;
  END;



  -- calcule si les étapes sont atteignables ou non
  PROCEDURE CALCUL_ATTEIGNABLES IS
    e PLS_INTEGER; -- index de l'étape courante
    d PLS_INTEGER; -- ID de l'étape précédante
  BEGIN
    deps_bloquantes.delete;
    e := etapes.FIRST;
    LOOP EXIT WHEN e IS NULL;
      IF deps.exists(etapes(e).etape_id) THEN -- s'il n'y a aucune dépendance alors pas de test!!
        d := deps(etapes(e).etape_id).FIRST;
        LOOP EXIT WHEN d IS NULL;
        
          CALCUL_ATTEIGNABLE(e, deps(etapes(e).etape_id)(d));
        
          d := deps(etapes(e).etape_id).next(d);
        END LOOP;
      END IF;
      e := etapes.next(e);
    END LOOP;
  END;



  FUNCTION ENREGISTRER_ETAPE( e tbl_workflow%rowtype ) RETURN NUMERIC IS
    n_etape_id NUMERIC;
  BEGIN
 
    MERGE INTO tbl_workflow w USING dual ON (

          w.intervenant_id      = e.intervenant_id
      AND w.etape_id            = e.etape_id
      AND NVL(w.structure_id,0) = NVL(e.structure_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      atteignable                  = e.atteignable,
      objectif                     = e.objectif,
      realisation                  = e.realisation,
      etape_code                   = e.etape_code,
      type_intervenant_id          = e.type_intervenant_id,
      type_intervenant_code        = e.type_intervenant_code,
      to_delete                    = 0

    WHEN NOT MATCHED THEN INSERT (

      id,
      annee_id,
      intervenant_id,
      etape_id,
      structure_id,
      atteignable,
      objectif,
      realisation,
      etape_code,
      type_intervenant_id,
      type_intervenant_code,
      to_delete

    ) VALUES (

      TBL_WORKFLOW_ID_SEQ.NEXTVAL,
      e.annee_id,
      e.intervenant_id,
      e.etape_id,
      e.structure_id,
      e.atteignable,
      e.objectif,
      e.realisation,
      e.etape_code,
      e.type_intervenant_id,
      e.type_intervenant_code,
      0

    );

    SELECT w.id INTO n_etape_id FROM tbl_workflow w WHERE
      w.intervenant_id          = e.intervenant_id
      AND w.etape_id            = e.etape_id
      AND NVL(w.structure_id,0) = NVL(e.structure_id,0)
    ;

    RETURN n_etape_id;
  END;



  PROCEDURE ENREGISTRER_DEP_BLOQUANTE( db wf_dep_bloquante%rowtype ) IS
  BEGIN
    MERGE INTO wf_dep_bloquante wdb USING dual ON (

          wdb.wf_etape_dep_id   = db.wf_etape_dep_id
      AND wdb.tbl_workflow_id   = db.tbl_workflow_id

    ) WHEN MATCHED THEN UPDATE SET
    
      to_delete                 = 0
    
    WHEN NOT MATCHED THEN INSERT (

      id,
      wf_etape_dep_id,
      tbl_workflow_id,
      to_delete

    ) VALUES (

      WF_DEP_BLOQUANTE_ID_SEQ.NEXTVAL,
      db.wf_etape_dep_id,
      db.tbl_workflow_id,
      0

    );  
  END;



  PROCEDURE ENREGISTRER( INTERVENANT_ID NUMERIC ) IS
    i PLS_INTEGER;
  BEGIN

    UPDATE tbl_workflow SET to_delete = 1 WHERE intervenant_id = ENREGISTRER.INTERVENANT_ID;
    UPDATE wf_dep_bloquante SET to_delete = 1 WHERE tbl_workflow_id IN (SELECT id FROM tbl_workflow WHERE intervenant_id = ENREGISTRER.INTERVENANT_ID);

    i := etapes.FIRST;
    LOOP EXIT WHEN i IS NULL;
      etapes(i).id := ENREGISTRER_ETAPE( etapes(i) );
      i := etapes.NEXT(i);
    END LOOP;

    i := deps_bloquantes.FIRST;
    LOOP EXIT WHEN i IS NULL;
      deps_bloquantes(i).tbl_workflow_id := etapes(deps_bloquantes(i).tbl_workflow_id).id;
      ENREGISTRER_DEP_BLOQUANTE( deps_bloquantes(i) );
      i := deps_bloquantes.NEXT(i);
    END LOOP;

    DELETE FROM tbl_workflow WHERE TO_DELETE = 1;
    DELETE FROM wf_dep_bloquante WHERE TO_DELETE = 1;
  END;



  PROCEDURE DEP_CHECK( etape_suiv_id NUMERIC, etape_prec_id NUMERIC ) IS
    eso NUMERIC;
    epo NUMERIC;
  BEGIN
    SELECT ordre INTO eso FROM wf_etape WHERE id = etape_suiv_id;
    SELECT ordre INTO epo FROM wf_etape WHERE id = etape_prec_id;
    
    IF eso < epo THEN
      raise_application_error(-20101, 'Une étape de Workflow ne peut dépendre d''une étape située en aval');
    END IF;
    IF eso = epo THEN
      raise_application_error(-20101, 'Une étape de Workflow ne peut dépendre d''elle-même');
    END IF;
  END;



  PROCEDURE DEBUG_CALCUL( INTERVENANT_ID NUMERIC ) IS
    i PLS_INTEGER;
    d PLS_INTEGER;
    dep_desc VARCHAR2(200);
  BEGIN
    ose_test.echo('');
    ose_test.echo('-- DEBUG WORKFLOW ETAPE INTERVENANT_ID='|| INTERVENANT_ID ||' --');
    i := etapes.FIRST;
    LOOP EXIT WHEN i IS NULL;
      ose_test.echo(
               'etape='       || RPAD( ose_test.get_wf_etape_by_id(etapes(i).etape_id).code, 30, ' ' )
          || ', structure='   || RPAD( NVL(ose_test.get_structure_by_id(etapes(i).structure_id).libelle_court,' '), 20, ' ' )
          || ', ' || CASE WHEN etapes(i).atteignable=1 THEN 'atteignable' ELSE 'na' END
          || ', objectif= ' || ROUND(etapes(i).objectif)
          || ', realisation= ' || ROUND(etapes(i).realisation)
      );

      d := deps_bloquantes.FIRST;
      LOOP EXIT WHEN d IS NULL;
        IF deps_bloquantes(d).tbl_workflow_id = i THEN

          SELECT
            we.desc_non_franchie INTO dep_desc
          FROM
            wf_etape_dep wed
            JOIN wf_etape we ON we.id = wed.etape_prec_id
          WHERE
            wed.id = deps_bloquantes(d).wf_etape_dep_id;

          ose_test.echo('    CAUSE =' || dep_desc);
        END IF;
        d := deps_bloquantes.NEXT(d);
      END LOOP;

      i := etapes.NEXT(i);
    END LOOP;
    ose_test.echo('');
  END;



  -- calcul du workflow pour un intervenant
  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    POPULATE_ETAPES( INTERVENANT_ID );
    POPULATE_DEPS( INTERVENANT_ID );
    CALCUL_ATTEIGNABLES;
    IF OSE_TEST.DEBUG_ENABLED THEN
      DEBUG_CALCUL( INTERVENANT_ID );
    END IF;
    ENREGISTRER( INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    FOR mp IN (
      SELECT
        id intervenant_id
      FROM 
        intervenant i
      WHERE
        1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
        AND (CALCULER_TOUT.ANNEE_ID IS NULL OR i.annee_id = CALCULER_TOUT.ANNEE_ID)
    )
    LOOP
      CALCULER( mp.intervenant_id );
    END LOOP;
  END;
  
END OSE_WORKFLOW;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_VALIDATION_REFERENTIEL
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_VALIDATION_REFERENTIEL" AS


  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    UPDATE TBL_VALIDATION_REFERENTIEL SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));
      
    MERGE INTO 
      TBL_VALIDATION_REFERENTIEL t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_VALIDATION_REFERENTIEL vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id              = v.intervenant_id
          AND t.structure_id            = v.structure_id
          AND t.type_volume_horaire_id  = v.type_volume_horaire_id
          AND t.service_referentiel_id  = v.service_referentiel_id
          AND t.volume_horaire_ref_id   = v.volume_horaire_ref_id
          AND t.validation_id           = v.validation_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      TYPE_VOLUME_HORAIRE_ID,
      SERVICE_REFERENTIEL_ID,
      VOLUME_HORAIRE_REF_ID,
      VALIDATION_ID,
      TO_DELETE

    ) VALUES (

      TBL_VALIDATION_ENS_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.structure_id,
      v.type_volume_horaire_id,
      v.service_referentiel_id,
      v.volume_horaire_ref_id,
      v.validation_id,
      0

    );

    DELETE FROM tbl_validation_referentiel WHERE to_delete = 1;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;

END OSE_VALIDATION_REFERENTIEL;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_VALIDATION_ENSEIGNEMENT
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_VALIDATION_ENSEIGNEMENT" AS


  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    UPDATE TBL_VALIDATION_ENSEIGNEMENT SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));
      
    MERGE INTO 
      TBL_VALIDATION_ENSEIGNEMENT t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_VALIDATION_ENSEIGNEMENT vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id              = v.intervenant_id
          AND t.structure_id            = v.structure_id
          AND t.type_volume_horaire_id  = v.type_volume_horaire_id
          AND t.service_id              = v.service_id
          AND t.volume_horaire_id       = v.volume_horaire_id
          AND t.validation_id           = v.validation_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      TYPE_VOLUME_HORAIRE_ID,
      SERVICE_ID,
      VOLUME_HORAIRE_ID,
      VALIDATION_ID,
      TO_DELETE

    ) VALUES (

      TBL_VALIDATION_ENS_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.structure_id,
      v.type_volume_horaire_id,
      v.service_id,
      v.volume_horaire_id,
      v.validation_id,
      0

    );

    DELETE FROM tbl_validation_enseignement WHERE to_delete = 1;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;

END OSE_VALIDATION_ENSEIGNEMENT;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_VALIDATION
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_VALIDATION" AS

  FUNCTION can_devalider ( v validation%rowtype ) RETURN varchar2 IS
    tv type_validation%rowtype;
    nb NUMERIC;
    result varchar2(500) default null;
  BEGIN
  
    SELECT * INTO tv FROM type_validation WHERE id = v.type_validation_id;
  
    IF tv.code = 'SERVICES_PAR_COMP' THEN
    
      SELECT
        SUM(CASE WHEN c.id IS NOT NULL THEN 1 ELSE 0 END) INTO nb
      FROM
        validation_vol_horaire vvh
        JOIN volume_horaire vh ON vh.id = vvh.volume_horaire_id
        LEFT JOIN contrat c ON c.id = vh.contrat_id AND c.histo_destruction IS NULL
      WHERE
        vvh.validation_id = v.id;
    
      -- Si des volumes horaires ont déjà fait l'objet de contrats alors pas de dévalidation possible des heures
      IF nb > 0 THEN
        result := 'La dévalidation est impossible car des contrats ont déjà été édités sur la base de ces heures.';
      END IF;
  
    END IF;
    
    IF tv.code = 'CLOTURE_REALISE' THEN
      
      SELECT
        COUNT(*) INTO nb
      FROM
        tbl_paiement p
      WHERE
        p.periode_paiement_id IS NOT NULL
        AND p.intervenant_id = v.intervenant_id
        AND ROWNUM = 1;
      
      IF nb > 0 THEN
        result := 'La suppression de la clôture des services réalisés est impossible car des heures ont été payées ou bien le paiement a été demandé.';
      END IF;
      
    END IF;
  
    RETURN result;
  END;

END OSE_VALIDATION;
/
---------------------------
--Modifié PACKAGE BODY
--OSE_TEST
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_TEST" AS
  TYPE OUT_LIST IS TABLE OF CLOB;

  SUCCES_SHOWN BOOLEAN DEFAULT TRUE;
  T_SUCCES_COUNT NUMERIC DEFAULT 0;
  T_ECHECS_COUNT NUMERIC DEFAULT 0;
  A_SUCCES_COUNT NUMERIC DEFAULT 0;
  A_ECHECS_COUNT NUMERIC DEFAULT 0;
  CURRENT_TEST CLOB;
  CURRENT_TEST_OUTPUT_BUFFER OUT_LIST := OUT_LIST();
  CURRENT_TEST_OUTPUT_BUFFER_ERR BOOLEAN;
    
  PROCEDURE SHOW_SUCCES IS
  BEGIN
    SUCCES_SHOWN := true;
  END SHOW_SUCCES;

  PROCEDURE HIDE_SUCCES IS
  BEGIN
    SUCCES_SHOWN := false;
  END HIDE_SUCCES;

  PROCEDURE DEBUT( TEST_NAME CLOB ) IS
  BEGIN
    CURRENT_TEST := TEST_NAME;
    CURRENT_TEST_OUTPUT_BUFFER_ERR := FALSE;
    echo (' '); echo('TEST ' || TEST_NAME || ' >>>>>>>>>>' );
  END;

  PROCEDURE FIN IS
    TEST_NAME CLOB;
  BEGIN
    IF CURRENT_TEST_OUTPUT_BUFFER_ERR THEN
      T_ECHECS_COUNT := T_ECHECS_COUNT + 1;
      echo('>>>>>>>>>> FIN DU TEST ' || CURRENT_TEST ); echo (' ');
      CURRENT_TEST := NULL;

      FOR i IN 1 .. CURRENT_TEST_OUTPUT_BUFFER.COUNT LOOP
        echo( CURRENT_TEST_OUTPUT_BUFFER(i) );
      END LOOP;
    ELSE
      T_SUCCES_COUNT := T_SUCCES_COUNT + 1;
      TEST_NAME := CURRENT_TEST;
      CURRENT_TEST := NULL;
      echo('SUCCÈS DU TEST : ' || TEST_NAME );
    END IF;
    CURRENT_TEST_OUTPUT_BUFFER.DELETE; -- clear buffer
  END;

  PROCEDURE ECHO( MSG CLOB ) IS
  BEGIN
    IF CURRENT_TEST IS NULL THEN
      dbms_output.put_line(MSG);
    ELSE
      CURRENT_TEST_OUTPUT_BUFFER.EXTEND;
      CURRENT_TEST_OUTPUT_BUFFER (CURRENT_TEST_OUTPUT_BUFFER.LAST) := MSG;
    END IF;
  END;

  PROCEDURE INIT IS
  BEGIN
    T_SUCCES_COUNT  := 0;
    T_ECHECS_COUNT  := 0;
    A_SUCCES_COUNT  := 0;
    A_ECHECS_COUNT  := 0;
    CURRENT_TEST    := NULL;
  END INIT;

  PROCEDURE SHOW_STATS IS
  BEGIN
    echo ( ' ' );
    echo ( '********************************* STATISTIQUES *********************************' );
    echo ( ' ' );
    echo ( '   - nombre de tests passés avec succès :       ' || T_SUCCES_COUNT );
    echo ( '   - nombre de tests ayant échoué :             ' || T_ECHECS_COUNT );
    echo ( ' ' );
    echo ( '   - nombre d''assertions passés avec succès :   ' || A_SUCCES_COUNT );
    echo ( '   - nombre d''assertions ayant échoué :         ' || A_ECHECS_COUNT );
    echo ( ' ' );
    echo ( '********************************************************************************' );
    echo ( ' ' );
  END;

  PROCEDURE ASSERT( condition BOOLEAN, MSG CLOB ) IS
  BEGIN
    IF condition THEN
      A_SUCCES_COUNT := A_SUCCES_COUNT + 1;
      IF SUCCES_SHOWN THEN
        ECHO('        SUCCÈS : ' || MSG );
      END IF;
    ELSE
      A_ECHECS_COUNT := A_ECHECS_COUNT + 1;
      CURRENT_TEST_OUTPUT_BUFFER_ERR := TRUE;
      ECHO('        ** ECHEC ** : ' || MSG );
    END IF;
  END;
  
  PROCEDURE ADD_BUFFER( table_name VARCHAR2, id NUMERIC ) IS
  BEGIN
    INSERT INTO TEST_BUFFER( ID, TABLE_NAME, DATA_ID ) 
                    VALUES ( TEST_BUFFER_ID_SEQ.NEXTVAL, table_name, id );
  END;
  
  PROCEDURE DELETE_TEST_DATA IS
  BEGIN
    FOR tb IN (SELECT * FROM TEST_BUFFER)
    LOOP
      EXECUTE IMMEDIATE 'DELETE FROM ' || tb.table_name || ' WHERE ID = ' || tb.data_id;
    END LOOP;
    DELETE FROM TEST_BUFFER;
  END;
  
  FUNCTION GET_USER RETURN NUMERIC IS
  BEGIN
    RETURN 1; -- utilisateur réservé aux tests... (à revoir!!)
  END;
 
  FUNCTION GET_SOURCE RETURN NUMERIC IS
    res_id Numeric;
  BEGIN
    SELECT s.id INTO res_id FROM ose.source s WHERE s.code = 'TEST';
    RETURN res_id;
  END;
  
  
  FUNCTION GET_CIVILITE( libelle_court VARCHAR2 DEFAULT NULL ) RETURN civilite%rowtype IS
    res civilite%rowtype;
  BEGIN
    SELECT * INTO res FROM civilite WHERE
      (OSE_DIVERS.LIKED( libelle_court, GET_CIVILITE.libelle_court ) = 1 OR GET_CIVILITE.libelle_court IS NULL) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_TYPE_INTERVENANT( code VARCHAR2 DEFAULT NULL ) RETURN type_intervenant%rowtype IS
    res type_intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM type_intervenant WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_INTERVENANT.code ) = 1 OR GET_TYPE_INTERVENANT.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_TYPE_INTERVENANT_BY_ID( id NUMERIC ) RETURN type_intervenant%rowtype IS
    res type_intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM type_intervenant WHERE
      id = GET_TYPE_INTERVENANT_BY_ID.id;
    RETURN res;
  END;

  FUNCTION GET_STATUT_INTERVENANT( source_code VARCHAR2 DEFAULT NULL ) RETURN statut_intervenant%rowtype IS
    res statut_intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM statut_intervenant WHERE
      (OSE_DIVERS.LIKED( source_code, GET_STATUT_INTERVENANT.source_code ) = 1 OR GET_STATUT_INTERVENANT.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_STATUT_INTERVENANT_BY_ID( id NUMERIC ) RETURN statut_intervenant%rowtype IS
    res statut_intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM statut_intervenant WHERE id = GET_STATUT_INTERVENANT_BY_ID.id;
    RETURN res;
  END;
  
  FUNCTION GET_TYPE_STRUCTURE( code VARCHAR2 DEFAULT NULL ) RETURN type_structure%rowtype IS
    res type_structure%rowtype;
  BEGIN
    SELECT * INTO res FROM type_structure WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_STRUCTURE.code ) = 1 OR GET_TYPE_STRUCTURE.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_STRUCTURE( source_code VARCHAR2 DEFAULT NULL ) RETURN structure%rowtype IS
    res structure%rowtype;
  BEGIN
    SELECT * INTO res FROM structure WHERE
      (OSE_DIVERS.LIKED( source_code, GET_STRUCTURE.source_code ) = 1 OR GET_STRUCTURE.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION GET_STRUCTURE_BY_ID( id NUMERIC ) RETURN structure%rowtype IS
    res structure%rowtype;
  BEGIN
    IF ID IS NULL THEN RETURN res; END IF;
    SELECT * INTO res FROM structure WHERE id = GET_STRUCTURE_BY_ID.id;
    RETURN res;
  END;
  
  FUNCTION GET_STRUCTURE_ENS_BY_NIVEAU( niveau NUMERIC ) RETURN structure%rowtype IS
    res structure%rowtype;
  BEGIN
    SELECT * INTO res FROM structure WHERE
      niveau = GET_STRUCTURE_ENS_BY_NIVEAU.niveau AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_STRUCTURE_UNIV RETURN "STRUCTURE"%rowtype IS
    res "STRUCTURE"%rowtype;
  BEGIN
    SELECT * INTO res FROM "STRUCTURE" WHERE source_code = 'UNIV' AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction );
    RETURN res;  
  END;

  FUNCTION ADD_STRUCTURE(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    parente_id    NUMERIC,
    type_id       NUMERIC,
    source_code   VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
    parente  structure%rowtype;
    niv2_id  NUMERIC;
  BEGIN
    entity_id := STRUCTURE_ID_SEQ.NEXTVAL;
    IF parente_id IS NOT NULL THEN
      parente := GET_STRUCTURE_BY_ID( parente_id );
      niv2_id := CASE
        WHEN parente.niveau = 1 THEN entity_id
        WHEN parente.niveau = 2 THEN parente_id
        WHEN parente.niveau = 3 THEN parente.parente_id
        WHEN parente.niveau = 4 THEN GET_STRUCTURE_BY_ID( parente.parente_id ).parente_id
        WHEN parente.niveau = 5 THEN GET_STRUCTURE_BY_ID( GET_STRUCTURE_BY_ID( parente.parente_id ).parente_id ).parente_id
        WHEN parente.niveau = 6 THEN GET_STRUCTURE_BY_ID( GET_STRUCTURE_BY_ID( GET_STRUCTURE_BY_ID( parente.parente_id ).parente_id ).parente_id ).parente_id
      END;
    END IF;
    INSERT INTO STRUCTURE (
      ID,
      LIBELLE_LONG,
      LIBELLE_COURT,
      PARENTE_ID,
      STRUCTURE_NIV2_ID,
      TYPE_ID,
      ETABLISSEMENT_ID,
      NIVEAU,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      libelle_long,
      libelle_court,
      parente_id,
      niv2_id,
      type_id,
      OSE_PARAMETRE.GET_ETABLISSEMENT,
      NVL( parente.niveau, 1),
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'structure', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_INTERVENANT( source_code VARCHAR2 DEFAULT NULL ) RETURN intervenant%rowtype IS
    res intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM intervenant WHERE
      (OSE_DIVERS.LIKED( source_code, GET_INTERVENANT.source_code ) = 1 OR GET_INTERVENANT.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_INTERVENANT_BY_ID( id NUMERIC DEFAULT NULL ) RETURN intervenant%rowtype IS
    res intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM intervenant WHERE id = GET_INTERVENANT_BY_ID.id;
    RETURN res;
  END;

  FUNCTION GET_INTERVENANT_BY_STATUT( statut_id NUMERIC ) RETURN intervenant%rowtype IS
    res intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM intervenant WHERE
      statut_id = GET_INTERVENANT_BY_STATUT.statut_id AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION ADD_INTERVENANT(
    civilite_id     NUMERIC,
    nom_usuel       VARCHAR2,
    prenom          VARCHAR2,
    date_naissance  DATE,
    email           VARCHAR2,
    statut_id       NUMERIC,
    structure_id    NUMERIC,
    source_code     VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
    statut statut_intervenant%rowtype;
  BEGIN
    entity_id := INTERVENANT_ID_SEQ.NEXTVAL;
    statut := GET_STATUT_INTERVENANT_BY_ID( statut_id );
    INSERT INTO INTERVENANT (
      ID,
      CIVILITE_ID,
      NOM_USUEL,
      PRENOM,
      NOM_PATRONYMIQUE,
      DATE_NAISSANCE,
      PAYS_NAISSANCE_CODE_INSEE,
      PAYS_NAISSANCE_LIBELLE,
      EMAIL,
      STATUT_ID,
      STRUCTURE_ID,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      civilite_id,
      nom_usuel,
      prenom,
      nom_usuel,
      date_naissance,
      100,
      'FRANCE',
      email,
      statut_id,
      structure_id,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'intervenant', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_GROUPE_TYPE_FORMATION( source_code VARCHAR2 DEFAULT NULL ) RETURN groupe_type_formation%rowtype IS
    res groupe_type_formation%rowtype;
  BEGIN
    SELECT * INTO res FROM groupe_type_formation WHERE
      (OSE_DIVERS.LIKED( source_code, GET_GROUPE_TYPE_FORMATION.source_code ) = 1 OR GET_GROUPE_TYPE_FORMATION.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_GROUPE_TYPE_FORMATION(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    source_code   VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := GROUPE_TYPE_FORMATION_ID_SEQ.NEXTVAL;
    INSERT INTO GROUPE_TYPE_FORMATION (
      ID,
      LIBELLE_COURT,
      LIBELLE_LONG,
      ORDRE,
      PERTINENCE_NIVEAU,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    ) VALUES (
      entity_id,
      libelle_court,
      libelle_long,
      999,
      0,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'groupe_type_formation', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_TYPE_FORMATION( source_code VARCHAR2 ) RETURN type_formation%rowtype IS
    res type_formation%rowtype;
  BEGIN
    SELECT * INTO res FROM type_formation WHERE
      (OSE_DIVERS.LIKED( source_code, GET_TYPE_FORMATION.source_code ) = 1 OR GET_TYPE_FORMATION.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_TYPE_FORMATION(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    groupe_id     NUMERIC,
    source_code   VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := TYPE_FORMATION_ID_SEQ.NEXTVAL;
    INSERT INTO TYPE_FORMATION(
      ID,
      LIBELLE_LONG,
      LIBELLE_COURT,
      GROUPE_ID,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    ) VALUES (
      entity_id,
      libelle_long,
      libelle_court,
      groupe_id,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'type_formation', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_ETAPE( source_code VARCHAR2 DEFAULT NULL ) RETURN etape%rowtype IS
    res etape%rowtype;
  BEGIN
    SELECT * INTO res FROM etape WHERE
      (OSE_DIVERS.LIKED( source_code, GET_ETAPE.source_code ) = 1 OR GET_ETAPE.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_ETAPE(
    libelle           VARCHAR2,
    type_formation_id NUMERIC,
    niveau            NUMERIC,
    structure_id      NUMERIC,
    source_code       VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := ETAPE_ID_SEQ.NEXTVAL;
    INSERT INTO ETAPE (
      ID,
      LIBELLE,
      TYPE_FORMATION_ID,
      NIVEAU,
      SPECIFIQUE_ECHANGES,
      STRUCTURE_ID,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      libelle,
      type_formation_id,
      niveau,
      0,
      structure_id,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'etape', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_PERIODE( code VARCHAR2 DEFAULT NULL ) RETURN periode%rowtype IS
    res periode%rowtype;
  BEGIN
    SELECT * INTO res FROM periode WHERE
      (OSE_DIVERS.LIKED( code, GET_PERIODE.code ) = 1 OR GET_PERIODE.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_ELEMENT_PEDAGOGIQUE( source_code VARCHAR2 DEFAULT NULL ) RETURN element_pedagogique%rowtype IS
    res element_pedagogique%rowtype;
  BEGIN
    SELECT * INTO res FROM element_pedagogique WHERE
      (OSE_DIVERS.LIKED( source_code, GET_ELEMENT_PEDAGOGIQUE.source_code ) = 1 OR GET_ELEMENT_PEDAGOGIQUE.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION GET_ELEMENT_PEDAGOGIQUE_BY_ID( ID NUMERIC ) RETURN element_pedagogique%rowtype IS
    res element_pedagogique%rowtype;
  BEGIN
    SELECT * INTO res FROM element_pedagogique WHERE id = GET_ELEMENT_PEDAGOGIQUE_BY_ID.id;
    RETURN res;
  END;
  
  FUNCTION ADD_ELEMENT_PEDAGOGIQUE(
    libelle       VARCHAR2,
    etape_id      NUMERIC,
    structure_id  NUMERIC,
    periode_id    NUMERIC,
    taux_foad     FLOAT,
    taux_fi       FLOAT,
    taux_fc       FLOAT,
    taux_fa       FLOAT,
    source_code   VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
    ch_id NUMERIC;
  BEGIN
    entity_id := ELEMENT_PEDAGOGIQUE_ID_SEQ.NEXTVAL;
    INSERT INTO ELEMENT_PEDAGOGIQUE (
      ID,
      LIBELLE,
      ETAPE_ID,
      STRUCTURE_ID,
      PERIODE_ID,
      TAUX_FOAD,
      TAUX_FI,
      TAUX_FC,
      TAUX_FA,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      libelle,
      etape_id,
      structure_id,
      periode_id,
      taux_foad,
      taux_fi,
      taux_fc,
      taux_fa,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    ch_id := CHEMIN_PEDAGOGIQUE_ID_SEQ.NEXTVAL;
    INSERT INTO CHEMIN_PEDAGOGIQUE (
      ID,
      ELEMENT_PEDAGOGIQUE_ID,
      ETAPE_ID,
      ORDRE,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      ch_id,
      entity_id,
      etape_id,
      9999999,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'element_pedagogique', entity_id);
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'chemin_pedagogique', ch_id);
    RETURN entity_id;
  END;

  FUNCTION GET_TYPE_MODULATEUR( code VARCHAR2 DEFAULT NULL ) RETURN type_modulateur%rowtype IS
    res type_modulateur%rowtype;
  BEGIN
    SELECT * INTO res FROM type_modulateur WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_MODULATEUR.code ) = 1 OR GET_TYPE_MODULATEUR.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_TYPE_MODULATEUR(
    code        VARCHAR2,
    libelle     VARCHAR2,
    publique    NUMERIC,
    obligatoire NUMERIC
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
    tms_id    NUMERIC;
    structure_id NUMERIC;
  BEGIN
    entity_id := TYPE_MODULATEUR_ID_SEQ.NEXTVAL;
    INSERT INTO TYPE_MODULATEUR (
      ID,
      CODE,
      LIBELLE,
      PUBLIQUE,
      OBLIGATOIRE,
      SAISIE_PAR_ENSEIGNANT,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      code,
      libelle,
      publique,
      obligatoire,
      0,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'type_modulateur', entity_id);
    structure_id := ose_test.get_structure_univ().id;
    tms_id := TYPE_MODULATEUR_STRUCTU_ID_SEQ.NEXTVAL;
    INSERT INTO TYPE_MODULATEUR_STRUCTURE(
      ID,
      TYPE_MODULATEUR_ID,
      STRUCTURE_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      tms_id,
      entity_id,
      structure_id,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'type_modulateur_structure', tms_id);
    RETURN entity_id;
  END;

  FUNCTION GET_MODULATEUR( code VARCHAR2 DEFAULT NULL ) RETURN modulateur%rowtype IS
    res modulateur%rowtype;
  BEGIN
    SELECT * INTO res FROM modulateur WHERE
      (OSE_DIVERS.LIKED( code, GET_MODULATEUR.code ) = 1 OR GET_MODULATEUR.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_MODULATEUR(
    code                      VARCHAR2,
    libelle                   VARCHAR2,
    type_modulateur_id        NUMERIC,
    ponderation_service_du    FLOAT,
    ponderation_service_compl FLOAT
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := MODULATEUR_ID_SEQ.NEXTVAL;
    INSERT INTO MODULATEUR (
      ID,
      CODE,
      LIBELLE,
      TYPE_MODULATEUR_ID,
      PONDERATION_SERVICE_DU,
      PONDERATION_SERVICE_COMPL,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      code,
      libelle,
      type_modulateur_id,
      ponderation_service_du,
      ponderation_service_compl,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'modulateur', entity_id);
    RETURN entity_id;
  END;

  FUNCTION ADD_ELEMENT_MODULATEUR(
    element_id    NUMERIC,
    modulateur_id NUMERIC
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := ELEMENT_MODULATEUR_ID_SEQ.NEXTVAL;
    INSERT INTO ELEMENT_MODULATEUR (
      ID,
      ELEMENT_ID,
      MODULATEUR_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      element_id,
      modulateur_id,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'element_modulateur', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_FONCTION_REFERENTIEL( code VARCHAR2 DEFAULT NULL ) RETURN fonction_referentiel%rowtype IS
    res fonction_referentiel%rowtype;
  BEGIN
    SELECT * INTO res FROM fonction_referentiel WHERE
      (OSE_DIVERS.LIKED( code, GET_FONCTION_REFERENTIEL.code ) = 1 OR GET_FONCTION_REFERENTIEL.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_FONCTION_REFERENTIEL(
    code          VARCHAR2,
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    plafond       FLOAT
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := FONCTION_REFERENTIEL_ID_SEQ.NEXTVAL;
    INSERT INTO FONCTION_REFERENTIEL (
      ID,
      CODE,
      LIBELLE_LONG,
      LIBELLE_COURT,
      PLAFOND,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      code,
      libelle_long,
      libelle_court,
      plafond,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'fonction_referentiel', entity_id);
    RETURN entity_id;
  END;
  
  FUNCTION ADD_SERVICE_REFERENTIEL(
    fonction_id     NUMERIC,
    intervenant_id  NUMERIC,
    structure_id    NUMERIC
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := SERVICE_REFERENTIEL_ID_SEQ.NEXTVAL;
    INSERT INTO SERVICE_REFERENTIEL (
      ID,
      FONCTION_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      fonction_id,
      intervenant_id,
      structure_id,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'service_referentiel', entity_id);
    RETURN entity_id;
  END;
  
  FUNCTION ADD_MODIFICATION_SERVICE_DU(
    intervenant_id  NUMERIC,    
    heures          FLOAT,
    motif_id        NUMERIC,
    commentaires    CLOB DEFAULT NULL
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := MODIFICATION_SERVICE_DU_ID_SEQ.NEXTVAL;
    INSERT INTO MODIFICATION_SERVICE_DU (
      ID,
      INTERVENANT_ID,
      HEURES,
      MOTIF_ID,
      COMMENTAIRES,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      intervenant_id,
      heures,
      motif_id,
      commentaires,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'modification_service_du', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_MOTIF_MODIFICATION_SERVICE( code VARCHAR2 DEFAULT NULL, multiplicateur FLOAT DEFAULT NULL ) RETURN motif_modification_service%rowtype IS
    res motif_modification_service%rowtype;
  BEGIN
    SELECT * INTO res FROM motif_modification_service WHERE
      (OSE_DIVERS.LIKED( code, GET_MOTIF_MODIFICATION_SERVICE.code ) = 1 OR GET_MOTIF_MODIFICATION_SERVICE.code IS NULL)
      AND (multiplicateur = GET_MOTIF_MODIFICATION_SERVICE.multiplicateur OR GET_MOTIF_MODIFICATION_SERVICE.multiplicateur IS NULL)
      AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_ETABLISSEMENT( source_code VARCHAR2 DEFAULT NULL ) RETURN etablissement%rowtype IS
    res etablissement%rowtype;
  BEGIN
    SELECT * INTO res FROM etablissement WHERE
      (OSE_DIVERS.LIKED( source_code, GET_ETABLISSEMENT.source_code ) = 1 OR (GET_ETABLISSEMENT.source_code IS NULL AND id <> OSE_PARAMETRE.GET_ETABLISSEMENT))
      AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction )
      AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_SERVICE_BY_ID( id NUMERIC ) RETURN service%rowtype IS
    res service%rowtype;
  BEGIN
    SELECT * INTO res FROM service WHERE id = GET_SERVICE_BY_ID.id;
    RETURN res;
  END;

  FUNCTION ADD_SERVICE(
    intervenant_id          NUMERIC,
    element_pedagogique_id  NUMERIC,
    etablissement_id        NUMERIC DEFAULT NULL
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := SERVICE_ID_SEQ.NEXTVAL;
    INSERT INTO SERVICE (
      ID,
      INTERVENANT_ID,
      ELEMENT_PEDAGOGIQUE_ID,      
      ETABLISSEMENT_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      intervenant_id,
      element_pedagogique_id,
      COALESCE( ADD_SERVICE.etablissement_id, OSE_PARAMETRE.GET_ETABLISSEMENT),
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'service', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_ETAT_VOLUME_HORAIRE( code VARCHAR2 DEFAULT NULL ) RETURN etat_volume_horaire%rowtype IS
    res etat_volume_horaire%rowtype;
  BEGIN
    SELECT * INTO res FROM etat_volume_horaire WHERE
      (OSE_DIVERS.LIKED( code, GET_ETAT_VOLUME_HORAIRE.code ) = 1 OR GET_ETAT_VOLUME_HORAIRE.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION GET_TYPE_VOLUME_HORAIRE( code VARCHAR2 DEFAULT NULL ) RETURN type_volume_horaire%rowtype IS
    res type_volume_horaire%rowtype;
  BEGIN
    SELECT * INTO res FROM type_volume_horaire WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_VOLUME_HORAIRE.code ) = 1 OR GET_TYPE_VOLUME_HORAIRE.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION GET_TYPE_INTERVENTION( code VARCHAR2 DEFAULT NULL ) RETURN type_intervention%rowtype IS
    res type_intervention%rowtype;
  BEGIN
    SELECT * INTO res FROM type_intervention WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_INTERVENTION.code ) = 1 OR GET_TYPE_INTERVENTION.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_TYPE_INTERVENTION_BY_ID( id NUMERIC ) RETURN type_intervention%rowtype IS
    res type_intervention%rowtype;
  BEGIN
    SELECT * INTO res FROM type_intervention WHERE id = GET_TYPE_INTERVENTION_BY_ID.id;
    RETURN res;
  END;

  FUNCTION GET_TYPE_INTERVENTION_BY_ELEMT( ELEMENT_ID NUMERIC ) RETURN type_intervention%rowtype IS
    res type_intervention%rowtype;
  BEGIN
    SELECT
      ti.*
    INTO
      res
    FROM
      type_intervention ti
      JOIN v_element_type_intervention eti ON eti.type_intervention_id = ti.id AND eti.element_pedagogique_id = ELEMENT_ID
    WHERE
      1 = ose_divers.comprise_entre( ti.histo_creation, ti.histo_destruction )
      AND rownum = 1;
    RETURN res;
  END;

  FUNCTION GET_MOTIF_NON_PAIEMENT( code VARCHAR2 DEFAULT NULL ) RETURN motif_non_paiement%rowtype IS
    res motif_non_paiement%rowtype;
  BEGIN
    SELECT * INTO res FROM motif_non_paiement WHERE
      (OSE_DIVERS.LIKED( code, GET_MOTIF_NON_PAIEMENT.code ) = 1 OR GET_MOTIF_NON_PAIEMENT.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_VOLUME_HORAIRE( id NUMERIC DEFAULT NULL ) RETURN volume_horaire%rowtype IS
    res volume_horaire%rowtype;
  BEGIN
    SELECT * INTO res FROM volume_horaire WHERE
      id = GET_VOLUME_HORAIRE.id OR (GET_VOLUME_HORAIRE.id IS NULL AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1);
    RETURN res;    
  END;

  FUNCTION ADD_VOLUME_HORAIRE(
    type_volume_horaire_id  NUMERIC,
    service_id              NUMERIC,
    periode_id              NUMERIC,
    type_intervention_id    NUMERIC,
    heures                  FLOAT,
    motif_non_paiement_id   NUMERIC DEFAULT NULL
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := VOLUME_HORAIRE_ID_SEQ.NEXTVAL;
    INSERT INTO VOLUME_HORAIRE (
      ID,
      TYPE_VOLUME_HORAIRE_ID,
      SERVICE_ID,
      PERIODE_ID,
      TYPE_INTERVENTION_ID,
      HEURES,
      MOTIF_NON_PAIEMENT_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      type_volume_horaire_id,
      service_id,
      periode_id,
      type_intervention_id,
      heures,
      motif_non_paiement_id,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'volume_horaire', entity_id);
    RETURN entity_id;
  END;

  FUNCTION ADD_VALIDATION_VOLUME_HORAIRE(
    structure_id      NUMERIC,
    intervenant_id    NUMERIC,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := VALIDATION_ID_SEQ.NEXTVAL;
    INSERT INTO VALIDATION (
      ID,
      TYPE_VALIDATION_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      (SELECT id FROM type_validation WHERE code = 'SERVICES_PAR_COMP'),
      intervenant_id,
      structure_id,
      GET_USER,
      GET_USER
    );
    FOR vh IN (
      SELECT 
        vh.id
      FROM
        volume_horaire vh
        JOIN service s ON s.id = vh.service_id
        JOIN intervenant i ON i.id = s.intervenant_id
        LEFT JOIN element_pedagogique ep on ep.id = s.element_pedagogique_id
      WHERE
        vh.histo_destruction IS NULL AND
        s.histo_destruction IS NULL
        AND (NVL(ep.structure_id,0) = ADD_VALIDATION_VOLUME_HORAIRE.structure_id OR i.structure_id = ADD_VALIDATION_VOLUME_HORAIRE.structure_id)
        AND (s.intervenant_id = ADD_VALIDATION_VOLUME_HORAIRE.intervenant_id)
        AND (vh.id = ADD_VALIDATION_VOLUME_HORAIRE.volume_horaire_id OR ADD_VALIDATION_VOLUME_HORAIRE.volume_horaire_id IS NULL)
        AND (s.id = ADD_VALIDATION_VOLUME_HORAIRE.service_id OR ADD_VALIDATION_VOLUME_HORAIRE.service_id IS NULL)
    ) LOOP
      INSERT INTO VALIDATION_VOL_HORAIRE(
        VALIDATION_ID,
        VOLUME_HORAIRE_ID
      )VALUES(
        entity_id,
        vh.id
      );
    END LOOP;
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'validation', entity_id);
    RETURN entity_id;
  END;

  PROCEDURE DEL_VALIDATION_VOLUME_HORAIRE(
    structure_id      NUMERIC,
    intervenant_id    NUMERIC,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL,
    validation_id     NUMERIC DEFAULT NULL
  ) IS
    vvh_count NUMERIC;
  BEGIN
    FOR vh IN (
      SELECT
        vh.id
      FROM
        volume_horaire vh
        JOIN service s ON s.id = vh.service_id
        JOIN intervenant i ON i.id = s.intervenant_id
        LEFT JOIN element_pedagogique ep on ep.id = s.element_pedagogique_id
      WHERE
        1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction ) AND
        1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
        AND (NVL(ep.structure_id,0) = DEL_VALIDATION_VOLUME_HORAIRE.structure_id OR i.structure_id = DEL_VALIDATION_VOLUME_HORAIRE.structure_id)
        AND (s.intervenant_id = DEL_VALIDATION_VOLUME_HORAIRE.intervenant_id)
        AND (vh.id = DEL_VALIDATION_VOLUME_HORAIRE.volume_horaire_id OR DEL_VALIDATION_VOLUME_HORAIRE.volume_horaire_id IS NULL)
        AND (s.id = DEL_VALIDATION_VOLUME_HORAIRE.service_id OR DEL_VALIDATION_VOLUME_HORAIRE.service_id IS NULL)
    ) LOOP
      DELETE FROM VALIDATION_VOL_HORAIRE WHERE 
        VOLUME_HORAIRE_ID = vh.id 
        AND (VALIDATION_ID = DEL_VALIDATION_VOLUME_HORAIRE.validation_id OR DEL_VALIDATION_VOLUME_HORAIRE.validation_id IS NULL);
    END LOOP;
    IF VALIDATION_ID IS NOT NULL THEN
      SELECT count(*) INTO vvh_count FROM VALIDATION_VOL_HORAIRE WHERE VALIDATION_ID = DEL_VALIDATION_VOLUME_HORAIRE.validation_id;
      IF 0 = vvh_count THEN
        DELETE FROM validation WHERE id = VALIDATION_ID;
      END IF;
    END IF;
  END;

  FUNCTION GET_CONTRAT_BY_ID( ID NUMERIC ) RETURN contrat%rowtype IS
    res contrat%rowtype;
  BEGIN
    SELECT * INTO res FROM contrat WHERE id = GET_CONTRAT_BY_ID.id;
    RETURN res;
  END;



  FUNCTION GET_WF_ETAPE_BY_ID( ID NUMERIC ) RETURN wf_etape%rowtype IS
    res wf_etape%rowtype;
  BEGIN
    SELECT * INTO res FROM wf_etape WHERE id = GET_WF_ETAPE_BY_ID.id;
    RETURN res;
  END;



  FUNCTION ADD_CONTRAT(
    structure_id      NUMERIC DEFAULT NULL,
    intervenant_id    NUMERIC DEFAULT NULL,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL    
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := CONTRAT_ID_SEQ.NEXTVAL;
    INSERT INTO CONTRAT (
      ID,
      TYPE_CONTRAT_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      NUMERO_AVENANT,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      (SELECT id FROM type_contrat WHERE code = 'CONTRAT'),
      intervenant_id,
      structure_id,
      (SELECT MAX(numero_avenant) FROM contrat) + 1,
      GET_USER,
      GET_USER
    );
    FOR vh IN (
      SELECT vh.id FROM volume_horaire vh JOIN service s ON s.id = vh.service_id
      WHERE
        1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
        AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
        AND (s.intervenant_id = ADD_CONTRAT.intervenant_id OR ADD_CONTRAT.intervenant_id IS NULL)
        AND (vh.id = ADD_CONTRAT.volume_horaire_id OR ADD_CONTRAT.volume_horaire_id IS NULL)
        AND (s.id = ADD_CONTRAT.service_id OR ADD_CONTRAT.service_id IS NULL)
        AND vh.contrat_id IS NULL
    ) LOOP
      UPDATE volume_horaire SET contrat_id = entity_id WHERE volume_horaire.id = vh.id;
    END LOOP;

    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'contrat', entity_id);
    RETURN entity_id;
  END;
  
  FUNCTION SIGNATURE_CONTRAT(
    contrat_id        NUMERIC
  ) RETURN NUMERIC IS
  BEGIN
    UPDATE contrat SET date_retour_signe = SYSDATE WHERE id = SIGNATURE_CONTRAT.contrat_id;
    RETURN contrat_id;
  END;
  
  FUNCTION ADD_CONTRAT_VALIDATION( contrat_id NUMERIC ) RETURN NUMERIC IS
    entity_id NUMERIC;
    ctr contrat%rowtype;
  BEGIN
    ctr := GET_CONTRAT_BY_ID( contrat_id );

    IF ctr.validation_id IS NOT NULL THEN RETURN NULL; END IF;

    entity_id := VALIDATION_ID_SEQ.NEXTVAL;
    INSERT INTO VALIDATION (
      ID,
      TYPE_VALIDATION_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      (SELECT id FROM type_validation WHERE code = 'CONTRAT_PAR_COMP'),
      ctr.intervenant_id,
      ctr.structure_id,
      GET_USER,
      GET_USER
    );
    UPDATE contrat SET validation_id = entity_id WHERE id = ADD_CONTRAT_VALIDATION.contrat_id;
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'validation', entity_id);
    RETURN entity_id;
  END;  
  
  FUNCTION DEL_CONTRAT_VALIDATION( contrat_id NUMERIC ) RETURN NUMERIC IS
    ctr contrat%rowtype;
  BEGIN
    ctr := GET_CONTRAT_BY_ID( contrat_id );
    
    IF ctr.validation_id IS NOT NULL THEN
      UPDATE contrat SET validation_id = NULL WHERE contrat_id = DEL_CONTRAT_VALIDATION.contrat_id;
      DELETE FROM validation WHERE id = ctr.validation_id;
    END IF;
    RETURN contrat_id;
  END;
  
  FUNCTION GET_TYPE_VALIDATION( code VARCHAR2 DEFAULT NULL ) RETURN type_validation%rowtype IS
    res type_validation%rowtype;
  BEGIN
    SELECT * INTO res FROM type_validation WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_VALIDATION.code ) = 1 OR GET_TYPE_VALIDATION.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
END OSE_TEST;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_SERVICE_SAISIE
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_SERVICE_SAISIE" AS


  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    UPDATE TBL_SERVICE_SAISIE SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      TBL_SERVICE_SAISIE t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_SERVICE_SAISIE vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id        = v.intervenant_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id                = v.annee_id,
      peut_saisir_service     = v.peut_saisir_service,
      peut_saisir_referentiel = v.peut_saisir_referentiel,
      heures_service_prev     = v.heures_service_prev,
      heures_referentiel_prev = v.heures_referentiel_prev,
      heures_service_real     = v.heures_service_real,
      heures_referentiel_real = v.heures_referentiel_real,
      to_delete               = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      PEUT_SAISIR_SERVICE,
      PEUT_SAISIR_REFERENTIEL,
      HEURES_SERVICE_PREV,
      HEURES_REFERENTIEL_PREV,
      HEURES_SERVICE_REAL,
      HEURES_REFERENTIEL_REAL,
      TO_DELETE

    ) VALUES (

      TBL_SERVICE_SAISIE_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.peut_saisir_service,
      v.peut_saisir_referentiel,
      v.heures_service_prev,
      v.heures_referentiel_prev,
      v.heures_service_real,
      v.heures_referentiel_real,
      0

    );

    DELETE FROM TBL_SERVICE_SAISIE WHERE to_delete = 1;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;

END OSE_SERVICE_SAISIE;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_SERVICE_REFERENTIEL
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_SERVICE_REFERENTIEL" AS


  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    UPDATE tbl_SERVICE_REFERENTIEL SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_SERVICE_REFERENTIEL t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_SERVICE_REFERENTIEL vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id                = v.intervenant_id
      AND NVL(t.type_volume_horaire_id,0) = NVL(v.type_volume_horaire_id,0)
      AND NVL(t.structure_id,0)           = NVL(v.structure_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      peut_saisir_service  = v.peut_saisir_service,
      nbvh                 = v.nbvh,
      valide               = v.valide,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      PEUT_SAISIR_SERVICE,
      TYPE_VOLUME_HORAIRE_ID,
      STRUCTURE_ID,
      NBVH,
      VALIDE,
      TO_DELETE

    ) VALUES (

      TBL_SERVICE_REF_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.peut_saisir_service,
      v.type_volume_horaire_id,
      v.structure_id,
      v.nbvh,
      v.valide,
      0

    );

    DELETE FROM TBL_SERVICE_REFERENTIEL WHERE to_delete = 1;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;

END OSE_SERVICE_REFERENTIEL;
/
---------------------------
--Modifié PACKAGE BODY
--OSE_SERVICE
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_SERVICE" AS


  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    UPDATE tbl_SERVICE SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_SERVICE t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_SERVICE vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.service_id                = v.service_id
      AND NVL(t.type_volume_horaire_id,0) = NVL(v.type_volume_horaire_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      intervenant_id                 = v.intervenant_id,
      structure_id                   = v.structure_id,
      annee_id                       = v.annee_id,
      peut_saisir_service            = v.peut_saisir_service,
      nbvh                           = v.nbvh,
      heures                         = v.heures,
      valide                         = v.valide,
      element_pedagogique_id         = v.element_pedagogique_id,
      element_pedagogique_periode_id = v.element_pedagogique_periode_id,
      etape_id                       = v.etape_id,
      element_pedagogique_histo      = v.element_pedagogique_histo,
      etape_histo                    = v.etape_histo,
      has_heures_mauvaise_periode    = v.has_heures_mauvaise_periode,
      intervenant_structure_id       = v.intervenant_structure_id, 
      type_intervenant_id            = v.type_intervenant_id,
      type_intervenant_code          = v.type_intervenant_code,
      type_volume_horaire_code       = v.type_volume_horaire_code,
      to_delete                      = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      PEUT_SAISIR_SERVICE,
      TYPE_VOLUME_HORAIRE_ID,
      STRUCTURE_ID,
      NBVH,
      heures,
      VALIDE,
      element_pedagogique_id,
      element_pedagogique_periode_id,
      etape_id,
      element_pedagogique_histo,
      etape_histo,
      has_heures_mauvaise_periode,
      service_id,
      intervenant_structure_id,
      type_intervenant_id,
      type_intervenant_code,
      type_volume_horaire_code,
      TO_DELETE

    ) VALUES (

      TBL_SERVICE_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.peut_saisir_service,
      v.type_volume_horaire_id,
      v.structure_id,
      v.nbvh,
      v.heures,
      v.valide,
      v.element_pedagogique_id,
      v.element_pedagogique_periode_id,
      v.etape_id,
      v.element_pedagogique_histo,
      v.etape_histo,
      v.has_heures_mauvaise_periode,
      v.service_id,
      v.intervenant_structure_id,
      v.type_intervenant_id,
      v.type_intervenant_code,
      v.type_volume_horaire_code,
      0

    );

    DELETE FROM TBL_SERVICE WHERE to_delete = 1;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;



  /**
   * Retourne true si le test passe, false sinon
   */
  FUNCTION test_plafond_fc_maj( intervenant_id NUMERIC, type_volume_horaire_id NUMERIC ) RETURN BOOLEAN IS
    heures_restantes FLOAT;
  BEGIN
    BEGIN
      SELECT
        pla.plafond - pla.heures INTO heures_restantes 
      FROM
        v_plafond_fc_maj pla
        JOIN etat_volume_horaire evh ON evh.code = 'saisi' AND evh.id = pla.etat_volume_horaire_id
      WHERE
            intervenant_id         = test_plafond_fc_maj.intervenant_id
        AND type_volume_horaire_id = test_plafond_fc_maj.type_volume_horaire_id;
        
      RETURN heures_restantes >= 0;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN RETURN TRUE;
    END;
  END;



  /**
   * Contrôle du plafond FC D714-60
   */
  PROCEDURE controle_plafond_fc_maj( intervenant_id NUMERIC, type_volume_horaire_id NUMERIC ) IS
  BEGIN
    IF test_plafond_fc_maj(intervenant_id, type_volume_horaire_id) THEN
      
      /* On dit que le contrôle a été effectué !! */
      UPDATE volume_horaire 
      SET tem_plafond_fc_maj = 1 
      WHERE 
        type_volume_horaire_id = controle_plafond_fc_maj.type_volume_horaire_id
        AND service_id IN (SELECT s.id FROM service s WHERE s.intervenant_id = controle_plafond_fc_maj.intervenant_id);
      
    ELSE
      
      /* Suppression des volumes horaires induement créés */
      DELETE FROM volume_horaire 
      WHERE
        tem_plafond_fc_maj <> 1
        AND buff_pfm_heures IS NULL -- on ne détruit que les nouvellement créés
        AND type_volume_horaire_id = controle_plafond_fc_maj.type_volume_horaire_id
        AND service_id IN (SELECT ID FROM service WHERE intervenant_id = controle_plafond_fc_maj.intervenant_id);

      /* remise à l'état antérieur des volumes horaires induement modifiés */
      UPDATE volume_horaire SET
        heures                         = buff_pfm_heures,
        motif_non_paiement_id          = buff_pfm_motif_non_paiement_id,
        histo_modification             = buff_pfm_histo_modification,
        histo_modificateur_id          = buff_pfm_histo_modificateur_id,
        buff_pfm_heures                = NULL,
        buff_pfm_motif_non_paiement_id = NULL,
        buff_pfm_histo_modification    = NULL,
        buff_pfm_histo_modificateur_id = NULL,
        tem_plafond_fc_maj             = 1
      WHERE
        tem_plafond_fc_maj <> 1
        AND buff_pfm_heures IS NOT NULL -- on ne met à jour que les anciennes données
        AND type_volume_horaire_id = controle_plafond_fc_maj.type_volume_horaire_id
        AND service_id IN (SELECT ID FROM service WHERE intervenant_id = controle_plafond_fc_maj.intervenant_id);
        
      /* Purge de la liste des services devenus inutiles (le cas échéant) */
      DELETE FROM service WHERE
        intervenant_id = controle_plafond_fc_maj.intervenant_id
        AND NOT EXISTS(SELECT * FROM volume_horaire WHERE service_id = service.id);
    
      COMMIT; 
      /* Renvoi de l'exception */
      raise_application_error(-20101, ose_divers.get_msg('service-pladond-fc-maj-depasse'));

    END IF;
  END;

END OSE_SERVICE;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_PIECE_JOINTE_FOURNIE
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_PIECE_JOINTE_FOURNIE" AS


  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    UPDATE tbl_PIECE_JOINTE_FOURNIE SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_PIECE_JOINTE_FOURNIE t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_PIECE_JOINTE_FOURNIE vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
      t.type_piece_jointe_id     = v.type_piece_jointe_id
      AND t.intervenant_id       = v.intervenant_id
      AND NVL(t.validation_id,0) = NVL(v.validation_id,0)
      AND NVL(t.fichier_id,0)    = NVL(v.fichier_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      piece_jointe_id      = v.piece_jointe_id,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      TYPE_PIECE_JOINTE_ID,
      INTERVENANT_ID,
      PIECE_JOINTE_ID,
      VALIDATION_ID,
      FICHIER_ID,
      TO_DELETE

    ) VALUES (

      TBL_PJ_FOURNIE_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.type_piece_jointe_id,
      v.intervenant_id,
      v.piece_jointe_id,
      v.validation_id,
      v.fichier_id,
      0

    );

    DELETE FROM TBL_PIECE_JOINTE_FOURNIE WHERE to_delete = 1;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;

END OSE_PIECE_JOINTE_FOURNIE;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_PIECE_JOINTE_DEMANDE
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_PIECE_JOINTE_DEMANDE" AS


  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    UPDATE TBL_PIECE_JOINTE_DEMANDE SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_PIECE_JOINTE_DEMANDE t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_PIECE_JOINTE_DEMANDE vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.type_piece_jointe_id = v.type_piece_jointe_id
      AND t.intervenant_id       = v.intervenant_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      heures_pour_seuil    = v.heures_pour_seuil,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      TYPE_PIECE_JOINTE_ID,
      INTERVENANT_ID,
      HEURES_POUR_SEUIL,
      TO_DELETE

    ) VALUES (

      TBL_PJ_DEMANDE_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.type_piece_jointe_id,
      v.intervenant_id,
      v.heures_pour_seuil,
      0

    );

    DELETE FROM TBL_PIECE_JOINTE_DEMANDE WHERE to_delete = 1;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;

END OSE_PIECE_JOINTE_DEMANDE;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_PIECE_JOINTE
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_PIECE_JOINTE" AS


  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    UPDATE tbl_PIECE_JOINTE SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_PIECE_JOINTE t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_PIECE_JOINTE vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.type_piece_jointe_id = v.type_piece_jointe_id
          AND t.intervenant_id   = v.intervenant_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      demandee             = v.demandee,
      fournie              = v.fournie,
      validee              = v.validee,
      heures_pour_seuil    = v.heures_pour_seuil,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      TYPE_PIECE_JOINTE_ID,
      INTERVENANT_ID,
      DEMANDEE,
      FOURNIE,
      VALIDEE,
      HEURES_POUR_SEUIL,
      TO_DELETE

    ) VALUES (

      TBL_PIECE_JOINTE_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.type_piece_jointe_id,
      v.intervenant_id,
      v.demandee,
      v.fournie,
      v.validee,
      v.heures_pour_seuil,
      0

    );

    DELETE FROM TBL_PIECE_JOINTE WHERE to_delete = 1;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;
  
END OSE_PIECE_JOINTE;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_PAIEMENT
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_PAIEMENT" AS


  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    UPDATE tbl_paiement SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_paiement t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_PAIEMENT vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
              t.service_a_payer_id         = v.service_a_payer_id
          AND t.intervenant_id             = v.intervenant_id
          AND nvl(t.mise_en_paiement_id,0) = nvl(v.mise_en_paiement_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      service_a_payer_type = v.service_a_payer_type,
      structure_id         = v.structure_id,
      periode_paiement_id  = v.periode_paiement_id,
      heures_a_payer       = v.heures_a_payer,
      heures_a_payer_pond  = v.heures_a_payer_pond,
      heures_demandees     = v.heures_demandees,
      heures_payees        = v.heures_payees,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      SERVICE_A_PAYER_TYPE,
      SERVICE_A_PAYER_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      MISE_EN_PAIEMENT_ID,
      PERIODE_PAIEMENT_ID,
      HEURES_A_PAYER,
      HEURES_A_PAYER_POND,
      HEURES_DEMANDEES,
      HEURES_PAYEES,
      TO_DELETE

    ) VALUES (

      TBL_PAIEMENT_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.service_a_payer_type,
      v.service_a_payer_id,
      v.intervenant_id,
      v.structure_id,
      v.mise_en_paiement_id,
      v.periode_paiement_id,
      v.heures_a_payer,
      v.heures_a_payer_pond,
      v.heures_demandees,
      v.heures_payees,
      0

    );

    DELETE FROM TBL_PAIEMENT WHERE to_delete = 1;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;



  PROCEDURE CHECK_BAD_PAIEMENTS( FORMULE_RES_SERVICE_ID NUMERIC DEFAULT NULL, FORMULE_RES_SERVICE_REF_ID NUMERIC DEFAULT NULL ) IS
    cc NUMERIC;
  BEGIN
    SELECT count(*) INTO cc 
    FROM mise_en_paiement mep 
    WHERE
      mep.histo_destruction IS NULL
      AND mep.formule_res_service_id = NVL( CHECK_BAD_PAIEMENTS.FORMULE_RES_SERVICE_ID, mep.formule_res_service_id )
      AND mep.formule_res_service_ref_id = NVL( CHECK_BAD_PAIEMENTS.FORMULE_RES_SERVICE_REF_ID, mep.formule_res_service_ref_id )
  ;

    IF (cc > 0) THEN
      raise_application_error(-20101, 'Il est impossible d''effectuer cette action : des demandes de mise en paiement ont été saisies et ne peuvent pas être modifiées');
    ELSE
      DELETE FROM mise_en_paiement WHERE 
        histo_destruction IS NOT NULL
        AND formule_res_service_id = NVL( CHECK_BAD_PAIEMENTS.FORMULE_RES_SERVICE_ID, formule_res_service_id )
        AND formule_res_service_ref_id = NVL( CHECK_BAD_PAIEMENTS.FORMULE_RES_SERVICE_REF_ID, formule_res_service_ref_id )
      ;
    END IF;
  END;
  
END OSE_PAIEMENT;
/
---------------------------
--Modifié PACKAGE BODY
--OSE_IMPORT
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_IMPORT" IS

  PROCEDURE REFRESH_MV( mview_name varchar2 ) IS
  BEGIN
    DBMS_MVIEW.REFRESH(mview_name, 'C');
  EXCEPTION WHEN OTHERS THEN
    UNICAEN_IMPORT.SYNC_LOG( SQLERRM, mview_name );
  END;

  PROCEDURE REFRESH_MVS IS
  BEGIN
    -- Mise à jour des vues matérialisées
    REFRESH_MV('MV_PAYS');
    REFRESH_MV('MV_DEPARTEMENT');
    REFRESH_MV('MV_ETABLISSEMENT');
    REFRESH_MV('MV_STRUCTURE');
    REFRESH_MV('MV_ADRESSE_STRUCTURE');
    
    REFRESH_MV('MV_PERSONNEL');
    REFRESH_MV('MV_AFFECTATION');
    
    REFRESH_MV('MV_CORPS');
    REFRESH_MV('MV_GRADE');
    
    REFRESH_MV('MV_INTERVENANT');
    REFRESH_MV('MV_AFFECTATION_RECHERCHE');
    REFRESH_MV('MV_ADRESSE_INTERVENANT');
    REFRESH_MV('MV_INTERVENANT_RECHERCHE'); -- pour la recherche d'intervenants
    
    REFRESH_MV('MV_GROUPE_TYPE_FORMATION');
    REFRESH_MV('MV_TYPE_FORMATION');
    REFRESH_MV('MV_ETAPE');
    REFRESH_MV('MV_ELEMENT_PEDAGOGIQUE');
    REFRESH_MV('MV_EFFECTIFS');
    REFRESH_MV('MV_ELEMENT_TAUX_REGIMES');
    REFRESH_MV('MV_CHEMIN_PEDAGOGIQUE');
    REFRESH_MV('MV_ELEMENT_PORTEUR_PORTE');
    
    REFRESH_MV('MV_CENTRE_COUT');
    REFRESH_MV('MV_DOMAINE_FONCTIONNEL');
  END;

  PROCEDURE SYNC_TABLES IS
  BEGIN
    UNICAEN_IMPORT.MAJ_PAYS();
    UNICAEN_IMPORT.MAJ_DEPARTEMENT();
  
    UNICAEN_IMPORT.MAJ_ETABLISSEMENT();
    UNICAEN_IMPORT.MAJ_STRUCTURE();
    UNICAEN_IMPORT.MAJ_ADRESSE_STRUCTURE();
    
    UNICAEN_IMPORT.MAJ_DOMAINE_FONCTIONNEL();
    UNICAEN_IMPORT.MAJ_CENTRE_COUT();
    UNICAEN_IMPORT.MAJ_CENTRE_COUT_STRUCTURE();

    UNICAEN_IMPORT.MAJ_PERSONNEL();
    UNICAEN_IMPORT.MAJ_AFFECTATION();

    UNICAEN_IMPORT.MAJ_CORPS();
    UNICAEN_IMPORT.MAJ_GRADE();

    UNICAEN_IMPORT.MAJ_INTERVENANT();
    UNICAEN_IMPORT.MAJ_AFFECTATION_RECHERCHE();
    UNICAEN_IMPORT.MAJ_ADRESSE_INTERVENANT();

    UNICAEN_IMPORT.MAJ_GROUPE_TYPE_FORMATION();
    UNICAEN_IMPORT.MAJ_TYPE_FORMATION();
    UNICAEN_IMPORT.MAJ_ETAPE();
    UNICAEN_IMPORT.MAJ_ELEMENT_PEDAGOGIQUE();
    UNICAEN_IMPORT.MAJ_EFFECTIFS();
    UNICAEN_IMPORT.MAJ_ELEMENT_TAUX_REGIMES();
    UNICAEN_IMPORT.MAJ_CHEMIN_PEDAGOGIQUE();
    
    -- Mise à jour des sources calculées en dernier
    UNICAEN_IMPORT.MAJ_TYPE_INTERVENTION_EP();
    UNICAEN_IMPORT.MAJ_TYPE_MODULATEUR_EP();
  END;

  PROCEDURE SYNCHRONISATION IS
  BEGIN
    REFRESH_MVS;
    SYNC_TABLES;
  END SYNCHRONISATION;

END ose_import;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_HISTO
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_HISTO" AS 

  FUNCTION FILTRE( histo_debut NUMERIC, histo_fin NUMERIC ) RETURN NUMERIC IS
  BEGIN
    RETURN 1;
  END;

END OSE_HISTO;
/
---------------------------
--Modifié PACKAGE BODY
--OSE_FORMULE
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_FORMULE" AS

  v_date_obs DATE;
  debug_level NUMERIC DEFAULT 0;
  d_all_volume_horaire_ref  t_lst_volume_horaire_ref;
  d_all_volume_horaire      t_lst_volume_horaire;
  arrondi NUMERIC DEFAULT 2;



  FUNCTION GET_DATE_OBS RETURN DATE AS
  BEGIN
    RETURN COALESCE( v_date_obs, SYSDATE );
  END;

  FUNCTION SET_DATE_OBS( DATE_OBS DATE DEFAULT NULL ) RETURN DATE IS
  BEGIN
    v_date_obs := DATE_OBS;
    RETURN v_date_obs;
  END;

  PROCEDURE SET_DEBUG_LEVEL( DEBUG_LEVEL NUMERIC ) IS
  BEGIN
    ose_formule.debug_level := SET_DEBUG_LEVEL.DEBUG_LEVEL;
  END;
  
  FUNCTION GET_DEBUG_LEVEL RETURN NUMERIC IS
  BEGIN
    RETURN ose_formule.debug_level;
  END;

  FUNCTION GET_TAUX_HORAIRE_HETD( DATE_OBS DATE DEFAULT NULL ) RETURN FLOAT IS
    taux_hetd FLOAT;
  BEGIN
    SELECT valeur INTO taux_hetd FROM taux_horaire_hetd t WHERE 1 = OSE_DIVERS.COMPRISE_ENTRE( t.histo_creation, t.histo_destruction, DATE_OBS );
    RETURN taux_hetd;
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
    a_id NUMERIC;
  BEGIN
    a_id := NVL(CALCULER_TOUT.ANNEE_ID, OSE_PARAMETRE.GET_ANNEE);
    FOR mp IN (
      SELECT DISTINCT
        intervenant_id 
      FROM 
        service s
        JOIN intervenant i ON i.id = s.intervenant_id
      WHERE
        1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction, ose_formule.get_date_obs )
        AND i.annee_id = a_id
        
      UNION
      
      SELECT DISTINCT
        intervenant_id
      FROM
        service_referentiel sr
        JOIN intervenant i ON i.id = sr.intervenant_id
      WHERE
        1 = ose_divers.comprise_entre( sr.histo_creation, sr.histo_destruction, ose_formule.get_date_obs )
        AND i.annee_id = a_id

    )
    LOOP
      CALCULER( mp.intervenant_id );
    END LOOP;
  END;



  FUNCTION ENREGISTRER_RESULTAT( fr formule_resultat%rowtype ) RETURN NUMERIC IS
    id NUMERIC;
    ti_code VARCHAR(5);
  BEGIN
    
    SELECT
      ti.code INTO ti_code 
    FROM 
      type_intervenant        ti 
      JOIN statut_intervenant si ON si.type_intervenant_id = ti.id 
      JOIN intervenant         i ON i.statut_id = si.id 
    WHERE 
      i.id = fr.intervenant_id;
  
  
  
    MERGE INTO formule_resultat tfr USING dual ON (

          tfr.intervenant_id         = fr.intervenant_id
      AND tfr.type_volume_horaire_id = fr.type_volume_horaire_id
      AND tfr.etat_volume_horaire_id = fr.etat_volume_horaire_id
      
    ) WHEN MATCHED THEN UPDATE SET
    
      service_du                     = ROUND( fr.service_du, arrondi ),
      service_fi                     = ROUND( fr.service_fi, arrondi ),
      service_fa                     = ROUND( fr.service_fa, arrondi ),
      service_fc                     = ROUND( fr.service_fc, arrondi ),
      service_referentiel            = ROUND( fr.service_referentiel, arrondi ),
      heures_compl_fi                = ROUND( fr.heures_compl_fi, arrondi ),
      heures_compl_fa                = ROUND( fr.heures_compl_fa, arrondi ),
      heures_compl_fc                = ROUND( fr.heures_compl_fc, arrondi ),
      heures_compl_fc_majorees       = ROUND( fr.heures_compl_fc_majorees, arrondi ),
      heures_compl_referentiel       = ROUND( fr.heures_compl_referentiel, arrondi ),
      total                          = ROUND( fr.total, arrondi ),
      solde                          = ROUND( fr.solde, arrondi ),
      sous_service                   = ROUND( fr.sous_service, arrondi ),
      heures_compl                   = ROUND( fr.heures_compl, arrondi ),
      to_delete                      = 0
      
    WHEN NOT MATCHED THEN INSERT (
    
      ID,
      INTERVENANT_ID,
      TYPE_VOLUME_HORAIRE_ID,
      ETAT_VOLUME_HORAIRE_ID,
      SERVICE_DU,
      SERVICE_FI,
      SERVICE_FA,
      SERVICE_FC,
      SERVICE_REFERENTIEL,
      HEURES_COMPL_FI,
      HEURES_COMPL_FA,
      HEURES_COMPL_FC,
      HEURES_COMPL_FC_majorees,
      HEURES_COMPL_REFERENTIEL,
      TOTAL,
      SOLDE,
      SOUS_SERVICE,
      HEURES_COMPL,
      TO_DELETE,
      type_intervenant_code
      
    ) VALUES (
    
      FORMULE_RESULTAT_ID_SEQ.NEXTVAL,
      fr.intervenant_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      ROUND( fr.service_du, arrondi ),
      ROUND( fr.service_fi, arrondi ),
      ROUND( fr.service_fa, arrondi ),
      ROUND( fr.service_fc, arrondi ),
      ROUND( fr.service_referentiel, arrondi ),
      ROUND( fr.heures_compl_fi, arrondi ),
      ROUND( fr.heures_compl_fa, arrondi ),
      ROUND( fr.heures_compl_fc, arrondi ),
      ROUND( fr.heures_compl_fc_majorees, arrondi ),
      ROUND( fr.heures_compl_referentiel, arrondi ),
      ROUND( fr.total, arrondi ),
      ROUND( fr.solde, arrondi ),
      ROUND( fr.sous_service, arrondi ),
      ROUND( fr.heures_compl, arrondi ),
      0,
      ti_code
    );
    
    SELECT id INTO id FROM formule_resultat tfr WHERE
          tfr.intervenant_id         = fr.intervenant_id
      AND tfr.type_volume_horaire_id = fr.type_volume_horaire_id
      AND tfr.etat_volume_horaire_id = fr.etat_volume_horaire_id;
    RETURN id;
  END;


  FUNCTION ENREGISTRER_RESULTAT_SERVICE( fs formule_resultat_service%rowtype ) RETURN NUMERIC IS
    id NUMERIC;
  BEGIN
    MERGE INTO formule_resultat_service tfs USING dual ON (
    
          tfs.formule_resultat_id    = fs.formule_resultat_id
      AND tfs.service_id             = fs.service_id

    ) WHEN MATCHED THEN UPDATE SET
    
      service_fi                     = ROUND( fs.service_fi, arrondi ),
      service_fa                     = ROUND( fs.service_fa, arrondi ),
      service_fc                     = ROUND( fs.service_fc, arrondi ),
      heures_compl_fi                = ROUND( fs.heures_compl_fi, arrondi ),
      heures_compl_fa                = ROUND( fs.heures_compl_fa, arrondi ),
      heures_compl_fc                = ROUND( fs.heures_compl_fc, arrondi ),
      heures_compl_fc_majorees       = ROUND( fs.heures_compl_fc_majorees, arrondi ),
      total                          = ROUND( fs.total, arrondi ),
      TO_DELETE                      = 0
      
    WHEN NOT MATCHED THEN INSERT (
    
      ID,
      FORMULE_RESULTAT_ID,
      SERVICE_ID,
      SERVICE_FI,
      SERVICE_FA,
      SERVICE_FC,
      HEURES_COMPL_FI,
      HEURES_COMPL_FA,
      HEURES_COMPL_FC,
      HEURES_COMPL_FC_majorees,
      TOTAL,
      TO_DELETE

    ) VALUES (

      FORMULE_RESULTAT_SERVIC_ID_SEQ.NEXTVAL,
      fs.formule_resultat_id,
      fs.service_id,
      ROUND( fs.service_fi, arrondi ),
      ROUND( fs.service_fa, arrondi ),
      ROUND( fs.service_fc, arrondi ),
      ROUND( fs.heures_compl_fi, arrondi ),
      ROUND( fs.heures_compl_fa, arrondi ),
      ROUND( fs.heures_compl_fc, arrondi ),
      ROUND( fs.heures_compl_fc_majorees, arrondi ),
      ROUND( fs.total, arrondi ),
      0
      
    );
    
    SELECT id INTO id FROM formule_resultat_service tfs WHERE
          tfs.formule_resultat_id    = fs.formule_resultat_id
      AND tfs.service_id             = fs.service_id;
    RETURN id;
  END;


  FUNCTION ENREGISTRER_RESULTAT_VH( fvh formule_resultat_vh%rowtype ) RETURN NUMERIC IS
    id NUMERIC;
  BEGIN
    MERGE INTO formule_resultat_vh tfvh USING dual ON (
    
          tfvh.formule_resultat_id    = fvh.formule_resultat_id
      AND tfvh.volume_horaire_id      = fvh.volume_horaire_id

    ) WHEN MATCHED THEN UPDATE SET
    
      service_fi                     = ROUND( fvh.service_fi, arrondi ),
      service_fa                     = ROUND( fvh.service_fa, arrondi ),
      service_fc                     = ROUND( fvh.service_fc, arrondi ),
      heures_compl_fi                = ROUND( fvh.heures_compl_fi, arrondi ),
      heures_compl_fa                = ROUND( fvh.heures_compl_fa, arrondi ),
      heures_compl_fc                = ROUND( fvh.heures_compl_fc, arrondi ),
      heures_compl_fc_majorees       = ROUND( fvh.heures_compl_fc_majorees, arrondi ),
      total                          = ROUND( fvh.total, arrondi ),
      TO_DELETE                      = 0
      
    WHEN NOT MATCHED THEN INSERT (
    
      ID,
      FORMULE_RESULTAT_ID,
      VOLUME_HORAIRE_ID,
      SERVICE_FI,
      SERVICE_FA,
      SERVICE_FC,
      HEURES_COMPL_FI,
      HEURES_COMPL_FA,
      HEURES_COMPL_FC,
      HEURES_COMPL_FC_MAJOREES,
      TOTAL,
      TO_DELETE

    ) VALUES (

      FORMULE_RESULTAT_VH_ID_SEQ.NEXTVAL,
      fvh.formule_resultat_id,
      fvh.volume_horaire_id,
      ROUND( fvh.service_fi, arrondi ),
      ROUND( fvh.service_fa, arrondi ),
      ROUND( fvh.service_fc, arrondi ),
      ROUND( fvh.heures_compl_fi, arrondi ),
      ROUND( fvh.heures_compl_fa, arrondi ),
      ROUND( fvh.heures_compl_fc, arrondi ),
      ROUND( fvh.heures_compl_fc_majorees, arrondi ),
      ROUND( fvh.total, arrondi ),
      0
      
    );
    
    SELECT id INTO id FROM formule_resultat_vh tfvh WHERE
          tfvh.formule_resultat_id    = fvh.formule_resultat_id
      AND tfvh.volume_horaire_id      = fvh.volume_horaire_id;
    RETURN id;
  END;
  
  
  FUNCTION ENREGISTRER_RESULTAT_SERV_REF( fr formule_resultat_service_ref%rowtype ) RETURN NUMERIC IS
    id NUMERIC;
  BEGIN
    MERGE INTO formule_resultat_service_ref tfr USING dual ON (

          tfr.formule_resultat_id    = fr.formule_resultat_id
      AND tfr.service_referentiel_id = fr.service_referentiel_id

    ) WHEN MATCHED THEN UPDATE SET

      service_referentiel            = ROUND( fr.service_referentiel, arrondi ),
      heures_compl_referentiel       = ROUND( fr.heures_compl_referentiel, arrondi ),
      TO_DELETE                      = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      FORMULE_RESULTAT_ID,
      SERVICE_REFERENTIEL_ID,
      SERVICE_REFERENTIEL,
      HEURES_COMPL_REFERENTIEL,
      TOTAL,
      TO_DELETE

    ) VALUES (

      FORMULE_RESULTAT_SERVIC_ID_SEQ.NEXTVAL,
      fr.formule_resultat_id,
      fr.service_referentiel_id,
      ROUND( fr.service_referentiel, arrondi ),
      ROUND( fr.heures_compl_referentiel, arrondi ),
      fr.total,
      0

    );

    SELECT id INTO id FROM formule_resultat_service_ref tfr WHERE
          tfr.formule_resultat_id    = fr.formule_resultat_id
      AND tfr.service_referentiel_id = fr.service_referentiel_id;
      
    RETURN id;
  END;
  

  FUNCTION ENREGISTRER_RESULTAT_VH_REF( fvh formule_resultat_vh_ref%rowtype ) RETURN NUMERIC IS
    id NUMERIC;
  BEGIN
    MERGE INTO formule_resultat_vh_ref tfvh USING dual ON (
    
          tfvh.formule_resultat_id    = fvh.formule_resultat_id
      AND tfvh.volume_horaire_ref_id      = fvh.volume_horaire_ref_id

    ) WHEN MATCHED THEN UPDATE SET
    
      service_referentiel            = ROUND( fvh.service_referentiel, arrondi ),
      heures_compl_referentiel       = ROUND( fvh.heures_compl_referentiel, arrondi ),
      total                          = fvh.total,
      TO_DELETE                      = 0
      
    WHEN NOT MATCHED THEN INSERT (
    
      ID,
      FORMULE_RESULTAT_ID,
      VOLUME_HORAIRE_REF_ID,
      SERVICE_REFERENTIEL,
      HEURES_COMPL_REFERENTIEL,
      TOTAL,
      TO_DELETE

    ) VALUES (

      FORMULE_RESULTAT_VH_ID_SEQ.NEXTVAL,
      fvh.formule_resultat_id,
      fvh.volume_horaire_ref_id,
      ROUND( fvh.service_referentiel, arrondi ),
      ROUND( fvh.heures_compl_referentiel, arrondi ),
      fvh.total,
      0
      
    );
    
    SELECT id INTO id FROM formule_resultat_vh_ref tfvh WHERE
          tfvh.formule_resultat_id    = fvh.formule_resultat_id
      AND tfvh.volume_horaire_ref_id  = fvh.volume_horaire_ref_id;
    RETURN id;
  END;
  
  
  PROCEDURE POPULATE_INTERVENANT( INTERVENANT_ID NUMERIC, d_intervenant OUT t_intervenant ) IS
  BEGIN

    SELECT
      structure_id,
      annee_id,
      heures_service_statutaire,
      depassement_service_du_sans_hc
    INTO
      d_intervenant.structure_id,
      d_intervenant.annee_id,
      d_intervenant.heures_service_statutaire,
      d_intervenant.depassement_service_du_sans_hc
    FROM
      v_formule_intervenant fi
    WHERE
      fi.id = POPULATE_INTERVENANT.INTERVENANT_ID;

    SELECT
      NVL( SUM(heures), 0),
      NVL( SUM(heures_decharge), 0)
    INTO
      d_intervenant.heures_service_modifie,
      d_intervenant.heures_decharge
    FROM
      v_formule_service_modifie fsm
    WHERE
      fsm.intervenant_id = POPULATE_INTERVENANT.INTERVENANT_ID;
  
  EXCEPTION WHEN NO_DATA_FOUND THEN
    d_intervenant.structure_id := null;
    d_intervenant.annee_id := null;
    d_intervenant.heures_service_statutaire := 0;
    d_intervenant.depassement_service_du_sans_hc := 0;
    d_intervenant.heures_service_modifie := 0;
    d_intervenant.heures_decharge := 0;
  END;
  

  PROCEDURE POPULATE_SERVICE_REF( INTERVENANT_ID NUMERIC, d_service_ref OUT t_lst_service_ref ) IS
    i PLS_INTEGER;
  BEGIN
    d_service_ref.delete;

    FOR d IN (
      SELECT
        fr.id,
        fr.structure_id
      FROM
        v_formule_service_ref fr
      WHERE
        fr.intervenant_id = POPULATE_SERVICE_REF.INTERVENANT_ID
    ) LOOP
      d_service_ref( d.id ).id           := d.id;
      d_service_ref( d.id ).structure_id := d.structure_id;
    END LOOP;
  END;


  PROCEDURE POPULATE_SERVICE( INTERVENANT_ID NUMERIC, d_service OUT t_lst_service ) IS
  BEGIN
    d_service.delete;

    FOR d IN (
      SELECT
        id,
        taux_fi,
        taux_fa,
        taux_fc,
        structure_aff_id,
        structure_ens_id,
        ponderation_service_du,
        ponderation_service_compl
      FROM
        v_formule_service fs
      WHERE
        fs.intervenant_id = POPULATE_SERVICE.INTERVENANT_ID
    ) LOOP
      d_service( d.id ).id                        := d.id;
      d_service( d.id ).taux_fi                   := d.taux_fi;
      d_service( d.id ).taux_fa                   := d.taux_fa;
      d_service( d.id ).taux_fc                   := d.taux_fc;
      d_service( d.id ).ponderation_service_du    := d.ponderation_service_du;
      d_service( d.id ).ponderation_service_compl := d.ponderation_service_compl;
      d_service( d.id ).structure_aff_id          := d.structure_aff_id;
      d_service( d.id ).structure_ens_id          := d.structure_ens_id;
    END LOOP;
  END;

  PROCEDURE POPULATE_VOLUME_HORAIRE_REF( INTERVENANT_ID NUMERIC, d_volume_horaire_ref OUT t_lst_volume_horaire_ref ) IS
  BEGIN
    d_volume_horaire_ref.delete;

    FOR d IN (
      SELECT
        id,
        service_referentiel_id,
        heures,
        fvh.type_volume_horaire_id,
        fvh.etat_volume_horaire_id,
        fvh.etat_volume_horaire_ordre
      FROM
        v_formule_volume_horaire_ref fvh
      WHERE
        fvh.intervenant_id                = POPULATE_VOLUME_HORAIRE_REF.INTERVENANT_ID
    ) LOOP
      d_volume_horaire_ref( d.id ).id                        := d.id;
      d_volume_horaire_ref( d.id ).service_referentiel_id    := d.service_referentiel_id;
      d_volume_horaire_ref( d.id ).heures                    := d.heures;
      d_volume_horaire_ref( d.id ).type_volume_horaire_id    := d.type_volume_horaire_id;
      d_volume_horaire_ref( d.id ).etat_volume_horaire_id    := d.etat_volume_horaire_id;
      d_volume_horaire_ref( d.id ).etat_volume_horaire_ordre := d.etat_volume_horaire_ordre;
    END LOOP;
  END;

  PROCEDURE POPULATE_VOLUME_HORAIRE( INTERVENANT_ID NUMERIC, d_volume_horaire OUT t_lst_volume_horaire ) IS
  BEGIN
    d_volume_horaire.delete;

    FOR d IN (
      SELECT
        id,
        service_id,
        heures,
        taux_service_du,
        taux_service_compl,
        fvh.type_volume_horaire_id,
        fvh.etat_volume_horaire_id,
        fvh.etat_volume_horaire_ordre
      FROM
        v_formule_volume_horaire fvh
      WHERE
        fvh.intervenant_id                = POPULATE_VOLUME_HORAIRE.INTERVENANT_ID
    ) LOOP
      d_volume_horaire( d.id ).id                        := d.id;
      d_volume_horaire( d.id ).service_id                := d.service_id;
      d_volume_horaire( d.id ).heures                    := d.heures;
      d_volume_horaire( d.id ).taux_service_du           := d.taux_service_du;
      d_volume_horaire( d.id ).taux_service_compl        := d.taux_service_compl;
      d_volume_horaire( d.id ).type_volume_horaire_id    := d.type_volume_horaire_id;
      d_volume_horaire( d.id ).etat_volume_horaire_id    := d.etat_volume_horaire_id;
      d_volume_horaire( d.id ).etat_volume_horaire_ordre := d.etat_volume_horaire_ordre;
    END LOOP;
  END;


  PROCEDURE POPULATE_TYPE_ETAT_VH( d_volume_horaire t_lst_volume_horaire, d_volume_horaire_ref t_lst_volume_horaire_ref, d_type_etat_vh OUT t_lst_type_etat_vh ) IS
    TYPE t_ordres IS TABLE OF NUMERIC INDEX BY PLS_INTEGER;

    ordres_found t_ordres;
    ordres_exists t_ordres;
    type_volume_horaire_id PLS_INTEGER;
    etat_volume_horaire_ordre PLS_INTEGER;
    id PLS_INTEGER;
  BEGIN
    d_type_etat_vh.delete;

    -- récupération des ID et ordres de volumes horaires
    FOR evh IN (
      SELECT   id, ordre
      FROM     etat_volume_horaire evh
      WHERE    OSE_DIVERS.COMPRISE_ENTRE( evh.histo_creation, evh.histo_destruction ) = 1
      ORDER BY ordre
    ) LOOP
      ordres_exists( evh.ordre ) := evh.id;
    END LOOP;

    -- récupération des ordres maximum par type d'intervention
    id := d_volume_horaire.FIRST;
    LOOP EXIT WHEN id IS NULL;
      IF NOT ordres_found.EXISTS(d_volume_horaire(id).type_volume_horaire_id) THEN
        ordres_found( d_volume_horaire(id).type_volume_horaire_id ) := d_volume_horaire(id).etat_volume_horaire_ordre;
      ELSIF ordres_found( d_volume_horaire(id).type_volume_horaire_id ) < d_volume_horaire(id).etat_volume_horaire_ordre THEN
        ordres_found( d_volume_horaire(id).type_volume_horaire_id ) := d_volume_horaire(id).etat_volume_horaire_ordre;
      END IF;
      id := d_volume_horaire.NEXT(id);
    END LOOP;
    
    id := d_volume_horaire_ref.FIRST;
    LOOP EXIT WHEN id IS NULL;
      IF NOT ordres_found.EXISTS(d_volume_horaire_ref(id).type_volume_horaire_id) THEN
        ordres_found( d_volume_horaire_ref(id).type_volume_horaire_id ) := d_volume_horaire_ref(id).etat_volume_horaire_ordre;
      ELSIF ordres_found( d_volume_horaire_ref(id).type_volume_horaire_id ) < d_volume_horaire_ref(id).etat_volume_horaire_ordre THEN
        ordres_found( d_volume_horaire_ref(id).type_volume_horaire_id ) := d_volume_horaire_ref(id).etat_volume_horaire_ordre;
      END IF;
      id := d_volume_horaire_ref.NEXT(id);
    END LOOP;
    
    -- peuplement des t_lst_type_etat_vh
    type_volume_horaire_id := ordres_found.FIRST;
    LOOP EXIT WHEN type_volume_horaire_id IS NULL;
      etat_volume_horaire_ordre := ordres_exists.FIRST;
      LOOP EXIT WHEN etat_volume_horaire_ordre IS NULL;
        IF etat_volume_horaire_ordre <= ordres_found(type_volume_horaire_id) THEN
          d_type_etat_vh( type_volume_horaire_id + 100000 * etat_volume_horaire_ordre ).type_volume_horaire_id := type_volume_horaire_id;
          d_type_etat_vh( type_volume_horaire_id + 100000 * etat_volume_horaire_ordre ).etat_volume_horaire_id := ordres_exists( etat_volume_horaire_ordre );
        END IF;
        etat_volume_horaire_ordre := ordres_exists.NEXT(etat_volume_horaire_ordre);
      END LOOP;
      
      type_volume_horaire_id := ordres_found.NEXT(type_volume_horaire_id);
    END LOOP;

  END;


  PROCEDURE POPULATE( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    POPULATE_INTERVENANT    ( INTERVENANT_ID, d_intervenant );
    IF d_intervenant.heures_service_statutaire IS NOT NULL THEN -- sinon rien n'est à faire!!
      POPULATE_SERVICE_REF        ( INTERVENANT_ID, d_service_ref         );
      POPULATE_SERVICE            ( INTERVENANT_ID, d_service             );
      POPULATE_VOLUME_HORAIRE_REF ( INTERVENANT_ID, d_all_volume_horaire_ref  );
      POPULATE_VOLUME_HORAIRE     ( INTERVENANT_ID, d_all_volume_horaire      );
      POPULATE_TYPE_ETAT_VH       ( d_all_volume_horaire, d_all_volume_horaire_ref, d_type_etat_vh );
    END IF;
  END;

  
  PROCEDURE POPULATE_FILTER( TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) IS
    EVH_ORDRE NUMERIC;
    id PLS_INTEGER;
  BEGIN
    d_volume_horaire.delete;
    d_volume_horaire_ref.delete;

    SELECT ordre INTO EVH_ORDRE FROM etat_volume_horaire WHERE ID = ETAT_VOLUME_HORAIRE_ID;

    id := d_all_volume_horaire.FIRST;
    LOOP EXIT WHEN id IS NULL;
      IF
        d_all_volume_horaire(id).type_volume_horaire_id = TYPE_VOLUME_HORAIRE_ID
        AND d_all_volume_horaire(id).etat_volume_horaire_ordre >= EVH_ORDRE 
      THEN
        d_volume_horaire(id) := d_all_volume_horaire(id);
      END IF;
      id := d_all_volume_horaire.NEXT(id);
    END LOOP;
    
    id := d_all_volume_horaire_ref.FIRST;
    LOOP EXIT WHEN id IS NULL;
      IF
        d_all_volume_horaire_ref(id).type_volume_horaire_id = TYPE_VOLUME_HORAIRE_ID
        AND d_all_volume_horaire_ref(id).etat_volume_horaire_ordre >= EVH_ORDRE 
      THEN
        d_volume_horaire_ref(id) := d_all_volume_horaire_ref(id);
      END IF;
      id := d_all_volume_horaire_ref.NEXT(id);
    END LOOP;
  END;


  PROCEDURE INIT_RESULTAT ( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) IS
  BEGIN
    d_resultat.intervenant_id         := INTERVENANT_ID;
    d_resultat.type_volume_horaire_id := TYPE_VOLUME_HORAIRE_ID;
    d_resultat.etat_volume_horaire_id := ETAT_VOLUME_HORAIRE_ID;
    d_resultat.service_du             := 0;
    d_resultat.solde                  := 0;
    d_resultat.sous_service           := 0;
    d_resultat.heures_compl           := 0;
    d_resultat.volume_horaire.delete;
    d_resultat.volume_horaire_ref.delete;
  END;


  PROCEDURE CALC_RESULTAT IS
    function_name VARCHAR2(30);
    package_name VARCHAR2(30);
  BEGIN
    package_name  := OSE_PARAMETRE.GET_FORMULE_PACKAGE_NAME;
    function_name := OSE_PARAMETRE.GET_FORMULE_FUNCTION_NAME;

    EXECUTE IMMEDIATE 
      'BEGIN ' || package_name || '.' || function_name || '( :1, :2, :3 ); END;'
    USING
      d_resultat.intervenant_id, d_resultat.type_volume_horaire_id, d_resultat.etat_volume_horaire_id;

  END;
  
  
  PROCEDURE SAVE_RESULTAT IS
    res             t_resultat_hetd;
    res_ref         t_resultat_hetd_ref;
    res_service     t_lst_resultat_hetd;
    res_service_ref t_lst_resultat_hetd_ref;
    id              PLS_INTEGER;
    sid             PLS_INTEGER;
    fr              formule_resultat%rowtype;
    frs             formule_resultat_service%rowtype;
    frsr            formule_resultat_service_ref%rowtype;
    frvh            formule_resultat_vh%rowtype;
    frvhr           formule_resultat_vh_ref%rowtype;
    dev_null        PLS_INTEGER;
  BEGIN
    -- Calcul des données pour les services et le résultat global
    fr.service_fi := 0;
    fr.service_fa := 0;
    fr.service_fc := 0;
    fr.service_referentiel := 0;
    fr.heures_compl_fi := 0;
    fr.heures_compl_fa := 0;
    fr.heures_compl_fc := 0;
    fr.heures_compl_fc_majorees := 0;
    fr.heures_compl_referentiel := 0;

    id := d_resultat.volume_horaire.FIRST;
    LOOP EXIT WHEN id IS NULL;
      sid := d_volume_horaire(id).service_id;
      IF NOT res_service.exists(sid) THEN res_service(sid).service_fi := 0; END IF;

      res_service(sid).service_fi               := res_service(sid).service_fi               + d_resultat.volume_horaire(id).service_fi;
      res_service(sid).service_fa               := res_service(sid).service_fa               + d_resultat.volume_horaire(id).service_fa;
      res_service(sid).service_fc               := res_service(sid).service_fc               + d_resultat.volume_horaire(id).service_fc;
      res_service(sid).heures_compl_fi          := res_service(sid).heures_compl_fi          + d_resultat.volume_horaire(id).heures_compl_fi;
      res_service(sid).heures_compl_fa          := res_service(sid).heures_compl_fa          + d_resultat.volume_horaire(id).heures_compl_fa;
      res_service(sid).heures_compl_fc          := res_service(sid).heures_compl_fc          + d_resultat.volume_horaire(id).heures_compl_fc;
      res_service(sid).heures_compl_fc_majorees := res_service(sid).heures_compl_fc_majorees + d_resultat.volume_horaire(id).heures_compl_fc_majorees;

      fr.service_fi                             := fr.service_fi                             + d_resultat.volume_horaire(id).service_fi;
      fr.service_fa                             := fr.service_fa                             + d_resultat.volume_horaire(id).service_fa;
      fr.service_fc                             := fr.service_fc                             + d_resultat.volume_horaire(id).service_fc;
      fr.heures_compl_fi                        := fr.heures_compl_fi                        + d_resultat.volume_horaire(id).heures_compl_fi;
      fr.heures_compl_fa                        := fr.heures_compl_fa                        + d_resultat.volume_horaire(id).heures_compl_fa;
      fr.heures_compl_fc                        := fr.heures_compl_fc                        + d_resultat.volume_horaire(id).heures_compl_fc;
      fr.heures_compl_fc_majorees               := fr.heures_compl_fc_majorees               + d_resultat.volume_horaire(id).heures_compl_fc_majorees;
      id := d_resultat.volume_horaire.NEXT(id);
    END LOOP;

    id := d_resultat.volume_horaire_ref.FIRST;
    LOOP EXIT WHEN id IS NULL;
      sid := d_volume_horaire_ref(id).service_referentiel_id;
      IF NOT res_service_ref.exists(sid) THEN res_service_ref(sid).service_referentiel := 0; END IF;

      res_service_ref(sid).service_referentiel      := res_service_ref(sid).service_referentiel      + d_resultat.volume_horaire_ref(id).service_referentiel;
      res_service_ref(sid).heures_compl_referentiel := res_service_ref(sid).heures_compl_referentiel + d_resultat.volume_horaire_ref(id).heures_compl_referentiel;

      fr.service_referentiel                        := fr.service_referentiel                        + d_resultat.volume_horaire_ref(id).service_referentiel;
      fr.heures_compl_referentiel                   := fr.heures_compl_referentiel                   + d_resultat.volume_horaire_ref(id).heures_compl_referentiel;
      id := d_resultat.volume_horaire_ref.NEXT(id);
    END LOOP;

    -- Sauvegarde du résultat global
    fr.id                       := NULL;
    fr.intervenant_id           := d_resultat.intervenant_id;
    fr.type_volume_horaire_id   := d_resultat.type_volume_horaire_id;
    fr.etat_volume_horaire_id   := d_resultat.etat_volume_horaire_id;
    fr.service_du               := d_resultat.service_du;
    fr.total                    := fr.service_fi
                                 + fr.service_fa
                                 + fr.service_fc
                                 + fr.service_referentiel
                                 + fr.heures_compl_fi
                                 + fr.heures_compl_fa
                                 + fr.heures_compl_fc
                                 + fr.heures_compl_fc_majorees
                                 + fr.heures_compl_referentiel;
    fr.solde                    := d_resultat.solde;
    fr.sous_service             := d_resultat.sous_service;
    fr.heures_compl             := d_resultat.heures_compl;
    fr.id := OSE_FORMULE.ENREGISTRER_RESULTAT( fr );

    -- sauvegarde des services
    id := res_service.FIRST;
    LOOP EXIT WHEN id IS NULL;
      frs.id                       := NULL;
      frs.formule_resultat_id      := fr.id;
      frs.service_id               := id;
      frs.service_fi               := res_service(id).service_fi;
      frs.service_fa               := res_service(id).service_fa;
      frs.service_fc               := res_service(id).service_fc;
      frs.heures_compl_fi          := res_service(id).heures_compl_fi;
      frs.heures_compl_fa          := res_service(id).heures_compl_fa;
      frs.heures_compl_fc          := res_service(id).heures_compl_fc;
      frs.heures_compl_fc_majorees := res_service(id).heures_compl_fc_majorees;
      frs.total                    := frs.service_fi
                                    + frs.service_fa
                                    + frs.service_fc
                                    + frs.heures_compl_fi
                                    + frs.heures_compl_fa
                                    + frs.heures_compl_fc
                                    + frs.heures_compl_fc_majorees;
      dev_null := OSE_FORMULE.ENREGISTRER_RESULTAT_SERVICE( frs );
      id := res_service.NEXT(id);
    END LOOP;
     
    -- sauvegarde des services référentiels
    id := res_service_ref.FIRST;
    LOOP EXIT WHEN id IS NULL;
      frsr.id                       := NULL;
      frsr.formule_resultat_id      := fr.id;
      frsr.service_referentiel_id   := id;
      frsr.service_referentiel      := res_service_ref(id).service_referentiel;
      frsr.heures_compl_referentiel := res_service_ref(id).heures_compl_referentiel;
      frsr.total                    := res_service_ref(id).service_referentiel
                                     + res_service_ref(id).heures_compl_referentiel;
      dev_null := OSE_FORMULE.ENREGISTRER_RESULTAT_SERV_REF( frsr );
      id := res_service_ref.NEXT(id);
    END LOOP;

    -- sauvegarde des volumes horaires
    id := d_resultat.volume_horaire.FIRST;
    LOOP EXIT WHEN id IS NULL;
      frvh.id                        := NULL;
      frvh.formule_resultat_id       := fr.id;
      frvh.volume_horaire_id         := id;
      frvh.service_fi                := d_resultat.volume_horaire(id).service_fi;
      frvh.service_fa                := d_resultat.volume_horaire(id).service_fa;
      frvh.service_fc                := d_resultat.volume_horaire(id).service_fc;
      frvh.heures_compl_fi           := d_resultat.volume_horaire(id).heures_compl_fi;
      frvh.heures_compl_fa           := d_resultat.volume_horaire(id).heures_compl_fa;
      frvh.heures_compl_fc           := d_resultat.volume_horaire(id).heures_compl_fc;
      frvh.heures_compl_fc_majorees  := d_resultat.volume_horaire(id).heures_compl_fc_majorees;
      frvh.total                     := frvh.service_fi
                                      + frvh.service_fa
                                      + frvh.service_fc
                                      + frvh.heures_compl_fi
                                      + frvh.heures_compl_fa
                                      + frvh.heures_compl_fc
                                      + frvh.heures_compl_fc_majorees;
      dev_null := OSE_FORMULE.ENREGISTRER_RESULTAT_VH( frvh );
      id := d_resultat.volume_horaire.NEXT(id);
    END LOOP;

    -- sauvegarde des volumes horaires référentiels
    id := d_resultat.volume_horaire_ref.FIRST;
    LOOP EXIT WHEN id IS NULL;
      frvhr.id                       := NULL;
      frvhr.formule_resultat_id      := fr.id;
      frvhr.volume_horaire_ref_id    := id;
      frvhr.service_referentiel      := d_resultat.volume_horaire_ref(id).service_referentiel;
      frvhr.heures_compl_referentiel := d_resultat.volume_horaire_ref(id).heures_compl_referentiel;
      frvhr.total                    := frvhr.service_referentiel
                                      + frvhr.heures_compl_referentiel;
      dev_null := OSE_FORMULE.ENREGISTRER_RESULTAT_VH_REF( frvhr );
      id := d_resultat.volume_horaire_ref.NEXT(id);
    END LOOP;
  END;

  PROCEDURE DEBUG_INTERVENANT IS
  BEGIN
    ose_test.echo('d_intervenant');
    ose_test.echo('      .structure_id                   = ' || d_intervenant.structure_id || ' (' || ose_test.get_structure_by_id(d_intervenant.structure_id).libelle_court || ')' );
    ose_test.echo('      .heures_service_statutaire      = ' || d_intervenant.heures_service_statutaire );
    ose_test.echo('      .heures_service_modifie         = ' || d_intervenant.heures_service_modifie );
    ose_test.echo('      .depassement_service_du_sans_hc = ' || d_intervenant.depassement_service_du_sans_hc );
    ose_test.echo('');
  END;
  
  PROCEDURE DEBUG_SERVICE( SERVICE_ID PLS_INTEGER ) IS
  BEGIN
    ose_test.echo('d_service(' || SERVICE_ID || ')' );
    ose_test.echo('      .taux_fi                   = ' || d_service(SERVICE_ID).taux_fi );
    ose_test.echo('      .taux_fa                   = ' || d_service(SERVICE_ID).taux_fa );
    ose_test.echo('      .taux_fc                   = ' || d_service(SERVICE_ID).taux_fc );
    ose_test.echo('      .ponderation_service_du    = ' || d_service(SERVICE_ID).ponderation_service_du );
    ose_test.echo('      .ponderation_service_compl = ' || d_service(SERVICE_ID).ponderation_service_compl );
    ose_test.echo('      .structure_aff_id          = ' || d_service(SERVICE_ID).structure_aff_id || ' (' || ose_test.get_structure_by_id(d_service(SERVICE_ID).structure_aff_id).libelle_court || ')' );
    ose_test.echo('      .structure_ens_id          = ' || d_service(SERVICE_ID).structure_ens_id || ' (' || CASE WHEN d_service(SERVICE_ID).structure_ens_id IS NOT NULL THEN ose_test.get_structure_by_id(d_service(SERVICE_ID).structure_ens_id).libelle_court ELSE 'null' END || ')' );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_SERVICE_REF( SERVICE_REF_ID PLS_INTEGER ) IS
  BEGIN
    ose_test.echo('d_service_ref(' || SERVICE_REF_ID || ')' );
    ose_test.echo('      .structure_id          = ' || d_service_ref(SERVICE_REF_ID).structure_id || ' (' || ose_test.get_structure_by_id(d_service_ref(SERVICE_REF_ID).structure_id).libelle_court || ')' );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_VOLUME_HORAIRE( VH_ID PLS_INTEGER ) IS
  BEGIN
    ose_test.echo('d_volume_horaire(' || VH_ID || ')' );
    ose_test.echo('      .service_id                = ' || d_volume_horaire(VH_ID).service_id );
    ose_test.echo('      .type_volume_horaire_id    = ' || d_volume_horaire(VH_ID).type_volume_horaire_id );
    ose_test.echo('      .etat_volume_horaire_id    = ' || d_volume_horaire(VH_ID).etat_volume_horaire_id );
    ose_test.echo('      .etat_volume_horaire_ordre = ' || d_volume_horaire(VH_ID).etat_volume_horaire_ordre );
    ose_test.echo('      .heures                    = ' || d_volume_horaire(VH_ID).heures );
    ose_test.echo('      .taux_service_du           = ' || d_volume_horaire(VH_ID).taux_service_du );
    ose_test.echo('      .taux_service_compl        = ' || d_volume_horaire(VH_ID).taux_service_compl );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_VOLUME_HORAIRE_REF( VH_REF_ID PLS_INTEGER ) IS
  BEGIN
    ose_test.echo('d_volume_horaire_ref(' || VH_REF_ID || ')' );
    ose_test.echo('      .service_referentiel_id    = ' || d_volume_horaire_ref(VH_REF_ID).service_referentiel_id );
    ose_test.echo('      .type_volume_horaire_id    = ' || d_volume_horaire_ref(VH_REF_ID).type_volume_horaire_id );
    ose_test.echo('      .etat_volume_horaire_id    = ' || d_volume_horaire_ref(VH_REF_ID).etat_volume_horaire_id );
    ose_test.echo('      .etat_volume_horaire_ordre = ' || d_volume_horaire_ref(VH_REF_ID).etat_volume_horaire_ordre );
    ose_test.echo('      .heures                    = ' || d_volume_horaire_ref(VH_REF_ID).heures );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_RESULTAT IS
  BEGIN
    ose_test.echo('d_resultat' );
    ose_test.echo('      .service_du   = ' || d_resultat.service_du );
    ose_test.echo('      .solde        = ' || d_resultat.solde );
    ose_test.echo('      .sous_service = ' || d_resultat.sous_service );
    ose_test.echo('      .heures_compl = ' || d_resultat.heures_compl );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_RESULTAT_VH( VH_ID PLS_INTEGER ) IS
  BEGIN
    ose_test.echo('d_resultat.volume_horaire(' || VH_ID || ')' );
    ose_test.echo('      .service_fi                = ' || d_resultat.volume_horaire(VH_ID).service_fi );
    ose_test.echo('      .service_fa                = ' || d_resultat.volume_horaire(VH_ID).service_fa );
    ose_test.echo('      .service_fc                = ' || d_resultat.volume_horaire(VH_ID).service_fc );
    ose_test.echo('      .heures_compl_fi           = ' || d_resultat.volume_horaire(VH_ID).heures_compl_fi );
    ose_test.echo('      .heures_compl_fa           = ' || d_resultat.volume_horaire(VH_ID).heures_compl_fa );
    ose_test.echo('      .heures_compl_fc           = ' || d_resultat.volume_horaire(VH_ID).heures_compl_fc );
    ose_test.echo('      .heures_compl_fc_majorees  = ' || d_resultat.volume_horaire(VH_ID).heures_compl_fc_majorees );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_RESULTAT_VH_REF( VH_REF_ID PLS_INTEGER ) IS
  BEGIN
    ose_test.echo('d_resultat.volume_horaire_ref(' || VH_REF_ID || ')' );
    ose_test.echo('      .service_referentiel                = ' || d_resultat.volume_horaire_ref(VH_REF_ID).service_referentiel );
    ose_test.echo('      .heures_compl_referentiel           = ' || d_resultat.volume_horaire_ref(VH_REF_ID).heures_compl_referentiel );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_ALL( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) IS
    id  PLS_INTEGER;
    i   intervenant%rowtype;
    a   annee%rowtype;
    tvh type_volume_horaire%rowtype;
    evh etat_volume_horaire%rowtype;
  BEGIN
    IF GET_DEBUG_LEVEL >= 1 THEN
      SELECT * INTO   i FROM intervenant         WHERE id = INTERVENANT_ID;
      SELECT * INTO   a FROM annee               WHERE id = i.annee_id;
      SELECT * INTO tvh FROM type_volume_horaire WHERE id = TYPE_VOLUME_HORAIRE_ID;
      SELECT * INTO evh FROM etat_volume_horaire WHERE id = ETAT_VOLUME_HORAIRE_ID;
          
      ose_test.echo('');
      ose_test.echo('---------------------------------------------------------------------');
      ose_test.echo('Intervenant: ' || INTERVENANT_ID || ' : ' || i.prenom || ' ' || i.nom_usuel || ' (n° harp. ' || i.source_code || ')' );
      ose_test.echo(
                  'Année: ' || a.libelle
               || ', type ' || tvh.libelle
               || ', état ' || evh.libelle
      );
      ose_test.echo('');
    END IF;
    IF GET_DEBUG_LEVEL >= 2 THEN
      DEBUG_INTERVENANT;
    END IF;
    
    IF GET_DEBUG_LEVEL >= 5 THEN     
      id := d_service.FIRST;
      LOOP EXIT WHEN id IS NULL;
        DEBUG_SERVICE( id ); 
        id := d_service.NEXT(id);
      END LOOP;

      id := d_service_ref.FIRST;
      LOOP EXIT WHEN id IS NULL;
        DEBUG_SERVICE_REF( id ); 
        id := d_service_ref.NEXT(id);
      END LOOP;
    END IF;
    
    IF GET_DEBUG_LEVEL >= 6 THEN     
      id := d_volume_horaire.FIRST;
      LOOP EXIT WHEN id IS NULL;
        DEBUG_VOLUME_HORAIRE( id ); 
        id := d_volume_horaire.NEXT(id);
      END LOOP;

      id := d_volume_horaire_ref.FIRST;
      LOOP EXIT WHEN id IS NULL;
        DEBUG_VOLUME_HORAIRE_REF( id ); 
        id := d_volume_horaire_ref.NEXT(id);
      END LOOP;
    END IF;

    IF GET_DEBUG_LEVEL >= 3 THEN
      DEBUG_RESULTAT;
    END IF;
    
    IF GET_DEBUG_LEVEL >= 4 THEN
      id := d_resultat.volume_horaire.FIRST;
      LOOP EXIT WHEN id IS NULL;
        DEBUG_RESULTAT_VH( id ); 
        id := d_resultat.volume_horaire.NEXT(id);
      END LOOP;
      
      id := d_resultat.volume_horaire_ref.FIRST;
      LOOP EXIT WHEN id IS NULL;
        DEBUG_RESULTAT_VH_REF( id ); 
        id := d_resultat.volume_horaire_ref.NEXT(id);
      END LOOP;
    END IF;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
    id PLS_INTEGER;
    found BOOLEAN;
    function_name VARCHAR2(30);
    package_name VARCHAR2(30);
  BEGIN
    package_name  := OSE_PARAMETRE.GET_FORMULE_PACKAGE_NAME;
    function_name := OSE_PARAMETRE.GET_FORMULE_FUNCTION_NAME;

    -- détection de suppression des lignes de résultat obsolètes
    UPDATE formule_resultat SET TO_DELETE = 1 WHERE intervenant_id = CALCULER.INTERVENANT_ID;
    UPDATE FORMULE_RESULTAT_SERVICE_REF SET TO_DELETE = 1 WHERE formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    UPDATE FORMULE_RESULTAT_SERVICE     SET TO_DELETE = 1 WHERE formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    UPDATE FORMULE_RESULTAT_VH_REF      SET TO_DELETE = 1 WHERE formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    UPDATE FORMULE_RESULTAT_VH          SET TO_DELETE = 1 WHERE formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);

    POPULATE( INTERVENANT_ID );
    IF d_intervenant.heures_service_statutaire IS NOT NULL THEN -- sinon rien n'est à faire!!
      -- lancement du calcul sur les nouvelles lignes ou sur les lignes existantes
      id := d_type_etat_vh.FIRST;
      LOOP EXIT WHEN id IS NULL;
        POPULATE_FILTER( d_type_etat_vh(id).type_volume_horaire_id, d_type_etat_vh(id).etat_volume_horaire_id );
        DEBUG_ALL( INTERVENANT_ID, d_type_etat_vh(id).type_volume_horaire_id, d_type_etat_vh(id).etat_volume_horaire_id );
        OSE_FORMULE.INIT_RESULTAT( INTERVENANT_ID, d_type_etat_vh(id).type_volume_horaire_id, d_type_etat_vh(id).etat_volume_horaire_id );
        OSE_FORMULE.CALC_RESULTAT;
        OSE_FORMULE.SAVE_RESULTAT;
        id := d_type_etat_vh.NEXT(id);
      END LOOP;
    END IF;

    -- suppression des données devenues obsolètes
    OSE_EVENT.ON_BEFORE_FORMULE_RES_DELETE( CALCULER.INTERVENANT_ID );
    
    DELETE FROM FORMULE_RESULTAT_SERVICE_REF WHERE TO_DELETE = 1 AND formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    DELETE FROM FORMULE_RESULTAT_SERVICE WHERE TO_DELETE = 1 AND formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    DELETE FROM FORMULE_RESULTAT_VH_REF WHERE TO_DELETE = 1 AND formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    DELETE FROM FORMULE_RESULTAT_VH WHERE TO_DELETE = 1 AND formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    DELETE FROM FORMULE_RESULTAT WHERE TO_DELETE = 1 AND intervenant_id = CALCULER.INTERVENANT_ID;
  END;

END OSE_FORMULE;
/
---------------------------
--Modifié PACKAGE BODY
--OSE_EVENT
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_EVENT" AS
  TYPE t_dep IS TABLE OF VARCHAR2(80) INDEX BY PLS_INTEGER;
  TYPE t_deps IS TABLE OF t_dep INDEX BY VARCHAR2(80);



  FUNCTION GET_DEPS RETURN t_deps IS 
    i PLS_INTEGER DEFAULT 1;
    deps t_deps;
  BEGIN
    FOR d IN (
      SELECT
        CONNECT_BY_ROOT(p1) pref, p2 pdep
      FROM
        package_deps pd 
      CONNECT BY
        PRIOR p2 = p1
      ORDER BY
        LEVEL DESC
    ) LOOP
      deps(d.pref)(i) := d.pdep;
      i := i + 1;
    END LOOP;

    RETURN deps;
  END;



  FUNCTION GET_SUCS RETURN t_deps IS 
    i PLS_INTEGER DEFAULT 1;
    deps t_deps;
  BEGIN
    FOR d IN (
      SELECT
        CONNECT_BY_ROOT(p2) pref, p1 pdep
      FROM
        package_deps pd 
      CONNECT BY
        p2 = PRIOR p1
      ORDER BY
        LEVEL
    ) LOOP
      deps(d.pref)(i) := d.pdep;
      i := i + 1;
    END LOOP;
  
    RETURN deps;
  END;



  PROCEDURE CALCULER_SANS_DEPS( PACKAGE_SUJET VARCHAR2, INTERVENANT_ID NUMERIC ) IS
  BEGIN
    IF OSE_TEST.DEBUG_ENABLED THEN
      ose_test.echo('OSE_EVENT.CALCULER_SANS_DEPS( ' || PACKAGE_SUJET || ', ' || INTERVENANT_ID || ' ); ['||to_char( SYSTIMESTAMP, 'HH24:MI:SS.ff3' )||']' );
    END IF;
  
    EXECUTE IMMEDIATE 
      'BEGIN ' || PACKAGE_SUJET || '.CALCULER( ' || INTERVENANT_ID || ' ); END;'
    ;
  END;



  PROCEDURE CALCULER( 
    PACKAGE_SUJET VARCHAR2, 
    INTERVENANT_ID NUMERIC,
    WITH_DEPS BOOLEAN DEFAULT FALSE,
    WITH_SUCS BOOLEAN DEFAULT TRUE
  ) IS
    deps t_deps;
    i PLS_INTEGER;
  BEGIN
    IF OSE_TEST.DEBUG_ENABLED THEN
      ose_test.echo('OSE_EVENT.CALCULER( ' || PACKAGE_SUJET || ', ' || INTERVENANT_ID || ' ); ['||to_char( SYSTIMESTAMP, 'HH24:MI:SS.ff3' )||']' );
    END IF;
  
    IF WITH_DEPS THEN
      deps := GET_DEPS;
      IF deps.exists(PACKAGE_SUJET) THEN
        i := deps(PACKAGE_SUJET).FIRST;
        LOOP EXIT WHEN i IS NULL;
          CALCULER_SANS_DEPS(deps(PACKAGE_SUJET)(i), INTERVENANT_ID);
          i := deps(PACKAGE_SUJET).next(i);
        END LOOP;
      END IF;
    END IF;

    CALCULER_SANS_DEPS(PACKAGE_SUJET, INTERVENANT_ID);

    IF WITH_SUCS THEN
      deps := GET_SUCS;
      IF deps.exists(PACKAGE_SUJET) THEN
        i := deps(PACKAGE_SUJET).FIRST;
        LOOP EXIT WHEN i IS NULL;
          CALCULER_SANS_DEPS(deps(PACKAGE_SUJET)(i), INTERVENANT_ID);
          i := deps(PACKAGE_SUJET).next(i);
        END LOOP;
      END IF;
    END IF;
  END;



  PROCEDURE CALCULER_TOUT_SANS_DEPS( PACKAGE_SUJET VARCHAR2, ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    IF OSE_TEST.DEBUG_ENABLED THEN
      ose_test.echo('  OSE_EVENT.CALCULER_TOUT_SANS_DEPS( ' || PACKAGE_SUJET || ', ' || ANNEE_ID || ' ); ['||to_char( SYSTIMESTAMP, 'HH24:MI:SS.ff3' )||']' );
    END IF;
  
    EXECUTE IMMEDIATE 
      'BEGIN ' || PACKAGE_SUJET || '.CALCULER_TOUT( ' || ANNEE_ID || ' ); END;'
    ;
  END;



  PROCEDURE CALCULER_TOUT( 
    PACKAGE_SUJET VARCHAR2, 
    ANNEE_ID NUMERIC DEFAULT NULL, 
    WITH_DEPS BOOLEAN DEFAULT FALSE,
    WITH_SUCS BOOLEAN DEFAULT TRUE
  ) IS
    deps t_deps;
    i PLS_INTEGER;
  BEGIN
    IF OSE_TEST.DEBUG_ENABLED THEN
      ose_test.echo('OSE_EVENT.CALCULER_TOUT( ' || PACKAGE_SUJET || ', ' || ANNEE_ID || ' ); ['||to_char( SYSTIMESTAMP, 'HH24:MI:SS.ff3' )||']' );
    END IF;
    IF WITH_DEPS THEN
      deps := GET_DEPS;
      IF deps.exists(PACKAGE_SUJET) THEN
        i := deps(PACKAGE_SUJET).FIRST;
        LOOP EXIT WHEN i IS NULL;
          CALCULER_TOUT_SANS_DEPS(deps(PACKAGE_SUJET)(i), ANNEE_ID);
          i := deps(PACKAGE_SUJET).next(i);
        END LOOP;
      END IF;
    END IF;

    CALCULER_TOUT_SANS_DEPS(PACKAGE_SUJET, ANNEE_ID);

    IF WITH_SUCS THEN
      deps := GET_SUCS;
      IF deps.exists(PACKAGE_SUJET) THEN
        i := deps(PACKAGE_SUJET).FIRST;
        LOOP EXIT WHEN i IS NULL;
          CALCULER_TOUT_SANS_DEPS(deps(PACKAGE_SUJET)(i), ANNEE_ID);
          i := deps(PACKAGE_SUJET).next(i);
        END LOOP;
      END IF;
    END IF;
  END;



  PROCEDURE DEMANDE_CALCUL_SANS_DEPS( PACKAGE_SUJET VARCHAR2, INTERVENANT_ID NUMERIC ) IS
  BEGIN
    MERGE INTO TMP_CALCUL c USING dual ON (
      c.intervenant_id = DEMANDE_CALCUL_SANS_DEPS.INTERVENANT_ID
      AND c.sujet = PACKAGE_SUJET
    ) WHEN MATCHED THEN UPDATE SET
      ID = TMP_CALCUL_ID_SEQ.NEXTVAL
    WHEN NOT MATCHED THEN INSERT (
      ID,
      INTERVENANT_ID,
      SUJET
    ) VALUES (
      TMP_CALCUL_ID_SEQ.NEXTVAL,
      DEMANDE_CALCUL_SANS_DEPS.INTERVENANT_ID,
      PACKAGE_SUJET
    );
  END;



  PROCEDURE DEMANDE_CALCUL( PACKAGE_SUJET VARCHAR2, INTERVENANT_ID NUMERIC ) IS
    deps t_deps;
    i PLS_INTEGER;
  BEGIN
    IF OSE_TEST.DEBUG_ENABLED THEN
      ose_test.echo('OSE_EVENT.DEMANDE_CALCUL( ' || PACKAGE_SUJET || ', ' || INTERVENANT_ID || ' ); ['||to_char( SYSTIMESTAMP, 'HH24:MI:SS.ff3' )||']' );
    END IF;

    DEMANDE_CALCUL_SANS_DEPS(PACKAGE_SUJET, INTERVENANT_ID);

    deps := GET_SUCS;
    IF deps.exists(PACKAGE_SUJET) THEN
      i := deps(PACKAGE_SUJET).FIRST;
      LOOP EXIT WHEN i IS NULL;
        DEMANDE_CALCUL_SANS_DEPS( deps(PACKAGE_SUJET)(i), intervenant_id );
        i := deps(PACKAGE_SUJET).next(i);
      END LOOP;
    END IF;
  END;



  PROCEDURE CALCULER_DEMANDES( PACKAGE_SUJET VARCHAR2 DEFAULT NULL ) IS
    deps t_deps;
    i PLS_INTEGER;
  BEGIN
    IF OSE_TEST.DEBUG_ENABLED THEN
      ose_test.echo('OSE_EVENT.CALCULER_DEMANDES( ' || PACKAGE_SUJET || ' ); [' || to_char( SYSTIMESTAMP, 'HH24:MI:SS.ff3' ) ||']' );
    END IF;
    FOR mp IN (
      SELECT
        c.sujet,
        c.intervenant_id
      FROM 
        TMP_CALCUL c
      WHERE
        PACKAGE_SUJET IS NULL OR c.sujet = PACKAGE_SUJET
      ORDER BY
        id
    )
    LOOP
      DELETE FROM TMP_CALCUL WHERE sujet = mp.sujet AND intervenant_id = mp.intervenant_id;
      CALCULER_SANS_DEPS( mp.sujet, mp.intervenant_id );
    END LOOP;
  END;



  PROCEDURE ON_BEFORE_FORMULE_RES_DELETE( INTERVENANT_ID NUMERIC ) IS
  BEGIN

    -- recherche des services à payer prêts à être supprimés pour cet intervenant et check
    FOR sap IN (
      SELECT
        frs.id
      FROM 
        FORMULE_RESULTAT_SERVICE frs
        JOIN FORMULE_RESULTAT fr ON fr.id = frs.formule_resultat_id AND fr.intervenant_id = ON_BEFORE_FORMULE_RES_DELETE.intervenant_id
        JOIN TYPE_VOLUME_HORAIRE tvh ON tvh.id = fr.type_volume_horaire_id AND tvh.code = 'REALISE'
        JOIN ETAT_VOLUME_HORAIRE evh ON evh.id = fr.etat_volume_horaire_id AND evh.code = 'valide'
      WHERE
        frs.TO_DELETE = 1
    )
    LOOP
      OSE_PAIEMENT.CHECK_BAD_PAIEMENTS( sap.id );
    END LOOP;
    
    FOR sap IN (
      SELECT
        frs.id
      FROM 
        FORMULE_RESULTAT_SERVICE_REF frs
        JOIN FORMULE_RESULTAT fr ON fr.id = frs.formule_resultat_id AND fr.intervenant_id = ON_BEFORE_FORMULE_RES_DELETE.intervenant_id
        JOIN TYPE_VOLUME_HORAIRE tvh ON tvh.id = fr.type_volume_horaire_id AND tvh.code = 'REALISE'
        JOIN ETAT_VOLUME_HORAIRE evh ON evh.id = fr.etat_volume_horaire_id AND evh.code = 'valide'
      WHERE
        frs.TO_DELETE = 1
    )
    LOOP
      OSE_PAIEMENT.CHECK_BAD_PAIEMENTS( null, sap.id );
    END LOOP;
  END;
  
END OSE_EVENT;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_DOSSIER
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_DOSSIER" AS


  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    UPDATE tbl_dossier SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_dossier t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_dossier vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id   = v.intervenant_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      peut_saisir_dossier  = v.peut_saisir_dossier,
      dossier_id           = v.dossier_id,
      validation_id        = v.validation_id,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      PEUT_SAISIR_DOSSIER,
      DOSSIER_ID,
      VALIDATION_ID,
      TO_DELETE

    ) VALUES (

      TBL_DOSSIER_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.peut_saisir_dossier,
      v.dossier_id,
      v.validation_id,
      0

    );

    DELETE FROM TBL_DOSSIER WHERE to_delete = 1;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;

END OSE_DOSSIER;
/
---------------------------
--Modifié PACKAGE BODY
--OSE_DIVERS
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_DIVERS" AS

/**
 * Retourne un texte de message à partir de son code
 */
FUNCTION GET_MSG( code VARCHAR2 ) RETURN CLOB IS
  msg CLOB;
BEGIN
  SELECT texte into msg FROM message WHERE code = GET_MSG.code;
  RETURN msg;
END;



FUNCTION INTERVENANT_HAS_PRIVILEGE( intervenant_id NUMERIC, privilege_name VARCHAR2 ) RETURN NUMERIC IS
  statut statut_intervenant%rowtype;
  itype  type_intervenant%rowtype;
  res NUMERIC;
BEGIN
  res := 1;
  SELECT si.* INTO statut FROM statut_intervenant si JOIN intervenant i ON i.statut_id = si.id WHERE i.id = intervenant_id;
  SELECT ti.* INTO itype  FROM type_intervenant ti WHERE ti.id = statut.type_intervenant_id;
  
  /* DEPRECATED */
  IF 'saisie_service' = privilege_name THEN
    res := statut.peut_saisir_service;
    RETURN res;
  ELSIF 'saisie_service_exterieur' = privilege_name THEN
    --IF INTERVENANT_HAS_PRIVILEGE( intervenant_id, 'saisie_service' ) = 0 OR itype.code = 'E' THEN -- cascade
    IF itype.code = 'E' THEN
      res := 0;
    END IF;
    RETURN res;
  ELSIF 'saisie_service_referentiel' = privilege_name THEN
    IF itype.code = 'E' THEN
      res := 0;
    END IF;
    RETURN res;
  ELSIF 'saisie_service_referentiel_autre_structure' = privilege_name THEN
    res := 1;
    RETURN res;
  ELSIF 'saisie_motif_non_paiement' = privilege_name THEN
    res := statut.peut_saisir_motif_non_paiement;
    RETURN res;
  END IF;
  /* FIN DE DEPRECATED */
  
  SELECT
    count(*)
  INTO
    res
  FROM
    intervenant i
    JOIN statut_privilege sp ON sp.statut_id = i.statut_id
    JOIN privilege p ON p.id = sp.privilege_id
    JOIN categorie_privilege cp ON cp.id = p.categorie_id
  WHERE
    i.id = INTERVENANT_HAS_PRIVILEGE.intervenant_id
    AND cp.code || '-' || p.code = privilege_name;
    
  RETURN res;
END;

FUNCTION implode(i_query VARCHAR2, i_seperator VARCHAR2 DEFAULT ',') RETURN VARCHAR2 AS
  l_return CLOB:='';
  l_temp CLOB;
  TYPE r_cursor is REF CURSOR;
  rc r_cursor;
BEGIN
  OPEN rc FOR i_query;
  LOOP
    FETCH rc INTO L_TEMP;
    EXIT WHEN RC%NOTFOUND;
    l_return:=l_return||L_TEMP||i_seperator;
  END LOOP;
  RETURN RTRIM(l_return,i_seperator);
END;

FUNCTION intervenant_est_permanent( INTERVENANT_ID NUMERIC ) RETURN NUMERIC AS
  resultat NUMERIC;
BEGIN
  SELECT
    COUNT(*) INTO resultat
  FROM
    intervenant i
    JOIN statut_intervenant si ON si.id = i.statut_id
    JOIN type_intervenant ti ON ti.id = si.type_intervenant_id
  WHERE 
    i.id = INTERVENANT_ID
    AND ti.code = 'P';
  RETURN resultat;
END;

FUNCTION intervenant_est_non_autorise( INTERVENANT_ID NUMERIC ) RETURN NUMERIC AS
  resultat NUMERIC;
BEGIN
  SELECT COUNT(*) INTO resultat FROM intervenant i JOIN statut_intervenant si ON si.id = i.statut_id AND si.non_autorise = 1 WHERE i.id = INTERVENANT_ID;
  RETURN resultat;
END;

FUNCTION intervenant_peut_saisir_serv( INTERVENANT_ID NUMERIC ) RETURN NUMERIC AS
  resultat NUMERIC;
BEGIN
  SELECT COUNT(*) INTO resultat FROM intervenant i JOIN statut_intervenant si ON si.id = i.statut_id AND si.peut_saisir_service = 1 WHERE i.id = INTERVENANT_ID;
  RETURN resultat;
END;

PROCEDURE intervenant_horodatage_service( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, REFERENTIEL NUMERIC, HISTO_MODIFICATEUR_ID NUMERIC, HISTO_MODIFICATION DATE ) AS
BEGIN
    MERGE INTO histo_intervenant_service his USING dual ON (
    
          his.INTERVENANT_ID                = intervenant_horodatage_service.INTERVENANT_ID
      AND NVL(his.TYPE_VOLUME_HORAIRE_ID,0) = NVL(intervenant_horodatage_service.TYPE_VOLUME_HORAIRE_ID,0)
      AND his.REFERENTIEL                   = intervenant_horodatage_service.REFERENTIEL

    ) WHEN MATCHED THEN UPDATE SET

      HISTO_MODIFICATEUR_ID = intervenant_horodatage_service.HISTO_MODIFICATEUR_ID,
      HISTO_MODIFICATION = intervenant_horodatage_service.HISTO_MODIFICATION

    WHEN NOT MATCHED THEN INSERT (

      ID,
      INTERVENANT_ID,
      TYPE_VOLUME_HORAIRE_ID,
      REFERENTIEL,
      HISTO_MODIFICATEUR_ID,
      HISTO_MODIFICATION
    ) VALUES (
      HISTO_INTERVENANT_SERVI_ID_SEQ.NEXTVAL,
      intervenant_horodatage_service.INTERVENANT_ID,
      intervenant_horodatage_service.TYPE_VOLUME_HORAIRE_ID,
      intervenant_horodatage_service.REFERENTIEL,
      intervenant_horodatage_service.HISTO_MODIFICATEUR_ID,
      intervenant_horodatage_service.HISTO_MODIFICATION

    );
END;


FUNCTION NIVEAU_FORMATION_ID_CALC( gtf_id NUMERIC, gtf_pertinence_niveau NUMERIC, niveau NUMERIC DEFAULT NULL ) RETURN NUMERIC AS
BEGIN
  IF 1 <> gtf_pertinence_niveau OR niveau IS NULL OR niveau < 1 OR gtf_id < 1 THEN RETURN NULL; END IF;
  RETURN gtf_id * 256 + niveau;
END;

FUNCTION STRUCTURE_DANS_STRUCTURE( structure_testee NUMERIC, structure_cible NUMERIC ) RETURN NUMERIC AS
  RESULTAT NUMERIC;
BEGIN
  IF structure_testee = structure_cible THEN RETURN 1; END IF;
  
  select count(*) into resultat
  from structure
  WHERE structure.id = structure_testee
  start with parente_id = structure_cible
  connect by parente_id = prior id;

  RETURN RESULTAT;
END;

FUNCTION STR_REDUCE( str CLOB ) RETURN CLOB IS
BEGIN
  RETURN utl_raw.cast_to_varchar2((nlssort(str, 'nls_sort=binary_ai')));
END;

FUNCTION STR_FIND( haystack CLOB, needle VARCHAR2 ) RETURN NUMERIC IS
BEGIN
  IF STR_REDUCE( haystack ) LIKE STR_REDUCE( '%' || needle || '%' ) THEN RETURN 1; END IF;
  RETURN 0;
END;

FUNCTION LIKED( haystack CLOB, needle CLOB ) RETURN NUMERIC IS
BEGIN
  RETURN CASE WHEN STR_REDUCE(haystack) LIKE STR_REDUCE(needle) THEN 1 ELSE 0 END;
END;

FUNCTION COMPRISE_ENTRE( date_debut DATE, date_fin DATE, date_obs DATE DEFAULT NULL, inclusif NUMERIC DEFAULT 0 ) RETURN NUMERIC IS
  d_deb DATE;
  d_fin DATE;
  d_obs DATE;
  res NUMERIC;
BEGIN
  IF inclusif = 1 THEN
    d_obs := TRUNC( COALESCE( d_obs     , SYSDATE ) );
    d_deb := TRUNC( COALESCE( date_debut, d_obs   ) );
    d_fin := TRUNC( COALESCE( date_fin  , d_obs   ) );
    IF d_obs BETWEEN d_deb AND d_fin THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  ELSE
    d_obs := TRUNC( COALESCE( d_obs, SYSDATE ) );
    d_deb := TRUNC( date_debut );
    d_fin := TRUNC( date_fin   );
    
    IF d_deb IS NOT NULL AND NOT d_deb <= d_obs THEN
      RETURN 0;
    END IF;
    IF d_fin IS NOT NULL AND NOT d_obs < d_fin THEN
      RETURN 0;
    END IF;
    RETURN 1;
  END IF;
END;

PROCEDURE DO_NOTHING IS
BEGIN
  RETURN;
END;

FUNCTION VOLUME_HORAIRE_VALIDE( volume_horaire_id NUMERIC ) RETURN NUMERIC IS
  res NUMERIC;
BEGIN
  SELECT count(*) INTO res FROM
    validation v
    JOIN validation_vol_horaire vvh ON vvh.validation_id = v.id
  WHERE
    1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction );
  RETURN CASE WHEN res > 0 THEN 1 ELSE 0 END;
END;


PROCEDURE CALCUL_TAUX( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, r_fi OUT FLOAT, r_fc OUT FLOAT, r_fa OUT FLOAT, arrondi NUMERIC DEFAULT 15 ) IS
  nt FLOAT;
  bi FLOAT;
  bc FLOAT;
  ba FLOAT;
  reste FLOAT;
BEGIN
  bi := eff_fi * fi;
  bc := eff_fc * fc;
  ba := eff_fa * fa;
  nt := bi + bc + ba;

  IF nt = 0 THEN -- au cas ou, alors on ne prend plus en compte les effectifs!!
    bi := fi;
    bc := fc;
    ba := fa;
    nt := bi + bc + ba;
  END IF;
  
  IF nt = 0 THEN -- toujours au cas ou...
    bi := 1;
    bc := 0;
    ba := 0;
    nt := bi + bc + ba;
  END IF;

  -- Calcul
  r_fi := bi / nt;
  r_fc := bc / nt;
  r_fa := ba / nt;

  -- Arrondis
  r_fi := ROUND( r_fi, arrondi );
  r_fc := ROUND( r_fc, arrondi );
  r_fa := ROUND( r_fa, arrondi );

  -- détermination du reste
  reste := 1 - r_fi - r_fc - r_fa;

  -- répartition éventuelle du reste
  IF reste <> 0 THEN
    IF r_fi > 0 THEN r_fi := r_fi + reste;
    ELSIF r_fc > 0 THEN r_fc := r_fc + reste;
    ELSE r_fa := r_fa + reste; END IF;
  END IF;

END;


FUNCTION CALCUL_TAUX_FI( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT IS
  ri FLOAT;
  rc FLOAT;
  ra FLOAT;
BEGIN
  CALCUL_TAUX( eff_fi, eff_fc, eff_fa, fi, fc, fa, ri, rc, ra, arrondi );
  RETURN ri;
END;
  
FUNCTION CALCUL_TAUX_FC( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT IS
  ri FLOAT;
  rc FLOAT;
  ra FLOAT;
BEGIN
  CALCUL_TAUX( eff_fi, eff_fc, eff_fa, fi, fc, fa, ri, rc, ra, arrondi );
  RETURN rc;
END;
  
FUNCTION CALCUL_TAUX_FA( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT IS
  ri FLOAT;
  rc FLOAT;
  ra FLOAT;
BEGIN
  CALCUL_TAUX( eff_fi, eff_fc, eff_fa, fi, fc, fa, ri, rc, ra, arrondi );
  RETURN ra;
END;

FUNCTION STRUCTURE_UNIV_GET_ID RETURN NUMERIC IS
  res NUMERIC;
BEGIN
  SELECT id INTO res FROM structure WHERE niveau = 1 AND ROWNUM = 1;
  RETURN res;
END;

PROCEDURE SYNC_LOG( msg CLOB ) IS
BEGIN
  INSERT INTO SYNC_LOG( id, date_sync, message ) VALUES ( sync_log_id_seq.nextval, systimestamp, msg );
END;

FUNCTION ANNEE_UNIVERSITAIRE( date_ref DATE DEFAULT SYSDATE, mois_deb_au NUMERIC DEFAULT 9, jour_deb_au NUMERIC DEFAULT 1 ) RETURN NUMERIC IS
  annee_ref NUMERIC;
  mois_ref NUMERIC;
  jour_ref NUMERIC;
BEGIN
  annee_ref := to_number(to_char(date_ref, 'yyyy'));
  mois_ref  := to_number(to_char(date_ref, 'mm'));
  jour_ref  := to_number(to_char(date_ref, 'dd'));
  
  IF jour_ref < jour_deb_au THEN mois_ref := mois_ref - 1; END IF;
  IF mois_ref < mois_deb_au THEN annee_ref := annee_ref - 1; END IF;
  
  RETURN annee_ref;
END;

FUNCTION FORMATTED_RIB (bic VARCHAR2, iban VARCHAR2) RETURN VARCHAR2 IS
BEGIN
  if bic is null and iban is null then
    return null;
  end if;
  RETURN regexp_replace(bic, '[[:space:]]+', '') || '-' || regexp_replace(iban, '[[:space:]]+', '');
END;

FUNCTION FORMATTED_ADRESSE(
    no_voie                VARCHAR2,
    nom_voie               VARCHAR2,
    batiment               VARCHAR2,
    mention_complementaire VARCHAR2,
    localite               VARCHAR2,
    code_postal            VARCHAR2,
    ville                  VARCHAR2,
    pays_libelle           VARCHAR2)
  RETURN VARCHAR2
IS
BEGIN
  return
    -- concaténation des éléments non null séparés par ', '
    trim(trim(',' FROM REPLACE(', ' || NVL(no_voie,'#') || ', ' || NVL(nom_voie,'#') || ', ' || NVL(batiment,'#') || ', ' || NVL(mention_complementaire,'#'), ', #', ''))) ||
    -- saut de ligne complet
    chr(13) || chr(10) ||
    -- concaténation des éléments non null séparés par ', '
    trim(trim(',' FROM REPLACE(', ' || NVL(localite,'#') || ', ' || NVL(code_postal,'#') || ', ' || NVL(ville,'#') || ', ' || NVL(pays_libelle,'#'), ', #', '')));
END;



FUNCTION GET_TRIGGER_BODY( TRIGGER_NAME VARCHAR2 ) RETURN VARCHAR2 IS
  vlong long;
BEGIN
  SELECT trigger_body INTO vlong FROM all_triggers WHERE trigger_name = GET_TRIGGER_BODY.TRIGGER_NAME;

  RETURN substr(vlong, 1, 32767);
END;

END OSE_DIVERS;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_CONTRAT
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_CONTRAT" AS


  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    UPDATE TBL_CONTRAT SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));
      
    MERGE INTO 
      TBL_CONTRAT t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_CONTRAT vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id        = v.intervenant_id
          AND NVL(t.structure_id,0) = NVL(v.structure_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      peut_avoir_contrat   = v.peut_avoir_contrat,
      nbvh                 = v.nbvh,
      edite                = v.edite,
      signe                = v.signe,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      PEUT_AVOIR_CONTRAT,
      STRUCTURE_ID,
      NBVH,
      EDITE,
      SIGNE,
      TO_DELETE

    ) VALUES (

      TBL_CONTRAT_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.peut_avoir_contrat,
      v.structure_id,
      V.nbvh,
      v.edite,
      v.signe,
      0

    );

    DELETE FROM tbl_contrat WHERE to_delete = 1;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;

END OSE_CONTRAT;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_CLOTURE_REALISE
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_CLOTURE_REALISE" AS


  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    UPDATE tbl_cloture_realise SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_cloture_realise t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_CLOTURE_REALISE vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id   = v.intervenant_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      peut_cloturer_saisie = v.peut_cloturer_saisie,
      cloture              = v.cloture,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      PEUT_CLOTURER_SAISIE,
      CLOTURE,
      TO_DELETE

    ) VALUES (

      TBL_CLOTURE_REALISE_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.peut_cloturer_saisie,
      v.cloture,
      0

    );

    DELETE FROM tbl_cloture_realise WHERE to_delete = 1;
  END;


  
  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;

END OSE_CLOTURE_REALISE;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_AGREMENT
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_AGREMENT" AS

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    UPDATE tbl_agrement SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_agrement t 
    USING (
    
      SELECT 
        vc.* 
      FROM 
        V_TBL_AGREMENT vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id   = v.intervenant_id
      AND t.type_agrement_id = v.type_agrement_id
      AND NVL(t.structure_id,0) = NVL(v.structure_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      annee_id    = v.annee_id,
      obligatoire = v.obligatoire,
      agrement_id = v.agrement_id,
      to_delete   = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      TYPE_AGREMENT_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      OBLIGATOIRE,
      AGREMENT_ID,
      TO_DELETE

    ) VALUES (

      TBL_AGREMENT_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.type_agrement_id,
      v.intervenant_id,
      v.structure_id,
      v.obligatoire,
      v.agrement_id,
      0

    );

    DELETE FROM tbl_agrement WHERE to_delete = 1;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;

END OSE_AGREMENT;
/



-- recalcul des packages ! ! !
begin
  --OSE_WORKFLOW.calculer_tout;
--OSE_FORMULE.CALCULER_TOUT(2015);

--  OSE_EVENT.CALCULER_TOUT('OSE_AGREMENT');
--  OSE_EVENT.CALCULER_TOUT('OSE_CLOTURE_REALISE');
--  OSE_EVENT.CALCULER_TOUT('OSE_CONTRAT');
--  OSE_EVENT.CALCULER_TOUT('OSE_DOSSIER');
--  OSE_EVENT.CALCULER_TOUT('OSE_FORMULE');
  OSE_EVENT.CALCULER_TOUT('OSE_PAIEMENT');
  OSE_EVENT.CALCULER_TOUT('OSE_PIECE_JOINTE');
  OSE_EVENT.CALCULER_TOUT('OSE_PIECE_JOINTE_DEMANDE');
  OSE_EVENT.CALCULER_TOUT('OSE_PIECE_JOINTE_FOURNIE');
  OSE_EVENT.CALCULER_TOUT('OSE_SERVICE');
  OSE_EVENT.CALCULER_TOUT('OSE_SERVICE_REFERENTIEL');
  OSE_EVENT.CALCULER_TOUT('OSE_SERVICE_SAISIE');
  OSE_EVENT.CALCULER_TOUT('OSE_VALIDATION_ENSEIGNEMENT');
  OSE_EVENT.CALCULER_TOUT('OSE_VALIDATION_REFERENTIEL');
  OSE_EVENT.CALCULER_TOUT('OSE_WORKFLOW');
end;

/



---------------------------
--Modifié TABLE
--NOTIFICATION_INDICATEUR
---------------------------
ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" MODIFY ("AFFECTATION_ID" NOT NULL ENABLE);

---------------------------
--Modifié TABLE
--FORMULE_RESULTAT
---------------------------
update formule_resultat set formule_resultat.type_intervenant_code = (
  select ti.code from type_intervenant ti
  join statut_intervenant si on si.type_intervenant_id = ti.id
  JOIN intervenant i on i.statut_id = si.id
  where i.id = FORMULE_RESULTAT.intervenant_id
);
ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("TYPE_INTERVENANT_CODE" NOT NULL ENABLE);

---------------------------
--Modifié INDEX
--WF_ETAPE_DEP_PK
---------------------------
DROP INDEX "OSE"."WF_ETAPE_DEP_PK";
  CREATE UNIQUE INDEX "OSE"."WF_ETAPE_DEP_PK" ON "OSE"."WF_ETAPE_DEP" ("ETAPE_PREC_ID","ETAPE_SUIV_ID");
---------------------------
--Nouveau INDEX
--TBL_WORKFLOW_EFK_IDX
---------------------------
  CREATE INDEX "OSE"."TBL_WORKFLOW_EFK_IDX" ON "OSE"."TBL_WORKFLOW" ("ETAPE_ID");
---------------------------
--Nouveau INDEX
--MV_CENTRE_COUT_PK
---------------------------
  CREATE UNIQUE INDEX "OSE"."MV_CENTRE_COUT_PK" ON "OSE"."MV_CENTRE_COUT" ("SOURCE_CODE");
---------------------------
--Nouveau INDEX
--AII_FK_IDX
---------------------------
  CREATE INDEX "OSE"."AII_FK_IDX" ON "OSE"."ADRESSE_INTERVENANT" ("INTERVENANT_ID");
---------------------------
--Nouveau INDEX
--TBL_WORKFLOW_SFK_IDX
---------------------------
  CREATE INDEX "OSE"."TBL_WORKFLOW_SFK_IDX" ON "OSE"."TBL_WORKFLOW" ("STRUCTURE_ID");
---------------------------
--Nouveau INDEX
--WF_ETAPE_DEP_PK1
---------------------------
  CREATE UNIQUE INDEX "OSE"."WF_ETAPE_DEP_PK1" ON "OSE"."WF_ETAPE_DEP" ("ID");
---------------------------
--Nouveau INDEX
--INDIC_MODIF_DOSSIER_PK
---------------------------
  CREATE UNIQUE INDEX "OSE"."INDIC_MODIF_DOSSIER_PK" ON "OSE"."INDIC_MODIF_DOSSIER" ("ID");
---------------------------
--Nouveau INDEX
--TBL_WORKFLOW_IFK_IDX
---------------------------
  CREATE INDEX "OSE"."TBL_WORKFLOW_IFK_IDX" ON "OSE"."TBL_WORKFLOW" ("INTERVENANT_ID");
---------------------------
--Modifié TRIGGER
--T_PJF_PIECE_JOINTE
---------------------------
/
  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_PIECE_JOINTE"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_PIECE_JOINTE_ID, INTERVENANT_ID, HISTO_CREATION, HISTO_DESTRUCTION, VALIDATION_ID ON "OSE"."PIECE_JOINTE"
  REFERENCING FOR EACH ROW
  BEGIN
  
  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :NEW.intervenant_id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Modifié TRIGGER
--T_PAI_MISE_EN_PAIEMENT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_MISE_EN_PAIEMENT"
  AFTER INSERT OR DELETE OR UPDATE OF FORMULE_RES_SERVICE_ID, FORMULE_RES_SERVICE_REF_ID, PERIODE_PAIEMENT_ID, HEURES, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."MISE_EN_PAIEMENT"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      fr.intervenant_id
    FROM
      formule_resultat fr
      LEFT JOIN formule_resultat_service frs ON frs.formule_resultat_id = fr.id
      LEFT JOIN formule_resultat_service_ref frsr ON frsr.formule_resultat_id = fr.id
    WHERE
         (frs.id  IS NOT NULL AND (frs.id  = :NEW.formule_res_service_id     OR frs.id  = :NEW.formule_res_service_id    ))
      OR (frsr.id IS NOT NULL AND (frsr.id = :NEW.formule_res_service_ref_id OR frsr.id = :NEW.formule_res_service_ref_id))
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
---------------------------
--Modifié TRIGGER
--T_CRT_CONTRAT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_CONTRAT"
  AFTER INSERT OR DELETE OR UPDATE OF VALIDATION_ID, DATE_RETOUR_SIGNE, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."CONTRAT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Modifié TRIGGER
--T_AGR_AGREMENT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_AGREMENT"
  AFTER INSERT OR DELETE OR UPDATE OF TYPE_AGREMENT_ID, INTERVENANT_ID, HISTO_CREATION, HISTO_DESTRUCTION, STRUCTURE_ID ON "OSE"."AGREMENT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
---------------------------
--Modifié TRIGGER
--F_ELEMENT_PEDAGOGIQUE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_ELEMENT_PEDAGOGIQUE"
  AFTER DELETE OR UPDATE OF ID, STRUCTURE_ID, PERIODE_ID, TAUX_FI, TAUX_FC, TAUX_FA, TAUX_FOAD, FI, FC, FA, HISTO_CREATION, HISTO_DESTRUCTION, ANNEE_ID ON "OSE"."ELEMENT_PEDAGOGIQUE"
  REFERENCING FOR EACH ROW
  BEGIN FOR p IN
    ( SELECT DISTINCT s.intervenant_id
    FROM service s
    WHERE (s.element_pedagogique_id = :NEW.id
    OR s.element_pedagogique_id     = :OLD.id)
    AND 1                           = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
    ) LOOP OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
END LOOP;
END;
/
---------------------------
--Modifié TRIGGER
--F_CONTRAT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_CONTRAT"
  AFTER DELETE OR UPDATE OF INTERVENANT_ID, STRUCTURE_ID, VALIDATION_ID, DATE_RETOUR_SIGNE, HISTO_CREATION, HISTO_DESTRUCTION ON "OSE"."CONTRAT"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      volume_horaire vh
      JOIN service s ON s.id = vh.service_id AND 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
    WHERE
      1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      AND (vh.contrat_id = :OLD.id OR vh.contrat_id = :NEW.id)

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
---------------------------
--Modifié TRIGGER
--AGREMENT_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."AGREMENT_CK"
  BEFORE UPDATE ON "OSE"."AGREMENT"
  REFERENCING FOR EACH ROW
  DECLARE
  contrat_found INTEGER;
BEGIN

  SELECT
    COUNT(*) INTO contrat_found
  FROM
    contrat c
  WHERE
    c.INTERVENANT_ID = :NEW.intervenant_id
    AND c.structure_id = NVL(:NEW.structure_id,c.structure_id)
    AND 1 = OSE_DIVERS.COMPRISE_ENTRE( c.histo_creation, c.histo_destruction )
    AND ROWNUM = 1;

  IF 
    1 = contrat_found 
    AND :NEW.histo_destruction IS NOT NULL AND :OLD.histo_destruction IS NULL
  THEN 
  
    IF :NEW.structure_id IS NULL THEN
      raise_application_error(-20101, 'Cet agrément ne peut pas être supprimé car un contrat a été signé.');    
    ELSE
      raise_application_error(-20101, 'Cet agrément ne peut pas être supprimé car un contrat a été signé dans la même composante.');    
    END IF;
  END IF;
  
END;

/

create or replace TRIGGER "OSE"."SERVICE_HISTO_CK"
  BEFORE UPDATE OF intervenant_id, element_pedagogique_id, etablissement_id ON "OSE"."SERVICE" 
  REFERENCING FOR EACH ROW
  DECLARE
  has_validation integer;
BEGIN
  SELECT COUNT(*) INTO has_validation
  FROM
    VALIDATION_VOL_HORAIRE vvh
    JOIN validation v ON v.id = VVH.VALIDATION_ID
    JOIN volume_horaire vh ON vh.id = VVH.VOLUME_HORAIRE_ID
  WHERE
    V.HISTO_DESTRUCTION IS NULL
    AND vh.service_ID = :NEW.ID;

  IF 0 <> has_validation THEN
    raise_application_error(-20101, 'Il est impossible de modifier ou supprimer un service dont des heures ont déjà été validées.');
  END IF;

END;
/





/

update statut_intervenant set tem_atv = 1 WHERE source_code IN (

'ETUD_HORS_UCBN',
'ETUD_UCBN',
'RETR_HORS_UCBN'

);


--select * from parametre;


INSERT INTO PARAMETRE (
  NOM, 
  VALEUR, 
  DESCRIPTION,
  ID,
  HISTO_CREATEUR_ID,
  HISTO_MODIFICATEUR_ID
)VALUES(
  'contrat_etablissement',
  'L''université de Caen',
  'Contrat : établissement',
  PARAMETRE_ID_SEQ.NEXTVAL,
  (select id from utilisateur where username = 'lecluse'),
  (select id from utilisateur where username = 'lecluse')
);

INSERT INTO PARAMETRE (
  NOM, 
  VALEUR, 
  DESCRIPTION,
  ID,
  HISTO_CREATEUR_ID,
  HISTO_MODIFICATEUR_ID
)VALUES(
  'contrat_etablissement_represente',
  'représentée par son Président, Pierre DENISE',
  'Contrat : représentant',
  PARAMETRE_ID_SEQ.NEXTVAL,
  (select id from utilisateur where username = 'lecluse'),
  (select id from utilisateur where username = 'lecluse')
);

INSERT INTO PARAMETRE (
  NOM, 
  VALEUR, 
  DESCRIPTION,
  ID,
  HISTO_CREATEUR_ID,
  HISTO_MODIFICATEUR_ID
)VALUES(
  'contrat_civilite_president',
  'le Président',
  'Contrat : civilité du président (avec article)',
  PARAMETRE_ID_SEQ.NEXTVAL,
  (select id from utilisateur where username = 'lecluse'),
  (select id from utilisateur where username = 'lecluse')
);

INSERT INTO PARAMETRE (
  NOM, 
  VALEUR, 
  DESCRIPTION,
  ID,
  HISTO_CREATEUR_ID,
  HISTO_MODIFICATEUR_ID
)VALUES(
  'contrat_lieu_signature',
  'Caen',
  'LContrat : lieu de signature',
  PARAMETRE_ID_SEQ.NEXTVAL,
  (select id from utilisateur where username = 'lecluse'),
  (select id from utilisateur where username = 'lecluse')
);



INSERT INTO REGLE_STRUCTURE_VALIDATION (
    ID,
    TYPE_VOLUME_HORAIRE_ID,
    TYPE_INTERVENANT_ID,
    PRIORITE
  ) VALUES (
    REGLE_STRUCTURE_VAL_ID_SEQ.NEXTVAL,
    (select id from type_volume_horaire WHERE code = 'PREVU'), -- PREVU ou REALISE
    (select id from TYPE_INTERVENANT WHERE code = 'P'), -- P ou E
    'affectation'
  );
  
  INSERT INTO REGLE_STRUCTURE_VALIDATION (
    ID,
    TYPE_VOLUME_HORAIRE_ID,
    TYPE_INTERVENANT_ID,
    PRIORITE
  ) VALUES (
    REGLE_STRUCTURE_VAL_ID_SEQ.NEXTVAL,
    (select id from type_volume_horaire WHERE code = 'PREVU'), -- PREVU ou REALISE
    (select id from TYPE_INTERVENANT WHERE code = 'E'), -- P ou E
    'enseignement'
  );
  
  INSERT INTO REGLE_STRUCTURE_VALIDATION (
    ID,
    TYPE_VOLUME_HORAIRE_ID,
    TYPE_INTERVENANT_ID,
    PRIORITE
  ) VALUES (
    REGLE_STRUCTURE_VAL_ID_SEQ.NEXTVAL,
    (select id from type_volume_horaire WHERE code = 'REALISE'), -- PREVU ou REALISE
    (select id from TYPE_INTERVENANT WHERE code = 'P'), -- P ou E
    'enseignement'
  );
  
  INSERT INTO REGLE_STRUCTURE_VALIDATION (
    ID,
    TYPE_VOLUME_HORAIRE_ID,
    TYPE_INTERVENANT_ID,
    PRIORITE
  ) VALUES (
    REGLE_STRUCTURE_VAL_ID_SEQ.NEXTVAL,
    (select id from type_volume_horaire WHERE code = 'REALISE'), -- PREVU ou REALISE
    (select id from TYPE_INTERVENANT WHERE code = 'E'), -- P ou E
    'enseignement'
  );
  


Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('180','191','1','0','1','39','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('180','194','0','1','0','40','1','1');
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('184','182','0','0','0','1','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('185','184','0','0','1','2','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('186','182','0','1','0','3','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('187','185','0','0','0','4','0',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('187','186','0','0','0','5','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('187','183','1','0','1','6','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('188','183','1','0','1','7','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('189','187','1','0','1','11','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('189','185','0','0','0','12','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('189','186','0','0','0','10','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('190','189','0','0','1','13','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('191','190','1','0','0','14','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('192','189','0','0','0','15','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('196','192','0','0','1','16','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('179','180','1','0','1','22','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('193','192','1','0','1','18','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('194','192','1','0','1','19','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('180','196','0','0','0','20','1','1');
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('180','193','0','1','0','21','1','1');
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('192','190','0','1','0','23','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('192','191','0','0','1','24','1',null);
Insert into WF_ETAPE_DEP (ETAPE_SUIV_ID,ETAPE_PREC_ID,LOCALE,INTEGRALE,PARTIELLE,ID,ACTIVE,TYPE_INTERVENANT_ID) values ('191','189','1','0','1','26','1',null);




Insert into PACKAGE_DEPS (ID,P1,P2) values ('1','OSE_AGREMENT','OSE_FORMULE');
Insert into PACKAGE_DEPS (ID,P1,P2) values ('2','OSE_WORKFLOW','OSE_AGREMENT');
Insert into PACKAGE_DEPS (ID,P1,P2) values ('3','OSE_WORKFLOW','OSE_CLOTURE_REALISE');
Insert into PACKAGE_DEPS (ID,P1,P2) values ('4','OSE_WORKFLOW','OSE_CONTRAT');
Insert into PACKAGE_DEPS (ID,P1,P2) values ('5','OSE_WORKFLOW','OSE_DOSSIER');
Insert into PACKAGE_DEPS (ID,P1,P2) values ('6','OSE_WORKFLOW','OSE_PAIEMENT');
Insert into PACKAGE_DEPS (ID,P1,P2) values ('7','OSE_WORKFLOW','OSE_PIECE_JOINTE_FOURNIE');
Insert into PACKAGE_DEPS (ID,P1,P2) values ('8','OSE_WORKFLOW','OSE_PIECE_JOINTE_DEMANDE');
Insert into PACKAGE_DEPS (ID,P1,P2) values ('11','OSE_WORKFLOW','OSE_SERVICE_SAISIE');
Insert into PACKAGE_DEPS (ID,P1,P2) values ('12','OSE_PIECE_JOINTE','OSE_PIECE_JOINTE_FOURNIE');
Insert into PACKAGE_DEPS (ID,P1,P2) values ('13','OSE_PIECE_JOINTE','OSE_PIECE_JOINTE_DEMANDE');
Insert into PACKAGE_DEPS (ID,P1,P2) values ('14','OSE_PAIEMENT','OSE_FORMULE');
Insert into PACKAGE_DEPS (ID,P1,P2) values ('15','OSE_WORKFLOW','OSE_VALIDATION_ENSEIGNEMENT');
Insert into PACKAGE_DEPS (ID,P1,P2) values ('16','OSE_WORKFLOW','OSE_VALIDATION_REFERENTIEL');



UPDATE PERSONNEL SET CODE = SOURCE_CODE;
UPDATE PERSONNEL SET SUPANN_EMP_ID = SOURCE_CODE;

update formule_resultat set
  type_intervenant_code = (SELECT ti.code FROM type_intervenant ti JOIN statut_intervenant si ON si.type_intervenant_id = ti.id JOIN intervenant i ON i.statut_id = si.id WHERE i.id = formule_resultat.intervenant_id)
;

delete from parametre where nom = 'date_debut_saisie_services_realises';
delete from parametre where nom = 'date_debut_saisie_services_realises_permanents';
delete from parametre where nom = 'date_fin_saisie_permanents';
delete from parametre where nom = 'date_fin_saisie_services_realises';
delete from parametre where nom = 'date_fin_saisie_services_realises_permanents';
delete from parametre where nom = 'drh_structure_id';
delete from parametre where nom = 'hetd';



-- ********************************************************************* --
-- *          à faire APRÈS avoir mis à jour le code source            * --
-- ********************************************************************* --

-- transfert des rôles
select 

'
INSERT INTO ROLE
  (
    ID,
    CODE,
    LIBELLE,
    PERIMETRE_ID,
    PEUT_CHANGER_STRUCTURE,
    HISTO_CREATION,
    HISTO_CREATEUR_ID,
    HISTO_MODIFICATION,
    HISTO_MODIFICATEUR_ID
  )
  VALUES
  (
    role_id_seq.nextval,
    q''[' || code || ']'',
    q''[' || libelle || ']'',
    (select id from perimetre where code = q''[' || (select code from perimetre where id = perimetre_id) || ']''),
    ' || PEUT_CHANGER_STRUCTURE || ',
    sysdate, (select id from utilisateur where username=''lecluse''),
    sysdate, (select id from utilisateur where username=''lecluse'')
  );
'

isql from role where histo_destruction is null and code not in (
'directeur-composante',
'responsable-recherche-labo',
'gestionnaire-composante',
'responsable-composante',
'administrateur',
'superviseur-composante',
'superviseur-etablissement',
'responsable-drh',
'gestionnaire-drh',
'responsable-foad',
'test'
);



select 
 /* R.CODE r_code,
  cp.code cp_code,
  P.CODE p_code,
  */
  '
  INSERT INTO role_privilege (role_id,privilege_id) VALUES (
    (select id from role where code = q''[' || r.code || ']''),
    (select p.id from privilege p join categorie_privilege cp ON cp.id = p.categorie_id 
      WHERE cp.code = q''[' || cp.code || ']'' AND p.code = q''[' || p.code || ']'')
  );
  ' isql
  
from 
  role_privilege rp
  JOIN role r on r.id = rp.role_id
  JOIN privilege p ON p.id = rp.privilege_id
  JOIN categorie_privilege cp ON cp.id = p.categorie_id;


select 
 /* si.CODE si_code,
  cp.code cp_code,
  P.CODE p_code,
  */
  '
  INSERT INTO statut_privilege (statut_id,privilege_id) VALUES (
    (select id from statut_intervenant where source_code = q''[' || si.source_code || ']''),
    (select p.id from privilege p join categorie_privilege cp ON cp.id = p.categorie_id 
      WHERE cp.code = q''[' || cp.code || ']'' AND p.code = q''[' || p.code || ']'')
  );
  ' isql
  
from 
  statut_privilege sp
  JOIN statut_intervenant si on si.id = SP.STATUT_ID
  JOIN privilege p ON p.id = sp.privilege_id
  JOIN categorie_privilege cp ON cp.id = p.categorie_id;


DROP PROCEDURE "OSE"."UPGRADE_PIECE_JOINTE_V15";
DROP PACKAGE "OSE"."OSE_PJ";
DROP SEQUENCE WF_INTERVENANT_ETAPE_ID_SEQ;
DROP TABLE WF_TMP_INTERVENANT;
DROP TABLE WF_INTERVENANT_ETAPE;
DROP TABLE SYS_EXPORT_SCHEMA_01; 
DROP TABLE PJ_TMP_INTERVENANT;
DROP TABLE FORMULE_RESULTAT_MAJ;
DROP TABLE ANTHONY;
DROP VIEW V_WF_INTERVENANT_ETAPE;
DROP VIEW V_TMP_PJ;
DROP VIEW V_TBL_PILOTAGE_ECARTS_ETATS;
DROP VIEW V_TBL_DMEP;
DROP VIEW V_RECAP_SERVICE_PREVIS;
DROP VIEW LAURENT_TEST;
DROP INDEX WF_ETAPE_DEP_PK;
DROP INDEX WF_INTERVENANT_ETAPE_EFK_IDX;
DROP INDEX INDIC_DIFF_DOSSIER_PK;
DROP INDEX WF_INTERVENANT_ETAPE_IFK_IDX;
DROP INDEX WF_INTERVENANT_ETAPE_PFK;
DROP INDEX WF_INTERVENANT_ETAPE_SFK_IDX;
DROP INDEX WF_INTERVENANT_ETAPE_PK;
DROP INDEX SYS_MTABLE_000021F9D_IND_2;
DROP INDEX WF_TMP_INTERVENANT_PK;
DROP INDEX SYS_MTABLE_000021F9D_IND_1;
DROP INDEX MV_AFFECTATION_PK;
DROP INDEX FORMULE_RESULTAT_MAJ__PK;
DROP INDEX AII_FK;
DROP TRIGGER T_PJF_PIECE_JOINTE;
DROP TRIGGER T_PAI_MISE_EN_PAIEMENT;
DROP TRIGGER T_CRT_CONTRAT;
DROP TRIGGER T_AGR_AGREMENT;
DROP TRIGGER REFERENTIEL_HISTO_CK;
DROP TRIGGER PJ_TRG_TYPE_PJ_STATUT_S;
DROP TRIGGER PJ_TRG_TYPE_PJ_STATUT;
DROP TRIGGER PJ_TRG_DOSSIER_S;
DROP TRIGGER PJ_TRG_DOSSIER;
DROP TRIGGER F_ELEMENT_PEDAGOGIQUE;
DROP TRIGGER F_CONTRAT;

/
BEGIN DBMS_SCHEDULER.enable(name=>'"OSE"."OSE_SRC_SYNC"'); END;
/