CREATE OR REPLACE TRIGGER T_SRV_INTERVENANT
AFTER INSERT 
OR UPDATE OF 
  annee_id,
	statut_id,
	structure_id,
	histo_creation,
	histo_destruction
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_SERVICE.DEMANDE_CALCUL( :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_SERVICE.DEMANDE_CALCUL( :OLD.id );
  END IF;

END;

/

CREATE OR REPLACE TRIGGER T_SRV_STATUT_INTERVENANT
AFTER UPDATE OF 
    peut_saisir_service
ON STATUT_INTERVENANT
FOR EACH ROW
BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_SERVICE.DEMANDE_CALCUL( p.intervenant_id );
  
  END LOOP;

END;

/

CREATE OR REPLACE TRIGGER T_SRV_SERVICE
AFTER INSERT 
OR UPDATE OF 
  intervenant_id,
	histo_creation,
	histo_destruction,
	element_pedagogique_id
OR DELETE ON SERVICE
FOR EACH ROW
BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_SERVICE.DEMANDE_CALCUL( :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_SERVICE.DEMANDE_CALCUL( :OLD.intervenant_id );
  END IF;

END;

/

CREATE OR REPLACE TRIGGER T_SRV_VOLUME_HORAIRE
AFTER INSERT 
OR UPDATE OF 
  type_volume_horaire_id,
	service_id,
	histo_creation,
	histo_destruction
OR DELETE ON VOLUME_HORAIRE
FOR EACH ROW
BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      s.id = :NEW.service_id
      OR s.id = :OLD.service_id    

  ) LOOP
  
    OSE_SERVICE.DEMANDE_CALCUL( p.intervenant_id );
  
  END LOOP;

END;

/

CREATE OR REPLACE TRIGGER T_SRV_ELEMENT_PEDAGOGIQUE
AFTER INSERT 
OR UPDATE OF 
  structure_id
OR DELETE ON ELEMENT_PEDAGOGIQUE
FOR EACH ROW
BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
         s.element_pedagogique_id = :NEW.id
      OR s.element_pedagogique_id = :OLD.id
  
  ) LOOP
  
    OSE_SERVICE.DEMANDE_CALCUL( p.intervenant_id );
  
  END LOOP;

END;

/

CREATE OR REPLACE TRIGGER T_SRV_VALIDATION_VOL_HORAIRE
AFTER INSERT 
OR UPDATE OF 
  volume_horaire_id,
	validation_id
OR DELETE ON VALIDATION_VOL_HORAIRE
FOR EACH ROW
BEGIN

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire vh ON vh.service_id = s.id
    WHERE
      vh.id = :NEW.volume_horaire_id
      OR vh.id = :OLD.volume_horaire_id    

  ) LOOP

    OSE_SERVICE.DEMANDE_CALCUL( p.intervenant_id );

  END LOOP;

END;

/

CREATE OR REPLACE TRIGGER T_SRV_VALIDATION
AFTER INSERT 
OR UPDATE OF 
  histo_creation,
	histo_destruction
OR DELETE ON VALIDATION
FOR EACH ROW
BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_SERVICE.DEMANDE_CALCUL( :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_SERVICE.DEMANDE_CALCUL( :OLD.intervenant_id );
  END IF;

END;

/










CREATE OR REPLACE TRIGGER T_SRV_ELEMENT_PEDAGOGIQUE_S
AFTER INSERT OR UPDATE OR DELETE ON ELEMENT_PEDAGOGIQUE
BEGIN
  OSE_SERVICE.CALCULER_SUR_DEMANDE;
END;

/

CREATE OR REPLACE TRIGGER T_SRV_INTERVENANT_S
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_SERVICE.CALCULER_SUR_DEMANDE;
END;

/

CREATE OR REPLACE TRIGGER T_SRV_SERVICE_S
AFTER INSERT OR UPDATE OR DELETE ON SERVICE
BEGIN
  OSE_SERVICE.CALCULER_SUR_DEMANDE;
END;

/

CREATE OR REPLACE TRIGGER T_SRV_STATUT_INTERVENANT_S
AFTER INSERT OR UPDATE OR DELETE ON STATUT_INTERVENANT
BEGIN
  OSE_SERVICE.CALCULER_SUR_DEMANDE;
END;

/

CREATE OR REPLACE TRIGGER T_SRV_VALIDATION_S
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION
BEGIN
  OSE_SERVICE.CALCULER_SUR_DEMANDE;
END;

/

CREATE OR REPLACE TRIGGER T_SRV_VALIDATION_VOL_HORAIRE_S
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION_VOL_HORAIRE
BEGIN
  OSE_SERVICE.CALCULER_SUR_DEMANDE;
END;

/

CREATE OR REPLACE TRIGGER T_SRV_VOLUME_HORAIRE_S
AFTER INSERT OR UPDATE OR DELETE ON VOLUME_HORAIRE
BEGIN
  OSE_SERVICE.CALCULER_SUR_DEMANDE;
END;

/

