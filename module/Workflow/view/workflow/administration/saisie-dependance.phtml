<?php

/**
 * @var $this  Application\View\Renderer\PhpRenderer
 * @var $title string
 * @var $form  Workflow\Form\DependanceForm
 */

?>

<h1 class="page-header"><?= $title ?></h1>

<?= $this->messenger()->setCurrentMessagesFromFlashMessenger() ?>

<?= $this->form()->openTag($form) ?>
<?= $this->formControlGroup($form->get('etapePrecedante')) ?>
<?= $this->formControlGroup($form->get('active')) ?>
<?= $this->formControlGroup($form->get('typeIntervenant')) ?>
<?= $this->formControlGroup($form->get('perimetre')) ?>
<?= $this->formControlGroup($form->get('avancement')) ?>
<?= $this->formControlGroup($form->get('security')) ?>
<?= $this->formSubmit($form->get('submit')) ?>
<?= $this->form()->closeTag($form) ?>

<script type="text/javascript">

    if (affWFDepChange == undefined) {

        function affWFDepChange(etapePrecedanteSelect)
        {
            // Récupérer le formulaire
            const form = etapePrecedanteSelect.form;

            // Récupérer la liste des étapes d'établissement
            const etablissementEtapes = JSON.parse(form.getAttribute('data-etablissement-etapes'));

            // Récupérer la div contenant le select périmetre
            const perimetreDiv = form.querySelector('div.mb-2:has(select[name="perimetre"])');

            // Fonction pour masquer ou afficher la div perimetre en fonction de la valeur de etapePrecedante
            const etapePrecedanteValue = etapePrecedanteSelect.value;

            if (etablissementEtapes.includes(parseInt(etapePrecedanteValue))) {
                perimetreDiv.style.display = 'none';
            } else {
                perimetreDiv.style.display = 'block';
            }


            // Récupérer la liste des avancements possibles
            const avancements = JSON.parse(form.getAttribute('data-avancements'));

            const avancementSelect = form.querySelector('select[name="avancement"]');

            //console.log(avancementSelect, avancements[etapePrecedanteValue]);

            while (avancementSelect.firstChild) {
                avancementSelect.removeChild(avancementSelect.firstChild);
            }
            Object.entries(avancements[etapePrecedanteValue]).forEach(([key, value]) => {
                const option = new Option(value, key);
                avancementSelect.appendChild(option);
            });
        }
    }


    function affWFDepInit()
    {
        let elements = document.querySelectorAll('.wf-dep-etape-precedante');

        // Parcourir chaque élément et déclencher l'événement onchange
        elements.forEach(function (element) {
            affWFDepChange(element);
        });
    }

    affWFDepInit();
</script>
