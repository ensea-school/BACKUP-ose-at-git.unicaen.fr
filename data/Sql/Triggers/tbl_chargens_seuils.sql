CREATE OR REPLACE TRIGGER T_CSE_NOEUD
AFTER INSERT
OR UPDATE OF
  annee_id,
	element_pedagogique_id,
	etape_id,
	structure_id
OR DELETE ON NOEUD
FOR EACH ROW
BEGIN
  IF NOT UNICAEN_TBL.ACTIV_TRIGGERS THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    UNICAEN_TBL.DEMANDE_CALCUL( 'chargens_seuils', UNICAEN_TBL.make_params('NOEUD_ID', :NEW.id ) );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    UNICAEN_TBL.DEMANDE_CALCUL( 'chargens_seuils', UNICAEN_TBL.make_params('NOEUD_ID', :OLD.id ) );
  END IF;

END;

/

CREATE OR REPLACE TRIGGER T_CSE_SEUIL_CHARGE
AFTER INSERT
OR UPDATE OF
  type_intervention_id,
	scenario_id,
	histo_destruction,
	structure_id,
	groupe_type_formation_id,
	dedoublement
OR DELETE ON SEUIL_CHARGE
FOR EACH ROW
BEGIN
  IF NOT UNICAEN_TBL.ACTIV_TRIGGERS THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      sn.noeud_id
    FROM
      scenario_noeud sn
    WHERE
         sn.scenario_id = :NEW.scenario_id
      OR sn.scenario_id = :OLD.scenario_id

  ) LOOP

    UNICAEN_TBL.DEMANDE_CALCUL( 'chargens_seuils', UNICAEN_TBL.make_params('NOEUD_ID', p.noeud_id ) );

  END LOOP;

END;

/

CREATE OR REPLACE TRIGGER T_CSE_ELEMENT_PEDAGOGIQUE
AFTER INSERT
OR UPDATE OF
  etape_id
OR DELETE ON ELEMENT_PEDAGOGIQUE
FOR EACH ROW
BEGIN
  IF NOT UNICAEN_TBL.ACTIV_TRIGGERS THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      id
    FROM
      noeud n
    WHERE
         n.etape_id = :NEW.etape_id
      OR n.etape_id = :OLD.etape_id
      OR n.element_pedagogique_id = :NEW.id
      OR n.element_pedagogique_id = :OLD.id
    ) LOOP

    UNICAEN_TBL.DEMANDE_CALCUL( 'chargens_seuils', UNICAEN_TBL.make_params('NOEUD_ID', p.id ) );

  END LOOP;

END;

/

CREATE OR REPLACE TRIGGER T_CSE_ETAPE
AFTER INSERT
OR UPDATE OF
  type_formation_id
OR DELETE ON ETAPE
FOR EACH ROW
BEGIN
  IF NOT UNICAEN_TBL.ACTIV_TRIGGERS THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      n.id
    FROM
      noeud n
      LEFT JOIN element_pedagogique ep ON ep.id = n.element_pedagogique_id
    WHERE
         n.etape_id = :NEW.id
      OR n.etape_id = :OLD.id
      OR ep.etape_id = :NEW.id
      OR ep.etape_id = :OLD.id
    ) LOOP

    UNICAEN_TBL.DEMANDE_CALCUL( 'chargens_seuils', UNICAEN_TBL.make_params('NOEUD_ID', p.id ) );

  END LOOP;

END;

/

CREATE OR REPLACE TRIGGER T_CSE_TYPE_FORMATION
AFTER INSERT
OR UPDATE OF
  groupe_id
OR DELETE ON TYPE_FORMATION
FOR EACH ROW
BEGIN
  IF NOT UNICAEN_TBL.ACTIV_TRIGGERS THEN RETURN; END IF;

  UNICAEN_TBL.DEMANDE_CALCUL( 'chargens_seuils', UNICAEN_TBL.make_params() );

END;

/

CREATE OR REPLACE TRIGGER T_CSE_SCENARIO_NOEUD
AFTER INSERT
OR UPDATE OF
  noeud_id,
  scenario_id,
  histo_destruction
OR DELETE ON SCENARIO_NOEUD
FOR EACH ROW
BEGIN
  IF NOT UNICAEN_TBL.ACTIV_TRIGGERS THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    UNICAEN_TBL.DEMANDE_CALCUL( 'chargens_seuils', UNICAEN_TBL.make_params('NOEUD_ID', :NEW.noeud_id ) );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    UNICAEN_TBL.DEMANDE_CALCUL( 'chargens_seuils', UNICAEN_TBL.make_params('NOEUD_ID', :OLD.noeud_id ) );
  END IF;

END;

/

CREATE OR REPLACE TRIGGER T_CSE_SCENARIO_NOEUD_SEUIL
AFTER INSERT
OR UPDATE OF
  dedoublement,
	scenario_noeud_id,
	type_intervention_id
OR DELETE ON SCENARIO_NOEUD_SEUIL
FOR EACH ROW
BEGIN
  IF NOT UNICAEN_TBL.ACTIV_TRIGGERS THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      sn.noeud_id
    FROM
      scenario_noeud sn
    WHERE
         sn.id = :NEW.scenario_noeud_id
      OR sn.id = :OLD.scenario_noeud_id
    ) LOOP

    UNICAEN_TBL.DEMANDE_CALCUL( 'chargens_seuils', UNICAEN_TBL.make_params('NOEUD_ID', p.noeud_id ) );

  END LOOP;

END;

/

CREATE OR REPLACE TRIGGER T_CSE_NOEUD_S 
AFTER INSERT OR UPDATE OR DELETE ON NOEUD
BEGIN 
  UNICAEN_TBL.CALCULER_DEMANDES; 
END;

/

CREATE OR REPLACE TRIGGER T_CSE_SCENARIO_NOEUD_S 
AFTER INSERT OR UPDATE OR DELETE ON SCENARIO_NOEUD
BEGIN 
  UNICAEN_TBL.CALCULER_DEMANDES; 
END;

/

CREATE OR REPLACE TRIGGER T_CSE_SCENARIO_NOEUD_SEUIL_S 
AFTER INSERT OR UPDATE OR DELETE ON SCENARIO_NOEUD_SEUIL
BEGIN 
  UNICAEN_TBL.CALCULER_DEMANDES; 
END;

/

CREATE OR REPLACE TRIGGER T_CSE_SEUIL_CHARGE_S 
AFTER INSERT OR UPDATE OR DELETE ON SEUIL_CHARGE
BEGIN 
  UNICAEN_TBL.CALCULER_DEMANDES; 
END;

/

CREATE OR REPLACE TRIGGER T_CSE_TYPE_FORMATION_S 
AFTER INSERT OR UPDATE OR DELETE ON TYPE_FORMATION
BEGIN 
  UNICAEN_TBL.CALCULER_DEMANDES; 
END;

/