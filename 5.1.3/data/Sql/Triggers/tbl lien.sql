
CREATE OR REPLACE TRIGGER T_LIE_LIEN
AFTER INSERT OR UPDATE OF 
    noeud_sup_id, noeud_inf_id, structure_id, histo_destruction
OR DELETE ON LIEN
FOR EACH ROW
BEGIN
  RETURN;
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ptbl_lien.package_sujet, :NEW.id );
  END IF;
  
  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ptbl_lien.package_sujet, :OLD.id );
  END IF;

END;

/

CREATE OR REPLACE TRIGGER T_LIE_SCENARIO
AFTER INSERT OR UPDATE OF 
    histo_destruction
OR DELETE ON SCENARIO
FOR EACH ROW
BEGIN
  RETURN;
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      sl.lien_id
    FROM
      scenario_lien sl
    WHERE
         sl.scenario_id = :NEW.id
      OR sl.scenario_id = :OLD.id
  
  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( ptbl_lien.package_sujet, p.lien_id );

  END LOOP;

END;

/

CREATE OR REPLACE TRIGGER T_LIE_SCENARIO_LIEN
AFTER INSERT OR UPDATE OF 
  actif, poids, choix_minimum, choix_maximum, histo_destruction
OR DELETE ON SCENARIO_LIEN
FOR EACH ROW
BEGIN
  RETURN;
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.lien_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ptbl_lien.package_sujet, :NEW.lien_id );
  END IF;
  
  IF :OLD.lien_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ptbl_lien.package_sujet, :OLD.lien_id );
  END IF;

END;

/



CREATE OR REPLACE TRIGGER T_LIE_LIEN_S
AFTER INSERT OR UPDATE OR DELETE ON LIEN
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;

/

CREATE OR REPLACE TRIGGER T_LIE_SCENARIO_S
AFTER INSERT OR UPDATE OR DELETE ON SCENARIO
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;

/

CREATE OR REPLACE TRIGGER T_LIE_SCENARIO_LIEN_S
AFTER INSERT OR UPDATE OR DELETE ON SCENARIO_LIEN
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
