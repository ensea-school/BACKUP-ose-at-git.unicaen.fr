<?php 
use Application\Assertion\PieceJointeAssertion;
use Application\Entity\Db\TypePieceJointeStatut;
?>

<?php $this->headTitle()->append($this->intervenant->getNomUsuel())->append("Pièces justificatives") ?>

<h1 class="page-header"><?php echo $title ?></h1>

<?php echo $this->partial('application/piece-jointe/status'); ?>

<?php foreach($this->typesPieceJointeStatut as $tpjs): /* @var $tpjs TypePieceJointeStatut */ ?>
    <?php 
    $tpj = $tpjs->getType();
    $pj  = isset($this->piecesJointesFournies[$tpj->getId()]) ? $this->piecesJointesFournies[$tpj->getId()] : null;
    $pjValidee = $pj && $pj->getValidation();
    
    $validationBar = $this->partial('application/piece-jointe/partial/validation-bar', ['pj' => $pj]);

    $obligatoire = $tpjs->getObligatoireToString($this->totalHeuresReelles);
    $linksModelesDocs = [];
    if (($url = $tpj->getUrlModeleDoc())) {
        $href = $this->basePath($url);
        $fileName = ltrim(strrchr($href, '/'), '/');
        $linksModelesDocs[] = '<a class="modele-doc" title="Cliquez pour télécharger le document à remplir" href="' 
                . $href . '"><span class="glyphicon glyphicon-file"></span> ' . $fileName . '</a>';
    }
    $type = (string) $tpj;
    if ($tpj->getCode() === \Application\Entity\Db\TypePieceJointe::CARTE_ETUD) {
        $type .= " $this->annee";
    }
    $label = sprintf('%s<br /><small>%s</small>', $type, $obligatoire);
    ?>

    <div class="panel panel-<?php echo $pjValidee ? 'success' : 'default' ?> upload-container">
        <div class="panel-heading">
            <h2>
                <?php $urlValidationBar = $this->url('piece-jointe/intervenant/voir-type', ['typePieceJointe' => $tpj->getId(), 'vue' => urlencode('partial/validation-bar')], [], true); ?>
                <div class="validation-bar pull-right" data-url="<?php echo $urlValidationBar ?>"><?php echo $validationBar ?></div>
                <?php echo $label ?>
            </h2>
        </div>
        <div class="panel-body">
            <?php 
            $urlAjouter = $this->url('piece-jointe/intervenant/ajouter', ['typePieceJointe' => $tpj->getId()], [], true);
            $urlLister  = $this->url('piece-jointe/intervenant/lister',  ['typePieceJointe' => $tpj->getId()], [], true);
            $uploader   = $this->uploader()->setUrl($urlAjouter);
            ?>
            <div class="row">
                <div class="col-md-6">
                    <!-- Modèle de document éventuel -->
                    <?php if ($linksModelesDocs): ?>
                    <div>
                        <label>Documents à télécharger et à remplir :</label><br />
                        <?php echo $this->htmlList($linksModelesDocs, false, false, false) ?>
                    </div>
                    <?php endif ?>
                    <!-- Liste des fichiers déposés -->
                    <?php echo $uploader->renderUploadedFiles($urlLister) ?>
                </div>
                <div class="col-md-6">
                    <!-- formulaire éventuel de dépôt de PJ -->
                    <?php if ($this->isAllowed($pj ?: $this->assertionPj->setType($tpj), PieceJointeAssertion::PRIVILEGE_CREATE_FICHIER)): ?>
                        <?php echo $uploader->renderForm() ?>
                    <?php endif; ?>
                </div>
            </div>
        </div>
    </div>
<?php endforeach ?>

<br />
<?php 
$message = <<<EOS
<p><strong>Information importante</strong></p>
<p>Votre saisie est terminée.</p>
<p>Votre contrat ne pourra être édité qu'après validation de l'ensemble des pièces justificatives.<br />
Aucun enseignement ne pourra avoir lieu avant la signature du contrat.</p>
EOS;
echo $this->messenger()->setMessage($message, 'warning');
?>

<?php if ($role instanceof \Application\Acl\IntervenantRole): ?>
    <hr />
    <?php echo $this->workflow($role->getIntervenant(), $role)->navNext() ?>
<?php endif; ?>
    

<script>
$(function() {
    var uploadEventFileDeleted  = "upload-event-file-deleted";
    var uploadEventFileUploaded = "upload-event-file-uploaded";
    var eventFileValidated      = "event-file-validated";
    
    $(".upload-container .uploaded-files-div").each(function() {
        var filesDiv = $(this);
        // écoute clic sur suppression de fichier pour faire la requête AJAX et rafraîchir la liste des fichiers
        filesDiv.on("click", ".valider-pj, .devalider-pj", function(event) {
            var a = $(this);
            a.button('loading');
            $.post(a.prop('href'), [], function(data, textStatus, jqXHR) {
                filesDiv.refresh();
                $("body").trigger(eventFileValidated);
            });
            event.preventDefault();
        });
    });
    
    /**
     * Ecoute des événements concernant les fichiers déposés, pour actualiser les messages d'infos
     */
    $("body").on(uploadEventFileUploaded + " " + uploadEventFileDeleted + " " + eventFileValidated, function(event, container) {
        $("div.status").refresh([], function() { $(this).hide().fadeIn(); });
        console.log(container);
        if (container) {
            var validationBar = $("div.validation-bar", container);
            validationBar.refresh([], function() { $(this).hide().fadeIn(); });
        }
    });
});
</script>