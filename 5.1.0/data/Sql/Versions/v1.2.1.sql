ALTER TABLE TYPE_INTERVENTION_EP ADD ( source_id NUMBER (*,0) NOT NULL ) ;

ALTER TABLE TYPE_INTERVENTION_EP ADD ( source_code VARCHAR2 (100 CHAR) ) ;

ALTER TABLE TYPE_INTERVENTION_EP ADD CONSTRAINT type_intervention_ep_source_FK FOREIGN KEY ( source_id ) REFERENCES source ( id ) ON
DELETE CASCADE NOT DEFERRABLE ;

INSERT INTO "OSE"."SOURCE" (ID, CODE, LIBELLE, IMPORTABLE) VALUES (source_id_seq.nextval, 'Calcul', 'Calculée', '1');

--drop table "OSE"."TYPE_ROLE_PHP_ROLE";
--DELETE FROM TYPE_ROLE WHERE code IN ('IND','DIR','RER','DELEG','RA','RES','GEST');
/*
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'directeur-composante','Directeur de composante',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'responsable-recherche-labo','Responsable d''équipe de recherche',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'gestionnaire-composante','Gestionnaire de composante',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'responsable-composante','Responsable de composante',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'administrateur','Administrateur',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'superviseur-composante','Superviseur de composante',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'superviseur-etablissement','Superviseur établissement',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'responsable-drh','Responsable DRH',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'gestionnaire-drh','Gestionnaire DRH',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
INSERT INTO TYPE_ROLE (
    ID,CODE,LIBELLE,VALIDITE_DEBUT,
    HISTO_CREATION,HISTO_CREATEUR_ID,
    HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID
  )VALUES(
    TYPE_ROLE_id_seq.nextval,
    'responsable-foad', 'Responsable FOAD',
    SYSDATE, SYSDATE,1, SYSDATE,1
  );
*/

INSERT INTO ROLE (
    ID,
    STRUCTURE_ID,
    PERSONNEL_ID,
    TYPE_ID,
    SOURCE_ID, SOURCE_CODE,
    VALIDITE_DEBUT, VALIDITE_FIN,
    HISTO_CREATION, HISTO_CREATEUR_ID, HISTO_MODIFICATION, HISTO_MODIFICATEUR_ID, HISTO_DESTRUCTION, HISTO_DESTRUCTEUR_ID
  )VALUES(
    role_id_seq.nextval, null,
    (select id from personnel where source_code = 24953),
    (select id from type_role where code = 'administrateur'),
    OSE_IMPORT.GET_SOURCE_ID('OSE'),
    'admin-24953',
    SYSDATE, NULL, SYSDATE, 1, SYSDATE, 1, NULL, NULL
  );

INSERT INTO ROLE (
    ID,
    STRUCTURE_ID,
    PERSONNEL_ID,
    TYPE_ID,
    SOURCE_ID, SOURCE_CODE,
    VALIDITE_DEBUT, VALIDITE_FIN,
    HISTO_CREATION, HISTO_CREATEUR_ID, HISTO_MODIFICATION, HISTO_MODIFICATEUR_ID, HISTO_DESTRUCTION, HISTO_DESTRUCTEUR_ID
  )VALUES(
    role_id_seq.nextval, null,
    (select id from personnel where source_code = 21237),
    (select id from type_role where code = 'administrateur'),
    OSE_IMPORT.GET_SOURCE_ID('OSE'),
    'admin-21237',
    SYSDATE, NULL, SYSDATE, 1, SYSDATE, 1, NULL, NULL
  );
  
INSERT INTO ROLE (
    ID,
    STRUCTURE_ID,
    PERSONNEL_ID,
    TYPE_ID,
    SOURCE_ID, SOURCE_CODE,
    VALIDITE_DEBUT, VALIDITE_FIN,
    HISTO_CREATION, HISTO_CREATEUR_ID, HISTO_MODIFICATION, HISTO_MODIFICATEUR_ID, HISTO_DESTRUCTION, HISTO_DESTRUCTEUR_ID
  )VALUES(
    role_id_seq.nextval, null,
    (select id from personnel where source_code = 35),
    (select id from type_role where code = 'administrateur'),
    OSE_IMPORT.GET_SOURCE_ID('OSE'),
    'admin-35',
    SYSDATE, NULL, SYSDATE, 1, SYSDATE, 1, NULL, NULL
  );

CREATE OR REPLACE FORCE VIEW SRC_TYPE_INTERVENTION_EP AS 
  SELECT
  null id,
  ti.id type_intervention_id,
  ep.id element_pedagogique_id,
  1 visible,
  ose_import.get_source_id('Calcul') source_id,
  ti.code || '_' || ep.source_code source_code
FROM
  element_pedagogique ep
  JOIN type_intervention ti ON ti.code = 'FOAD' AND ti.histo_destruction IS NULL
WHERE
  ep.taux_foad > 0
  AND ep.histo_destruction IS NULL;
  
  
  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_TYPE_INTERVENTION_EP" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ELEMENT_PEDAGOGIQUE_ID", "TYPE_INTERVENTION_ID", "VISIBLE", "U_ELEMENT_PEDAGOGIQUE_ID", "U_TYPE_INTERVENTION_ID", "U_VISIBLE") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ELEMENT_PEDAGOGIQUE_ID",diff."TYPE_INTERVENTION_ID",diff."VISIBLE",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_TYPE_INTERVENTION_ID",diff."U_VISIBLE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_INTERVENTION_ID ELSE S.TYPE_INTERVENTION_ID END TYPE_INTERVENTION_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VISIBLE ELSE S.VISIBLE END VISIBLE,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.TYPE_INTERVENTION_ID <> S.TYPE_INTERVENTION_ID OR (D.TYPE_INTERVENTION_ID IS NULL AND S.TYPE_INTERVENTION_ID IS NOT NULL) OR (D.TYPE_INTERVENTION_ID IS NOT NULL AND S.TYPE_INTERVENTION_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_INTERVENTION_ID,
    CASE WHEN D.VISIBLE <> S.VISIBLE OR (D.VISIBLE IS NULL AND S.VISIBLE IS NOT NULL) OR (D.VISIBLE IS NOT NULL AND S.VISIBLE IS NULL) THEN 1 ELSE 0 END U_VISIBLE
FROM
  TYPE_INTERVENTION_EP D
  FULL JOIN SRC_TYPE_INTERVENTION_EP S ON (S.source_id = D.source_id AND S.source_code = D.source_code)
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.TYPE_INTERVENTION_ID <> S.TYPE_INTERVENTION_ID OR (D.TYPE_INTERVENTION_ID IS NULL AND S.TYPE_INTERVENTION_ID IS NOT NULL) OR (D.TYPE_INTERVENTION_ID IS NOT NULL AND S.TYPE_INTERVENTION_ID IS NULL)
  OR D.VISIBLE <> S.VISIBLE OR (D.VISIBLE IS NULL AND S.VISIBLE IS NOT NULL) OR (D.VISIBLE IS NOT NULL AND S.VISIBLE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;  
  
  
/

-- package import