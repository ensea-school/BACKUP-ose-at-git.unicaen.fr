<?php

use Application\Entity\Db\Annee;
use Service\Entity\Db\EtatVolumeHoraire;
use Application\Entity\Db\Formule;
use Application\Entity\Db\FormuleTestIntervenant;
use Application\Entity\Db\Structure;
use Intervenant\Entity\Db\TypeIntervenant;
use Service\Entity\Db\TypeVolumeHoraire;

/**
 * @var $this                   \Application\View\Renderer\PhpRenderer
 * @var $title                  string
 * @var $formuleTestIntervenant FormuleTestIntervenant
 * @var $structures             Structure[]
 * @var $formules               Formule[]
 * @var $annees                 Annee[]
 * @var $typesIntervenants      TypeIntervenant[]
 * @var $typesVh                TypeVolumeHoraire[]
 * @var $etatsVh                EtatVolumeHoraire[]
 * @var $annee                  Annee
 * @var $formuleId              int
 */
class LocalFormater
{
    /**
     * @var \Application\View\Renderer\PhpRenderer
     */
    public $view;

    /**
     * @var int
     */
    public $index = null;



    function select($name, array $attrs = [], $options = []): string
    {
        $defAttrs = [
            'class'        => 'dinput',
            'data-name'    => $name,
            'data-index'   => $this->index,
            'data-type'    => 'int',
            'data-default' => '',
        ];
        if (isset($attrs['class'])) $attrs['class'] = $defAttrs['class'] . ' ' . $attrs['class'];
        $finalAttrs = array_merge($defAttrs, $attrs);

        if ($finalAttrs['data-type'] == 'bool') {
            $options = ['true' => 'Oui', 'false' => 'Non'];
        }

        $result = $this->view->tag('select', $finalAttrs)->open();
        if (!$finalAttrs['data-default']) {
            $result .= '<option value=""></option>' . "\n";
        }
        foreach ($options as $ov => $ol) {
            if (is_object($ol)) $ov = $ol->getId();
            $result .= $this->view->tag('option', ['value' => $ov])->text($ol);
        }
        $result .= '</select>';

        return $result;
    }



    public function input($name, array $attrs = []): string
    {
        $defAttrs = [
            'type'         => 'text',
            'style'        => "width:100%",
            'maxlength'    => "6",
            'class'        => 'dinput',
            'data-name'    => $name,
            'data-index'   => $this->index,
            'data-type'    => 'float',
            'data-default' => '',
        ];
        if (isset($attrs['class'])) $attrs['class'] = $defAttrs['class'] . ' ' . $attrs['class'];
        $finalAttrs = array_merge($defAttrs, $attrs);

        return $this->view->tag('input', $finalAttrs)->openClose(true);
    }



    public function output($name, array $attrs = [])
    {
        $defAttrs = [
            'class'      => 'doutput',
            'data-name'  => $name,
            'data-index' => $this->index,
            'data-type'  => 'float',
        ];
        if (isset($attrs['class'])) $attrs['class'] = $defAttrs['class'] . ' ' . $attrs['class'];
        $finalAttrs = array_merge($defAttrs, $attrs);

        return $this->view->tag('td', $finalAttrs)->openClose(false);
    }
}





$lf       = new LocalFormater();
$lf->view = $this;

$maxLignes = 30;
if ($formuleTestIntervenant->getVolumeHoraireTest()->count() > 30) {
    $maxLignes = $formuleTestIntervenant->getVolumeHoraireTest()->count();
}
$typesInterventions = ['CM' => 'CM', 'TD' => 'TD', 'TP' => 'TP', 'AUTRE' => 'Autre', 'REFERENTIEL' => 'Référentiel'];

$fLibelles = [];
foreach ($formules as $formule) {
    $fLibelles[$formule->getId()] = $formule->libellesToArray();
}

echo $this->tag('h1', ['class' => 'page-header'])->html($title);

?>
<div class="formule-test-intervenant"
     data-data="<?= $this->escapeHtmlAttr(json_encode($formuleTestIntervenant->toArray())) ?>"
     data-formules="<?= $this->escapeHtmlAttr(json_encode($fLibelles)) ?>"
>
    <div class="errors"><?= $this->messenger()->addCurrentMessagesFromFlashMessenger(); ?></div>
    <div class="row">
        <div class="col-md-6">
            <h2>Intervenant</h2>
            <table class="table table-condensed table-extra-condensed fti">
                <tr>
                    <th>Libellé</th>
                    <td class="saisie"><?= $lf->input('libelle', ['maxlength' => "150", 'data-type' => 'string']) ?></td>
                </tr>
                <tr>
                    <th>Formule</th>
                    <td class="saisie"><?= $lf->select('formule', ['data-default' => $formuleId], $formules) ?></td>
                </tr>
                <tr>
                    <th>Année</th>
                    <td class="saisie"><?= $lf->select('annee', ['data-default' => $annee->getId()], $annees) ?></td>
                </tr>
                <tr>
                    <th>Type</th>
                    <td class="saisie"><?= $lf->select('typeIntervenant', ['data-default' => 1], $typesIntervenants) ?></td>
                </tr>
                <tr>
                    <th>Structure</th>
                    <td class="saisie"><?= $lf->select('structureCode', ['data-type' => 'string'], $structures) ?></td>
                </tr>
                <tr>
                    <th>Type de volume horaire</th>
                    <td class="saisie"><?= $lf->select('typeVolumeHoraire', ['data-default' => 1], $typesVh) ?></td>
                </tr>
                <tr>
                    <th>État de volume horaire</th>
                    <td class="saisie"><?= $lf->select('etatVolumeHoraire', ['data-default' => 1], $etatsVh) ?></td>
                </tr>
                <tr>
                    <th>Heures de service statutaire</th>
                    <td class="saisie"><?= $lf->input('heuresServiceStatutaire') ?></td>
                </tr>
                <tr>
                    <th>Heures de service modifié</th>
                    <td class="saisie"><?= $lf->input('heuresServiceModifie') ?></td>
                </tr>
                <tr>
                    <th>Dépassement de service dû sans HC</th>
                    <td class="saisie"><?= $lf->select('depassementServiceDuSansHC', ['data-type' => 'bool']) ?></td>
                </tr>
                <?php for ($p = 1; $p < 6; $p++): ?>
                    <tr class="i-param i-param-<?= $p ?>">
                        <th class="i-param i-param-<?= $p ?>">Paramètre <?= $p ?></th>
                        <td class="saisie"><?= $lf->input('param' . $p, ['data-type' => 'string']) ?></td>
                    </tr>
                <?php endfor; ?>
            </table>
        </div>
        <div class="col-md-5">
            <h2>Types d'intervention (HETD)</h2>
            <table class="table table-condensed table-extra-condensed table-bordered">
                <tr>
                    <th style="width:20%"></th>
                    <th style="width:20%">CM</th>
                    <th style="width:20%">TD</th>
                    <th style="width:20%">TP</th>
                    <th style="width:20%">Autre</th>
                </tr>
                <tr>
                    <th>En service</th>
                    <td class="saisie"><?= $lf->input('tauxCmServiceDu', ['maxlength' => "150", 'data-type' => 'float']) ?></td>
                    <td>1</td>
                    <td class="saisie"><?= $lf->input('tauxTpServiceDu', ['maxlength' => "150", 'data-type' => 'float']) ?></td>
                    <td class="saisie"><?= $lf->input('tauxAutreServiceDu', ['maxlength' => "150", 'data-type' => 'float']) ?></td>
                </tr>
                <tr>
                    <th>Au-delà du service</th>
                    <td class="saisie"><?= $lf->input('tauxCmServiceCompl', ['maxlength' => "150", 'data-type' => 'float']) ?></td>
                    <td>1</td>
                    <td class="saisie"><?= $lf->input('tauxTpServiceCompl', ['maxlength' => "150", 'data-type' => 'float']) ?></td>
                    <td class="saisie"><?= $lf->input('tauxAutreServiceCompl', ['maxlength' => "150", 'data-type' => 'float']) ?></td>
                </tr>
            </table>
            <h2>Résultat</h2>
            <table class="table table-condensed table-extra-condensed">
                <tr>
                    <th colspan="2">Service dû</th>
                    <td class="doutput" data-type="float" data-name="cServiceDu"></td>
                </tr>

                <tr>
                    <th rowspan="4">Service</th>
                    <th>FI</th>
                    <?= $lf->output('cServiceFi') ?>
                </tr>
                <tr>
                    <th>FA</th>
                    <?= $lf->output('cServiceFa') ?>
                </tr>
                <tr>
                    <th>FC</th>
                    <?= $lf->output('cServiceFc') ?>
                </tr>
                <tr>
                    <th>Référentiel</th>
                    <?= $lf->output('cServiceReferentiel') ?>
                </tr>
                <tr>
                    <th colspan="2">Total service dû assuré</th>
                    <?= $lf->output('cServiceAssure') ?>
                </tr>
                <tr>
                    <th rowspan="5">Heures compl.</th>
                    <th>FI</th>
                    <?= $lf->output('cHeuresComplFi') ?>
                </tr>
                <tr>
                    <th>FA</th>
                    <?= $lf->output('cHeuresComplFa') ?>
                </tr>
                <tr>
                    <th>FC</th>
                    <?= $lf->output('cHeuresComplFc') ?>
                </tr>
                <tr>
                    <th>FC majorées</th>
                    <?= $lf->output('cHeuresComplFcMajorees') ?>
                </tr>
                <tr>
                    <th>Référentiel</th>
                    <?= $lf->output('cHeuresComplReferentiel') ?>
                </tr>
                <tr>
                    <th colspan="2">Total heures compl. à payer</th>
                    <?= $lf->output('cHeuresComplAPayer') ?>
                </tr>
            </table>
            <button class="enregistrer btn btn-primary">Enregistrer et recalculer les HETD</button>
            <button class="exporter btn btn-default">Télécharger</button>
            <input type="file" id="importbtn" class="importer">
        </div>
    </div>

    <h2>Heures effectuées (A saisir de manière chronologique)</h2>
    <table class="table table-bordered table-condensed table-extra-condensed table-hover fvh">
        <thead>
        <tr>
            <th rowspan="3" style="width: 2em"></th>
            <th colspan="9" class="vh-donnees">Données</th>
            <th rowspan="3" style="width:2px">&nbsp;</th>
            <th colspan="9"><select id="affRes" class="form-control">
                    <option value="attendu">Résultats attendus (en HETD)</option>
                    <option value="hetd" selected="selected">Résultats calculés (en HETD)</option>
                    <option value="debug">Informations de débogage</option>
                </select></th>
        </tr>
        <tr>
            <th rowspan="2" style="width:8em">Structure</th>
            <th rowspan="2">Compte dans le service statutaire</th>
            <th rowspan="2">Type d'intervention</th>
            <th colspan="3">Répartition</th>
            <th colspan="2">Modulation</th>
            <th colspan="5" class="vh-params">Paramètres</th>
            <th rowspan="2">Heures</th>
            <th colspan="4" class="attendu">Service</th>
            <th colspan="5" class="attendu">Heures complémentaires</th>
            <th colspan="4" class="resultats">Service</th>
            <th colspan="5" class="resultats">Heures complémentaires</th>
            <th class="debug" rowspan="2" style="width:300px">Informations de débogage</th>
        </tr>
        <tr>
            <th>Fi</th>
            <th>Fa</th>
            <th>Fc</th>
            <th>Service dû</th>
            <th>Service compl.</th>
            <?php for ($p = 1; $p < 6; $p++): ?>
                <th class="vh-param vh-param-<?= $p ?>">Param. <?= $p ?></th>
            <?php endfor; ?>
            <th class="resultats">Fi</th>
            <th class="resultats">Fa</th>
            <th class="resultats">Fc</th>
            <th class="resultats">Réfé-rentiel</th>
            <th class="resultats">Fi</th>
            <th class="resultats">Fa</th>
            <th class="resultats">Fc</th>
            <th class="resultats">Fc maj.</th>
            <th class="resultats">Réfé-rentiel</th>

            <th class="attendu">Fi</th>
            <th class="attendu">Fa</th>
            <th class="attendu">Fc</th>
            <th class="attendu">Réfé-rentiel</th>
            <th class="attendu">Fi</th>
            <th class="attendu">Fa</th>
            <th class="attendu">Fc</th>
            <th class="attendu">Fc maj.</th>
            <th class="attendu">Réfé-rentiel</th>
        </tr>
        </thead>
        <tbody>
        <?php for ($i = 0; $i < $maxLignes; $i++): $lf->index = $i; ?>
            <tr>
                <th><?= $i + 1 ?></th>
                <td class="saisie"><?= $lf->select('structureCode', ['data-type' => 'string'], $structures) ?></td>
                <td class="saisie"><?= $lf->select('serviceStatutaire', ['data-type' => 'bool', 'data-default' => true]) ?></td>
                <td class="saisie"><?= $lf->select('typeInterventionCode', ['data-type' => 'string'], $typesInterventions) ?></td>
                <td><?= $lf->input('tauxFi', [
                        'style'        => "width:3em;background-color:white",
                        'maxlength'    => "5",
                        'disabled'     => 'disabled',
                        'data-type'    => 'float-pourc',
                        'data-default' => 1,
                    ]) ?><span class="pourc">%</span></td>
                <td class="saisie"><?= $lf->input('tauxFa', [
                        'style'        => "width:3em",
                        'maxlength'    => "5",
                        'data-type'    => 'float-pourc',
                        'data-default' => 0,
                    ]) ?><span class="pourc">%</span></td>
                <td class="saisie"><?= $lf->input('tauxFc', [
                        'style'        => "width:3em",
                        'maxlength'    => "5",
                        'data-type'    => 'float-pourc',
                        'data-default' => 0,
                    ]) ?><span class="pourc">%</span></td>
                <td class="saisie"><?= $lf->input('ponderationServiceDu', [
                        'style'        => "width:3em",
                        'maxlength'    => "5",
                        'data-type'    => 'float-pourc',
                        'data-default' => 1,
                    ]) ?><span class="pourc">%</span></td>
                <td class="saisie"><?= $lf->input('ponderationServiceCompl', [
                        'style'        => "width:3em",
                        'maxlength'    => "5",
                        'data-type'    => 'float-pourc',
                        'data-default' => 1,
                    ]) ?><span class="pourc">%</span></td>
                <?php for ($p = 1; $p < 6; $p++): ?>
                    <td class="saisie vh-param vh-param-<?= $p ?>"
                        style="width:5.7em"><?= $lf->input('param' . $p, ['data-type' => 'string', 'maxlength' => "100"]) ?></td>
                <?php endfor; ?>
                <td class="saisie"><?= $lf->input('heures') ?></td>
                <?php if ($i == 0): ?>
                    <td rowspan="<?= $maxLignes ?>" style="width:2px">&nbsp;</td>
                <?php endif; ?>
                <td class="attendu"><?= $lf->input('aServiceFi', ['data-type' => 'float']) ?></td>
                <td class="attendu"><?= $lf->input('aServiceFa', ['data-type' => 'float']) ?></td>
                <td class="attendu"><?= $lf->input('aServiceFc', ['data-type' => 'float']) ?></td>
                <td class="attendu"><?= $lf->input('aServiceReferentiel', ['data-type' => 'float']) ?></td>
                <td class="attendu"><?= $lf->input('aHeuresComplFi', ['data-type' => 'float']) ?></td>
                <td class="attendu"><?= $lf->input('aHeuresComplFa', ['data-type' => 'float']) ?></td>
                <td class="attendu"><?= $lf->input('aHeuresComplFc', ['data-type' => 'float']) ?></td>
                <td class="attendu"><?= $lf->input('aHeuresComplFcMajorees', ['data-type' => 'float']) ?></td>
                <td class="attendu"><?= $lf->input('aHeuresComplReferentiel', ['data-type' => 'float']) ?></td>
                <?= $lf->output('cServiceFi', ['class' => 'resultats', 'data-assert' => 'aServiceFi']) ?>
                <?= $lf->output('cServiceFa', ['class' => 'resultats', 'data-assert' => 'aServiceFa']) ?>
                <?= $lf->output('cServiceFc', ['class' => 'resultats', 'data-assert' => 'aServiceFc']) ?>
                <?= $lf->output('cServiceReferentiel', ['class' => 'resultats', 'data-assert' => 'aServiceReferentiel']) ?>
                <?= $lf->output('cHeuresComplFi', ['class' => 'resultats', 'data-assert' => 'aHeuresComplFi']) ?>
                <?= $lf->output('cHeuresComplFa', ['class' => 'resultats', 'data-assert' => 'aHeuresComplFa']) ?>
                <?= $lf->output('cHeuresComplFc', ['class' => 'resultats', 'data-assert' => 'aHeuresComplFc']) ?>
                <?= $lf->output('cHeuresComplFcMajorees', ['class' => 'resultats', 'data-assert' => 'aHeuresComplFcMajorees']) ?>
                <?= $lf->output('cHeuresComplReferentiel', ['class' => 'resultats', 'data-assert' => 'aHeuresComplReferentiel']) ?>
                <?= $lf->output('debugInfo', ['class' => 'debug', 'data-type' => 'string']) ?>
            </tr>
        <?php endfor; ?>
        </tbody>
    </table>
    <div>
        <h2>Informations de débogage
            <button class="btn btn-default btn-xs" type="button" data-toggle="collapse" data-target="#debug-info"
                    aria-expanded="false" aria-controls="debug-info">
                Afficher/masquer
            </button>
        </h2>
        <div class="collapse debug-info" id="debug-info"></div>
    </div>

    <a class="btn btn-default" href="<?= $this->url('formule-calcul/test') ?>"><i class="fas fa-rotate-left" aria-hidden="true"></i>
        Retour à la liste des formules</a>

</div>
<style>
    .saisie {
        background-color: #fff8dc;
    }

    .fvh th {
        font-size: 8pt;
    }

    .fvh td {
        white-space: nowrap;
        padding: 1px !important;
        width: 3em;
    }

    .fvh td .pourc {
        font-size: 8pt;
    }

    .dinput {
        border: none;
        height: 2em;
        width: 100%;
        background-color: #fff8dc;
    }

    .doutput {
        text-align: right;
    }

    .debug {
        display: none;
    }

    .debug.doutput {
        font-size: 8pt;
        width: 400px;
        white-space: unset;
    }

    .attendu {
        display: none;
    }

    .vh-param {
        display: none;
    }

    .vh-params {
        display: none;
    }

    tr.i-param {
        display: none;
    }

    .debug-info-table {
        overflow: auto;
    }

    .debug-table {
        font-size: 8pt;
    }

    .debug-table th {
        text-align: center;
        text-transform: uppercase;
        background-color: #ccc;
    }

    .debug-table td {
        text-align: right;
        min-width: 20px;
    }

    td .zero {
        color: gray;
    }

</style>
<script type="text/javascript">
    $(function () {

        WidgetInitializer.add('formule-test-intervenant', {
            id: null,
            saving: false,
            structures: [],

            valueToVariable: function (value, type)
            {
                if (value === '' || value === null || value === undefined) {
                    return null;
                }

                switch (type) {
                    case 'bool':
                        if (value === 'true') {
                            return true;
                        } else if (value === 'false') {
                            return false;
                        } else {
                            return Boolean(value);
                        }
                    case 'float':
                        return Util.stringToFloat(value);
                    case 'float-pourc':
                        if (value.indexOf('/') !== -1) {
                            return Util.stringToFloat(value);
                        } else {
                            return Util.stringToFloat(value) / 100;
                        }
                    case 'int':
                        return parseInt(value);
                }
                return value;
            },

            affErreur: function (erreur)
            {
                var errStr = "<div class=\"messenger alert alert-danger \">\n" +
                    "<button type=\"button\" class=\"close\" title=\"Fermer cette alerte\" data-dismiss=\"alert\">×</button>\n" +
                    "<span class=\"fas fa-triangle-exclamation\"></span>\n" +
                    Util.nl2br(erreur, true) +
                    "</div>";

                this.element.find('.errors').html(this.element.find('.errors').html() + errStr);

            },

            variableToValue: function (variable, type)
            {
                if (variable === '' || variable === null || variable === undefined) {
                    return null;
                }

                switch (type) {
                    case 'bool':
                        return variable ? 'true' : 'false';
                    case 'float':
                        return Util.floatToString(variable);

                    case 'float-pourc':
                        var res = Util.floatToString(variable);
                        if (res.indexOf('/') !== -1) {
                            return res;
                        } else {
                            return Util.floatToString(variable * 100);
                        }
                    case 'int':
                        return variable.toString();
                }
                return variable;
            },

            save: function (autoReload)
            {
                var lastId = this.id;
                var that = this;
                var url = '<?= $this->url('formule-calcul/test/enregistrement') ?>';
                var result = false;
                if (this.id) url += '/' + this.id;

                that.saving = true;

                $.ajax({
                    type: 'POST',
                    url: url,
                    data: {data: JSON.stringify(that.getData())},
                    success: function (data) {
                        that.element.find('.errors').html('');
                        console.log(data.data);
                        that.setData(data.data);
                        if (data.errors) {
                            for (e in data.errors) {
                                that.affErreur(data.errors[e]);
                            }
                        } else {
                            if (autoReload && lastId == null) {
                                window.location.href = '<?= $this->url('formule-calcul/test/saisir') ?>/' + that.id;
                            }
                        }
                        that.saving = false;
                    },
                    error: function (jqXHR) {
                        alertFlash(jqXHR.responseText, 'error', 5000);
                        console.log(jqXHR);
                        that.saving = false;
                    }
                });

                return result;
            },

            autoSave: function ()
            {
                if (this.id != null && !this.saving) {
                    this.save(0);
                }
            },

            getData: function () {
                var that = this;
                var data = {'volumeHoraireTest': {}};

                this.element.find(".dinput").each(function () {
                    var name = $(this).data('name');
                    var index = $(this).data('index');
                    var type = $(this).data('type');
                    var isFti = $(this).parents('table.fvh').length == 0;
                    var value = $(this).val();
                    var variable = that.valueToVariable(value, type);

                    if (isFti) {
                        data[name] = variable;
                    } else {
                        if (data['volumeHoraireTest'][index] == undefined) {
                            data['volumeHoraireTest'][index] = {};
                        }
                        data['volumeHoraireTest'][index][name] = variable;
                    }
                });

                return data;
            },

            setData: function (data) {
                var that = this;
                this.element.find(".dinput").each(function () {
                    var name = $(this).data('name');
                    var index = $(this).data('index');
                    var type = $(this).data('type');
                    var isFti = $(this).parents('table.fvh').length == 0;

                    if (isFti) {
                        var variable = data[name];
                    } else {
                        if (data['volumeHoraireTest'][index]) {
                            var variable = data['volumeHoraireTest'][index][name];
                        } else {
                            var variable = null;
                        }
                    }

                    var value = that.variableToValue(variable, type);

                    if (!value && $(this).data('default') !== '') {
                        value = that.variableToValue($(this).data('default'), type);
                    }

                    if ('structureCode' == name) {
                        if (value) that.ajoutStructure($(this), value);
                    }

                    $(this).val(value);

                    if ('typeInterventionCode' == name) {
                        that.changementTypeIntervention($(this));
                    }
                    if ('structureCode' == name) {
                        that.changementStructure($(this));
                    }
                });

                this.element.find(".doutput").each(function () {
                    var name = $(this).data('name');
                    var index = $(this).data('index');
                    var type = $(this).data('type');
                    var assert = $(this).data('assert');
                    var isFti = $(this).parents('table.fvh').length == 0;

                    if (isFti) {
                        var variable = data[name];
                        var assertVal = null;
                    } else {
                        if (data['volumeHoraireTest'][index]) {
                            var variable = data['volumeHoraireTest'][index][name];
                            var assertVal = data['volumeHoraireTest'][index][assert];
                        } else {
                            var variable = null;
                            var assertVal = null;
                        }
                    }
                    if (assert !== undefined && assertVal !== null) {
                        if (Math.abs(variable - assertVal) > 0.009) {
                            $(this).css('background-color', '#ffe5e5');
                            $(this).attr('title', 'Valeur attendue : ' + that.variableToValue(assertVal, type));
                        } else {
                            $(this).css('background-color', '#e7ffe5');
                            $(this).attr('title', '');
                        }
                    } else {
                        $(this).css('background-color', 'none');
                    }
                    var value = that.variableToValue(variable, type);

                    if (value === '0') {
                        value = '<span class="zero">0</span>';
                    }

                    $(this).html(value);
                });

                this.affDebugInfo(data.debugInfo);
                this.changementFormule(data.formule);

                this.id = data.id;
            },



            exporter: function ()
            {
                content = this.getData();
                filename = content.libelle;
                content = JSON.stringify(content);

                var a = document.createElement('a');
                var blob = new Blob([content], {'type': 'text/json'});
                a.href = window.URL.createObjectURL(blob);
                a.download = 'Test de formule ' + filename + '.json';
                a.click();
            },



            importer: function ()
            {
                var that = this;
                var input = document.getElementById('importbtn');
                var file = input.files[0];

                var reader = new FileReader();

                // Closure to capture the file information.
                reader.onload = (function () {
                    return function (e) {
                        var data = JSON.parse(e.target.result);
                        that.setData(data);
                    };
                })(file);

                // Read in the image file as a data URL.
                reader.readAsText(file);
            },



            changementFormule: function (formuleId)
            {
                var formules = this.element.data('formules');
                var vhPCount = 0;

                for (var i = 1; i < 6; i++) {
                    if (formuleId && formules[formuleId]['iParam' + i + 'Libelle']) {
                        this.element.find('tr.i-param-' + i).show();
                        this.element.find('th.i-param-' + i).html(formules[formuleId]['iParam' + i + 'Libelle']);
                    } else {
                        this.element.find('tr.i-param-' + i).hide();
                    }

                    if (formuleId && formules[formuleId]['vhParam' + i + 'Libelle']) {
                        vhPCount++;
                        this.element.find('th.vh-param-' + i).show();
                        this.element.find('th.vh-param-' + i).html(formules[formuleId]['vhParam' + i + 'Libelle']);
                        this.element.find('td.vh-param-' + i).show();
                    } else {
                        this.element.find('th.vh-param-' + i).hide();
                        this.element.find('td.vh-param-' + i).hide();
                    }
                }

                if (vhPCount > 0) {
                    this.element.find('.vh-params').show();
                    this.element.find('.vh-params').attr('colspan', vhPCount);
                    this.element.find('.vh-donnees').attr('colspan', 9 + vhPCount);
                } else {
                    this.element.find('.vh-params').hide();
                    this.element.find('.vh-donnees').attr('colspan', 9);
                }
            },



            changementTypeIntervention: function (select)
            {
                var tr = select.parent().parent();
                var value = select.val();
                if (value == 'REFERENTIEL' || !value) {
                    tr.find('.dinput[data-name=tauxFi]').parent().css('visibility', 'hidden');
                    tr.find('.dinput[data-name=tauxFa]').parent().css('visibility', 'hidden');
                    tr.find('.dinput[data-name=tauxFc]').parent().css('visibility', 'hidden');
                    tr.find('.dinput[data-name=ponderationServiceDu]').parent().css('visibility', 'hidden');
                    tr.find('.dinput[data-name=ponderationServiceCompl]').parent().css('visibility', 'hidden');
                    if (!value) {
                        tr.find('.dinput[data-name=heures]').parent().css('visibility', 'hidden');
                    } else {
                        tr.find('.dinput[data-name=heures]').parent().css('visibility', 'visible');
                    }
                } else {
                    tr.find('.dinput[data-name=tauxFi]').parent().css('visibility', 'visible');
                    tr.find('.dinput[data-name=tauxFa]').parent().css('visibility', 'visible');
                    tr.find('.dinput[data-name=tauxFc]').parent().css('visibility', 'visible');
                    tr.find('.dinput[data-name=ponderationServiceDu]').parent().css('visibility', 'visible');
                    tr.find('.dinput[data-name=ponderationServiceCompl]').parent().css('visibility', 'visible');
                    tr.find('.dinput[data-name=heures]').parent().css('visibility', 'visible');
                }
            },



            initStructures: function ()
            {
                this.structures = [];
            },



            changementStructure: function (select)
            {
                var tr = select.parent().parent();
                var value = select.val();

                if (value === '__new_structure__') {
                    this.ajoutStructure(select);
                }

                if (!value) {
                    tr.find('.dinput[data-name=serviceStatutaire]').parent().css('visibility', 'hidden');
                    tr.find('.dinput[data-name=typeInterventionCode]').parent().css('visibility', 'hidden');
                } else {
                    tr.find('.dinput[data-name=serviceStatutaire]').parent().css('visibility', 'visible');
                    tr.find('.dinput[data-name=typeInterventionCode]').parent().css('visibility', 'visible');
                }
                this.changementTypeIntervention(tr.find('.dinput[data-name=typeInterventionCode]'));
                this.affLignes();
            },



            ajoutStructure: function (element, structure)
            {
                if (!structure) {
                    structure = prompt("Ajout d'une nouvelle structure");
                }

                if (structure && -1 === this.structures.indexOf(structure)) {
                    this.structures.push(structure);
                    this.element.find(".dinput[data-name=structureCode]").each(function () {
                        var option = $('<option>');
                        option.val(structure);
                        option.text(structure);
                        $(this).find("[value='__new_structure__']").before(option);
                    });
                }

                element.val(structure);
            },



            affLignes: function ()
            {
                // TODO : cacher les lignes en trop
            },



            affDebugInfo: function (data)
            {
                if (!data) return;

                var h = '';

                h += '<div class="debug-info-table"><table class="table table-bordered table-condensed table-extra-condensed debug-table">';
                h += '<tr><th></th>';
                for (var c in data.cols) {
                    h += '<th>' + data.cols[c] + '</th>';
                }
                h += '</tr>';
                for (var l in data.lines) {
                    h += '<tr><th>' + data.lines[l] + '</th>';
                    for (var c in data.cols) {
                        var val = data.cells[data.cols[c]][data.lines[l]];

                        if (isNaN(val)) {
                            val = '';
                        } else {
                            val = Util.floatToString(val);
                            if (val === '0') val = '<span class="zero">0</span>';
                        }

                        h += '<td>' + val + '</td>';
                    }
                    h += '</tr>';
                }
                h += '</table></div>';

                h += '<table class="table table-bordered table-condensed table-extra-condensed debug-table" style="width:20em">';
                for (var i in data.inds) {
                    var val = data.inds[i];

                    if (isNaN(val)) {
                        val = '';
                    } else {
                        val = Util.floatToString(val);
                        if (val === '0') val = '<span class="zero">0</span>';
                    }

                    h += '<tr><th>' + i + '</th><td>' + val + '</td></tr>';
                }
                h += '</table>';

                this.element.find('.debug-info').html(h);
            },



            calculTauxFi: function (index)
            {
                var tauxFa = Util.stringToFloat(this.findElement('tauxFa', index).val());
                var tauxFc = Util.stringToFloat(this.findElement('tauxFc', index).val());

                this.findElement('tauxFi', index).val(Util.floatToString(100 - (tauxFa + tauxFc)));
            },



            _create: function ()
            {
                var that = this;

                this.element.find(".fvh [data-name='tauxFa']").change(function () {
                    that.calculTauxFi($(this).data('index'));
                });

                this.element.find(".fvh [data-name='tauxFc']").change(function () {
                    that.calculTauxFi($(this).data('index'));
                });

                this.element.find("input.dinput").change(function () {
                    var type = $(this).data('type');
                    if (type !== 'string') {
                        var variable = that.valueToVariable($(this).val(), type);
                        $(this).val(that.variableToValue(variable, type));
                    }
                });

                this.element.find(".dinput[data-name='formule']").change(function () {
                    that.changementFormule($(this).val());
                });

                this.element.find(".dinput[data-name='typeInterventionCode']").change(function () {
                    that.changementTypeIntervention($(this));
                });

                this.element.find(".dinput[data-name='structureCode']").change(function () {
                    that.changementStructure($(this));
                });

                this.element.find(".enregistrer").click(function () {
                    that.save(true);
                });

                this.element.find(".exporter").click(function () {
                    that.exporter();
                });

                this.element.find(".importer").change(function () {
                    that.importer();
                });


                this.element.find("#affRes").change(function () {
                    switch ($(this).val()) {
                        case 'attendu':
                            that.element.find(".attendu").show();
                            that.element.find(".debug").hide();
                            that.element.find(".resultats").hide();
                            break;

                        case 'hetd':
                            that.element.find(".attendu").hide();
                            that.element.find(".debug").hide();
                            that.element.find(".resultats").show();
                            break;

                        case 'debug':
                            that.element.find(".attendu").hide();
                            that.element.find(".resultats").hide();
                            that.element.find(".debug").show();
                            break;
                    }
                });

                this.setData(this.element.data('data'));
            },

            findElement: function (name, index)
            {
                if (index === 0 || index > 0) {
                    return this.element.find(".fvh [data-name='" + name + "'][data-index='" + index + "']");
                } else {
                    return this.element.find(".fti [data-name='" + name + "']");
                }

            }

        });

    });
</script>