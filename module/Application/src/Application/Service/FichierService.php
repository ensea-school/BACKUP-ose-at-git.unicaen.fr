<?php

namespace Application\Service;

use Application\Entity\Db\Fichier;

/**
 * Description of FichierService
 *
 * @author LECLUSE Laurent <laurent.lecluse at unicaen.fr>
 *
 * @method Fichier get($id)
 * @method Fichier[] getList(\Doctrine\ORM\QueryBuilder $qb = null, $alias = null)
 * @method Fichier newEntity()
 *
 */
class FichierService extends AbstractEntityService
{
    const STOCKAGE_BDD  = 'bdd';
    const STOCKAGE_FILE = 'file';



    /**
     * retourne la classe des entités
     *
     * @return string
     * @throws RuntimeException
     */
    public function getEntityClass()
    {
        return Fichier::class;
    }



    /**
     * Retourne l'alias d'entité courante
     *
     * @return string
     */
    public function getAlias()
    {
        return 'fich';
    }



    /**
     * @param Fichier $entity
     *
     * @return mixed
     */
    public function save($entity, ?string $forceStockage = null)
    {
        $stockage = $forceStockage ?: self::getConfigStockage();
        if (self::STOCKAGE_FILE == $stockage) {
            $contenuBdd = $entity->getContenu(true);
            if (is_resource($contenuBdd)) {
                $contenuBdd = stream_get_contents($contenuBdd, -1, 0);
            }
            $entity->setContenu(null);
        }
        parent::save($entity); // TODO: Change the autogenerated stub
        if ((self::STOCKAGE_FILE == $stockage) && $contenuBdd) {
            $filename = $this->getFichierFilename($entity);
            if (!file_exists(dirname($filename))) {
                mkdir(dirname($filename));
            }
            file_put_contents($filename, $contenuBdd);
        }

        return $entity;
    }



    public function getConfigStockage(): string
    {
        $conf     = \AppConfig::get('fichiers');
        $stockage = isset($conf['stockage']) ? $conf['stockage'] : 'bdd';

        return $stockage;
    }



    protected function getConfigDir(): string
    {
        $conf = \AppConfig::get('fichiers');
        $dir  = isset($conf['dir']) ? $conf['dir'] : 'data/fichiers';
        if (substr($dir, -1) != '/') $dir .= '/';

        return $dir;
    }



    public function getFichierContenu(Fichier $fichier)
    {
        $stockage = self::getConfigStockage();
        if (self::STOCKAGE_FILE == $stockage) {
            $filename = $this->getFichierFilename($fichier);
            if (file_exists($filename)) {
                return fopen($filename, 'r');
            }
        }

        return $fichier->getContenu(true);
    }



    protected function getFichierFilename(Fichier $fichier): string
    {
        if (!$fichier->getId()) {
            throw new \Exception('Le contenu ne peut pas être récupéré ou stocké : le fichier n\'a pas d\'ID');
        }

        $id       = $fichier->getId();
        $filename = 'd' . (str_pad((string)floor($id / 1000), 4, '0', STR_PAD_LEFT))
            . '/f'
            . str_pad((string)($id % 1000), 3, '0', STR_PAD_LEFT);

        return $this->getConfigDir() . $filename;
    }



    /**
     * Supprime (historise par défaut) le service spécifié.
     *
     * @param Fichier $entity Entité à détruire
     * @param bool    $softDelete
     *
     * @return self
     */
    public function delete($entity, $softDelete = true)
    {
        if (!$softDelete) {
            $sql = "DELETE FROM PIECE_JOINTE_FICHIER WHERE FICHIER_ID = " . (int)$entity->getId();
            $this->getEntityManager()->getConnection()->executeQuery($sql);
        }
        $stockage = self::getConfigStockage();
        if (self::STOCKAGE_FILE == $stockage) {
            $filename = $this->getFichierFilename($entity);
            if (file_exists($filename)) {
                unlink($filename);
            }
        }

        return parent::delete($entity, $softDelete); // TODO: Change the autogenerated stub
    }

}