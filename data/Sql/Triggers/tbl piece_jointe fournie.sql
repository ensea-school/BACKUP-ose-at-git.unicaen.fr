CREATE OR REPLACE TRIGGER T_PJF_PIECE_JOINTE
AFTER INSERT 
OR UPDATE OF 
  type_piece_jointe_id,
	dossier_id,
	validation_id,
	histo_creation,
	histo_destruction
OR DELETE ON PIECE_JOINTE
FOR EACH ROW
BEGIN

  FOR p IN (
  
    SELECT DISTINCT
      d.intervenant_id
    FROM
      dossier d
    WHERE
         d.id = :OLD.dossier_id
      OR d.id = :NEW.dossier_id
  
  ) LOOP
  
    OSE_PIECE_JOINTE_FOURNIE.DEMANDE_CALCUL( p.intervenant_id );
  
  END LOOP;

END;

/

CREATE OR REPLACE TRIGGER T_PJF_DOSSIER
AFTER INSERT 
OR UPDATE OF 
  intervenant_id
OR DELETE ON DOSSIER
FOR EACH ROW
BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_PIECE_JOINTE_FOURNIE.DEMANDE_CALCUL( :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_PIECE_JOINTE_FOURNIE.DEMANDE_CALCUL( :OLD.intervenant_id );
  END IF;

END;

/

CREATE OR REPLACE TRIGGER T_PJF_INTERVENANT
AFTER INSERT 
OR UPDATE OF 
  annee_id,
	histo_creation,
	histo_destruction
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN

  IF :NEW.id IS NOT NULL THEN
    OSE_PIECE_JOINTE_FOURNIE.DEMANDE_CALCUL( :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_PIECE_JOINTE_FOURNIE.DEMANDE_CALCUL( :OLD.id );
  END IF;

END;

/

CREATE OR REPLACE TRIGGER T_PJF_PIECE_JOINTE_FICHER
AFTER INSERT 
OR UPDATE OF 
  piece_jointe_id,
	fichier_id
OR DELETE ON PIECE_JOINTE_FICHIER
FOR EACH ROW
BEGIN

  FOR p IN (

    SELECT DISTINCT
      d.intervenant_id
    FROM
      dossier d
      JOIN piece_jointe pj ON pj.dossier_id = d.id
    WHERE
         pj.id = :NEW.piece_jointe_id
      OR pj.id = :OLD.piece_jointe_id

  ) LOOP

    OSE_PIECE_JOINTE_FOURNIE.DEMANDE_CALCUL( p.intervenant_id );

  END LOOP;

END;

/

CREATE OR REPLACE TRIGGER T_PJF_FICHER
AFTER INSERT 
OR UPDATE OF 
  histo_creation,
	histo_destruction
OR DELETE ON FICHIER
FOR EACH ROW
BEGIN

  FOR p IN (

    SELECT DISTINCT
      d.intervenant_id
    FROM
      dossier d
      JOIN piece_jointe pj ON pj.dossier_id = d.id
      JOIN piece_jointe_fichier pjf ON pjf.piece_jointe_id = pj.id
    WHERE
         pjf.fichier_id = :NEW.id
      OR pjf.fichier_id = :OLD.id

  ) LOOP

    OSE_PIECE_JOINTE_FOURNIE.DEMANDE_CALCUL( p.intervenant_id );

  END LOOP;

END;

/

CREATE OR REPLACE TRIGGER T_PJF_VALIDATION
AFTER INSERT 
OR UPDATE OF 
  histo_creation,
	histo_destruction
OR DELETE ON VALIDATION
FOR EACH ROW
BEGIN

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_PIECE_JOINTE_FOURNIE.DEMANDE_CALCUL( :NEW.intervenant_id );
  END IF;

  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_PIECE_JOINTE_FOURNIE.DEMANDE_CALCUL( :OLD.intervenant_id );
  END IF;

END;

/









CREATE OR REPLACE TRIGGER T_PJF_DOSSIER_S
AFTER INSERT OR UPDATE OR DELETE ON DOSSIER
BEGIN
  OSE_PIECE_JOINTE_FOURNIE.CALCULER_SUR_DEMANDE;
END;

/

CREATE OR REPLACE TRIGGER T_PJF_FICHER_S
AFTER INSERT OR UPDATE OR DELETE ON FICHIER
BEGIN
  OSE_PIECE_JOINTE_FOURNIE.CALCULER_SUR_DEMANDE;
END;

/

CREATE OR REPLACE TRIGGER T_PJF_INTERVENANT_S
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_PIECE_JOINTE_FOURNIE.CALCULER_SUR_DEMANDE;
END;

/

CREATE OR REPLACE TRIGGER T_PJF_PIECE_JOINTE_S
AFTER INSERT OR UPDATE OR DELETE ON PIECE_JOINTE
BEGIN
  OSE_PIECE_JOINTE_FOURNIE.CALCULER_SUR_DEMANDE;
END;

/

CREATE OR REPLACE TRIGGER T_PJF_PIECE_JOINTE_FICHER_S
AFTER INSERT OR UPDATE OR DELETE ON PIECE_JOINTE_FICHIER
BEGIN
  OSE_PIECE_JOINTE_FOURNIE.CALCULER_SUR_DEMANDE;
END;

/

CREATE OR REPLACE TRIGGER T_PJF_VALIDATION_S
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION
BEGIN
  OSE_PIECE_JOINTE_FOURNIE.CALCULER_SUR_DEMANDE;
END;

/

