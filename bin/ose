#!/usr/bin/env php
<?php

$c  = new Console();
$oa = new OseAdmin($c);

$c->printMainTitle("OSE", 15);

$action = $c->getArg(1);

switch ($action) {
    case 'update':
        update($c, $oa);
    break;
    case 'notifier-indicateurs':
        $oa->exec('notifier indicateurs');
    break;
    case 'migration':
        $oldVersion = $c->getArg(2);
        $version    = $c->getArg(3);
        /* Action à effectuer */
    break;
    case 'synchronisation':
        $job = $c->getArg(2);
        $oa->exec('UnicaenImport SyncJob ' . $job);
    break;
    case 'chargens-calcul-effectifs':
        $oa->exec('chargens-calcul-effectifs');
    break;
    case 'calcul-tableaux-bord':
        $oa->exec('calcul-tableaux-bord');
    break;
    case 'formule-calcul':
        $oa->exec('formule-calcul');
    break;
    case 'changement-mot-de-passe':
        passwordChange($c, $oa);
    break;
    case 'maj-public-links':
        majPublicLinks($c, $oa);
    break;
    case 'test':
        test($c, $oa);
    break;
    default:
        help($c, $oa);
    break;
}


function update(Console $c, OseAdmin $oa)
{
    $osedir = dirname(__DIR__);

    // Choix de la version
    $c->println("Mise à jour de OSE");
    $c->println("Assurez-vous bien d'avoir mis OSE en mode maintenance avant de démarrer\n(pressez Entrée pour continuer)...");
    $c->getInput();

    $c->exec([
        "cd $osedir",
        "git fetch --all --tags --prune",
    ], false);

    $oldVersion = $oa->currentVersion($osedir);

    $c->println("Sélection de la version à déployer", $c::COLOR_LIGHT_CYAN);
    $c->println("La version actuellement installée est la " . $oldVersion);
    $c->println("Voici la liste des versions de OSE disponibles:");
    $tags = $oa->getTags();
    foreach ($tags as $tag) {
        $c->println($tag);
    }
    $ok = false;
    while (!$ok) {
        $c->print("Veuillez choisir une version à déployer: ");
        $version = $c->getInput();
        if ($oa->tagIsValid($version)) {
            $ok = true;
        } else {
            $c->println("$version n'est pas dans la liste des versions disponibles.");
        }
    }

    // Récupération des sources
    $c->println("\nMise à jour des fichiers à partir de GIT", $c::COLOR_LIGHT_CYAN);
    $c->passthru([
        "cd $osedir",
        "git checkout tags/$version",
    ]);
    $oa->writeVersion($osedir, $version);

    // Récupération des dépendances
    $c->println("\nMise à jour des dépendances à l'aide de Composer", $c::COLOR_LIGHT_CYAN);
    $c->passthru([
        "cd $osedir",
        "php composer.phar self-update",
        "php composer.phar install",
    ]);

    // Néttoyage des caches et mise à jour des proxies, lancement du script de migration éventuel
    $c->exec([
        "cd $osedir",
        "rm -Rf data/cache/*",
        "php vendor/bin/doctrine-module orm:generate-proxies",
        "chmod -R 777 data/cache/DoctrineProxy",
        "php bin/ose migration $oldVersion $version",
    ]);

    // Mise à jour des liens vers les répertoires publics des dépendances
    $c->println("\nMise à jour des liens vers les répertoires publics des dépendances", $c::COLOR_LIGHT_CYAN);
    $res = $oa->majUnicaenSymLinks($osedir);
    $c->println($res ? 'Liens mis à jour' : 'Liens déjà à jour', $c::COLOR_LIGHT_GREEN);

    // Conclusion
    $c->println("\nFin de la mise à jour des fichiers", $c::COLOR_LIGHT_GREEN);
    $c->println("Il reste encore votre base de données à mettre à jour.");
    $c->println("N'oubliez pas de sortir du mode maintenance!");
    $c->println('');
}


function passwordChange(Console $c, OseAdmin $oa)
{
    $c->println("Veuillez saisir un login :");
    $login = $c->getInput();

    $c->println("Veuillez maintenant saisir un mot de passe :");
    $pwd1 = $c->getSilentInput();

    $c->println("Veuillez saisir à nouveau le même mot de passe :");
    $pwd2 = $c->getSilentInput();

    if ($pwd1 <> $pwd2) {
        $c->printDie('Les mots de passe saisis ne correspondent pas!');
    }

    $c->println('Application du changement de mot de pase ...');
    $oa->exec("changement-mot-de-passe --utilisateur=$login --mot-de-passe=$pwd1");

    $c->println('Mot de passe changé', $c::COLOR_LIGHT_GREEN);
}


function majPublicLinks(Console $c, OseAdmin $oa)
{
    $osedir = dirname(__DIR__);

    $c->println("\nMise à jour des liens vers les répertoires publics des dépendances", $c::COLOR_LIGHT_CYAN);

    $res = $oa->majUnicaenSymLinks($osedir);

    if ($res) {
        $c->println('Liens mis à jour', $c::COLOR_LIGHT_GREEN);
    } else {
        $c->println('Liens déjà à jour', $c::COLOR_LIGHT_GREEN);
    }
}


function help(Console $c, OseAdmin $oa)
{
    $actions = [
        "update"                    => "Mise à jour de l'application",
        "notifier-indicateurs"      => "Envoi des mails relatifs aux indicateurs",
        "synchronisation"           => "<job> : Effectue la synchronisation des données pour le <job> transmis",
        "chargens-calcul-effectifs" => "Calcul des effectifs du module Charges",
        "calcul-tableaux-bord"      => "Recalcule tous les tableaux de bord de calculs itermédiaires",
        "formule-calcul"            => "Calcul de toutes les heures complémentaires à l'aide de la formule",
        "changement-mot-de-passe"   => "Changement de mot de passe (pour un utilisateur local uniquement)",
        "maj-public-links"          => "Mise à jour des liens vers les répertoires publics des dépendances",
    ];

    $c->println('Actions possibles :');
    foreach ($actions as $a => $l) {
        $c->print($a, $c::COLOR_BLACK, $c::BG_LIGHT_GRAY);
        $c->println(" : " . $l);
    }
}





/************************************************************
 *                      Classes utiles                      *
 ************************************************************/
class OseAdmin
{
    const OSE_ORIGIN = 'git@git.unicaen.fr:open-source/OSE.git';

    /**
     * @var Console
     */
    protected $console;

    /**
     * @var Bdd
     */
    protected $bdd;

    /**
     * @var array
     */
    private $tags = false;



    /**
     * OseAdmin constructor.
     *
     * @param Console $console
     */
    public function __construct(Console $console)
    {
        $this->console = $console;
    }



    public function majUnicaenSymLinks($oseDir): bool
    {
        if (substr($oseDir, -1) !== '/') {
            $oseDir .= '/';
        }

        $oldLibs = [];
        $od      = array_filter(glob($oseDir . 'public/vendor/unicaen/*'), 'is_dir');
        foreach ($od as $dir) {
            $oldLibs[] = basename($dir);
        }

        $newLibs = [];
        $nd      = array_filter(glob($oseDir . 'vendor/unicaen/*'), 'is_dir');
        foreach ($nd as $dir) {
            if (is_dir($dir . '/public')) {
                $newLibs[] = basename($dir);
            }
        }

        $deleteLibs = array_diff($oldLibs, $newLibs);
        $createLibs = array_diff($newLibs, $oldLibs);

        foreach ($deleteLibs as $lib) {
            $command = "rm $oseDir" . "public/vendor/unicaen/$lib";
            $this->console->print($command);
            $this->console->exec($command);
        }

        foreach ($createLibs as $lib) {
            $command = "cd $oseDir" . "public/vendor/unicaen;ln -sf ../../../vendor/unicaen/$lib/public $lib";
            $this->console->print($command);
            $this->console->exec($command);
        }

        return !(empty($deleteLibs) && empty($createLibs));
    }



    public function gitlabIsReachable(): bool
    {
        $gitCheck = $this->console->exec("git ls-remote --heads " . self::OSE_ORIGIN, false);

        return (false !== strpos(implode(' ', $gitCheck), 'heads/master'));
    }



    public function getTags(): array
    {
        if (false === $this->tags) {
            $this->tags = [];

            $ts = $this->console->exec("git ls-remote --tags --refs " . self::OSE_ORIGIN, false);
            foreach ($ts as $tag) {
                $this->tags[] = substr($tag, strpos($tag, 'refs/tags/') + 10);
            }
        }

        return $this->tags;
    }



    /**
     * @param string $tag
     *
     * @return bool
     */
    public function tagIsValid(string $tag): bool
    {
        return in_array($tag, $this->getTags());
    }



    public function currentVersion(string $osedir): string
    {
        $vf = $this->getVersionFile($osedir);
        if (!file_exists($vf)) {
            return 'inconnue';
        }

        return file_get_contents($vf);
    }



    public function writeVersion(string $osedir, string $version)
    {
        $vf = $this->getVersionFile($osedir);
        file_put_contents($vf, $version);
    }



    private function getVersionFile(string $osedir): string
    {
        if ('/' == substr($osedir, -1)) {
            return $osedir . 'VERSION';
        } else {
            return $osedir . '/VERSION';
        }
    }



    public function exec($args)
    {
        $this->console->passthru("php " . dirname(__DIR__) . "/public/index.php " . $args);
    }



    public function getBdd(): Bdd
    {
        if (!$this->bdd) {
            $this->bdd = $this->loadBdd();
        }

        return $this->bdd;
    }



    private function loadBdd()
    {
        require_once('../config/application.config.php');

        $bdd = new Bdd;

        $bdd->setHost(AppConfig::get('bdd', 'host'));
        $bdd->setPort(AppConfig::get('bdd', 'port'));
        $bdd->setDbname(AppConfig::get('bdd', 'dbname'));
        $bdd->setUsername(AppConfig::get('bdd', 'username'));
        $bdd->setPassword(AppConfig::get('bdd', 'password'));
        $bdd->connect();

        return $bdd;
    }
}





class Bdd
{
    /**
     * @var string
     */
    private $host;

    /**
     * @var integer
     */
    private $port;

    /**
     * @var string
     */
    private $dbname;

    /**
     * @var string
     */
    private $username;

    /**
     * @var string
     */
    private $password;

    /**
     * @var resource
     */
    private $connexion;



    public function connect(): self
    {
        $cs = $this->getHost() . ':' . $this->getPort() . '/' . $this->getDbname();
        $this->connexion = oci_connect($this->getUsername(), $this->password, $cs );
        if (!$this->connexion) {
            $e = oci_error();
            throw new \Exception($e['message']);
        }

        return $this;
    }



    public function getVersion(): integer
    {
        return (int)$this->select('SELECT numero FROM version')[0]['NUMERO'];
    }



    public function setVersion(integer $version): self
    {
        $this->exec('DELETE FROM version');
        $this->exec('INSERT INTO version (numero) VALUES (:version)', compact('version'));

        return $this;
    }



    private function execStatement($sql, array $params = [])
    {
        $statement = oci_parse($this->connexion, $sql);

        foreach( $params as $key => $val ){
            ${$key} = $val;
            oci_bind_by_name($statement, ':'.$key, ${$key}  );
        }

        if (false === @oci_execute($statement)){
            $this->sendError($statement);
        }

        return $statement;
    }



    public function exec($sql, array $params = [])
    {
        $statement = $this->execStatement($sql, $params);
        oci_free_statement($statement);

        return true;
    }



    public function select( $sql, array $params = [])
    {
        $statement = $this->execStatement($sql, $params);
        if(false === oci_fetch_all($statement, $res, 0, -1, OCI_FETCHSTATEMENT_BY_ROW)){
            $this->sendError($statement);
        }
        oci_free_statement($statement);

        return $res;
    }



    protected function sendError( $statement )
    {
        $error = oci_error($statement);
        oci_free_statement($statement);
        $msg = $error['message']." (offset ".$error['offset'].")";
        throw new Exception($msg, $error['code']);
    }



    public function __destruct()
    {
        oci_close($this->connexion);
    }



    /**
     * @return string
     */
    public function getHost(): string
    {
        return $this->host;
    }



    /**
     * @param string $host
     *
     * @return Bdd
     */
    public function setHost(string $host): Bdd
    {
        $this->host = $host;

        return $this;
    }



    /**
     * @return int
     */
    public function getPort(): int
    {
        return $this->port;
    }



    /**
     * @param int $port
     *
     * @return Bdd
     */
    public function setPort(int $port): Bdd
    {
        $this->port = $port;

        return $this;
    }



    /**
     * @return string
     */
    public function getDbname(): string
    {
        return $this->dbname;
    }



    /**
     * @param string $dbname
     *
     * @return Bdd
     */
    public function setDbname(string $dbname): Bdd
    {
        $this->dbname = $dbname;

        return $this;
    }



    /**
     * @return string
     */
    public function getUsername(): string
    {
        return $this->username;
    }



    /**
     * @param string $username
     *
     * @return Bdd
     */
    public function setUsername(string $username): Bdd
    {
        $this->username = $username;

        return $this;
    }



    /**
     * @return string
     */
    public function getPassword(): string
    {
        return $this->password;
    }



    /**
     * @param string $password
     *
     * @return Bdd
     */
    public function setPassword(string $password): Bdd
    {
        $this->password = $password;

        return $this;
    }

}





class Console
{
    const COLOR_BLACK        = '0;30';
    const COLOR_DARK_GRAY    = '1;30';
    const COLOR_BLUE         = '0;34';
    const COLOR_LIGHT_BLUE   = '1;34';
    const COLOR_GREEN        = '0;32';
    const COLOR_LIGHT_GREEN  = '1;32';
    const COLOR_CYAN         = '0;36';
    const COLOR_LIGHT_CYAN   = '1;36';
    const COLOR_RED          = '0;31';
    const COLOR_LIGHT_RED    = '1;31';
    const COLOR_PURPLE       = '0;35';
    const COLOR_LIGHT_PURPLE = '1;35';
    const COLOR_BROWN        = '0;33';
    const COLOR_YELLOW       = '1;33';
    const COLOR_LIGHT_GRAY   = '0;37';
    const COLOR_WHITE        = '1;37';

    const BG_BLACK      = '40';
    const BG_RED        = '41';
    const BG_GREEN      = '42';
    const BG_YELLOW     = '43';
    const BG_BLUE       = '44';
    const BG_MAGENTA    = '45';
    const BG_CYAN       = '46';
    const BG_LIGHT_GRAY = '47';



    public function check(array $prerequis)
    {
        $len = 60;
        $res = true;

        $this->println("Contrôle des prérequis à l'exécution du script", self::COLOR_LIGHT_CYAN);
        $this->println($this->strPad('Commande (description éventuelle)', $len) . "Résultat");
        $this->println($this->strPad('----------------------', $len) . "--------");
        foreach ($prerequis as $command => $desc) {
            if (is_array($desc)) {
                extract($desc);
            } else {
                $description = $desc;
                $facultatif  = false;
            }

            $return = null;
            exec('command -v ' . $command, $null, $result);
            $passed = ($result == 0);

            $this->print($this->strPad($command . ($description ? " ($description)" : ''), $len));
            if ($passed) {
                $this->println('Commande trouvée', self::COLOR_LIGHT_GREEN);
            } elseif ($facultatif) {
                $this->println('Manquante, facultative', self::COLOR_LIGHT_PURPLE);
            } else {
                $this->println('Commande manquante', self::COLOR_LIGHT_RED);
                $res = false;
            }
        }

        if (!$res) {
            $this->printDie('Un ou plusieurs prérequis nécessaires ne sont pas présents sur cette machine. Merci de les installer avant de poursuivre l\'installation.');
        }

        return $res;
    }



    public function printMainTitle($title, $spaces = 1)
    {
        $pstr = str_repeat(' ', $spaces);
        $t    = $pstr . $title . $pstr;

        $len = mb_strlen($t);

        echo '╔' . str_repeat('═', $len) . "╗\n";
        echo '║' . str_repeat(' ', $len) . "║\n";
        echo "║" . $t . "║\n";
        echo '║' . str_repeat(' ', $len) . "║\n";
        echo '╚' . str_repeat('═', $len) . "╝\n\n";
    }



    public function print($text, $color = null, $bgColor = null)
    {
        if ($bgColor) $bgColor = ';' . $bgColor;

        if (!$color && !$bgColor) {
            echo $text;
        } else {
            echo "\e[$color$bgColor" . "m$text\e[0m";
        }
    }



    public function println($text, $color = null, $bgColor = null)
    {
        $this->print($text, $color, $bgColor);
        echo "\n";
    }



    public function gestExitCode($code)
    {
        if (0 == $code) return;

        $this->printDie("Une erreur ($code) est survenue. Le script est stoppé");
    }



    public function printDie($text)
    {
        $this->println($text, self::COLOR_LIGHT_RED);
        $this->println(' -- FIN Prématurée de l\'exécution du script -- ', null, self::BG_RED);
        die("\n");
    }



    public function getArg($index = null)
    {
        $args = isset($_SERVER['argv']) ? $_SERVER['argv'] : [];

        if (null === $index) return $args;

        if (isset($args[$index])) {
            return $args[$index];
        } else {
            return null;
        }
    }



    public function getInput()
    {
        return trim(fgets(STDIN));
    }



    public function getSilentInput()
    {
        if (preg_match('/^win/i', PHP_OS)) {
            $vbscript = sys_get_temp_dir() . 'prompt_password.vbs';
            file_put_contents(
                $vbscript, 'wscript.echo(InputBox("'
                . addslashes('')
                . '", "", "password here"))');
            $command  = "cscript //nologo " . escapeshellarg($vbscript);
            $password = rtrim(shell_exec($command));
            unlink($vbscript);

            return $password;
        } else {
            $command = "/usr/bin/env bash -c 'echo OK'";
            if (rtrim(shell_exec($command)) !== 'OK') {
                trigger_error("Can't invoke bash");

                return;
            }
            $command  = "/usr/bin/env bash -c 'read -s -p \""
                . addslashes('')
                . "\" mypassword && echo \$mypassword'";
            $password = rtrim(shell_exec($command));
            echo "\n";

            return $password;
        }
    }



    public function exec($command, $autoDisplay = true)
    {
        if (is_array($command)) {
            $command = implode(';', $command);
        }

        exec($command, $output, $return);
        if ($autoDisplay) {
            echo implode("\n", $output) . "\n";
        }
        $this->gestExitCode($return);

        return $output;
    }



    public function passthru($command)
    {
        if (is_array($command)) {
            $command = implode(';', $command);
        }

        passthru($command, $returnVar);
        $this->gestExitCode($returnVar);

        return $returnVar;
    }



    public function strPad($input, $padLength = null, $padString = ' ')
    {
        return utf8_encode(str_pad(utf8_decode($input), $padLength, $padString));
    }
}