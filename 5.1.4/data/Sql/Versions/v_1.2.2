BEGIN DBMS_SCHEDULER.disable(name=>'"OSE"."OSE_SRC_SYNC"', force => TRUE); END; 
/

ALTER TABLE STATUT_INTERVENANT ADD ( peut_choisir_dans_dossier NUMBER (1) );

update statut_intervenant set peut_choisir_dans_dossier = CASE WHEN source_code IN (
'SALAR_PRIVE','SALAR_PUBLIC','NON_SALAR','RETR_HORS_UCBN','ETUD_UCBN','ETUD_HORS_UCBN'
) THEN 1 ELSE 0 END;

ALTER TABLE STATUT_INTERVENANT MODIFY (PEUT_CHOISIR_DANS_DOSSIER NOT NULL);

ALTER TABLE STATUT_INTERVENANT ADD ( peut_saisir_dossier NUMBER (1) );

update statut_intervenant set peut_saisir_dossier = CASE 
WHEN type_intervenant_id = (SELECT id from type_intervenant WHERE code = 'E') AND source_code NOT IN ('BIATSS','NON_AUTORISE') THEN 1 ELSE 0 END;

ALTER TABLE STATUT_INTERVENANT MODIFY (peut_saisir_dossier NOT NULL);


CREATE OR REPLACE FORCE VIEW "OSE"."V_FORMULE_SERVICE_DU_MODIFIE" 
 ( "INTERVENANT_ID", "HEURES"
  )  AS 
  SELECT
  fsd.intervenant_id, 
  NVL(fsd.heures,0) + NVL(fmsd.heures,0) heures
FROM
  V_FORMULE_SERVICE_DU fsd
  LEFT JOIN V_FORMULE_MODIF_SERVICE_DU fmsd ON FMSD.INTERVENANT_ID = FSD.INTERVENANT_ID;


ALTER TABLE TYPE_INTERVENTION_EP ADD ( source_id NUMBER (*,0) NOT NULL ) ;
ALTER TABLE TYPE_INTERVENTION_EP ADD ( source_code VARCHAR2 (100 CHAR) ) ;
ALTER TABLE TYPE_INTERVENTION_EP ADD CONSTRAINT type_intervention_ep_source_FK FOREIGN KEY ( source_id ) REFERENCES source ( id ) ON DELETE CASCADE NOT DEFERRABLE ;

INSERT INTO "OSE"."SOURCE" (ID, CODE, LIBELLE, IMPORTABLE) VALUES (source_id_seq.nextval, 'Calcul', 'Calculée', '1');

Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'directeur-composante','Directeur de composante',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'responsable-recherche-labo','Responsable d''équipe de recherche',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'gestionnaire-composante','Gestionnaire de composante',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'responsable-composante','Responsable de composante',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'administrateur','Administrateur',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'superviseur-composante','Superviseur de composante',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'superviseur-etablissement','Superviseur établissement',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'responsable-drh','Responsable DRH',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
Insert into TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,VALIDITE_FIN,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID) 
               values (TYPE_ROLE_ID_SEQ.NEXTVAL,'gestionnaire-drh','Gestionnaire DRH',SYSDATE,null,SYSDATE,'1',SYSDATE,'1');
INSERT INTO TYPE_ROLE (ID,CODE,LIBELLE,VALIDITE_DEBUT,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID)
              VALUES  (TYPE_ROLE_id_seq.nextval,'responsable-foad', 'Responsable FOAD',SYSDATE, SYSDATE,1, SYSDATE,1);


ALTER TABLE "OSE"."ROLE" MODIFY ("STRUCTURE_ID" NULL);

DROP MATERIALIZED VIEW "OSE"."MV_ROLE";
CREATE MATERIALIZED VIEW "OSE"."MV_ROLE" ("Z_STRUCTURE_ID","Z_PERSONNEL_ID","Z_TYPE_ID","SOURCE_ID","SOURCE_CODE","VALIDITE_DEBUT","VALIDITE_FIN") 
  BUILD IMMEDIATE
  USING INDEX REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT  USING ENFORCED CONSTRAINTS
  DISABLE QUERY REWRITE AS 
  SELECT 
  z_structure_id,
  z_personnel_id,
  z_type_id,
  source_id,
  MIN( source_code) source_code,
  MIN( validite_debut ) validite_debut,
  MAX(validite_fin ) validite_fin
FROM ( SELECT
    ifs.c_structure z_structure_id,
    ifs.no_dossier_pers z_personnel_id,
    CASE fs.lc_fonction
      when '_D30a' then 'directeur-composante'
      when '_D30b' then 'directeur-composante'
      when '_D30c' then 'directeur-composante'
      when '_D30d' then 'directeur-composante'
      when '_D30e' then 'directeur-composante'
      when '_R00'  then 'responsable-composante'
      when '_R00c' then 'responsable-recherche-labo'
      when '_R40' then 'responsable-composante'
      when '_R40b' then 'responsable-composante' -- assistant de direction
      else NULL
    END z_type_id,
    ose_import.get_source_id('Harpege') as source_id,
    to_char(ifs.no_exercice_respons) source_code,
    ifs.DT_DEB_EXERC_RESP as validite_debut,
    ifs.DT_FIN_EXERC_RESP as validite_fin
  FROM
    individu_fonct_struct@harpprod ifs
    JOIN fonction_structurelle@harpprod fs ON fs.c_fonction = ifs.c_fonction
  WHERE
    OSE_IMPORT.GET_DATE_OBS BETWEEN ifs.DT_DEB_EXERC_RESP AND NVL(ifs.DT_FIN_EXERC_RESP,OSE_IMPORT.GET_DATE_OBS)
  ) tmp
WHERE
  tmp.z_type_id IS NOT NULL
GROUP BY
  z_structure_id, z_personnel_id, z_type_id,source_id;

CREATE OR REPLACE FORCE VIEW "OSE"."SRC_ROLE" 
 ( "ID", "STRUCTURE_ID", "PERSONNEL_ID", "TYPE_ID", "SOURCE_ID", "SOURCE_CODE", "VALIDITE_DEBUT", "VALIDITE_FIN"
  )  AS 
  SELECT
  NULL id,
  NVL(s.STRUCTURE_NIV2_ID,s.id) structure_id,
  p.id personnel_id,
  tr.id type_id,
  r.source_id,
  r.source_code,
  r.validite_debut,
  r.validite_fin
FROM
  mv_role r
  LEFT JOIN personnel p ON p.source_code = r.z_personnel_id
  LEFT JOIN structure s ON s.source_code = r.z_structure_id
  LEFT JOIN type_role tr ON tr.code = r.z_type_id
WHERE
  (
    s.id IS NULL 
    OR (SELECT count(*) FROM element_pedagogique ep WHERE EP.STRUCTURE_ID = s.id) > 0
    OR r.z_type_id IN ('responsable-recherche-labo')
  )
  AND s.niveau <= 2;




 CREATE SEQUENCE "OSE"."FICHIER_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER NOCYCLE;

  CREATE TABLE "OSE"."PIECE_JOINTE_FICHIER" 
   (	"PIECE_JOINTE_ID" NUMBER NOT NULL ENABLE,
	"FICHIER_ID" NUMBER(*,0) NOT NULL ENABLE,
	CONSTRAINT "PIECE_JOINTE_FICHIER_PK" PRIMARY KEY ("PIECE_JOINTE_ID","FICHIER_ID") ENABLE,
	CONSTRAINT "PIECE_JOINTE_FICHIER_FFK" FOREIGN KEY ("FICHIER_ID")
	 REFERENCES "OSE"."FICHIER" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "PIECE_JOINTE_FICHIER_PJFK" FOREIGN KEY ("PIECE_JOINTE_ID")
	 REFERENCES "OSE"."PIECE_JOINTE" ("ID") ON DELETE CASCADE ENABLE
   );

ALTER TABLE "OSE"."PIECE_JOINTE" ADD ("VALIDATION_ID" NUMBER(*,0));
ALTER TABLE "OSE"."PIECE_JOINTE" ADD CONSTRAINT "PIECE_JOINTE_VFK" FOREIGN KEY ("VALIDATION_ID") REFERENCES "OSE"."VALIDATION"("ID") ON DELETE SET NULL ENABLE;


  CREATE TABLE "OSE"."FICHIER" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"NOM" VARCHAR2(128 CHAR) NOT NULL ENABLE,
	"TYPE" VARCHAR2(64 CHAR) NOT NULL ENABLE,
	"TAILLE" NUMBER(*,0) NOT NULL ENABLE,
	"CONTENU" BLOB NOT NULL ENABLE,
	"DESCRIPTION" VARCHAR2(256 CHAR),
	"VALIDATION_ID" NUMBER,
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE,
	"HISTO_CREATEUR_ID" NUMBER(*,0) NOT NULL ENABLE,
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE,
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0) NOT NULL ENABLE,
	"HISTO_DESTRUCTION" DATE,
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0),
	CONSTRAINT "FICHIER_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "FICHIER_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE,
	CONSTRAINT "FICHIER_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE,
	CONSTRAINT "FICHIER_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE,
	CONSTRAINT "FICHIER_VALID_FK" FOREIGN KEY ("VALIDATION_ID")
	 REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE SET NULL ENABLE
   );

  CREATE TABLE "OSE"."PIECE_JOINTE_FICHIER" 
   (	"PIECE_JOINTE_ID" NUMBER NOT NULL ENABLE,
	"FICHIER_ID" NUMBER(*,0) NOT NULL ENABLE,
	CONSTRAINT "PIECE_JOINTE_FICHIER_PK" PRIMARY KEY ("PIECE_JOINTE_ID","FICHIER_ID") ENABLE,
	CONSTRAINT "PIECE_JOINTE_FICHIER_FFK" FOREIGN KEY ("FICHIER_ID")
	 REFERENCES "OSE"."FICHIER" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "PIECE_JOINTE_FICHIER_PJFK" FOREIGN KEY ("PIECE_JOINTE_ID")
	 REFERENCES "OSE"."PIECE_JOINTE" ("ID") ON DELETE CASCADE ENABLE
   );

CREATE OR REPLACE FORCE VIEW SRC_TYPE_INTERVENTION_EP AS 
  SELECT
  null id,
  ti.id type_intervention_id,
  ep.id element_pedagogique_id,
  1 visible,
  ose_import.get_source_id('Calcul') source_id,
  ti.code || '_' || ep.source_code source_code
FROM
  element_pedagogique ep
  JOIN type_intervention ti ON ti.code = 'FOAD' AND ti.histo_destruction IS NULL
WHERE
  ep.taux_foad > 0
  AND ep.histo_destruction IS NULL;
  
  
  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_TYPE_INTERVENTION_EP" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ELEMENT_PEDAGOGIQUE_ID", "TYPE_INTERVENTION_ID", "VISIBLE", "U_ELEMENT_PEDAGOGIQUE_ID", "U_TYPE_INTERVENTION_ID", "U_VISIBLE") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ELEMENT_PEDAGOGIQUE_ID",diff."TYPE_INTERVENTION_ID",diff."VISIBLE",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_TYPE_INTERVENTION_ID",diff."U_VISIBLE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_INTERVENTION_ID ELSE S.TYPE_INTERVENTION_ID END TYPE_INTERVENTION_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VISIBLE ELSE S.VISIBLE END VISIBLE,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.TYPE_INTERVENTION_ID <> S.TYPE_INTERVENTION_ID OR (D.TYPE_INTERVENTION_ID IS NULL AND S.TYPE_INTERVENTION_ID IS NOT NULL) OR (D.TYPE_INTERVENTION_ID IS NOT NULL AND S.TYPE_INTERVENTION_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_INTERVENTION_ID,
    CASE WHEN D.VISIBLE <> S.VISIBLE OR (D.VISIBLE IS NULL AND S.VISIBLE IS NOT NULL) OR (D.VISIBLE IS NOT NULL AND S.VISIBLE IS NULL) THEN 1 ELSE 0 END U_VISIBLE
FROM
  TYPE_INTERVENTION_EP D
  FULL JOIN SRC_TYPE_INTERVENTION_EP S ON (S.source_id = D.source_id AND S.source_code = D.source_code)
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.TYPE_INTERVENTION_ID <> S.TYPE_INTERVENTION_ID OR (D.TYPE_INTERVENTION_ID IS NULL AND S.TYPE_INTERVENTION_ID IS NOT NULL) OR (D.TYPE_INTERVENTION_ID IS NOT NULL AND S.TYPE_INTERVENTION_ID IS NULL)
  OR D.VISIBLE <> S.VISIBLE OR (D.VISIBLE IS NULL AND S.VISIBLE IS NOT NULL) OR (D.VISIBLE IS NOT NULL AND S.VISIBLE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;  
  
  
CREATE OR REPLACE FORCE VIEW "OSE"."SRC_TYPE_INTERVENTION_EP" 
 ( "ID", "TYPE_INTERVENTION_ID", "ELEMENT_PEDAGOGIQUE_ID", "VISIBLE", "SOURCE_ID", "SOURCE_CODE"
  )  AS 
  SELECT
  null id,
  ti.id type_intervention_id,
  ep.id element_pedagogique_id,
  1 visible,
  ose_import.get_source_id('Calcul') source_id,
  ti.code || '_' || ep.source_code source_code
FROM
  element_pedagogique ep
  JOIN type_intervention ti ON ti.code = 'FOAD' AND ti.histo_destruction IS NULL
  JOIN structure s ON s.id = ep.structure_id
WHERE
  ep.taux_foad > 0
  AND ep.histo_destruction IS NULL
  AND s.source_code IN ('U07','U08','U04');
  
ALTER TABLE "OSE"."SERVICE_REFERENTIEL" ADD ("COMMENTAIRES" VARCHAR2(256 CHAR));
  
/

CREATE OR REPLACE PACKAGE "OSE"."OSE_DIVERS" AS 

  FUNCTION HAS_TYPE_MODULATEUR(STRUCTURE_ID NUMERIC, TYPE_MODULATEUR_ID NUMERIC, DATE_OBS DATE DEFAULT SYSDATE ) RETURN NUMERIC;

  FUNCTION GET_TYPE_MODULATEUR_IDS( STRUCTURE_ID NUMERIC, DATE_OBS DATE DEFAULT SYSDATE ) RETURN types_modulateurs;

  FUNCTION implode(i_query VARCHAR2, i_seperator VARCHAR2 DEFAULT ',') RETURN VARCHAR2;

  FUNCTION intervenant_est_permanent( INTERVENANT_ID NUMERIC ) RETURN NUMERIC;

  FUNCTION intervenant_est_non_autorise( INTERVENANT_ID NUMERIC ) RETURN NUMERIC;

  FUNCTION intervenant_peut_saisir_serv( INTERVENANT_ID NUMERIC ) RETURN NUMERIC;

  FUNCTION STRUCTURE_DANS_STRUCTURE( structure_testee NUMERIC, structure_cible NUMERIC ) RETURN NUMERIC;

END OSE_DIVERS;
/
---------------------------
--Modifié PACKAGE BODY
--OSE_DIVERS
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_DIVERS" AS

FUNCTION HAS_TYPE_MODULATEUR(STRUCTURE_ID NUMERIC, TYPE_MODULATEUR_ID NUMERIC, DATE_OBS DATE DEFAULT SYSDATE ) RETURN NUMERIC AS
  VSID NUMERIC;
  TMID NUMERIC;
  l_return NUMERIC;
BEGIN
  VSID := STRUCTURE_ID;
  TMID := TYPE_MODULATEUR_ID;
  SELECT DISTINCT
    count(*) INTO l_return
  FROM
    structure s
    LEFT JOIN type_modulateur_structure tms ON tms.structure_id = s.id
  WHERE
    type_modulateur_id = TMID
    AND DATE_OBS BETWEEN TMS.VALIDITE_DEBUT AND NVL(TMS.VALIDITE_FIN,DATE_OBS) -- respect des validités
    AND DATE_OBS >= TMS.HISTO_CREATION                                         -- respect de la date de création
    AND (TMS.HISTO_DESTRUCTION IS NULL OR TMS.HISTO_DESTRUCTION >= DATE_OBS)   -- respect des destructions
  START WITH
    s.id = VSID
  CONNECT BY
    PRIOR s.parente_id = s.id
  ;
  RETURN l_return;
END;

FUNCTION GET_TYPE_MODULATEUR_IDS( STRUCTURE_ID NUMERIC, DATE_OBS DATE DEFAULT SYSDATE ) RETURN types_modulateurs AS
   VSID NUMERIC;
   tm_result types_modulateurs;
BEGIN
  VSID := STRUCTURE_ID;
  SELECT DISTINCT
    tms.type_modulateur_id BULK COLLECT INTO tm_result
  FROM
    structure s
    LEFT JOIN type_modulateur_structure tms ON tms.structure_id = s.id
  WHERE
    tms.type_modulateur_id IS NOT NULL
    AND DATE_OBS BETWEEN TMS.VALIDITE_DEBUT AND NVL(TMS.VALIDITE_FIN,DATE_OBS) -- respect des validités
    AND DATE_OBS >= TMS.HISTO_CREATION                                         -- respect de la date de création
    AND (TMS.HISTO_DESTRUCTION IS NULL OR TMS.HISTO_DESTRUCTION >= DATE_OBS)   -- respect des destructions
  START WITH
    s.id = VSID
  CONNECT BY
    PRIOR s.parente_id = s.id
  ;
  
  RETURN tm_result;
END;

FUNCTION implode(i_query VARCHAR2, i_seperator VARCHAR2 DEFAULT ',') RETURN VARCHAR2 AS
  l_return CLOB:='';
  l_temp CLOB;
  TYPE r_cursor is REF CURSOR;
  rc r_cursor;
BEGIN
  OPEN rc FOR i_query;
  LOOP
    FETCH rc INTO L_TEMP;
    EXIT WHEN RC%NOTFOUND;
    l_return:=l_return||L_TEMP||i_seperator;
  END LOOP;
  RETURN RTRIM(l_return,i_seperator);
END;

FUNCTION intervenant_est_permanent( INTERVENANT_ID NUMERIC ) RETURN NUMERIC AS
  resultat NUMERIC;
BEGIN
  SELECT COUNT(*) INTO resultat FROM intervenant_permanent WHERE id = INTERVENANT_ID;
  RETURN resultat;
END;

FUNCTION intervenant_est_non_autorise( INTERVENANT_ID NUMERIC ) RETURN NUMERIC AS
  resultat NUMERIC;
BEGIN
  SELECT COUNT(*) INTO resultat FROM intervenant i JOIN statut_intervenant si ON si.id = i.statut_id AND si.non_autorise = 1 WHERE i.id = INTERVENANT_ID;
  RETURN resultat;
END;

FUNCTION intervenant_peut_saisir_serv( INTERVENANT_ID NUMERIC ) RETURN NUMERIC AS
  resultat NUMERIC;
BEGIN
  SELECT COUNT(*) INTO resultat FROM intervenant i JOIN statut_intervenant si ON si.id = i.statut_id AND si.peut_saisir_service = 1 WHERE i.id = INTERVENANT_ID;
  RETURN resultat;
END;

FUNCTION STRUCTURE_DANS_STRUCTURE( structure_testee NUMERIC, structure_cible NUMERIC ) RETURN NUMERIC AS
  RESULTAT NUMERIC;
BEGIN
  IF structure_testee = structure_cible THEN RETURN 1; END IF;
  
  select count(*) into resultat
  from structure
  WHERE structure.id = structure_testee
  start with parente_id = structure_cible
  connect by parente_id = prior id;

  RETURN RESULTAT;
END;

END OSE_DIVERS;
/


  CREATE OR REPLACE TRIGGER "OSE"."SERVICE_CK"
  BEFORE INSERT OR UPDATE ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  DECLARE 
  etablissement integer;
  structure_ens_id NUMERIC;  
BEGIN
  
  etablissement := OSE_PARAMETRE.GET_ETABLISSEMENT();
  
  IF :NEW.etablissement_id = etablissement AND :NEW.element_pedagogique_id IS NULL THEN
    raise_application_error(-20101, 'Un enseignement doit obligatoirement être renseigné si le service est réalisé en interne.');
  END IF;

  IF OSE_DIVERS.INTERVENANT_EST_PERMANENT(:NEW.intervenant_id) = 0 THEN
    IF :NEW.etablissement_id <> etablissement THEN
      raise_application_error(-20101, 'Les intervenants vacataires n''ont pas la possibilité de renseigner des enseignements pris à l''extérieur.');
    END IF;
  END IF;

  IF OSE_DIVERS.INTERVENANT_PEUT_SAISIR_SERV(:NEW.intervenant_id) = 0 THEN
    raise_application_error(-20101, 'Il est impossible de saisir des services pour cet intervenant.');
  END IF;

  IF :NEW.element_pedagogique_id <> :OLD.element_pedagogique_id THEN
    SELECT structure_id INTO structure_ens_id FROM element_pedagogique WHERE id = :NEW.element_pedagogique_id;
    :NEW.structure_ens_id := structure_ens_id;
  END IF;

  --IF :OLD.id IS NOT NULL AND ( :NEW.etablissement_id <> :OLD.etablissement_id OR :NEW.element_pedagogique_id <> :OLD.element_pedagogique_id ) THEN
    --UPDATE volume_horaire SET histo_destruction = SYSDATE, histo_destructeur_id = :NEW.histo_modificateur_id WHERE service_id = :NEW.id;
  --END IF;

END;
/

-- package import

-- ********************************************************************* --
-- *          à faire après avoir mis à jour le code source            * --
-- ********************************************************************* --

drop view v_role_personnel;
drop table "OSE"."TYPE_ROLE_PHP_ROLE";
ALTER TABLE "OSE"."VALIDATION" DROP ("DATE_COMMISSION_RECHERCHE");
ALTER TABLE "OSE"."VALIDATION" DROP ("DATE_CONSEIL_RESTREINT");
DELETE FROM TYPE_ROLE WHERE code IN ('IND','DIR','RER','DELEG','RA','RES','GEST');
ALTER TABLE "OSE"."PIECE_JOINTE" DROP ("URL");

INSERT INTO ROLE (
    ID,
    STRUCTURE_ID,
    PERSONNEL_ID,
    TYPE_ID,
    SOURCE_ID, SOURCE_CODE,
    VALIDITE_DEBUT, VALIDITE_FIN,
    HISTO_CREATION, HISTO_CREATEUR_ID, HISTO_MODIFICATION, HISTO_MODIFICATEUR_ID, HISTO_DESTRUCTION, HISTO_DESTRUCTEUR_ID
  )VALUES(
    role_id_seq.nextval, null,
    (select id from personnel where source_code = 24953),
    (select id from type_role where code = 'administrateur'),
    OSE_IMPORT.GET_SOURCE_ID('OSE'),
    'admin-24953',
    SYSDATE, NULL, SYSDATE, 1, SYSDATE, 1, NULL, NULL
  );

INSERT INTO ROLE (
    ID,
    STRUCTURE_ID,
    PERSONNEL_ID,
    TYPE_ID,
    SOURCE_ID, SOURCE_CODE,
    VALIDITE_DEBUT, VALIDITE_FIN,
    HISTO_CREATION, HISTO_CREATEUR_ID, HISTO_MODIFICATION, HISTO_MODIFICATEUR_ID, HISTO_DESTRUCTION, HISTO_DESTRUCTEUR_ID
  )VALUES(
    role_id_seq.nextval, null,
    (select id from personnel where source_code = 21237),
    (select id from type_role where code = 'administrateur'),
    OSE_IMPORT.GET_SOURCE_ID('OSE'),
    'admin-21237',
    SYSDATE, NULL, SYSDATE, 1, SYSDATE, 1, NULL, NULL
  );
  
INSERT INTO ROLE (
    ID,
    STRUCTURE_ID,
    PERSONNEL_ID,
    TYPE_ID,
    SOURCE_ID, SOURCE_CODE,
    VALIDITE_DEBUT, VALIDITE_FIN,
    HISTO_CREATION, HISTO_CREATEUR_ID, HISTO_MODIFICATION, HISTO_MODIFICATEUR_ID, HISTO_DESTRUCTION, HISTO_DESTRUCTEUR_ID
  )VALUES(
    role_id_seq.nextval, null,
    (select id from personnel where source_code = 35),
    (select id from type_role where code = 'administrateur'),
    OSE_IMPORT.GET_SOURCE_ID('OSE'),
    'admin-35',
    SYSDATE, NULL, SYSDATE, 1, SYSDATE, 1, NULL, NULL
  );
  
INSERT INTO ROLE (
    ID,
    STRUCTURE_ID,
    PERSONNEL_ID,
    TYPE_ID,
    SOURCE_ID, SOURCE_CODE,
    VALIDITE_DEBUT, VALIDITE_FIN,
    HISTO_CREATION, HISTO_CREATEUR_ID, HISTO_MODIFICATION, HISTO_MODIFICATEUR_ID, HISTO_DESTRUCTION, HISTO_DESTRUCTEUR_ID
  )VALUES(
    role_id_seq.nextval, null,
    (select id from personnel where source_code = 5237),
    (select id from type_role where code = 'administrateur'),
    OSE_IMPORT.GET_SOURCE_ID('OSE'),
    'admin-5237',
    SYSDATE, NULL, SYSDATE, 1, SYSDATE, 1, NULL, NULL
  );
  
INSERT INTO ROLE (
    ID,
    STRUCTURE_ID,
    PERSONNEL_ID,
    TYPE_ID,
    SOURCE_ID, SOURCE_CODE,
    VALIDITE_DEBUT, VALIDITE_FIN,
    HISTO_CREATION, HISTO_CREATEUR_ID, HISTO_MODIFICATION, HISTO_MODIFICATEUR_ID, HISTO_DESTRUCTION, HISTO_DESTRUCTEUR_ID
  )VALUES(
    role_id_seq.nextval, null,
    (select id from personnel where source_code = 16956),
    (select id from type_role where code = 'administrateur'),
    OSE_IMPORT.GET_SOURCE_ID('OSE'),
    'admin-16956',
    SYSDATE, NULL, SYSDATE, 1, SYSDATE, 1, NULL, NULL
  );
  
INSERT INTO ROLE (
    ID,
    STRUCTURE_ID,
    PERSONNEL_ID,
    TYPE_ID,
    SOURCE_ID, SOURCE_CODE,
    VALIDITE_DEBUT, VALIDITE_FIN,
    HISTO_CREATION, HISTO_CREATEUR_ID, HISTO_MODIFICATION, HISTO_MODIFICATEUR_ID, HISTO_DESTRUCTION, HISTO_DESTRUCTEUR_ID
  )VALUES(
    role_id_seq.nextval, null,
    (select id from personnel where source_code = 5064),
    (select id from type_role where code = 'administrateur'),
    OSE_IMPORT.GET_SOURCE_ID('OSE'),
    'admin-5064',
    SYSDATE, NULL, SYSDATE, 1, SYSDATE, 1, NULL, NULL
  );
  
INSERT INTO ROLE (
    ID,
    STRUCTURE_ID,
    PERSONNEL_ID,
    TYPE_ID,
    SOURCE_ID, SOURCE_CODE,
    VALIDITE_DEBUT, VALIDITE_FIN,
    HISTO_CREATION, HISTO_CREATEUR_ID, HISTO_MODIFICATION, HISTO_MODIFICATEUR_ID, HISTO_DESTRUCTION, HISTO_DESTRUCTEUR_ID
  )VALUES(
    role_id_seq.nextval, null,
    (select id from personnel where source_code = 5838),
    (select id from type_role where code = 'administrateur'),
    OSE_IMPORT.GET_SOURCE_ID('OSE'),
    'admin-5838',
    SYSDATE, NULL, SYSDATE, 1, SYSDATE, 1, NULL, NULL
  );


  CREATE OR REPLACE FORCE VIEW "OSE"."V_RESUME_SERVICE" ("NOM_USUEL", "PRENOM", "INTERVENANT_ID", "SOURCE_CODE", "TYPE_INTERVENANT_CODE", "TYPE_INTERVENTION_ID", "STRUCTURE_ENS_ID", "STRUCTURE_AFF_ID", "SERVICE_ID", "ELEMENT_PEDAGOGIQUE_ID", "ETAPE_ID", "ANNEE_ID", "TOTAL_HEURES", "SERVICE_DU", "HEURES_COMP") AS 
  SELECT
    i.NOM_USUEL, i.PRENOM, i.id intervenant_id, i.SOURCE_CODE, ti.CODE type_intervenant_code,
    vh.TYPE_INTERVENTION_ID, 
    s.STRUCTURE_ENS_ID STRUCTURE_ENS_ID,
    s.STRUCTURE_AFF_ID STRUCTURE_AFF_ID,
    s.id service_id, ep.id element_pedagogique_id, e.id etape_id, s.annee_id,
    sum(nvl(vh.HEURES, 0)) as total_heures,
    NVL(fsm.heures,0) AS service_du,
    NVL(fhc.heures,0) AS heures_comp
  from INTERVENANT i 
  join TYPE_INTERVENANT ti on i.TYPE_ID = ti.id 
  left join SERVICE s on s.INTERVENANT_ID = i.id                                   and s.HISTO_DESTRUCTEUR_ID is null and sysdate between s.VALIDITE_DEBUT and nvl(s.VALIDITE_FIN, sysdate)
  left join VOLUME_HORAIRE vh on vh.SERVICE_ID = s.id                         and vh.HISTO_DESTRUCTEUR_ID is null and sysdate between vh.VALIDITE_DEBUT and nvl(vh.VALIDITE_FIN, sysdate)
  left join type_volume_horaire tvh ON TVH.ID = VH.TYPE_VOLUME_HORAIRE_ID AND (tvh.code = 'PREVU')
  left join ELEMENT_PEDAGOGIQUE ep on s.ELEMENT_PEDAGOGIQUE_ID = ep.id        and ep.HISTO_DESTRUCTEUR_ID is null and sysdate between ep.VALIDITE_DEBUT and nvl(ep.VALIDITE_FIN, sysdate)
  left join ETAPE e on ep.ETAPE_ID = e.id and e.HISTO_DESTRUCTEUR_ID is null  and sysdate between e.VALIDITE_DEBUT and nvl(e.VALIDITE_FIN, sysdate)
  left join V_FORMULE_SERVICE_DU_MODIFIE fsm ON fsm.intervenant_id = i.id
  left join v_formule_heures_comp fhc ON fhc.intervenant_id = i.id
  where
    i.HISTO_DESTRUCTEUR_ID is null
    AND (exists( select * FROM service s where intervenant_id = i.id AND s.HISTO_DESTRUCTEUR_ID is null and sysdate between s.VALIDITE_DEBUT and nvl(s.VALIDITE_FIN, sysdate))
      OR exists( select * from service_referentiel sr WHERE sr.intervenant_id = i.id AND sr.HISTO_DESTRUCTEUR_ID is null and sysdate between sr.VALIDITE_DEBUT and nvl(sr.VALIDITE_FIN, sysdate)) )
  group by vh.TYPE_INTERVENTION_ID, s.STRUCTURE_ENS_ID, s.STRUCTURE_AFF_ID, ep.id, e.id, s.annee_id, i.NOM_USUEL, i.PRENOM, i.id, i.SOURCE_CODE, ti.CODE, s.id, fsm.heures, fhc.heures
  order by i.NOM_USUEL, i.PRENOM;
  
/

BEGIN

DBMS_SCHEDULER.enable(name=>'"OSE"."OSE_SRC_SYNC"');
END; 
/