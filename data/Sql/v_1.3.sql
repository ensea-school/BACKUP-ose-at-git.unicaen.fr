-- ********************************************************************* --
-- *          à faire AVANT avoir mis à jour le code source            * --
-- ********************************************************************* --

BEGIN DBMS_SCHEDULER.disable(name=>'"OSE"."OSE_SRC_SYNC"', force => TRUE); END; 
/

update element_pedagogique set fi = 0 WHERE fi IS NULL;
update element_pedagogique set fc = 0 WHERE fc IS NULL;
update element_pedagogique set fa = 0 WHERE fa IS NULL;

INSERT INTO "OSE"."PARAMETRE" (ID, NOM, VALEUR, DESCRIPTION, VALIDITE_DEBUT, HISTO_CREATION, HISTO_CREATEUR_ID, HISTO_MODIFICATION, HISTO_MODIFICATEUR_ID) 
  VALUES ('9', 'formule_package_name', 'UNICAEN_OSE_FORMULE', 'Nom du package contenant la formule de calcul', TO_DATE('2014-11-03 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2014-11-03 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '1', TO_DATE('2014-11-03 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '1');

INSERT INTO "OSE"."PARAMETRE" (ID, NOM, VALEUR, DESCRIPTION, VALIDITE_DEBUT, HISTO_CREATION, HISTO_CREATEUR_ID, HISTO_MODIFICATION, HISTO_MODIFICATEUR_ID) 
  VALUES ('10', 'formule_function_name', 'CALCUL_RESULTAT_V2', 'Nom de la procédure permettant d''exécuter la formule de calcul', TO_DATE('2014-11-03 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2014-11-03 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '1', TO_DATE('2014-11-03 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), '1');



---------------------------
--Nouveau SEQUENCE
--TYPE_MODULATEUR_EP_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."TYPE_MODULATEUR_EP_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2175 NOCACHE NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--WF_INTERVENANT_ETAPE_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."WF_INTERVENANT_ETAPE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6301 CACHE 20 NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--WF_ETAPE_TO_ETAPE_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."WF_ETAPE_TO_ETAPE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--WF_ETAPE_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."WF_ETAPE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--TEST_BUFFER_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."TEST_BUFFER_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 47022 CACHE 20 NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--FORMULE_VOLUME_HORAIREM_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."FORMULE_VOLUME_HORAIREM_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 179822 NOCACHE NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--FORMULE_VOLUME_HORAIRE_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."FORMULE_VOLUME_HORAIRE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 46218 NOCACHE NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--FORMULE_SERVICE_MAJ_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."FORMULE_SERVICE_MAJ_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 116454 NOCACHE NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--FORMULE_SERVICE_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."FORMULE_SERVICE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 33121 CACHE 20 NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--FORMULE_SERVICE_DU_MAJ_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."FORMULE_SERVICE_DU_MAJ_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 127994 NOCACHE NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--FORMULE_SERVICE_DU_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."FORMULE_SERVICE_DU_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 49349 NOCACHE NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--FORMULE_RESULTAT_MAJ_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."FORMULE_RESULTAT_MAJ_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1219900 NOCACHE NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--FORMULE_RESULTAT_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."FORMULE_RESULTAT_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 28298 NOCACHE NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--FORMULE_REFERENTIEL_MAJ_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."FORMULE_REFERENTIEL_MAJ_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4196 NOCACHE NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--FORMULE_REFERENTIEL_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."FORMULE_REFERENTIEL_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1185 NOCACHE NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--ETAT_VOLUME_HORAIRE_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."ETAT_VOLUME_HORAIRE_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4 NOCACHE NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--ELEMENT_TAUX_REGIMES_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."ELEMENT_TAUX_REGIMES_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 22147 NOCACHE NOORDER NOCYCLE;
---------------------------
--Nouveau SEQUENCE
--EFFECTIFS_ID_SEQ
---------------------------
 CREATE SEQUENCE "OSE"."EFFECTIFS_ID_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 11071 NOCACHE NOORDER NOCYCLE;

---------------------------
--Nouveau TABLE
--TYPE_MODULATEUR_EP
---------------------------
  CREATE TABLE "OSE"."TYPE_MODULATEUR_EP" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_MODULATEUR_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"SOURCE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"SOURCE_CODE" VARCHAR2(100 CHAR) NOT NULL ENABLE,
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE,
	"HISTO_CREATEUR_ID" NUMBER(*,0) NOT NULL ENABLE,
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE,
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0) NOT NULL ENABLE,
	"HISTO_DESTRUCTION" DATE,
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0),
	CONSTRAINT "TYPE_MODULATEUR_EP_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "TYPE_MODULATEUR_EP__UN" UNIQUE ("SOURCE_CODE") ENABLE,
	CONSTRAINT "TYPE_MODULATEUR_EP__UNV1" UNIQUE ("TYPE_MODULATEUR_ID","ELEMENT_PEDAGOGIQUE_ID") ENABLE,
	CONSTRAINT "TME_ELEMENT_PEDAGOGIQUE_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	 REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TME_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	 REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TME_TYPE_MODULATEUR_FK" FOREIGN KEY ("TYPE_MODULATEUR_ID")
	 REFERENCES "OSE"."TYPE_MODULATEUR" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "TYPE_MODULATEUR_EP_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE,
	CONSTRAINT "TYPE_MODULATEUR_EP_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE,
	CONSTRAINT "TYPE_MODULATEUR_EP_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE
   );
---------------------------
--Nouveau TABLE
--ETAT_VOLUME_HORAIRE
---------------------------
  CREATE TABLE "OSE"."ETAT_VOLUME_HORAIRE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"CODE" VARCHAR2(30 CHAR) NOT NULL ENABLE,
	"LIBELLE" VARCHAR2(80 CHAR) NOT NULL ENABLE,
	"ORDRE" NUMBER(*,0) NOT NULL ENABLE,
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE,
	"HISTO_CREATEUR_ID" NUMBER(*,0) NOT NULL ENABLE,
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE,
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0) NOT NULL ENABLE,
	"HISTO_DESTRUCTION" DATE,
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0),
	CONSTRAINT "ETAT_VOLUME_HORAIRE_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "ETAT_VOLUME_HORAIRE__UN" UNIQUE ("CODE","HISTO_DESTRUCTION") ENABLE,
	CONSTRAINT "ETAT_VOLUME_HORAIRE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE,
	CONSTRAINT "ETAT_VOLUME_HORAIRE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE,
	CONSTRAINT "ETAT_VOLUME_HORAIRE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE
   );

Insert into ETAT_VOLUME_HORAIRE (ID,CODE,LIBELLE,ORDRE,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID,HISTO_DESTRUCTION,HISTO_DESTRUCTEUR_ID) values ('1','saisi','Saisi','1',sysdate,1,sysdate,1,null,null);
Insert into ETAT_VOLUME_HORAIRE (ID,CODE,LIBELLE,ORDRE,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID,HISTO_DESTRUCTION,HISTO_DESTRUCTEUR_ID) values ('2','valide','Validé','2',sysdate,1,sysdate,1,null,null);
Insert into ETAT_VOLUME_HORAIRE (ID,CODE,LIBELLE,ORDRE,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID,HISTO_DESTRUCTION,HISTO_DESTRUCTEUR_ID) values ('3','contrat-edite','Contrat édité','3',sysdate,1,sysdate,1,null,null);
Insert into ETAT_VOLUME_HORAIRE (ID,CODE,LIBELLE,ORDRE,HISTO_CREATION,HISTO_CREATEUR_ID,HISTO_MODIFICATION,HISTO_MODIFICATEUR_ID,HISTO_DESTRUCTION,HISTO_DESTRUCTEUR_ID) values ('4','contrat-signe','Contrat signé','4',sysdate,1,sysdate,1,null,null);


---------------------------
--Nouveau TABLE
--FORMULE_VOLUME_HORAIRE
---------------------------
  CREATE TABLE "OSE"."FORMULE_VOLUME_HORAIRE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"VOLUME_HORAIRE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"HEURES" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"TAUX_SERVICE_DU" FLOAT(126) DEFAULT 1 NOT NULL ENABLE,
	"TAUX_SERVICE_COMPL" FLOAT(126) DEFAULT 1 NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"SERVICE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ETAT_VOLUME_HORAIRE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_INTERVENTION_ID" NUMBER(*,0) NOT NULL ENABLE,
	CONSTRAINT "FORMULE_VOLUME_HORAIRE_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "FORMULE_VOLUME_HORAIRE_UK1" UNIQUE ("VOLUME_HORAIRE_ID") ENABLE,
	CONSTRAINT "FVH_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FVH_ETAT_VOLUME_HORAIRE_FK" FOREIGN KEY ("ETAT_VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."ETAT_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FVH_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FVH_SERVICE_FK" FOREIGN KEY ("SERVICE_ID")
	 REFERENCES "OSE"."SERVICE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FVH_TYPE_INTERVENTION_FK" FOREIGN KEY ("TYPE_INTERVENTION_ID")
	 REFERENCES "OSE"."TYPE_INTERVENTION" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FVH_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FVH_VOLUME_HORAIRE_FK" FOREIGN KEY ("VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Modifié TABLE
--ELEMENT_PEDAGOGIQUE
---------------------------
ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD ("TAUX_FA" FLOAT(126) DEFAULT 0 NOT NULL ENABLE);
ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD ("TAUX_FC" FLOAT(126) DEFAULT 0 NOT NULL ENABLE);
ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD ("TAUX_FI" FLOAT(126) DEFAULT 1 NOT NULL ENABLE);
ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("FA" NUMBER(1,0) DEFAULT 0);
ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("FA" NOT NULL ENABLE);
ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("FC" NUMBER(1,0) DEFAULT 0);
ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("FC" NOT NULL ENABLE);
ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("FI" NUMBER(1,0) DEFAULT 1);
ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("FI" NOT NULL ENABLE);
ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("TAUX_FOAD" FLOAT(126) DEFAULT 0);
update "OSE"."ELEMENT_PEDAGOGIQUE" set taux_foad = 0 where taux_foad IS NULL;
ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("TAUX_FOAD" NOT NULL ENABLE);

---------------------------
--Nouveau TABLE
--FORMULE_REFERENTIEL_MAJ
---------------------------
  CREATE TABLE "OSE"."FORMULE_REFERENTIEL_MAJ" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"STRUCTURE_ENS_ID" NUMBER(*,0) NOT NULL ENABLE,
	CONSTRAINT "FORMULE_REFERENTIEL_MAJ_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "FORMULE_REFERENTIEL_MAJ__UN" UNIQUE ("INTERVENANT_ID","ANNEE_ID","STRUCTURE_ENS_ID") ENABLE,
	CONSTRAINT "FREFM_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FREFM_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FRM_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ENS_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--ELEMENT_TAUX_REGIMES
---------------------------
  CREATE TABLE "OSE"."ELEMENT_TAUX_REGIMES" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TAUX_FI" FLOAT(126) NOT NULL ENABLE,
	"TAUX_FC" FLOAT(126) NOT NULL ENABLE,
	"TAUX_FA" FLOAT(126) NOT NULL ENABLE,
	"SOURCE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"SOURCE_CODE" VARCHAR2(100 CHAR) NOT NULL ENABLE,
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE,
	"HISTO_CREATEUR_ID" NUMBER(*,0) NOT NULL ENABLE,
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE,
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0) NOT NULL ENABLE,
	"HISTO_DESTRUCTION" DATE,
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0),
	CONSTRAINT "ELEMENT_TAUX_REGIMES_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "ELEMENT_TAUX_REGIMES__UN" UNIQUE ("SOURCE_CODE","HISTO_DESTRUCTION") ENABLE,
	CONSTRAINT "ELEMENT_TAUX_REGIMES__UNV1" UNIQUE ("ELEMENT_PEDAGOGIQUE_ID","ANNEE_ID","HISTO_DESTRUCTION") ENABLE,
	CONSTRAINT "ELEMENT_TAUX_REGIMES_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE,
	CONSTRAINT "ELEMENT_TAUX_REGIMES_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE,
	CONSTRAINT "ELEMENT_TAUX_REGIMES_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE,
	CONSTRAINT "ETR_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "ETR_ELEMENT_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	 REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "ETR_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	 REFERENCES "OSE"."SOURCE" ("ID") ENABLE
   );
---------------------------
--Modifié TABLE
--SERVICE_DU
---------------------------
ALTER TABLE "OSE"."SERVICE_DU" DROP CONSTRAINT "SERVICE_DU_INTERVENANT_FK";
ALTER TABLE "OSE"."SERVICE_DU" ADD CONSTRAINT "SERVICE_DU_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID") REFERENCES "OSE"."INTERVENANT"("ID") ENABLE;

---------------------------
--Nouveau TABLE
--FORMULE_SERVICE_DU_MAJ
---------------------------
  CREATE TABLE "OSE"."FORMULE_SERVICE_DU_MAJ" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	CONSTRAINT "FSDM_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "FORMULE_SERVICE_DU_MAJ__UN" UNIQUE ("INTERVENANT_ID","ANNEE_ID") ENABLE,
	CONSTRAINT "FSDM_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FSDM_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--FORMULE_SERVICE_MAJ
---------------------------
  CREATE TABLE "OSE"."FORMULE_SERVICE_MAJ" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"SERVICE_ID" NUMBER(*,0) NOT NULL ENABLE,
	CONSTRAINT "FORMULE_SERVICE_MAJ_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "FORMULE_SERVICE_MAJ__UN" UNIQUE ("SERVICE_ID") ENABLE,
	CONSTRAINT "FSM_SERVICE_FK" FOREIGN KEY ("SERVICE_ID")
	 REFERENCES "OSE"."SERVICE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--FORMULE_VOLUME_HORAIRE_MAJ
---------------------------
  CREATE TABLE "OSE"."FORMULE_VOLUME_HORAIRE_MAJ" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"VOLUME_HORAIRE_ID" NUMBER(*,0) NOT NULL ENABLE,
	CONSTRAINT "FORMULE_VOLUME_HORAIRE_MAJ_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "FORMULE_VOLUME_HORAIRE_MAJ__UN" UNIQUE ("VOLUME_HORAIRE_ID") ENABLE,
	CONSTRAINT "FVHM_VOLUME_HORAIRE_FK" FOREIGN KEY ("VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--WF_ETAPE
---------------------------
  CREATE TABLE "OSE"."WF_ETAPE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"CODE" VARCHAR2(64 CHAR) NOT NULL ENABLE,
	"LIBELLE" VARCHAR2(256 CHAR) NOT NULL ENABLE,
	"PERTIN_FUNC" VARCHAR2(256 CHAR) DEFAULT null,
	"FRANCH_FUNC" VARCHAR2(256 CHAR) DEFAULT null,
	"STEP_CLASS" VARCHAR2(256 CHAR) DEFAULT null,
	"VISIBLE" NUMBER(1,0) DEFAULT 1 NOT NULL ENABLE,
	"STRUCTURE_DEPENDANT" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "WF_ETAPE_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "WF_ETAPE_CODE_UN" UNIQUE ("CODE") ENABLE
   );
---------------------------
--Nouveau TABLE
--TEST_BUFFER
---------------------------
  CREATE TABLE "OSE"."TEST_BUFFER" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"TABLE_NAME" VARCHAR2(30) NOT NULL ENABLE,
	"DATA_ID" NUMBER(*,0) NOT NULL ENABLE,
	CONSTRAINT "TEST_BUFFER_PK" PRIMARY KEY ("ID") ENABLE
   );
---------------------------
--Nouveau TABLE
--FORMULE_REFERENTIEL
---------------------------
  CREATE TABLE "OSE"."FORMULE_REFERENTIEL" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"STRUCTURE_AFF_ID" NUMBER(*,0),
	"STRUCTURE_ENS_ID" NUMBER(*,0) NOT NULL ENABLE,
	"REFERENTIEL" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "FORMULE_REFERENTIEL_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "FORMULE_REFERENTIEL_UN" UNIQUE ("INTERVENANT_ID","ANNEE_ID","STRUCTURE_ENS_ID") ENABLE,
	CONSTRAINT "FR_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FR_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FR_STRUCTURE_AFF_FK" FOREIGN KEY ("STRUCTURE_AFF_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FR_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ENS_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Modifié TABLE
--STATUT_INTERVENANT
---------------------------
ALTER TABLE "OSE"."STATUT_INTERVENANT" ADD ("PEUT_SAISIR_MOTIF_NON_PAIEMENT" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE);
update statut_intervenant set PEUT_SAISIR_MOTIF_NON_PAIEMENT = 1 where type_intervenant_id = (select id from type_intervenant where code = 'P');

---------------------------
--Nouveau TABLE
--WF_ETAPE_TO_ETAPE
---------------------------
  CREATE TABLE "OSE"."WF_ETAPE_TO_ETAPE" 
   (	"DEPART_ETAPE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ARRIVEE_ETAPE_ID" NUMBER(*,0) NOT NULL ENABLE,
	CONSTRAINT "WF_ETAPE_TO_ETAPE_PK" PRIMARY KEY ("DEPART_ETAPE_ID","ARRIVEE_ETAPE_ID") ENABLE,
	CONSTRAINT "WF_ETAPE_TO_ETAPE_AEFK" FOREIGN KEY ("ARRIVEE_ETAPE_ID")
	 REFERENCES "OSE"."WF_ETAPE" ("ID") ENABLE,
	CONSTRAINT "WF_ETAPE_TO_ETAPE_DEFK" FOREIGN KEY ("DEPART_ETAPE_ID")
	 REFERENCES "OSE"."WF_ETAPE" ("ID") ENABLE
   );
---------------------------
--Nouveau TABLE
--FORMULE_SERVICE
---------------------------
  CREATE TABLE "OSE"."FORMULE_SERVICE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"SERVICE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TAUX_FI" FLOAT(126) DEFAULT 1 NOT NULL ENABLE,
	"TAUX_FA" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"TAUX_FC" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"PONDERATION_SERVICE_DU" FLOAT(126) DEFAULT 1 NOT NULL ENABLE,
	"PONDERATION_SERVICE_COMPL" FLOAT(126) DEFAULT 1 NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"STRUCTURE_AFF_ID" NUMBER(*,0),
	"STRUCTURE_ENS_ID" NUMBER(*,0),
	CONSTRAINT "FORMULE_SERVICE_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "FORMULE_SERVICE__UN" UNIQUE ("SERVICE_ID") ENABLE,
	CONSTRAINT "FS_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FS_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FS_SERVICE_FK" FOREIGN KEY ("SERVICE_ID")
	 REFERENCES "OSE"."SERVICE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FS_STRUCTURE_AFF_FK" FOREIGN KEY ("STRUCTURE_AFF_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FS_STRUCTURE_ENS_FK" FOREIGN KEY ("STRUCTURE_ENS_ID")
	 REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--WF_INTERVENANT_ETAPE
---------------------------
  CREATE TABLE "OSE"."WF_INTERVENANT_ETAPE" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ETAPE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"FRANCHIE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"COURANTE" NUMBER(1,0) DEFAULT 0 NOT NULL ENABLE,
	"ORDRE" NUMBER(*,0) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "WF_INTERVENANT_ETAPE_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "WF_INTERVENANT_ETAPE_EFK" FOREIGN KEY ("ETAPE_ID")
	 REFERENCES "OSE"."WF_ETAPE" ("ID") ENABLE,
	CONSTRAINT "WF_INTERVENANT_ETAPE_IFK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ENABLE
   );
---------------------------
--Nouveau TABLE
--FORMULE_SERVICE_DU
---------------------------
  CREATE TABLE "OSE"."FORMULE_SERVICE_DU" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"SERVICE_DU" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"SERVICE_DU_MODIFICATION" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "FORMULE_SERVICE_DU_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "FORMULE_SERVICE_DU__UN" UNIQUE ("INTERVENANT_ID","ANNEE_ID") ENABLE,
	CONSTRAINT "FORMULE_SD_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FORMULE_SD_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Modifié TABLE
--MOTIF_MODIFICATION_SERVICE
---------------------------
ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" ADD CONSTRAINT "MOTIF_MODIFICATION_SERVIC_UK1" UNIQUE ("CODE") ENABLE;

---------------------------
--Nouveau TABLE
--FORMULE_RESULTAT
---------------------------
  CREATE TABLE "OSE"."FORMULE_RESULTAT" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ETAT_VOLUME_HORAIRE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"SERVICE_DU" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"ENSEIGNEMENTS" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"REFERENTIEL" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"SERVICE_ASSURE" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"SERVICE" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_SOLDE" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_COMPL_FI" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_COMPL_FA" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_COMPL_FC" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_COMPL_REFERENTIEL" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"HEURES_COMPL_TOTAL" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"SOUS_SERVICE" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	"A_PAYER" FLOAT(126) DEFAULT 0 NOT NULL ENABLE,
	CONSTRAINT "FORMULE_RESULTAT_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "FORMULE_RESULTAT__UN" UNIQUE ("INTERVENANT_ID","ANNEE_ID","TYPE_VOLUME_HORAIRE_ID","ETAT_VOLUME_HORAIRE_ID") ENABLE,
	CONSTRAINT "FRES_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FRES_ETAT_VOLUME_HORAIRE_FK" FOREIGN KEY ("ETAT_VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."ETAT_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FRES_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FRES_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE
   );
---------------------------
--Nouveau TABLE
--FORMULE_RESULTAT_MAJ
---------------------------
  CREATE TABLE "OSE"."FORMULE_RESULTAT_MAJ" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0),
	"ETAT_VOLUME_HORAIRE_ID" NUMBER(*,0),
	CONSTRAINT "FORMULE_RESULTAT_MAJ_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "FORMULE_RESULTAT_MAJ__UN" UNIQUE ("INTERVENANT_ID","ANNEE_ID","TYPE_VOLUME_HORAIRE_ID","ETAT_VOLUME_HORAIRE_ID") ENABLE,
	CONSTRAINT "FRM_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FRM_ETAT_VOLUME_HORAIRE_FK" FOREIGN KEY ("ETAT_VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."ETAT_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FRM_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	 REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "FRM_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	 REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE
   );

---------------------------
--Modifié TABLE
--AFFECTATION_RECHERCHE
---------------------------
ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" DROP CONSTRAINT "AFFECTATION_IS_UN";

---------------------------
--Nouveau TABLE
--WF_TMP_INTERVENANT
---------------------------
  CREATE GLOBAL TEMPORARY TABLE "OSE"."WF_TMP_INTERVENANT" 
   (	"INTERVENANT_ID" NUMBER(*,0) NOT NULL ENABLE
   ) ON COMMIT DELETE ROWS;
---------------------------
--Nouveau TABLE
--EFFECTIFS
---------------------------
  CREATE TABLE "OSE"."EFFECTIFS" 
   (	"ID" NUMBER(*,0) NOT NULL ENABLE,
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"ANNEE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"FI" NUMBER(*,0) DEFAULT 0 NOT NULL ENABLE,
	"FC" NUMBER(*,0) DEFAULT 0 NOT NULL ENABLE,
	"FA" NUMBER(*,0) DEFAULT 0 NOT NULL ENABLE,
	"SOURCE_ID" NUMBER(*,0) NOT NULL ENABLE,
	"SOURCE_CODE" VARCHAR2(100 CHAR) NOT NULL ENABLE,
	"HISTO_CREATION" DATE DEFAULT SYSDATE NOT NULL ENABLE,
	"HISTO_CREATEUR_ID" NUMBER(*,0) NOT NULL ENABLE,
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE NOT NULL ENABLE,
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0) NOT NULL ENABLE,
	"HISTO_DESTRUCTION" DATE,
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0),
	CONSTRAINT "EFFECTIFS_PK" PRIMARY KEY ("ID") ENABLE,
	CONSTRAINT "EFFECTIFS__UN" UNIQUE ("SOURCE_CODE") ENABLE,
	CONSTRAINT "EFFECTIFS_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	 REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "EFFECTIFS_ELEMENT_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	 REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE,
	CONSTRAINT "EFFECTIFS_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE,
	CONSTRAINT "EFFECTIFS_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE,
	CONSTRAINT "EFFECTIFS_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	 REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE,
	CONSTRAINT "EFFECTIFS_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	 REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE
   );
   
/

---------------------------
--Modifié PACKAGE
--OSE_PARAMETRE
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_PARAMETRE" AS 

  function get_etablissement return Numeric;
  function get_annee return Numeric;
  function get_ose_user return Numeric;
  function get_drh_structure_id return Numeric;
  function get_date_fin_saisie_permanents RETURN DATE;
  function get_formule_package_name RETURN VARCHAR2;
  function get_formule_function_name RETURN VARCHAR2;

END OSE_PARAMETRE;
/
   
---------------------------
--Modifié PACKAGE BODY
--OSE_PARAMETRE
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_PARAMETRE" AS

  cache_ose_user NUMERIC;
  cache_annee_id NUMERIC;

  function get_etablissement return Numeric AS
    etab_id numeric;
  BEGIN
    select to_number(valeur) into etab_id from parametre where nom = 'etablissement';
    RETURN etab_id;
  END get_etablissement;

  function get_annee return Numeric AS
    annee_id numeric;
  BEGIN
    IF cache_annee_id IS NOT NULL THEN RETURN cache_annee_id; END IF;
    select to_number(valeur) into annee_id from parametre where nom = 'annee';
    cache_annee_id := annee_id;
    RETURN cache_annee_id;
  END get_annee;

  function get_ose_user return Numeric AS
    ose_user_id numeric;
  BEGIN
    IF cache_ose_user IS NOT NULL THEN RETURN cache_ose_user; END IF;
    select to_number(valeur) into ose_user_id from parametre where nom = 'oseuser';
    cache_ose_user := ose_user_id;
    RETURN cache_ose_user;
  END get_ose_user;

  function get_drh_structure_id return Numeric AS
    drh_structure_id numeric;
  BEGIN
    select to_number(valeur) into drh_structure_id from parametre where nom = 'drh_structure_id';
    RETURN drh_structure_id;
  END get_drh_structure_id;

  FUNCTION get_date_fin_saisie_permanents RETURN DATE IS
    date_fin_saisie_permanents date;
  BEGIN
    select TO_DATE(valeur, 'dd/mm/yyyy') into date_fin_saisie_permanents from parametre where nom = 'date_fin_saisie_permanents';
    RETURN date_fin_saisie_permanents;
  END;

  FUNCTION get_formule_package_name RETURN VARCHAR2 IS
    formule_package_name VARCHAR2(30);
  BEGIN
    SELECT valeur INTO formule_package_name FROM parametre WHERE nom = 'formule_package_name';
    RETURN formule_package_name;
  END;
  
  FUNCTION get_formule_function_name RETURN VARCHAR2 IS
    formule_function_name VARCHAR2(30);
  BEGIN
    SELECT valeur INTO formule_function_name FROM parametre WHERE nom = 'formule_function_name';
    RETURN formule_function_name;
  END;

END OSE_PARAMETRE;
/
   
   
   
   
/
---------------------------
--Modifié PACKAGE
--OSE_DIVERS
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_DIVERS" AS 

  FUNCTION INTERVENANT_HAS_PRIVILEGE( intervenant_id NUMERIC, privilege_name VARCHAR2 ) RETURN NUMERIC;

  FUNCTION GET_TYPE_MODULATEUR_IDS( STRUCTURE_ID NUMERIC, DATE_OBS DATE DEFAULT SYSDATE ) RETURN types_modulateurs;

  FUNCTION implode(i_query VARCHAR2, i_seperator VARCHAR2 DEFAULT ',') RETURN VARCHAR2;

  FUNCTION intervenant_est_permanent( INTERVENANT_ID NUMERIC ) RETURN NUMERIC;

  FUNCTION intervenant_est_non_autorise( INTERVENANT_ID NUMERIC ) RETURN NUMERIC;

  FUNCTION intervenant_peut_saisir_serv( INTERVENANT_ID NUMERIC ) RETURN NUMERIC;

  FUNCTION STRUCTURE_DANS_STRUCTURE( structure_testee NUMERIC, structure_cible NUMERIC ) RETURN NUMERIC;

  FUNCTION STR_REDUCE( str CLOB ) RETURN CLOB;
  
  FUNCTION LIKED( haystack CLOB, needle CLOB ) RETURN NUMERIC;

  FUNCTION COMPRISE_ENTRE( date_debut DATE, date_fin DATE DEFAULT NULL, date_obs DATE DEFAULT SYSDATE ) RETURN NUMERIC;

  PROCEDURE DO_NOTHING;

  FUNCTION VOLUME_HORAIRE_VALIDE( volume_horaire_id NUMERIC ) RETURN NUMERIC;

  FUNCTION CALCUL_TAUX_FI( fi FLOAT, fc FLOAT, fa FLOAT, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT;
  
  FUNCTION CALCUL_TAUX_FC( fi FLOAT, fc FLOAT, fa FLOAT, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT;
  
  FUNCTION CALCUL_TAUX_FA( fi FLOAT, fc FLOAT, fa FLOAT, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT;

  FUNCTION STRUCTURE_UNIV_GET_ID RETURN NUMERIC;

END OSE_DIVERS;
/
   
---------------------------
--Modifié PACKAGE BODY
--OSE_DIVERS
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_DIVERS" AS

FUNCTION INTERVENANT_HAS_PRIVILEGE( intervenant_id NUMERIC, privilege_name VARCHAR2 ) RETURN NUMERIC IS
  statut statut_intervenant%rowtype;
  itype  type_intervenant%rowtype;
  res NUMERIC;
BEGIN
  res := 1;
  SELECT si.* INTO statut FROM statut_intervenant si JOIN intervenant i ON i.statut_id = si.id WHERE i.id = intervenant_id;
  SELECT ti.* INTO itype  FROM type_intervenant ti WHERE ti.id = statut.type_intervenant_id;
  IF 'saisie_service' = privilege_name THEN
    res := statut.peut_saisir_service;
  ELSIF 'saisie_service_exterieur' = privilege_name THEN
    --IF INTERVENANT_HAS_PRIVILEGE( intervenant_id, 'saisie_service' ) = 0 OR itype.code = 'E' THEN -- cascade
    IF itype.code = 'E' THEN
      res := 0;
    END IF;
  ELSIF 'saisie_service_referentiel' = privilege_name THEN
    IF itype.code = 'E' THEN
      res := 0;
    END IF;
  ELSIF 'saisie_service_referentiel_autre_structure' = privilege_name THEN
    res := 1;
  ELSIF 'saisie_motif_non_paiement' = privilege_name THEN
    res := statut.peut_saisir_motif_non_paiement;
  ELSE
    raise_application_error(-20101, 'Le privilège "' || privilege_name || '" n''existe pas.');
  END IF;
  RETURN res;
END;

FUNCTION GET_TYPE_MODULATEUR_IDS( STRUCTURE_ID NUMERIC, DATE_OBS DATE DEFAULT SYSDATE ) RETURN types_modulateurs AS
   VSID NUMERIC;
   tm_result types_modulateurs;
BEGIN
  VSID := STRUCTURE_ID;
  SELECT DISTINCT
    tms.type_modulateur_id BULK COLLECT INTO tm_result
  FROM
    structure s
    LEFT JOIN type_modulateur_structure tms ON tms.structure_id = s.id
  WHERE
    tms.type_modulateur_id IS NOT NULL
    AND DATE_OBS BETWEEN TMS.VALIDITE_DEBUT AND NVL(TMS.VALIDITE_FIN,DATE_OBS) -- respect des validités
    AND DATE_OBS >= TMS.HISTO_CREATION                                         -- respect de la date de création
    AND (TMS.HISTO_DESTRUCTION IS NULL OR TMS.HISTO_DESTRUCTION >= DATE_OBS)   -- respect des destructions
  START WITH
    s.id = VSID
  CONNECT BY
    PRIOR s.parente_id = s.id
  ;
  
  RETURN tm_result;
END;

FUNCTION implode(i_query VARCHAR2, i_seperator VARCHAR2 DEFAULT ',') RETURN VARCHAR2 AS
  l_return CLOB:='';
  l_temp CLOB;
  TYPE r_cursor is REF CURSOR;
  rc r_cursor;
BEGIN
  OPEN rc FOR i_query;
  LOOP
    FETCH rc INTO L_TEMP;
    EXIT WHEN RC%NOTFOUND;
    l_return:=l_return||L_TEMP||i_seperator;
  END LOOP;
  RETURN RTRIM(l_return,i_seperator);
END;

FUNCTION intervenant_est_permanent( INTERVENANT_ID NUMERIC ) RETURN NUMERIC AS
  resultat NUMERIC;
BEGIN
  SELECT COUNT(*) INTO resultat FROM intervenant_permanent WHERE id = INTERVENANT_ID;
  RETURN resultat;
END;

FUNCTION intervenant_est_non_autorise( INTERVENANT_ID NUMERIC ) RETURN NUMERIC AS
  resultat NUMERIC;
BEGIN
  SELECT COUNT(*) INTO resultat FROM intervenant i JOIN statut_intervenant si ON si.id = i.statut_id AND si.non_autorise = 1 WHERE i.id = INTERVENANT_ID;
  RETURN resultat;
END;

FUNCTION intervenant_peut_saisir_serv( INTERVENANT_ID NUMERIC ) RETURN NUMERIC AS
  resultat NUMERIC;
BEGIN
  SELECT COUNT(*) INTO resultat FROM intervenant i JOIN statut_intervenant si ON si.id = i.statut_id AND si.peut_saisir_service = 1 WHERE i.id = INTERVENANT_ID;
  RETURN resultat;
END;

FUNCTION STRUCTURE_DANS_STRUCTURE( structure_testee NUMERIC, structure_cible NUMERIC ) RETURN NUMERIC AS
  RESULTAT NUMERIC;
BEGIN
  IF structure_testee = structure_cible THEN RETURN 1; END IF;
  
  select count(*) into resultat
  from structure
  WHERE structure.id = structure_testee
  start with parente_id = structure_cible
  connect by parente_id = prior id;

  RETURN RESULTAT;
END;

FUNCTION STR_REDUCE( str CLOB ) RETURN CLOB IS
BEGIN
  RETURN NLS_LOWER(str, 'NLS_SORT = BINARY_AI');
END;

FUNCTION LIKED( haystack CLOB, needle CLOB ) RETURN NUMERIC IS
BEGIN
  RETURN CASE WHEN STR_REDUCE(haystack) LIKE STR_REDUCE(needle) THEN 1 ELSE 0 END;
END;

FUNCTION COMPRISE_ENTRE( date_debut DATE, date_fin DATE DEFAULT NULL, date_obs DATE DEFAULT SYSDATE ) RETURN NUMERIC IS
  res NUMERIC;
BEGIN
  res := CASE WHEN date_obs >= date_debut THEN 1 ELSE 0 END;
  IF 1 = res AND date_fin IS NOT NULL THEN
    res := CASE WHEN date_obs < date_fin THEN 1 ELSE 0 END;
  END IF;
  RETURN res;
END;

PROCEDURE DO_NOTHING IS
BEGIN
  RETURN;
END;

FUNCTION VOLUME_HORAIRE_VALIDE( volume_horaire_id NUMERIC ) RETURN NUMERIC IS
  res NUMERIC;
BEGIN
  SELECT count(*) INTO res FROM
    validation v
    JOIN validation_vol_horaire vvh ON vvh.validation_id = v.id
  WHERE
    1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction );
  RETURN CASE WHEN res > 0 THEN 1 ELSE 0 END;
END;

FUNCTION CALCUL_TAUX_FI( fi FLOAT, fc FLOAT, fa FLOAT, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT IS
  nt FLOAT;
BEGIN
  nt := fi + fc + fa;
  IF nt = 0 THEN RETURN 1; END IF;
  IF fi >= fc AND fi >= fa THEN
    RETURN 1 - ROUND( fc / nt, arrondi ) - ROUND( fa / nt, arrondi );
  ELSE
    RETURN ROUND( fi / nt, arrondi );
  END IF;
END;
  
FUNCTION CALCUL_TAUX_FC( fi FLOAT, fc FLOAT, fa FLOAT, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT IS
  nt FLOAT;
BEGIN
  nt := fi + fc + fa;
  IF nt = 0 THEN RETURN 0; END IF;
  IF fi >= fc AND fi >= fa THEN
    RETURN ROUND( fc / nt, arrondi );
  ELSIF fc >= fi AND fc >= fa THEN
    RETURN 1 - ROUND( fi / nt, arrondi ) - ROUND( fa / nt, arrondi );  
  ELSE
    RETURN ROUND( fc / nt, arrondi );
  END IF;
END;
  
FUNCTION CALCUL_TAUX_FA( fi FLOAT, fc FLOAT, fa FLOAT, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT IS
  nt FLOAT;
BEGIN
  nt := fi + fc + fa;
  IF nt = 0 THEN RETURN 0; END IF;
  IF fi >= fc AND fi >= fa THEN
    RETURN ROUND( fa / nt, arrondi );
  ELSIF fc >= fi AND fc >= fa THEN
    RETURN ROUND( fa / nt, arrondi );
  ELSE
    RETURN 1 - ROUND( fc / nt, arrondi ) - ROUND( fi / nt, arrondi );
  END IF;
END;

FUNCTION STRUCTURE_UNIV_GET_ID RETURN NUMERIC IS
  res NUMERIC;
BEGIN
  SELECT id INTO res FROM structure WHERE niveau = 1 AND ROWNUM = 1;
  RETURN res;
END;

END OSE_DIVERS;
/
   
   
---------------------------
--Nouveau VIEW
--V_VOLUME_HORAIRE_ETAT
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_VOLUME_HORAIRE_ETAT" 
 ( "VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID"
  )  AS 
  SELECT 
  vh.id volume_horaire_id,
  evh.id etat_volume_horaire_id
FROM
  volume_horaire vh
  LEFT JOIN contrat c ON c.id = vh.contrat_id AND 1 = ose_divers.comprise_entre( c.histo_creation, c.histo_destruction )
  LEFT JOIN validation cv ON cv.id = c.validation_id AND 1 = ose_divers.comprise_entre( cv.histo_creation, cv.histo_destruction )
  JOIN etat_volume_horaire evh ON evh.code = CASE
    WHEN c.date_retour_signe IS NOT NULL THEN 'contrat-signe'
    WHEN cv.id IS NOT NULL THEN 'contrat-edite'
    WHEN EXISTS(
      SELECT * FROM validation v JOIN validation_vol_horaire vvh ON vvh.validation_id = v.id
      WHERE vvh.volume_horaire_id = vh.id AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
    ) THEN 'valide'
    ELSE 'saisi'
  END;
   
---------------------------
--Nouveau VIEW
--V_NIVEAU_FORMATION
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_NIVEAU_FORMATION" 
 ( "ID", "CODE", "LIBELLE_LONG", "NIVEAU", "GROUPE_TYPE_FORMATION_ID"
  )  AS 
  SELECT DISTINCT
  gtf.id * 256 + e.niveau id,
  gtf.libelle_court || e.niveau code,
  gtf.libelle_long,
  e.niveau,
  gtf.id groupe_type_formation_id
FROM
  etape e
  JOIN type_formation tf ON tf.id = e.type_formation_id AND ose_divers.comprise_entre( tf.histo_creation, tf.histo_destruction ) = 1
  JOIN groupe_type_formation gtf ON gtf.id = tf.groupe_id AND ose_divers.comprise_entre( gtf.histo_creation, gtf.histo_destruction ) = 1
WHERE
  ose_divers.comprise_entre( e.histo_creation, e.histo_destruction ) = 1
  AND gtf.pertinence_niveau = 1
  AND e.niveau IS NOT NULL
ORDER BY
  gtf.libelle_long, e.niveau;
   
---------------------------
--Nouveau VIEW
--V_ETAPE_NIVEAU_FORMATION
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_ETAPE_NIVEAU_FORMATION" 
 ( "ETAPE_ID", "NIVEAU_FORMATION_ID"
  )  AS 
  SELECT
  e.id etape_id,
  nf.id niveau_formation_id
FROM
  etape e
  JOIN type_formation tf ON tf.id = e.type_formation_id AND ose_divers.comprise_entre( tf.histo_creation, tf.histo_destruction ) = 1
  JOIN groupe_type_formation gtf ON gtf.id = tf.groupe_id AND ose_divers.comprise_entre( gtf.histo_creation, gtf.histo_destruction ) = 1
  JOIN v_niveau_formation nf ON nf.code = gtf.libelle_court || e.niveau
WHERE
  ose_divers.comprise_entre( e.histo_creation, e.histo_destruction ) = 1
  AND gtf.pertinence_niveau = 1
  AND e.niveau IS NOT NULL;

---------------------------
--Nouveau VIEW
--V_TBL_SERVICE_RESUME_VH
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_SERVICE_RESUME_VH" 
 ( "SERVICE_ID", "ANNEE_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ORDRE", "TYPE_INTERVENANT_ID", "STRUCTURE_AFF_ID", "INTERVENANT_ID", "STRUCTURE_ENS_ID", "NIVEAU_FORMATION_ID", "ETAPE_ID", "ELEMENT_PEDAGOGIQUE_ID", "TYPE_INTERVENTION_ID", "HEURES"
  )  AS 
  SELECT
  s.id                            service_id,
  s.annee_id                      annee_id,
  vh.type_volume_horaire_id       type_volume_horaire_id,
  evh.ordre                       etat_volume_horaire_ordre,
  i.type_id                       type_intervenant_id,
  saff.id                         structure_aff_id,
  i.id                            intervenant_id,
  sens.id                         structure_ens_id,
  enf.niveau_formation_id         niveau_formation_id,
  etp.id                          etape_id,
  ep.id                           element_pedagogique_id,
  vh.type_intervention_id         type_intervention_id,
  vh.heures                       heures
FROM
  volume_horaire                      vh
  JOIN service                         s ON s.id    = vh.service_id                AND ose_divers.comprise_entre( s.histo_creation, s.histo_destruction ) = 1
  JOIN v_volume_horaire_etat         vhe ON vhe.volume_horaire_id = vh.id
  JOIN formule_resultat               fr ON fr.intervenant_id = s.intervenant_id   AND fr.annee_id = s.annee_id AND fr.etat_volume_horaire_id = vhe.etat_volume_horaire_id AND fr.type_volume_horaire_id = vh.type_volume_horaire_id
  JOIN intervenant                     i ON i.id    = s.intervenant_id             AND ose_divers.comprise_entre( i.histo_creation, i.histo_destruction ) = 1
  JOIN structure                    saff ON saff.id = s.structure_aff_id
  JOIN structure                    sens ON sens.id = s.structure_ens_id
  JOIN etablissement                etab ON etab.id = s.etablissement_id
  JOIN etat_volume_horaire           evh ON evh.id  = vhe.etat_volume_horaire_id
  LEFT JOIN element_pedagogique       ep ON ep.id   = s.element_pedagogique_id
  LEFT JOIN etape                    etp ON etp.id  = ep.etape_id
  LEFT JOIN v_etape_niveau_formation enf ON enf.etape_id = etp.id;

---------------------------
--Nouveau VIEW
--V_TBL_SERVICE_EXPORT_VH
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_SERVICE_EXPORT_VH" 
 ( "SERVICE_ID", "ANNEE_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ORDRE", "TYPE_INTERVENANT_ID", "STRUCTURE_AFF_ID", "INTERVENANT_ID", "STRUCTURE_ENS_ID", "NIVEAU_FORMATION_ID", "ETAPE_ID", "ELEMENT_PEDAGOGIQUE_ID", "TYPE_INTERVENTION_ID", "HEURES"
  )  AS 
  SELECT
  s.id                            service_id,
  s.annee_id                      annee_id,
  vh.type_volume_horaire_id       type_volume_horaire_id,
  evh.ordre                       etat_volume_horaire_ordre,
  i.type_id                       type_intervenant_id,
  saff.id                         structure_aff_id,
  i.id                            intervenant_id,
  sens.id                         structure_ens_id,
  enf.niveau_formation_id         niveau_formation_id,
  etp.id                          etape_id,
  ep.id                           element_pedagogique_id,
  vh.type_intervention_id         type_intervention_id,
  vh.heures                       heures
FROM
  volume_horaire                      vh
  JOIN v_volume_horaire_etat         vhe ON vhe.volume_horaire_id = vh.id
  JOIN service                         s ON s.id    = vh.service_id AND ose_divers.comprise_entre( s.histo_creation, s.histo_destruction ) = 1
  JOIN intervenant                     i ON i.id    = s.intervenant_id AND ose_divers.comprise_entre( i.histo_creation, i.histo_destruction ) = 1
  JOIN structure                    saff ON saff.id = s.structure_aff_id
  JOIN structure                    sens ON sens.id = s.structure_ens_id
  JOIN etablissement                etab ON etab.id = s.etablissement_id
  JOIN etat_volume_horaire           evh ON evh.id  = vhe.etat_volume_horaire_id
  LEFT JOIN element_pedagogique       ep ON ep.id   = s.element_pedagogique_id
  LEFT JOIN etape                    etp ON etp.id  = ep.etape_id
  LEFT JOIN v_etape_niveau_formation enf ON enf.etape_id = etp.id
WHERE
  ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction ) = 1;
---------------------------
--Nouveau VIEW
--V_TBL_SERVICE_RESUME_REF
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_SERVICE_RESUME_REF" 
 ( "ANNEE_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID", "SERVICE_ID", "INTERVENANT_ID", "TYPE_INTERVENANT_ID", "STRUCTURE_AFF_ID", "STRUCTURE_ENS_ID", "NIVEAU_FORMATION_ID", "ETAPE_ID", "ELEMENT_PEDAGOGIQUE_ID", "HEURES_REFERENTIEL"
  )  AS 
  SELECT
  fr.annee_id                     annee_id,
  fr.type_volume_horaire_id       type_volume_horaire_id,
  fr.etat_volume_horaire_id       etat_volume_horaire_id,
  -1                              service_id,
  i.id                            intervenant_id,
  ti.id                           type_intervenant_id,
  fref.structure_aff_id           structure_aff_id,
  
  fref.structure_ens_id           structure_ens_id,
  -1                              niveau_formation_id,
  -1                              etape_id,
  -1                              element_pedagogique_id,

  fref.referentiel                heures_referentiel
FROM
  formule_resultat                    fr
  JOIN intervenant                     i ON i.id    = fr.intervenant_id
  JOIN statut_intervenant             si ON si.id   = i.statut_id            
  JOIN type_intervenant               ti ON ti.id   = si.type_intervenant_id 
  JOIN formule_referentiel          fref ON FREF.INTERVENANT_ID = FR.INTERVENANT_ID AND FREF.ANNEE_ID = FR.ANNEE_ID;

---------------------------
--Nouveau MATERIALIZED VIEW
--MV_ELEMENT_TAUX_REGIMES
---------------------------
CREATE MATERIALIZED VIEW "OSE"."MV_ELEMENT_TAUX_REGIMES" ("Z_ELEMENT_PEDAGOGIQUE_ID","ANNEE_ID","TAUX_FI","TAUX_FC","TAUX_FA","SOURCE_ID","SOURCE_CODE") 
  BUILD IMMEDIATE
  USING INDEX REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT  USING ENFORCED CONSTRAINTS
  DISABLE QUERY REWRITE AS 
  SELECT
  source_code z_element_pedagogique_id,
  to_number(annee_id) + 1 annee_id,
  OSE_DIVERS.CALCUL_TAUX_FI( effectif_fi, effectif_fc, effectif_fa ) taux_fi,
  OSE_DIVERS.CALCUL_TAUX_FC( effectif_fi, effectif_fc, effectif_fa ) taux_fc,
  OSE_DIVERS.CALCUL_TAUX_FA( effectif_fi, effectif_fc, effectif_fa ) taux_fa,
  ose_import.get_source_id('Apogee') source_id,
  annee_id || '-' || source_code source_code
FROM
  ucbn_ose_element_effectifs@apoprod e
WHERE
  (effectif_fi + effectif_fc + effectif_fa) > 0
  AND NOT EXISTS(
    SELECT * FROM element_taux_regimes etr JOIN element_pedagogique ep ON ep.id = etr.element_pedagogique_id WHERE
      ep.source_code = e.source_code
      AND etr.annee_id = to_number(e.annee_id) + 1
      AND etr.source_id <> ose_import.get_source_id('Apogee')
  );

---------------------------
--Nouveau VIEW
--SRC_ELEMENT_TAUX_REGIMES
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."SRC_ELEMENT_TAUX_REGIMES" 
 ( "ID", "ELEMENT_PEDAGOGIQUE_ID", "ANNEE_ID", "TAUX_FI", "TAUX_FC", "TAUX_FA", "SOURCE_ID", "SOURCE_CODE"
  )  AS 
  SELECT
  null ID,
  ep.id element_pedagogique_id,
  etr.annee_id,
  etr.taux_fi,
  etr.taux_fc,
  etr.taux_fa,
  etr.source_id,
  etr.source_code
FROM
  MV_ELEMENT_TAUX_REGIMES etr
  LEFT JOIN ELEMENT_PEDAGOGIQUE ep ON ep.source_code = etr.z_element_pedagogique_id
WHERE
  NOT EXISTS(
    SELECT * FROM element_taux_regimes etr_tbl WHERE
      etr_tbl.element_pedagogique_id = ep.id
      AND etr_tbl.annee_id = etr.annee_id
      AND etr_tbl.source_id <> etr.source_id
  );

---------------------------
--Nouveau VIEW
--V_DIFF_ELEMENT_TAUX_REGIMES
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_ELEMENT_TAUX_REGIMES" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ANNEE_ID", "ELEMENT_PEDAGOGIQUE_ID", "TAUX_FA", "TAUX_FC", "TAUX_FI", "U_ANNEE_ID", "U_ELEMENT_PEDAGOGIQUE_ID", "U_TAUX_FA", "U_TAUX_FC", "U_TAUX_FI"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_ID",diff."ELEMENT_PEDAGOGIQUE_ID",diff."TAUX_FA",diff."TAUX_FC",diff."TAUX_FI",diff."U_ANNEE_ID",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_TAUX_FA",diff."U_TAUX_FC",diff."U_TAUX_FI" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_ID ELSE S.ANNEE_ID END ANNEE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FA ELSE S.TAUX_FA END TAUX_FA,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FC ELSE S.TAUX_FC END TAUX_FC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FI ELSE S.TAUX_FI END TAUX_FI,
    CASE WHEN D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL) THEN 1 ELSE 0 END U_ANNEE_ID,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.TAUX_FA <> S.TAUX_FA OR (D.TAUX_FA IS NULL AND S.TAUX_FA IS NOT NULL) OR (D.TAUX_FA IS NOT NULL AND S.TAUX_FA IS NULL) THEN 1 ELSE 0 END U_TAUX_FA,
    CASE WHEN D.TAUX_FC <> S.TAUX_FC OR (D.TAUX_FC IS NULL AND S.TAUX_FC IS NOT NULL) OR (D.TAUX_FC IS NOT NULL AND S.TAUX_FC IS NULL) THEN 1 ELSE 0 END U_TAUX_FC,
    CASE WHEN D.TAUX_FI <> S.TAUX_FI OR (D.TAUX_FI IS NULL AND S.TAUX_FI IS NOT NULL) OR (D.TAUX_FI IS NOT NULL AND S.TAUX_FI IS NULL) THEN 1 ELSE 0 END U_TAUX_FI
FROM
  ELEMENT_TAUX_REGIMES D
  FULL JOIN SRC_ELEMENT_TAUX_REGIMES S ON (S.source_id = D.source_id AND S.source_code = D.source_code)
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL)
  OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.TAUX_FA <> S.TAUX_FA OR (D.TAUX_FA IS NULL AND S.TAUX_FA IS NOT NULL) OR (D.TAUX_FA IS NOT NULL AND S.TAUX_FA IS NULL)
  OR D.TAUX_FC <> S.TAUX_FC OR (D.TAUX_FC IS NULL AND S.TAUX_FC IS NOT NULL) OR (D.TAUX_FC IS NOT NULL AND S.TAUX_FC IS NULL)
  OR D.TAUX_FI <> S.TAUX_FI OR (D.TAUX_FI IS NULL AND S.TAUX_FI IS NOT NULL) OR (D.TAUX_FI IS NOT NULL AND S.TAUX_FI IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;

---------------------------
--Nouveau MATERIALIZED VIEW
--MV_EFFECTIFS
---------------------------
CREATE MATERIALIZED VIEW "OSE"."MV_EFFECTIFS" ("Z_ELEMENT_PEDAGOGIQUE_ID","ANNEE_ID","FI","FC","FA","SOURCE_ID","SOURCE_CODE") 
  BUILD IMMEDIATE
  USING INDEX REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT  USING ENFORCED CONSTRAINTS
  DISABLE QUERY REWRITE AS 
  SELECT
  source_code z_element_pedagogique_id,
  to_number(annee_id),
  effectif_fi fi,
  effectif_fc fc,
  effectif_fa fa,
  ose_import.get_source_id('Apogee') source_id,
  annee_id || '-' || source_code source_code

from ucbn_ose_element_effectifs@apoprod;

---------------------------
--Nouveau VIEW
--SRC_EFFECTIFS
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."SRC_EFFECTIFS" 
 ( "ID", "ELEMENT_PEDAGOGIQUE_ID", "ANNEE_ID", "FI", "FC", "FA", "SOURCE_ID", "SOURCE_CODE"
  )  AS 
  SELECT
  null id,
  ep.id element_pedagogique_id,
  e.annee_id annee_id,
  e.fi fi,
  e.fc fc,
  e.fa fa,
  e.source_id source_id,
  e.source_code source_code
from
  mv_effectifs e
  LEFT JOIN element_pedagogique ep ON ep.source_code = e.z_element_pedagogique_id;

---------------------------
--Nouveau VIEW
--V_DIFF_EFFECTIFS
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_EFFECTIFS" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ANNEE_ID", "ELEMENT_PEDAGOGIQUE_ID", "FA", "FC", "FI", "U_ANNEE_ID", "U_ELEMENT_PEDAGOGIQUE_ID", "U_FA", "U_FC", "U_FI"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_ID",diff."ELEMENT_PEDAGOGIQUE_ID",diff."FA",diff."FC",diff."FI",diff."U_ANNEE_ID",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_FA",diff."U_FC",diff."U_FI" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_ID ELSE S.ANNEE_ID END ANNEE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FA ELSE S.FA END FA,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FC ELSE S.FC END FC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FI ELSE S.FI END FI,
    CASE WHEN D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL) THEN 1 ELSE 0 END U_ANNEE_ID,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.FA <> S.FA OR (D.FA IS NULL AND S.FA IS NOT NULL) OR (D.FA IS NOT NULL AND S.FA IS NULL) THEN 1 ELSE 0 END U_FA,
    CASE WHEN D.FC <> S.FC OR (D.FC IS NULL AND S.FC IS NOT NULL) OR (D.FC IS NOT NULL AND S.FC IS NULL) THEN 1 ELSE 0 END U_FC,
    CASE WHEN D.FI <> S.FI OR (D.FI IS NULL AND S.FI IS NOT NULL) OR (D.FI IS NOT NULL AND S.FI IS NULL) THEN 1 ELSE 0 END U_FI
FROM
  EFFECTIFS D
  FULL JOIN SRC_EFFECTIFS S ON (S.source_id = D.source_id AND S.source_code = D.source_code)
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL)
  OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.FA <> S.FA OR (D.FA IS NULL AND S.FA IS NOT NULL) OR (D.FA IS NOT NULL AND S.FA IS NULL)
  OR D.FC <> S.FC OR (D.FC IS NULL AND S.FC IS NOT NULL) OR (D.FC IS NOT NULL AND S.FC IS NULL)
  OR D.FI <> S.FI OR (D.FI IS NULL AND S.FI IS NOT NULL) OR (D.FI IS NOT NULL AND S.FI IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;

---------------------------
--Nouveau VIEW
--V_DIFF_TYPE_MODULATEUR_EP
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_TYPE_MODULATEUR_EP" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ELEMENT_PEDAGOGIQUE_ID", "TYPE_MODULATEUR_ID", "U_ELEMENT_PEDAGOGIQUE_ID", "U_TYPE_MODULATEUR_ID"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ELEMENT_PEDAGOGIQUE_ID",diff."TYPE_MODULATEUR_ID",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_TYPE_MODULATEUR_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_MODULATEUR_ID ELSE S.TYPE_MODULATEUR_ID END TYPE_MODULATEUR_ID,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.TYPE_MODULATEUR_ID <> S.TYPE_MODULATEUR_ID OR (D.TYPE_MODULATEUR_ID IS NULL AND S.TYPE_MODULATEUR_ID IS NOT NULL) OR (D.TYPE_MODULATEUR_ID IS NOT NULL AND S.TYPE_MODULATEUR_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_MODULATEUR_ID
FROM
  TYPE_MODULATEUR_EP D
  FULL JOIN SRC_TYPE_MODULATEUR_EP S ON (S.source_id = D.source_id AND S.source_code = D.source_code)
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.TYPE_MODULATEUR_ID <> S.TYPE_MODULATEUR_ID OR (D.TYPE_MODULATEUR_ID IS NULL AND S.TYPE_MODULATEUR_ID IS NOT NULL) OR (D.TYPE_MODULATEUR_ID IS NOT NULL AND S.TYPE_MODULATEUR_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
---------------------------
--Nouveau VIEW
--V_ELEMENT_TYPE_MODULATEUR
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_ELEMENT_TYPE_MODULATEUR" 
 ( "ELEMENT_PEDAGOGIQUE_ID", "TYPE_MODULATEUR_ID"
  )  AS 
  SELECT
  ep.id element_pedagogique_id,
  tms.type_modulateur_id type_modulateur_id
FROM
  element_pedagogique ep
  JOIN structure s ON s.id = ep.structure_id                    AND ose_divers.comprise_entre( s.histo_creation, s.histo_destruction ) = 1
  JOIN type_modulateur_structure tms ON tms.structure_id = s.id AND ose_divers.comprise_entre( tms.histo_creation, tms.histo_destruction ) = 1
WHERE
  ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction ) = 1

UNION

SELECT
  tm_ep.element_pedagogique_id element_pedagogique_id,
  tm_ep.type_modulateur_id type_modulateur_id
FROM
  type_modulateur_ep tm_ep 
WHERE
  ose_divers.comprise_entre( tm_ep.histo_creation, tm_ep.histo_destruction ) = 1;
---------------------------
--Nouveau VIEW
--V_STRUCTURE_TYPE_MODULATEUR
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_STRUCTURE_TYPE_MODULATEUR" 
 ( "TYPE_MODULATEUR_ID", "STRUCTURE_ID"
  )  AS 
  SELECT DISTINCT
  etm.type_modulateur_id type_modulateur_id,
  ep.structure_id structure_id
FROM
  v_element_type_modulateur etm
  JOIN element_pedagogique ep ON ep.id = etm.element_pedagogique_id AND ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction ) = 1;
---------------------------
--Nouveau VIEW
--SRC_TYPE_MODULATEUR_EP
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."SRC_TYPE_MODULATEUR_EP" 
 ( "ID", "TYPE_MODULATEUR_ID", "ELEMENT_PEDAGOGIQUE_ID", "SOURCE_ID", "SOURCE_CODE"
  )  AS 
  SELECT
  null                                id,
  tm.id                               type_modulateur_id,
  ep.id                               element_pedagogique_id,
  ose_import.get_source_id('Calcul')  source_id,
  tm.code || '_' || ep.source_code    source_code
FROM
  element_pedagogique  ep
  JOIN type_modulateur tm ON ose_divers.comprise_entre( tm.histo_creation, tm.histo_destruction ) = 1
  JOIN structure        s ON s.id = ep.structure_id
WHERE
  ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction ) = 1
  AND ep.taux_fc > 0
  AND (
       (tm.code = 'IAE_FC'      AND s.source_code IN ('U10')) -- IAE
    OR (tm.code = 'DROIT_FC'    AND s.source_code IN ('U01')) -- Droit
    OR (tm.code = 'IUTCAEN_FC'  AND s.source_code IN ('I13')) -- IUT Caen
  );
---------------------------
--Nouveau VIEW
--V_ETAPE_TYPE_MODULATEUR
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_ETAPE_TYPE_MODULATEUR" 
 ( "TYPE_MODULATEUR_ID", "ETAPE_ID"
  )  AS 
  SELECT DISTINCT
  etm.type_modulateur_id type_modulateur_id,
  ep.etape_id etape_id
FROM
  v_element_type_modulateur etm
  JOIN element_pedagogique ep ON ep.id = etm.element_pedagogique_id AND ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction ) = 1;

---------------------------
--Nouveau VIEW
--V_TBL_SERVICE_EXPORT
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_SERVICE_EXPORT" 
 ( "SERVICE_ID", "ANNEE_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID", "TYPE_INTERVENANT_ID", "STRUCTURE_AFF_ID", "INTERVENANT_ID", "STRUCTURE_ENS_ID", "NIVEAU_FORMATION_ID", "ETAPE_ID", "ELEMENT_PEDAGOGIQUE_ID", "INTERVENANT_CODE", "INTERVENANT_NOM", "INTERVENANT_STATUT_LIBELLE", "INTERVENANT_TYPE_LIBELLE", "SERVICE_STRUCTURE_AFF_LIBELLE", "SERVICE_STRUCTURE_ENS_LIBELLE", "ETABLISSEMENT_LIBELLE", "ETAPE_CODE", "ETAPE_LIBELLE", "ELEMENT_CODE", "ELEMENT_LIBELLE", "COMMENTAIRES", "ELEMENT_PERIODE_LIBELLE", "ELEMENT_PONDERATION_COMPL", "ELEMENT_SOURCE_LIBELLE", "HEURES_SERVICE", "HEURES_REELLES", "HEURES_SERVICE_STATUTAIRE", "HEURES_SERVICE_DU_MODIFIE", "HEURES_ASSUREES", "HEURES_SOLDE", "HEURES_NON_PAYEES", "HEURES_REFERENTIEL"
  )  AS 
  SELECT
  s.id                            service_id,
  fr.annee_id                     annee_id,
  fr.type_volume_horaire_id       type_volume_horaire_id,
  fr.etat_volume_horaire_id       etat_volume_horaire_id,
  ti.id                           type_intervenant_id,
  saff.id                         structure_aff_id,
  i.id                            intervenant_id,
  sens.id                         structure_ens_id,
  enf.niveau_formation_id         niveau_formation_id,
  etp.id                          etape_id,
  ep.id                           element_pedagogique_id,

  i.source_code                   intervenant_code,
  i.nom_usuel || ' ' || i.prenom  intervenant_nom,
  si.libelle                      intervenant_statut_libelle,
  ti.libelle                      intervenant_type_libelle,
  saff.libelle_court              service_structure_aff_libelle,

  sens.libelle_court              service_structure_ens_libelle,
  etab.libelle                    etablissement_libelle,
  etp.source_code                 etape_code,
  etp.libelle                     etape_libelle,
  ep.source_code                  element_code,
  ep.libelle                      element_libelle,
  null                            commentaires,
  p.libelle_court                 element_periode_libelle,
  CASE WHEN fs.ponderation_service_compl = 1 THEN NULL ELSE fs.ponderation_service_compl END element_ponderation_compl,
  src.libelle                     element_source_libelle,

  fr.service                      heures_service,
  fr.service + fr.referentiel     heures_reelles,
  fsd.service_du                  heures_service_statutaire,
  fsd.service_du_modification     heures_service_du_modifie,
  fr.service_assure               heures_assurees,
  fr.heures_solde                 heures_solde,
  
  (SELECT
      COALESCE( SUM( vh.heures * CASE WHEN vh.motif_non_paiement_id IS NULL THEN 0 ELSE 1 END ), 0)
    FROM
      volume_horaire vh
      JOIN v_volume_horaire_etat vhe ON vhe.volume_horaire_id = vh.id
    WHERE
      ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction ) = 1
      AND vh.service_id = s.id
      AND NVL(vh.type_volume_horaire_id,1) = fr.type_volume_horaire_id 
      AND NVL(vhe.etat_volume_horaire_id,1) >= fr.etat_volume_horaire_id) heures_non_payees,
  0                               heures_referentiel  

FROM
  service s
  JOIN intervenant                     i ON i.id    = s.intervenant_id AND ose_divers.comprise_entre(  i.histo_creation,  i.histo_destruction ) = 1
  JOIN statut_intervenant             si ON si.id   = i.statut_id            
  JOIN type_intervenant               ti ON ti.id   = si.type_intervenant_id 
  JOIN structure                    sens ON sens.id = s.structure_ens_id
  JOIN etablissement                etab ON etab.id = s.etablissement_id
  JOIN formule_resultat               fr ON fr.intervenant_id = i.id
  LEFT JOIN structure               saff ON saff.id = s.structure_aff_id AND ti.code = 'P'
  LEFT JOIN element_pedagogique       ep ON ep.id   = s.element_pedagogique_id
  LEFT JOIN periode                    p ON p.id    = ep.periode_id
  LEFT JOIN source                   src ON src.id  = ep.source_id
  LEFT JOIN etape                    etp ON etp.id  = ep.etape_id
  LEFT JOIN v_etape_niveau_formation enf ON enf.etape_id = etp.id
  LEFT JOIN formule_service_du       fsd ON fsd.intervenant_id = i.id AND fsd.annee_id = fr.annee_id
  LEFT JOIN formule_service           fs ON fs.service_id = s.id
WHERE
  ose_divers.comprise_entre( s.histo_creation, s.histo_destruction ) = 1

UNION

SELECT
  -1                              service_id,
  sr.annee_id                     annee_id,
  fr.type_volume_horaire_id       type_volume_horaire_id,
  fr.etat_volume_horaire_id       etat_volume_horaire_id,
  ti.id                           type_intervenant_id,
  saff.id                         structure_aff_id,
  i.id                            intervenant_id,
  sens.id                         structure_ens_id,
  -1                              niveau_formation_id,
  -1                              etape_id,
  -1                              element_pedagogique_id,


  i.source_code                   intervenant_code,
  i.nom_usuel || ' ' || i.prenom  intervenant_nom,
  si.libelle                      intervenant_statut_libelle,
  ti.libelle                      intervenant_type_libelle,
  saff.libelle_court              service_structure_aff_libelle,

  sens.libelle_court              service_structure_ens_libelle,
  null                            etablissement_libelle,
  null                            etape_code,
  null                            etape_libelle,
  fonc.code                       element_code,
  fonc.libelle_court              element_libelle,
  sr.commentaires                 commentaires,
  null                            element_periode_libelle,
  null                            element_ponderation_compl,
  src.libelle                     element_source_libelle,

  fr.service                      heures_service,
  fr.service + fr.referentiel     heures_reelles,
  fsd.service_du                  heures_service_statutaire,
  fsd.service_du_modification     heures_service_du_modifie,
  fr.service_assure               heures_assurees,
  fr.heures_solde                 heures_solde,
  0                               heures_non_payees,
  sr.heures                       heures_referentiel  

FROM
  service_referentiel                 sr
  JOIN fonction_referentiel         fonc ON fonc.id = sr.fonction_id
  JOIN intervenant                     i ON i.id    = sr.intervenant_id AND ose_divers.comprise_entre(  i.histo_creation,  i.histo_destruction ) = 1
  JOIN statut_intervenant             si ON si.id   = i.statut_id            
  JOIN type_intervenant               ti ON ti.id   = si.type_intervenant_id 
  JOIN structure                    sens ON sens.id = sr.structure_id
  JOIN formule_resultat               fr ON fr.intervenant_id = i.id
  JOIN source                        src ON src.code = 'OSE'
  LEFT JOIN structure               saff ON saff.id = i.structure_id AND ti.code = 'P'
  LEFT JOIN formule_service_du       fsd ON fsd.intervenant_id = i.id AND fsd.annee_id = fr.annee_id
WHERE
  ose_divers.comprise_entre( sr.histo_creation, sr.histo_destruction ) = 1;
---------------------------
--Modifié VIEW
--SRC_ELEMENT_PEDAGOGIQUE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."SRC_ELEMENT_PEDAGOGIQUE" 
 ( "ID", "LIBELLE", "ETAPE_ID", "STRUCTURE_ID", "PERIODE_ID", "TAUX_FI", "TAUX_FC", "TAUX_FA", "TAUX_FOAD", "FC", "FI", "FA", "SOURCE_ID", "SOURCE_CODE"
  )  AS 
  SELECT
  null id,
  E.LIBELLE,
  etp.id ETAPE_ID,
  NVL(str.STRUCTURE_NIV2_ID,str.id) structure_id,
  per.id periode_id,
  CASE 
    WHEN etr.id IS NOT NULL THEN etr.taux_fi
    ELSE ose_divers.calcul_taux_fi( case e.fi when 0 then 0 else 1 end, case e.fc when 0 then 0 else 1 end, case e.fa when 0 then 0 else 1 end )
  END taux_fi,
  CASE 
    WHEN etr.id IS NOT NULL THEN etr.taux_fc
    ELSE ose_divers.calcul_taux_fc( case e.fi when 0 then 0 else 1 end, case e.fc when 0 then 0 else 1 end, case e.fa when 0 then 0 else 1 end )
  END taux_fc,
  CASE 
    WHEN etr.id IS NOT NULL THEN etr.taux_fa
    ELSE ose_divers.calcul_taux_fa( case e.fi when 0 then 0 else 1 end, case e.fc when 0 then 0 else 1 end, case e.fa when 0 then 0 else 1 end )
  END taux_fa,
  e.taux_foad,
  e.fc,
  e.fi,
  e.fa,
  E.SOURCE_ID,
  E.SOURCE_CODE
FROM
  MV_ELEMENT_PEDAGOGIQUE E
  LEFT JOIN etape etp ON etp.source_code = E.Z_ETAPE_ID
  LEFT JOIN structure str ON str.source_code = E.Z_STRUCTURE_ID
  LEFT JOIN periode per ON per.libelle_court = E.Z_PERIODE_ID
  LEFT JOIN element_pedagogique ep ON ep.source_code = e.source_code
  LEFT JOIN element_taux_regimes etr ON
    etr.element_pedagogique_id = ep.id
    AND etr.annee_id = OSE_PARAMETRE.GET_ANNEE
    AND 1 = OSE_DIVERS.COMPRISE_ENTRE( etr.histo_creation, etr.histo_destruction );
---------------------------
--Modifié VIEW
--V_PJ_HEURES
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_PJ_HEURES" 
 ( "NOM_USUEL", "PRENOM", "INTERVENANT_ID", "SOURCE_CODE", "ANNEE_ID", "CATEG", "TOTAL_HEURES"
  )  AS 
  SELECT i.NOM_USUEL, i.PRENOM, i.id intervenant_id, i.SOURCE_CODE, s.annee_id, 'service' categ, sum(vh.HEURES) as total_heures
  from INTERVENANT i 
  join SERVICE s on s.INTERVENANT_ID = i.id                                   and s.HISTO_DESTRUCTEUR_ID is null and sysdate between s.VALIDITE_DEBUT and nvl(s.VALIDITE_FIN, sysdate)
  join VOLUME_HORAIRE vh on vh.SERVICE_ID = s.id                         and vh.HISTO_DESTRUCTEUR_ID is null and sysdate between vh.VALIDITE_DEBUT and nvl(vh.VALIDITE_FIN, sysdate)
  join type_volume_horaire tvh ON TVH.ID = VH.TYPE_VOLUME_HORAIRE_ID AND (tvh.code = 'PREVU')
  join ELEMENT_PEDAGOGIQUE ep on s.ELEMENT_PEDAGOGIQUE_ID = ep.id        and ep.HISTO_DESTRUCTEUR_ID is null and sysdate between ep.VALIDITE_DEBUT and nvl(ep.VALIDITE_FIN, sysdate)
  join ETAPE e on ep.ETAPE_ID = e.id and e.HISTO_DESTRUCTEUR_ID is null  and sysdate between e.VALIDITE_DEBUT and nvl(e.VALIDITE_FIN, sysdate)
  where i.HISTO_DESTRUCTEUR_ID is null
  group by i.NOM_USUEL, i.PRENOM, i.id, i.SOURCE_CODE, s.annee_id, 'service'
UNION
  select i.NOM_USUEL, i.PRENOM, i.id intervenant_id, i.SOURCE_CODE, s.annee_id, 'referentiel' categ, sum(s.HEURES) as total_heures
  from INTERVENANT i 
  join SERVICE_REFERENTIEL s on s.INTERVENANT_ID = i.id and s.HISTO_DESTRUCTEUR_ID is null and sysdate between s.VALIDITE_DEBUT and nvl(s.VALIDITE_FIN, sysdate)
  where i.HISTO_DESTRUCTEUR_ID is null
  group by i.NOM_USUEL, i.PRENOM, i.id, i.SOURCE_CODE, s.annee_id, 'referentiel';

---------------------------
--Nouveau VIEW
--V_WF_INTERVENANT_ETAPE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_WF_INTERVENANT_ETAPE" 
 ( "ID", "NOM_USUEL", "PRENOM", "SOURCE_CODE", "ORDRE", "ETAPE_ID", "LIBELLE", "FRANCHIE", "COURANTE"
  )  AS 
  select i.id, i.nom_usuel, i.prenom, i.source_code, ie.ordre, e.id etape_id, e.libelle, ie.franchie, ie.courante
  from wf_intervenant_etape ie 
  inner join intervenant i on i.id = ie.intervenant_id
  inner join wf_etape e on e.id = ie.etape_id
  order by i.nom_usuel, i.id, ie.ordre asc;

---------------------------
--Nouveau VIEW
--V_TBL_SERVICE_RESUME
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_SERVICE_RESUME" 
 ( "ANNEE_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID", "SERVICE_ID", "INTERVENANT_ID", "TYPE_INTERVENANT_ID", "STRUCTURE_AFF_ID", "STRUCTURE_ENS_ID", "NIVEAU_FORMATION_ID", "ETAPE_ID", "ELEMENT_PEDAGOGIQUE_ID", "INTERVENANT_CODE", "INTERVENANT_NOM", "INTERVENANT_TYPE_CODE", "SERVICE_DU", "HEURES_SOLDE", "HEURES_COMPL"
  )  AS 
  SELECT
  fr.annee_id                     annee_id,
  fr.type_volume_horaire_id       type_volume_horaire_id,
  fr.etat_volume_horaire_id       etat_volume_horaire_id,
  s.id                            service_id,
  i.id                            intervenant_id,
  ti.id                           type_intervenant_id,
  s.structure_aff_id              structure_aff_id,
  
  s.structure_ens_id              structure_ens_id,
  enf.niveau_formation_id         niveau_formation_id,
  etp.id                          etape_id,
  ep.id                           element_pedagogique_id,

  i.source_code                   intervenant_code,
  i.nom_usuel || ' ' || i.prenom  intervenant_nom,
  ti.code                         intervenant_type_code,
  fr.service_du                   service_du,
  fr.heures_solde                 heures_solde,
  fr.heures_compl_total           heures_compl
FROM
  formule_resultat                    fr
  JOIN intervenant                     i ON i.id    = fr.intervenant_id
  JOIN statut_intervenant             si ON si.id   = i.statut_id            
  JOIN type_intervenant               ti ON ti.id   = si.type_intervenant_id 
  LEFT JOIN formule_service           fs ON fs.intervenant_id = fr.intervenant_id AND fs.annee_id = fr.annee_id
  LEFT JOIN service                    s ON s.id = fs.service_id
  LEFT JOIN element_pedagogique       ep ON ep.id   = s.element_pedagogique_id
  LEFT JOIN etape                    etp ON etp.id  = ep.etape_id
  LEFT JOIN v_etape_niveau_formation enf ON enf.etape_id = etp.id;
---------------------------
--Modifié VIEW
--V_DIFF_ELEMENT_PEDAGOGIQUE
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_ELEMENT_PEDAGOGIQUE" 
 ( "ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ETAPE_ID", "FA", "FC", "FI", "LIBELLE", "PERIODE_ID", "STRUCTURE_ID", "TAUX_FA", "TAUX_FC", "TAUX_FI", "TAUX_FOAD", "U_ETAPE_ID", "U_FA", "U_FC", "U_FI", "U_LIBELLE", "U_PERIODE_ID", "U_STRUCTURE_ID", "U_TAUX_FA", "U_TAUX_FC", "U_TAUX_FI", "U_TAUX_FOAD"
  )  AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ETAPE_ID",diff."FA",diff."FC",diff."FI",diff."LIBELLE",diff."PERIODE_ID",diff."STRUCTURE_ID",diff."TAUX_FA",diff."TAUX_FC",diff."TAUX_FI",diff."TAUX_FOAD",diff."U_ETAPE_ID",diff."U_FA",diff."U_FC",diff."U_FI",diff."U_LIBELLE",diff."U_PERIODE_ID",diff."U_STRUCTURE_ID",diff."U_TAUX_FA",diff."U_TAUX_FC",diff."U_TAUX_FI",diff."U_TAUX_FOAD" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETAPE_ID ELSE S.ETAPE_ID END ETAPE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FA ELSE S.FA END FA,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FC ELSE S.FC END FC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FI ELSE S.FI END FI,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE ELSE S.LIBELLE END LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PERIODE_ID ELSE S.PERIODE_ID END PERIODE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FA ELSE S.TAUX_FA END TAUX_FA,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FC ELSE S.TAUX_FC END TAUX_FC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FI ELSE S.TAUX_FI END TAUX_FI,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FOAD ELSE S.TAUX_FOAD END TAUX_FOAD,
    CASE WHEN D.ETAPE_ID <> S.ETAPE_ID OR (D.ETAPE_ID IS NULL AND S.ETAPE_ID IS NOT NULL) OR (D.ETAPE_ID IS NOT NULL AND S.ETAPE_ID IS NULL) THEN 1 ELSE 0 END U_ETAPE_ID,
    CASE WHEN D.FA <> S.FA OR (D.FA IS NULL AND S.FA IS NOT NULL) OR (D.FA IS NOT NULL AND S.FA IS NULL) THEN 1 ELSE 0 END U_FA,
    CASE WHEN D.FC <> S.FC OR (D.FC IS NULL AND S.FC IS NOT NULL) OR (D.FC IS NOT NULL AND S.FC IS NULL) THEN 1 ELSE 0 END U_FC,
    CASE WHEN D.FI <> S.FI OR (D.FI IS NULL AND S.FI IS NOT NULL) OR (D.FI IS NOT NULL AND S.FI IS NULL) THEN 1 ELSE 0 END U_FI,
    CASE WHEN D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL) THEN 1 ELSE 0 END U_LIBELLE,
    CASE WHEN D.PERIODE_ID <> S.PERIODE_ID OR (D.PERIODE_ID IS NULL AND S.PERIODE_ID IS NOT NULL) OR (D.PERIODE_ID IS NOT NULL AND S.PERIODE_ID IS NULL) THEN 1 ELSE 0 END U_PERIODE_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID,
    CASE WHEN D.TAUX_FA <> S.TAUX_FA OR (D.TAUX_FA IS NULL AND S.TAUX_FA IS NOT NULL) OR (D.TAUX_FA IS NOT NULL AND S.TAUX_FA IS NULL) THEN 1 ELSE 0 END U_TAUX_FA,
    CASE WHEN D.TAUX_FC <> S.TAUX_FC OR (D.TAUX_FC IS NULL AND S.TAUX_FC IS NOT NULL) OR (D.TAUX_FC IS NOT NULL AND S.TAUX_FC IS NULL) THEN 1 ELSE 0 END U_TAUX_FC,
    CASE WHEN D.TAUX_FI <> S.TAUX_FI OR (D.TAUX_FI IS NULL AND S.TAUX_FI IS NOT NULL) OR (D.TAUX_FI IS NOT NULL AND S.TAUX_FI IS NULL) THEN 1 ELSE 0 END U_TAUX_FI,
    CASE WHEN D.TAUX_FOAD <> S.TAUX_FOAD OR (D.TAUX_FOAD IS NULL AND S.TAUX_FOAD IS NOT NULL) OR (D.TAUX_FOAD IS NOT NULL AND S.TAUX_FOAD IS NULL) THEN 1 ELSE 0 END U_TAUX_FOAD
FROM
  ELEMENT_PEDAGOGIQUE D
  FULL JOIN SRC_ELEMENT_PEDAGOGIQUE S ON (S.source_id = D.source_id AND S.source_code = D.source_code)
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ETAPE_ID <> S.ETAPE_ID OR (D.ETAPE_ID IS NULL AND S.ETAPE_ID IS NOT NULL) OR (D.ETAPE_ID IS NOT NULL AND S.ETAPE_ID IS NULL)
  OR D.FA <> S.FA OR (D.FA IS NULL AND S.FA IS NOT NULL) OR (D.FA IS NOT NULL AND S.FA IS NULL)
  OR D.FC <> S.FC OR (D.FC IS NULL AND S.FC IS NOT NULL) OR (D.FC IS NOT NULL AND S.FC IS NULL)
  OR D.FI <> S.FI OR (D.FI IS NULL AND S.FI IS NOT NULL) OR (D.FI IS NOT NULL AND S.FI IS NULL)
  OR D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL)
  OR D.PERIODE_ID <> S.PERIODE_ID OR (D.PERIODE_ID IS NULL AND S.PERIODE_ID IS NOT NULL) OR (D.PERIODE_ID IS NOT NULL AND S.PERIODE_ID IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
  OR D.TAUX_FA <> S.TAUX_FA OR (D.TAUX_FA IS NULL AND S.TAUX_FA IS NOT NULL) OR (D.TAUX_FA IS NOT NULL AND S.TAUX_FA IS NULL)
  OR D.TAUX_FC <> S.TAUX_FC OR (D.TAUX_FC IS NULL AND S.TAUX_FC IS NOT NULL) OR (D.TAUX_FC IS NOT NULL AND S.TAUX_FC IS NULL)
  OR D.TAUX_FI <> S.TAUX_FI OR (D.TAUX_FI IS NULL AND S.TAUX_FI IS NOT NULL) OR (D.TAUX_FI IS NOT NULL AND S.TAUX_FI IS NULL)
  OR D.TAUX_FOAD <> S.TAUX_FOAD OR (D.TAUX_FOAD IS NULL AND S.TAUX_FOAD IS NOT NULL) OR (D.TAUX_FOAD IS NOT NULL AND S.TAUX_FOAD IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;

---------------------------
--Nouveau VIEW
--V_CTL_SERVICES_ODF_HISTO
---------------------------
CREATE OR REPLACE FORCE VIEW "OSE"."V_CTL_SERVICES_ODF_HISTO" 
 ( "PRENOM", "NOM_USUEL", "ELEMENT", "ETAPE", "TYPE_INTERVENTION", "HEURES", "HAS_CONTRAT", "HAS_VALIDATION", "ELEMENT_SUPPRIME", "ETAPE_SUPPRIMEE", "ETABLISSEMENT_SUPPRIME"
  )  AS 
  with vh as (
  SELECT
    vh.service_id,
    ti.code type_intervention,
    SUM(heures) heures,
    CASE WHEN vh.contrat_id IS NULL THEN 0 ELSE 1 END has_contrat,
    CASE WHEN (SELECT COUNT(*) FROM validation_vol_horaire vvh WHERE vvh.volume_horaire_id = vh.id) = 1 THEN 1 ELSE 0 END has_validation
  FROM
    volume_horaire vh
    JOIN type_volume_horaire tvh ON tvh.id = vh.type_volume_horaire_id
    JOIN type_intervention ti ON ti.id = vh.type_intervention_id
  WHERE
    vh.histo_destruction is null
    AND tvh.code = 'PREVU'
  GROUP BY
    vh.id, ti.code, vh.service_id, vh.contrat_id
)
SELECT
  i.prenom, i.nom_usuel,
  ep.source_code "ELEMENT",
  e.source_code etape,

  vh.type_intervention,
  vh.heures,
  vh.has_contrat,
  vh.has_validation,
  CASE WHEN ep.histo_destruction IS NOT NULL THEN 1 ELSE 0 END element_supprime,
  CASE WHEN e.histo_destruction IS NOT NULL THEN 1 ELSE 0 END etape_supprimee,
  CASE WHEN et.histo_destruction IS NOT NULL THEN 1 ELSE 0 END etablissement_supprime
FROM
  service s
  JOIN intervenant i ON i.id = s.intervenant_id
  LEFT JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
  LEFT JOIN etape e ON e.id = ep.etape_id
  LEFT JOIN etablissement et ON et.id = s.etablissement_id
  LEFT JOIN vh ON vh.service_id = s.id
WHERE
  s.histo_destruction IS NULL
  AND (
    (ep.id IS NOT NULL AND ep.histo_destruction IS NOT NULL)
    OR
    (e.id IS NOT NULL AND e.histo_destruction IS NOT NULL)
    OR
    (et.id IS NOT NULL AND et.histo_destruction IS NOT NULL)
  )
order by
  nom_usuel, prenom, etape, "ELEMENT", heures;

---------------------------
--Nouveau MATERIALIZED VIEW
--MV_HARP_INDIVIDU_STATUT
---------------------------
CREATE MATERIALIZED VIEW "OSE"."MV_HARP_INDIVIDU_STATUT" ("NO_INDIVIDU","STATUT","TYPE_INTERVENANT") 
  BUILD IMMEDIATE
  USING INDEX REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT  USING ENFORCED CONSTRAINTS
  DISABLE QUERY REWRITE AS 
  SELECT
  no_individu, 
  statut,
  ti.code type_intervenant
FROM
(
SELECT
  i.no_individu,
  CASE
    WHEN NVL(c.ordre,99999) > NVL(tp.ordre,99999) THEN COALESCE(tp.statut, c.statut, 'AUTRES')
    WHEN NVL(c.ordre,99999) <= NVL(tp.ordre,99999) THEN COALESCE(c.statut, tp.statut, 'AUTRES')
  END statut
FROM
  individu@harpprod i
  LEFT JOIN (SELECT DISTINCT
      ct.no_dossier_pers no_dossier_pers,
      si.source_code statut,
      si.ordre,
      min(si.ordre) over(partition BY ct.no_dossier_pers) AS min_ordre
    FROM
      contrat_travail@harpprod ct
      JOIN contrat_avenant@harpprod ca ON ca.no_dossier_pers = ct.no_dossier_pers AND ca.no_contrat_travail = ct.no_contrat_travail
      JOIN statut_intervenant si ON si.source_code = CASE 
        WHEN ct.c_type_contrat_trav IN ('MC','MA')                THEN 'ASS_MI_TPS'
        WHEN ct.c_type_contrat_trav IN ('AT')                     THEN 'ATER'
        WHEN ct.c_type_contrat_trav IN ('AX')                     THEN 'ATER_MI_TPS'
        WHEN ct.c_type_contrat_trav IN ('DO')                     THEN 'DOCTOR'
        WHEN ct.c_type_contrat_trav IN ('GI','PN')                THEN 'ENS_CONTRACT'
        WHEN ct.c_type_contrat_trav IN ('LT','LB')                THEN 'LECTEUR'
        WHEN ct.c_type_contrat_trav IN ('MB')                     THEN 'MAITRE_LANG'
        WHEN ct.c_type_contrat_trav IN ('C3','CA','CB','CD','HA','HS','S3','SX','SW','SY','CS','SZ','VA') THEN 'BIATSS'
        WHEN ct.c_type_contrat_trav IN ('CU','AH','CG','MM','PM','IN','DN','ET','NF') THEN 'NON_AUTORISE'
                                                                  ELSE 'AUTRES'
      END
    WHERE
      SYSDATE BETWEEN ca.d_deb_contrat_trav AND NVL(ca.d_fin_contrat_trav,SYSDATE)
  ) c ON c.no_dossier_pers = i.no_individu AND c.ordre = c.min_ordre
  LEFT JOIN (SELECT DISTINCT
      a.no_dossier_pers,
      si.source_code statut,
      si.ordre,
      min(si.ordre) over(partition BY a.no_dossier_pers) AS min_ordre
    FROM
      affectation@harpprod a
      JOIN carriere@harpprod c ON  c.no_dossier_pers = a.no_dossier_pers AND c.no_seq_carriere = a.no_seq_carriere
      JOIN statut_intervenant si ON si.source_code = CASE 
        WHEN c.c_type_population IN ('DA','OA','DC')                THEN 'ENS_2ND_DEG'
        WHEN c.c_type_population IN ('SA')                          THEN 'ENS_CH'
        WHEN c.c_type_population IN ('AA','AC','BA','IA','MA')      THEN 'BIATSS'
        WHEN c.c_type_population IN ('MG','SB')                     THEN 'NON_AUTORISE'
                                                                    ELSE 'AUTRES'
      END
    WHERE
      (SYSDATE BETWEEN a.d_deb_affectation AND COALESCE(a.d_fin_affectation,SYSDATE))
  ) tp ON tp.no_dossier_pers = i.no_individu AND tp.ordre = tp.min_ordre
  
) tmp
JOIN statut_intervenant si ON si.source_code = tmp.statut
JOIN type_intervenant ti ON ti.id = si.type_intervenant_id;

---------------------------
--Modifié MATERIALIZED VIEW
--MV_INTERVENANT_PERMANENT
---------------------------
DROP MATERIALIZED VIEW "OSE"."MV_INTERVENANT_PERMANENT";
CREATE MATERIALIZED VIEW "OSE"."MV_INTERVENANT_PERMANENT" ("Z_CORPS_ID","SOURCE_ID","SOURCE_CODE","VALIDITE_DEBUT","VALIDITE_FIN") 
  BUILD IMMEDIATE
  USING INDEX REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT  USING TRUSTED CONSTRAINTS
  DISABLE QUERY REWRITE AS 
  WITH validite ( no_individu, debut, fin ) AS (
  SELECT
    no_individu, MIN( date_debut ) date_debut, MAX( date_fin ) date_fin
  FROM (
      SELECT no_individu, ch.d_deb_str_trav date_debut, ch.d_fin_str_trav date_fin FROM chercheur@harpprod ch
      WHERE ose_import.get_date_obs IS NULL OR ose_import.get_date_obs BETWEEN ch.d_deb_str_trav AND COALESCE(ch.d_fin_str_trav,ose_import.get_date_obs)
    UNION
      SELECT a.no_dossier_pers, a.d_deb_affectation date_debut, a.d_fin_affectation date_fin FROM affectation@harpprod a
      WHERE ose_import.get_date_obs IS NULL OR ose_import.get_date_obs BETWEEN a.d_deb_affectation AND COALESCE(a.d_fin_affectation,ose_import.get_date_obs)
    UNION
      SELECT fe.NO_INDIVIDU, fe.DEBUT date_debut, fe.FIN date_fin FROM ucbn_flag_enseignant@harpprod fe
      WHERE ose_import.get_date_obs IS NULL OR ose_import.get_date_obs BETWEEN fe.DEBUT AND COALESCE(fe.FIN,ose_import.get_date_obs)
  )
  GROUP BY
    no_individu
)
SELECT  
  pbs_divers__cicg.c_corps@harpprod(i.no_individu, ose_import.get_date_obs) z_corps_id,
  --null section_cnu_id
  ose_import.get_source_id('Harpege')           source_id,
  ltrim(TO_CHAR(i.no_individu,'99999999'))      source_code,
  NVL(validite.debut,to_date('01/01/1950','DD/MM/YYYY'))              validite_debut,
  validite.fin                                  validite_fin
FROM
  individu@harpprod i
  JOIN MV_HARP_INDIVIDU_STATUT his ON his.no_individu = ltrim(TO_CHAR(i.no_individu,'99999999'))
  LEFT JOIN validite ON (validite.no_individu = i.no_individu)
WHERE
  'P' = his.type_intervenant;
---------------------------
--Modifié MATERIALIZED VIEW
--MV_INTERVENANT_EXTERIEUR
---------------------------
DROP MATERIALIZED VIEW "OSE"."MV_INTERVENANT_EXTERIEUR";
CREATE MATERIALIZED VIEW "OSE"."MV_INTERVENANT_EXTERIEUR" ("SITUATION_FAMILIALE_ID","SOURCE_ID","SOURCE_CODE","VALIDITE_DEBUT","VALIDITE_FIN") 
  BUILD IMMEDIATE
  USING INDEX REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT  USING ENFORCED CONSTRAINTS
  DISABLE QUERY REWRITE AS 
  WITH validite ( no_individu, debut, fin ) AS (
  SELECT
    no_individu, MIN( date_debut ) date_debut, MAX( date_fin ) date_fin
  FROM (
      SELECT no_individu, ch.d_deb_str_trav date_debut, ch.d_fin_str_trav date_fin FROM chercheur@harpprod ch
      WHERE ose_import.get_date_obs IS NULL OR ose_import.get_date_obs BETWEEN ch.d_deb_str_trav AND COALESCE(ch.d_fin_str_trav,ose_import.get_date_obs)
    UNION
      SELECT a.no_dossier_pers, a.d_deb_affectation date_debut, a.d_fin_affectation date_fin FROM affectation@harpprod a
      WHERE ose_import.get_date_obs IS NULL OR ose_import.get_date_obs BETWEEN a.d_deb_affectation AND COALESCE(a.d_fin_affectation,ose_import.get_date_obs)
    UNION
      SELECT fe.NO_INDIVIDU, fe.DEBUT date_debut, fe.FIN date_fin FROM ucbn_flag_enseignant@harpprod fe
      WHERE ose_import.get_date_obs IS NULL OR ose_import.get_date_obs BETWEEN fe.DEBUT AND COALESCE(fe.FIN,ose_import.get_date_obs)
  )
  GROUP BY
    no_individu
) 
SELECT
--  null                                       type_intervenant_exterieur_id,
  s.id                                       situation_familiale_id,
--  null                                       regime_secu_id,
--  null                                       type_poste_id,
  ose_import.get_source_id('Harpege')        source_id,
  ltrim(TO_CHAR(i.no_individu,'99999999'))   source_code,
  nvl(validite.debut,TRUNC(SYSDATE))         validite_debut,
  validite.fin                               validite_fin
FROM
  individu@harpprod i
  JOIN MV_HARP_INDIVIDU_STATUT his ON his.no_individu = ltrim(TO_CHAR(i.no_individu,'99999999'))
  LEFT JOIN PERSONNEL@harpprod p ON (p.no_dossier_pers = i.no_individu)
  LEFT JOIN SITUATION_FAMILIALE s on (s.code = p.C_SITUATION_FAMILLE)
  LEFT JOIN validite ON (validite.no_individu = i.no_individu)
WHERE
  'E' = his.type_intervenant;

---------------------------
--Nouveau MATERIALIZED VIEW
--MV_HARP_INDIVIDU_BANQUE
---------------------------
CREATE MATERIALIZED VIEW "OSE"."MV_HARP_INDIVIDU_BANQUE" ("NO_INDIVIDU","IBAN","BIC") 
  BUILD IMMEDIATE
  USING INDEX REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT  USING ENFORCED CONSTRAINTS
  DISABLE QUERY REWRITE AS 
  WITH comptes AS (SELECT
  i.no_dossier_pers no_individu,
  rank() over(partition by i.no_dossier_pers order by d_creation) rank_compte,
  count(*) over(partition by i.no_dossier_pers) nombre_comptes,
  CASE WHEN i.no_dossier_pers IS NOT NULL THEN
    trim( NVL(i.c_pays_iso || i.cle_controle,'FR00') || ' ' ||
    substr(i.c_banque,0,4) || ' ' ||
    substr(i.c_banque,5,1) || substr(i.c_guichet,0,3) || ' ' ||
    substr(i.c_guichet,4,2) || substr(i.no_compte,0,2) || ' ' ||
    substr(i.no_compte,3,4) || ' ' ||
    substr(i.no_compte,7,4) || ' ' ||
    substr(i.no_compte,11) || i.cle_rib) ELSE NULL END IBAN,
  CASE WHEN i.no_dossier_pers IS NOT NULL THEN i.c_banque_bic || ' ' || i.c_pays_bic || ' ' || i.c_emplacement || ' ' || i.c_branche ELSE NULL END BIC
from
  individu_banque@harpprod i
)
SELECT no_individu, iban, bic FROM comptes WHERE rank_compte = nombre_comptes;

---------------------------
--Nouveau MATERIALIZED VIEW
--MV_HARP_IND_DER_STRUCT
---------------------------
CREATE MATERIALIZED VIEW "OSE"."MV_HARP_IND_DER_STRUCT" ("NO_INDIVIDU","DATE_DEPART","C_STRUCTURE") 
  BUILD IMMEDIATE
  USING INDEX REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT  USING ENFORCED CONSTRAINTS
  DISABLE QUERY REWRITE AS 
  SELECT
  no_individu,
  CASE date_depart WHEN to_date('01/01/1000','DD/MM/YYYY') THEN NULL else date_depart END date_depart,
  pbs_divers__cicg.c_structure_globale@harpprod(no_individu, CASE date_depart WHEN to_date('01/01/1000','DD/MM/YYYY') THEN SYSDATE else date_depart END ) c_structure
FROM
(
SELECT DISTINCT
  i.no_individu,
  MAX(greatest(
    CASE WHEN aa.no_seq_affectation IS NOT NULL THEN nvl(aa.d_fin_affectation,SYSDATE) ELSE to_date('01/01/1000','DD/MM/YYYY') END,
    CASE WHEN ar.no_seq_affe_rech IS NOT NULL THEN nvl(ar.d_fin_affe_rech,SYSDATE) ELSE to_date('01/01/1000','DD/MM/YYYY') END,
    CASE WHEN ufe.no_individu IS NOT NULL THEN nvl(ufe.fin,SYSDATE) ELSE to_date('01/01/1000','DD/MM/YYYY') END,
    CASE WHEN cc.no_seq_chercheur IS NOT NULL THEN nvl(cc.d_fin_str_trav,SYSDATE) ELSE to_date('01/01/1000','DD/MM/YYYY') END
  )) over(partition by i.no_individu)
   date_depart
FROM
  individu@harpprod i
  LEFT JOIN ucbn_flag_enseignant@harpprod ufe ON ufe.no_individu = i.no_individu
  LEFT JOIN chercheur@harpprod cc ON cc.no_individu = i.no_individu
  LEFT JOIN affectation@harpprod aa ON aa.no_dossier_pers = i.no_individu
  LEFT JOIN affectation_recherche@harpprod ar ON ar.no_dossier_pers = i.no_individu

) tmp1;

---------------------------
--Modifié MATERIALIZED VIEW
--MV_INTERVENANT
---------------------------
DROP MATERIALIZED VIEW "OSE"."MV_INTERVENANT";
CREATE MATERIALIZED VIEW "OSE"."MV_INTERVENANT" ("CIVILITE_ID","NOM_USUEL","PRENOM","NOM_PATRONYMIQUE","DATE_NAISSANCE","PAYS_NAISSANCE_CODE_INSEE","PAYS_NAISSANCE_LIBELLE","DEP_NAISSANCE_CODE_INSEE","DEP_NAISSANCE_LIBELLE","VILLE_NAISSANCE_CODE_INSEE","VILLE_NAISSANCE_LIBELLE","PAYS_NATIONALITE_CODE_INSEE","PAYS_NATIONALITE_LIBELLE","TEL_PRO","TEL_MOBILE","EMAIL","Z_TYPE_ID","Z_STATUT_ID","Z_STRUCTURE_ID","SOURCE_ID","SOURCE_CODE","NUMERO_INSEE","NUMERO_INSEE_CLE","NUMERO_INSEE_PROVISOIRE","IBAN","BIC") 
  BUILD IMMEDIATE
  USING INDEX REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT  USING TRUSTED CONSTRAINTS
  DISABLE QUERY REWRITE AS 
  SELECT 
  ose_import.get_civilite_id(CASE individu.c_civilite 
    WHEN 'M.' THEN 'M.' ELSE 'Mme'
  END)                                            civilite_id,
  initcap(individu.nom_usuel)                     nom_usuel,
  initcap(individu.prenom)                        prenom,
  initcap(individu.nom_patronymique)              nom_patronymique,
  individu.d_naissance                            date_naissance,
  pays_naissance.c_pays                           pays_naissance_code_insee,
  pays_naissance.ll_pays                          pays_naissance_libelle,
  departement.c_departement                       dep_naissance_code_insee,
  departement.ll_departement                      dep_naissance_libelle,
  individu.c_commune_naissance                    ville_naissance_code_insee,
  individu.ville_de_naissance                     ville_naissance_libelle,
  pays_nationalite.c_pays                         pays_nationalite_code_insee,
  pays_nationalite.ll_pays                        pays_nationalite_libelle,
  individu_telephone.no_telephone                 tel_pro,
  individu.no_tel_portable                        tel_mobile,
  --INDIVIDU_E_MAIL.NO_E_MAIL                       EMAIL,
  CASE 
    WHEN INDIVIDU_E_MAIL.NO_E_MAIL IS NULL AND individu.d_creation > SYSDATE -2 THEN 
      UCBN_LDAP.hid2mail(individu.no_individu)
    ELSE
      INDIVIDU_E_MAIL.NO_E_MAIL
  END                                             EMAIL,
  his.type_intervenant                            z_type_id,
  his.statut                                      z_statut_id,
  NVL(istr.c_structure, 'UNIV')                   z_structure_id,
  ose_import.get_source_id('Harpege')             source_id,
  ltrim(TO_CHAR(individu.no_individu,'99999999')) source_code,
--  null                                            prime_excellence_scientifique,
  code_insee.no_insee                             numero_insee,
  TO_CHAR(code_insee.cle_insee)                   numero_insee_cle,
  CASE WHEN code_insee.no_insee IS NULL THEN NULL ELSE 0 END numero_insee_provisoire,
  ib.iban iban,
  ib.bic bic
FROM
  individu@harpprod                     individu
  JOIN MV_HARP_IND_DER_STRUCT istr ON (istr.no_individu = individu.no_individu)
  JOIN mv_harp_individu_statut his ON his.no_individu = individu.no_individu
  LEFT JOIN pays@harpprod               pays_naissance ON (pays_naissance.c_pays = individu.c_pays_naissance)
  LEFT JOIN departement@harpprod        departement ON (departement.c_departement = individu.c_dept_naissance)
  LEFT JOIN pays@harpprod               pays_nationalite ON (pays_nationalite.c_pays = individu.c_pays_nationnalite)
  LEFT JOIN individu_e_mail@harpprod    individu_e_mail ON (individu_e_mail.no_individu = individu.no_individu)
  LEFT JOIN individu_telephone@harpprod individu_telephone ON (individu_telephone.no_individu = individu.no_individu AND individu_telephone.tem_tel_principal='O' AND individu_telephone.tem_tel='O')
  LEFT JOIN code_insee@harpprod         code_insee ON (code_insee.no_dossier_pers = individu.no_individu)
  LEFT JOIN mv_harp_individu_banque      ib ON (ib.no_individu = individu.no_individu);

  CREATE UNIQUE INDEX "OSE"."FORMULE_SERVICE_DU_MAJ_PK" ON "OSE"."FORMULE_SERVICE_DU_MAJ" ("INTERVENANT_ID","ANNEE_ID");

---------------------------
--Nouveau INDEX
--MV_ROLE_PK
---------------------------
  CREATE UNIQUE INDEX "OSE"."MV_ROLE_PK" ON "OSE"."MV_ROLE" ("SOURCE_CODE");
---------------------------
--Nouveau INDEX
--MV_HARP_INDIVIDU_BANQUE_PK
---------------------------
  CREATE UNIQUE INDEX "OSE"."MV_HARP_INDIVIDU_BANQUE_PK" ON "OSE"."MV_HARP_INDIVIDU_BANQUE" ("NO_INDIVIDU");
---------------------------
--Nouveau INDEX
--MV_INTERVENANT_PK
---------------------------
  CREATE UNIQUE INDEX "OSE"."MV_INTERVENANT_PK" ON "OSE"."MV_INTERVENANT" ("SOURCE_CODE");
---------------------------
--Nouveau INDEX
--MV_HARP_INDIVIDU_STATUT_PK
---------------------------
  CREATE UNIQUE INDEX "OSE"."MV_HARP_INDIVIDU_STATUT_PK" ON "OSE"."MV_HARP_INDIVIDU_STATUT" ("NO_INDIVIDU");
---------------------------
--Nouveau INDEX
--MV_INTERVENANT_EXTERIEUR_PK
---------------------------
  CREATE UNIQUE INDEX "OSE"."MV_INTERVENANT_EXTERIEUR_PK" ON "OSE"."MV_INTERVENANT_EXTERIEUR" ("SOURCE_CODE");
---------------------------
--Nouveau INDEX
--MV_HARP_IND_DER_STRUCT_PK
---------------------------
  CREATE UNIQUE INDEX "OSE"."MV_HARP_IND_DER_STRUCT_PK" ON "OSE"."MV_HARP_IND_DER_STRUCT" ("NO_INDIVIDU");
---------------------------
--Nouveau INDEX
--MV_INTERVENANT_PERMANENT_PK
---------------------------
  CREATE UNIQUE INDEX "OSE"."MV_INTERVENANT_PERMANENT_PK" ON "OSE"."MV_INTERVENANT_PERMANENT" ("SOURCE_CODE");

---------------------------
--Modifié TRIGGER
--VOLUME_HORAIRE_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."VOLUME_HORAIRE_CK"
  BEFORE INSERT OR UPDATE ON "OSE"."VOLUME_HORAIRE"
  REFERENCING FOR EACH ROW
  DECLARE
    has_validation NUMERIC;
    modified       BOOLEAN;
    intervenant_id NUMERIC;
  BEGIN
    IF :OLD.motif_non_paiement_id IS NULL AND :NEW.motif_non_paiement_id IS NOT NULL THEN
      SELECT s.intervenant_id INTO intervenant_id FROM service s WHERE s.id = :NEW.service_id;
      IF 0 = ose_divers.intervenant_has_privilege( intervenant_id, 'saisie_motif_non_paiement') THEN
        raise_application_error(-20101, 'Il est impossible d''associer un motif de non paiement à un intervenant vacataire ou BIATSS.');
      END IF;
    END IF;
    
    IF :NEW.motif_non_paiement_id IS NOT NULL AND :NEW.contrat_id IS NOT NULL THEN
      raise_application_error(-20101, 'Les heures ayant un motif de non paiement ne peuvent faire l''objet d''une contractualisation');
    END IF;

    modified := 
      NVL(:NEW.id,0) <> NVL(:OLD.id,0)
      OR NVL(:NEW.type_volume_horaire_id,0) <> NVL(:OLD.type_volume_horaire_id,0)
      OR NVL(:NEW.service_id,0) <> NVL(:OLD.service_id,0)
      OR NVL(:NEW.periode_id,0) <> NVL(:OLD.periode_id,0)
      OR NVL(:NEW.type_intervention_id,0) <> NVL(:OLD.type_intervention_id,0)
      OR NVL(:NEW.heures,0) <> NVL(:OLD.heures,0)
      OR NVL(:NEW.motif_non_paiement_id,0) <> NVL(:OLD.motif_non_paiement_id,0)
      OR NVL(:NEW.validite_debut,SYSDATE) <> NVL(:OLD.validite_debut,SYSDATE)
      OR NVL(:NEW.validite_fin,SYSDATE) <> NVL(:OLD.validite_fin,SYSDATE)
      OR NVL(:NEW.histo_creation,SYSDATE) <> NVL(:OLD.histo_creation,SYSDATE)
      OR NVL(:NEW.histo_createur_id,0) <> NVL(:OLD.histo_createur_id,0)
      OR NVL(:NEW.histo_destruction,SYSDATE) <> NVL(:OLD.histo_destruction,SYSDATE)
      OR NVL(:NEW.histo_destructeur_id,0) <> NVL(:OLD.histo_destructeur_id,0);
    
    SELECT
      COUNT(*)
    INTO
      has_validation
    FROM
      VALIDATION_VOL_HORAIRE vvh
      JOIN validation v ON v.id = VVH.VALIDATION_ID
    WHERE
      V.HISTO_DESTRUCTION IS NULL
      AND vvh.VOLUME_HORAIRE_ID  = :NEW.ID;
      
    IF modified AND 0 <> has_validation THEN
      raise_application_error(-20101, 'Il est impossible de modifier des heures déjà validées.');
    END IF;
  END;
/
---------------------------
--Modifié TRIGGER
--VALIDATION_VOL_HORAIRE_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."VALIDATION_VOL_HORAIRE_CK"
  BEFORE DELETE OR UPDATE ON "OSE"."VALIDATION_VOL_HORAIRE"
  REFERENCING FOR EACH ROW
  DECLARE 
  contrat_blinde NUMERIC;  
  pragma autonomous_transaction;
BEGIN
  
SELECT
  count(*) INTO contrat_blinde
FROM
  volume_horaire vh
  JOIN contrat c ON c.id = vh.contrat_id AND 1 = ose_divers.comprise_entre( c.histo_creation, c.histo_destruction )
WHERE
  vh.id = :OLD.volume_horaire_id;
  
  -- Si des volumes horaires ont déjà fait l'objet de contrats alors pas de dévalidation possible des heures
  IF contrat_blinde = 1 THEN
    raise_application_error(-20101, 'La dévalidation est impossible car un contrat a déjà été édité sur la base de ces heures.');
  END IF;

END;
/
---------------------------
--Modifié TRIGGER
--SERVICE_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."SERVICE_CK"
  BEFORE INSERT OR UPDATE ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  DECLARE 
  etablissement integer;
  structure_ens_id NUMERIC;  
BEGIN
  
  etablissement := OSE_PARAMETRE.GET_ETABLISSEMENT();
  
  IF :NEW.etablissement_id = etablissement AND :NEW.element_pedagogique_id IS NULL THEN
    raise_application_error(-20101, 'Un enseignement doit obligatoirement être renseigné si le service est réalisé en interne.');
  END IF;

  IF OSE_DIVERS.INTERVENANT_HAS_PRIVILEGE(:NEW.intervenant_id, 'saisie_service') = 0 THEN
    raise_application_error(-20101, 'Il est impossible de saisir des services pour cet intervenant.');
  END IF;

  IF :NEW.etablissement_id <> etablissement AND OSE_DIVERS.INTERVENANT_HAS_PRIVILEGE(:NEW.intervenant_id, 'saisie_service_exterieur') = 0 THEN
    raise_application_error(-20101, 'Les intervenants vacataires n''ont pas la possibilité de renseigner des enseignements pris à l''extérieur.');
  END IF;

  IF :NEW.element_pedagogique_id <> :OLD.element_pedagogique_id THEN
    SELECT structure_id INTO structure_ens_id FROM element_pedagogique WHERE id = :NEW.element_pedagogique_id;
    :NEW.structure_ens_id := structure_ens_id;
  END IF;

  --IF :OLD.id IS NOT NULL AND ( :NEW.etablissement_id <> :OLD.etablissement_id OR :NEW.element_pedagogique_id <> :OLD.element_pedagogique_id ) THEN
    --UPDATE volume_horaire SET histo_destruction = SYSDATE, histo_destructeur_id = :NEW.histo_modificateur_id WHERE service_id = :NEW.id;
  --END IF;

END;
/

---------------------------
--Nouveau TRIGGER
--ELEMENT_PEDAGOGIQUE_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."ELEMENT_PEDAGOGIQUE_CK"
  BEFORE INSERT OR UPDATE ON "OSE"."ELEMENT_PEDAGOGIQUE"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :NEW.source_id <> OSE_IMPORT.GET_SOURCE_ID('OSE') THEN RETURN; END IF; -- impossible de checker car l'UPD par import se fait champ par champ...
  
  IF :NEW.fi = 0 AND :NEW.fc = 0 AND :NEW.fa = 0 THEN
    raise_application_error(-20101, 'Un enseignement doit obligatoirement être au moins en FI, FC ou FA');
  END IF;

  IF 1 <> ROUND(:NEW.taux_fi + :NEW.taux_fc + :NEW.taux_fa, 2) THEN
    raise_application_error(-20101, 'Le total des taux FI, FC et FA n''est pas égal à 1');
  END IF;

END;
/
---------------------------
--Nouveau TRIGGER
--AFFECTATION_RECHERCHE_CK
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."AFFECTATION_RECHERCHE_CK"
  BEFORE INSERT OR UPDATE ON "OSE"."AFFECTATION_RECHERCHE"
  REFERENCING FOR EACH ROW
  DECLARE
  pragma autonomous_transaction;
  rows_found integer;
BEGIN

  if :NEW.histo_destruction IS NOT NULL THEN RETURN; END IF; -- pas de check si c'est pour une historicisation
  
  select 
    count(*) into rows_found
  from
    ose.affectation_recherche
  where
    intervenant_id = :new.intervenant_id
    AND structure_id = :new.structure_id
    AND histo_destruction is null
    AND id <> :NEW.id;
  
  if rows_found > 0 THEN
    raise_application_error(-20101, 'Un enseignant (id=' || :NEW.intervenant_id || ') ne peut pas avoir plusieurs affectations de recherche pour une même structure');
  END IF;

END;
/
---------------------------
--Nouveau PACKAGE
--UNICAEN_OSE_FORMULE
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."UNICAEN_OSE_FORMULE" AS 

  PROCEDURE CALCUL_RESULTAT_V2( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC );

END UNICAEN_OSE_FORMULE;
/
---------------------------
--Nouveau PACKAGE
--OSE_WORKFLOW
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_WORKFLOW" AS 

  PROCEDURE add_intervenant_to_update (p_intervenant_id NUMERIC);
  PROCEDURE update_all_intervenants_etapes;
  PROCEDURE update_intervenants_etapes;
  PROCEDURE update_intervenant_etapes (p_intervenant_id NUMERIC);
  
  FUNCTION peut_saisir_dossier (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION peut_saisir_service (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION possede_services (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION peut_saisir_referentiel (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION peut_saisir_piece_jointe (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION necessite_agrement_cr (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION necessite_agrement_ca (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION necessite_contrat (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;

  FUNCTION possede_dossier (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION dossier_valide (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION service_valide (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION referentiel_valide (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION pieces_jointes_fournies (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION agrement_cr_fourni (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION agrement_ca_fourni (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;
  FUNCTION possede_contrat (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC;

END OSE_WORKFLOW;
/
---------------------------
--Nouveau PACKAGE
--OSE_TEST_FORMULE
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_TEST_FORMULE" AS 

  -- SET SERVEROUTPUT ON

  PROCEDURE TEST_MODIFY_INTERVENANT       ( intervenant_id NUMERIC );
  PROCEDURE TEST_MODIFY_SERVICE_DU        ( intervenant_id NUMERIC );
  PROCEDURE TEST_MODIFY_SERVICE_DU_MODIF  ( intervenant_id NUMERIC );
  PROCEDURE TEST_MODIFY_MOTIF_MOD_SERV    ( intervenant_id NUMERIC );
  PROCEDURE TEST_MODIFY_REFERENTIEL       ( intervenant_id NUMERIC );
  PROCEDURE TEST_MODIFY_SERVICE           ( intervenant_id NUMERIC );

  PROCEDURE TEST_MODIFY_ELEMENT           ( service_id NUMERIC );
  PROCEDURE TEST_MODIFY_MODULATEUR        ( service_id NUMERIC );
  PROCEDURE TEST_MODIFY_VOLUME_HORAIRE    ( service_id NUMERIC );
  
  PROCEDURE TEST_MODIFY_TYPE_INTERVENTION ( volume_horaire_id NUMERIC );
  PROCEDURE TEST_MODIFY_VALIDATION        ( volume_horaire_id NUMERIC );
  PROCEDURE TEST_MODIFY_CONTRAT           ( volume_horaire_id NUMERIC );

  FUNCTION GET_ANNEE RETURN NUMERIC;
END OSE_TEST_FORMULE;
/
---------------------------
--Nouveau PACKAGE
--OSE_TEST
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_TEST" AS 

  -- SET SERVEROUTPUT ON

  PROCEDURE SHOW_SUCCES;

  PROCEDURE HIDE_SUCCES;

  PROCEDURE ECHO( MSG CLOB );

  PROCEDURE INIT;

  PROCEDURE SHOW_STATS;

  PROCEDURE DEBUT( TEST_NAME CLOB );
  
  PROCEDURE FIN;

  PROCEDURE ASSERT( condition BOOLEAN, MSG CLOB );
  
  PROCEDURE DELETE_TEST_DATA;

  FUNCTION GET_USER RETURN NUMERIC;

  FUNCTION GET_SOURCE RETURN NUMERIC;


  FUNCTION GET_CIVILITE( libelle_court VARCHAR2 DEFAULT NULL ) RETURN civilite%rowtype;

  FUNCTION GET_TYPE_INTERVENANT( code VARCHAR2 DEFAULT NULL ) RETURN type_intervenant%rowtype;

  FUNCTION GET_TYPE_INTERVENANT_BY_ID( id NUMERIC ) RETURN type_intervenant%rowtype;

  FUNCTION GET_STATUT_INTERVENANT( source_code VARCHAR2 DEFAULT NULL ) RETURN statut_intervenant%rowtype;
  
  FUNCTION GET_STATUT_INTERVENANT_BY_ID( id NUMERIC ) RETURN statut_intervenant%rowtype;

  FUNCTION GET_TYPE_STRUCTURE( code VARCHAR2 DEFAULT NULL ) RETURN type_structure%rowtype;

  FUNCTION GET_STRUCTURE( source_code VARCHAR2 DEFAULT NULL ) RETURN structure%rowtype;
  
  FUNCTION GET_STRUCTURE_BY_ID( id NUMERIC ) RETURN structure%rowtype;
  
  FUNCTION GET_STRUCTURE_ENS_BY_NIVEAU( niveau NUMERIC ) RETURN structure%rowtype;

  FUNCTION GET_STRUCTURE_UNIV RETURN "STRUCTURE"%rowtype;

  FUNCTION ADD_STRUCTURE(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    parente_id    NUMERIC,
    type_id       NUMERIC,
    source_code   VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_INTERVENANT( source_code VARCHAR2 DEFAULT NULL ) RETURN intervenant%rowtype;

  FUNCTION GET_INTERVENANT_BY_ID( id NUMERIC DEFAULT NULL ) RETURN intervenant%rowtype;

  FUNCTION GET_INTERVENANT_BY_STATUT( statut_id NUMERIC ) RETURN intervenant%rowtype;

  FUNCTION GET_INTERVENANT_BY_TYPE( type_id NUMERIC ) RETURN intervenant%rowtype;

  FUNCTION ADD_INTERVENANT(
    civilite_id     NUMERIC,
    nom_usuel       VARCHAR2,
    prenom          VARCHAR2,
    date_naissance  DATE,
    email           VARCHAR2,
    statut_id       NUMERIC,
    structure_id    NUMERIC,
    source_code     VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_GROUPE_TYPE_FORMATION( source_code VARCHAR2 DEFAULT NULL ) RETURN groupe_type_formation%rowtype;
  
  FUNCTION ADD_GROUPE_TYPE_FORMATION(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    source_code   VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_TYPE_FORMATION( source_code VARCHAR2 ) RETURN type_formation%rowtype;
  
  FUNCTION ADD_TYPE_FORMATION(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    groupe_id     NUMERIC,
    source_code   VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_ETAPE( source_code VARCHAR2 DEFAULT NULL ) RETURN etape%rowtype;
  
  FUNCTION ADD_ETAPE(
    libelle           VARCHAR2,
    type_formation_id NUMERIC,
    niveau            NUMERIC,
    structure_id      NUMERIC,
    source_code       VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_PERIODE( code VARCHAR2 DEFAULT NULL ) RETURN periode%rowtype;

  FUNCTION GET_ELEMENT_PEDAGOGIQUE( source_code VARCHAR2 DEFAULT NULL ) RETURN element_pedagogique%rowtype;
  
  FUNCTION GET_ELEMENT_PEDAGOGIQUE_BY_ID( ID NUMERIC ) RETURN element_pedagogique%rowtype;
  
  FUNCTION ADD_ELEMENT_PEDAGOGIQUE(
    libelle       VARCHAR2,
    etape_id      NUMERIC,
    structure_id  NUMERIC,
    periode_id    NUMERIC,
    taux_foad     FLOAT,
    taux_fi       FLOAT,
    taux_fc       FLOAT,
    taux_fa       FLOAT,
    source_code   VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_TYPE_MODULATEUR( code VARCHAR2 DEFAULT NULL ) RETURN type_modulateur%rowtype;
  
  FUNCTION ADD_TYPE_MODULATEUR(
    code        VARCHAR2,
    libelle     VARCHAR2,
    publique    NUMERIC,
    obligatoire NUMERIC
  ) RETURN NUMERIC;

  FUNCTION GET_MODULATEUR( code VARCHAR2 DEFAULT NULL ) RETURN modulateur%rowtype;
  
  FUNCTION ADD_MODULATEUR(
    code                      VARCHAR2,
    libelle                   VARCHAR2,
    type_modulateur_id        NUMERIC,
    ponderation_service_du    FLOAT,
    ponderation_service_compl FLOAT
  ) RETURN NUMERIC;

  FUNCTION ADD_ELEMENT_MODULATEUR(
    element_id    NUMERIC,
    modulateur_id NUMERIC,
    annee_id      NUMERIC
  ) RETURN NUMERIC;

  FUNCTION GET_FONCTION_REFERENTIEL( code VARCHAR2 DEFAULT NULL ) RETURN fonction_referentiel%rowtype;
  
  FUNCTION ADD_FONCTION_REFERENTIEL(
    code          VARCHAR2,
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    plafond       FLOAT
  ) RETURN NUMERIC;
  
  FUNCTION ADD_SERVICE_REFERENTIEL(
    fonction_id     NUMERIC,
    intervenant_id  NUMERIC,
    structure_id    NUMERIC,
    annee_id        NUMERIC,
    heures          FLOAT
  ) RETURN NUMERIC;
  
  FUNCTION ADD_MODIFICATION_SERVICE_DU(
    intervenant_id  NUMERIC,
    annee_id        NUMERIC,
    heures          FLOAT,
    motif_id        NUMERIC,
    commentaires    CLOB DEFAULT NULL
  ) RETURN NUMERIC;

  FUNCTION GET_MOTIF_MODIFICATION_SERVICE( code VARCHAR2 DEFAULT NULL, multiplicateur FLOAT DEFAULT NULL ) RETURN motif_modification_service%rowtype;

  FUNCTION GET_ETABLISSEMENT( source_code VARCHAR2 DEFAULT NULL ) RETURN etablissement%rowtype;
  
  FUNCTION GET_SERVICE_BY_ID( id NUMERIC ) RETURN service%rowtype;

  FUNCTION ADD_SERVICE(
    intervenant_id          NUMERIC,
    annee_id                NUMERIC,
    element_pedagogique_id  NUMERIC,
    etablissement_id        NUMERIC DEFAULT NULL
  ) RETURN NUMERIC;

  FUNCTION GET_ETAT_VOLUME_HORAIRE( code VARCHAR2 DEFAULT NULL ) RETURN etat_volume_horaire%rowtype;
  
  FUNCTION GET_TYPE_VOLUME_HORAIRE( code VARCHAR2 DEFAULT NULL ) RETURN type_volume_horaire%rowtype;
  
  FUNCTION GET_TYPE_INTERVENTION( code VARCHAR2 DEFAULT NULL ) RETURN type_intervention%rowtype;

  FUNCTION GET_TYPE_INTERVENTION_BY_ID( id NUMERIC ) RETURN type_intervention%rowtype;

  FUNCTION GET_TYPE_INTERVENTION_BY_ELEMT( ELEMENT_ID NUMERIC ) RETURN type_intervention%rowtype;

  FUNCTION GET_MOTIF_NON_PAIEMENT( code VARCHAR2 DEFAULT NULL ) RETURN motif_non_paiement%rowtype;
  
  FUNCTION GET_VOLUME_HORAIRE( id NUMERIC DEFAULT NULL ) RETURN volume_horaire%rowtype;
  
  FUNCTION ADD_VOLUME_HORAIRE(
    type_volume_horaire_id  NUMERIC,
    service_id              NUMERIC,
    periode_id              NUMERIC,
    type_intervention_id    NUMERIC,
    heures                  FLOAT,
    motif_non_paiement_id   NUMERIC DEFAULT NULL
  ) RETURN NUMERIC;

  FUNCTION ADD_VALIDATION_VOLUME_HORAIRE(
    structure_id      NUMERIC DEFAULT NULL,
    intervenant_id    NUMERIC DEFAULT NULL,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL
  ) RETURN NUMERIC;

  PROCEDURE DEL_VALIDATION_VOLUME_HORAIRE(
    structure_id      NUMERIC DEFAULT NULL,
    intervenant_id    NUMERIC DEFAULT NULL,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL,
    validation_id     NUMERIC DEFAULT NULL
  );

  FUNCTION GET_CONTRAT_BY_ID( ID NUMERIC ) RETURN contrat%rowtype;

  FUNCTION ADD_CONTRAT(
    structure_id      NUMERIC DEFAULT NULL,
    intervenant_id    NUMERIC DEFAULT NULL,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL    
  ) RETURN NUMERIC;
  
  FUNCTION SIGNATURE_CONTRAT( contrat_id NUMERIC ) RETURN NUMERIC;
  
  FUNCTION ADD_CONTRAT_VALIDATION( contrat_id NUMERIC ) RETURN NUMERIC;

  FUNCTION DEL_CONTRAT_VALIDATION( contrat_id NUMERIC ) RETURN NUMERIC;

  FUNCTION GET_TYPE_VALIDATION( code VARCHAR2 DEFAULT NULL ) RETURN type_validation%rowtype;
END OSE_TEST;
/

---------------------------
--Modifié PACKAGE
--OSE_IMPORT
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_IMPORT" IS

  v_current_user INTEGER := 1;
  v_date_obs Date := SYSDATE;
 
  FUNCTION get_date_obs RETURN Date;
 
  PROCEDURE set_current_user(p_current_user IN INTEGER);
  FUNCTION get_current_user return INTEGER;

  FUNCTION get_type_intervenant_id( src_code varchar2 ) RETURN Numeric;
  FUNCTION get_civilite_id( src_libelle_court varchar2 ) RETURN Numeric;
  FUNCTION get_source_id( src_code Varchar2 ) return Numeric;

  PROCEDURE SYNC_LOG( message CLOB );
  PROCEDURE SYNC_MVS;
  PROCEDURE SYNC_VOLUME_HORAIRE_ENS;
  PROCEDURE SYNC_TYPE_FORMATION;
  PROCEDURE SYNC_STRUCTURE;
  PROCEDURE SYNC_ROLE;
  PROCEDURE SYNC_PERSONNEL;
  PROCEDURE SYNC_INTERVENANT_PERMANENT;
  PROCEDURE SYNC_INTERVENANT_EXTERIEUR;
  PROCEDURE SYNC_INTERVENANT;
  PROCEDURE SYNC_GROUPE_TYPE_FORMATION;
  PROCEDURE SYNC_ETAPE;
  PROCEDURE SYNC_ETABLISSEMENT;
  PROCEDURE SYNC_ELEMENT_PEDAGOGIQUE;
  PROCEDURE SYNC_EFFECTIFS;
  PROCEDURE SYNC_ELEMENT_TAUX_REGIMES;
  PROCEDURE SYNC_ELEMENT_DISCIPLINE;
  PROCEDURE SYNC_DISCIPLINE;
  PROCEDURE SYNC_CORPS;
  PROCEDURE SYNC_CHEMIN_PEDAGOGIQUE;
  PROCEDURE SYNC_AFFECTATION_RECHERCHE;
  PROCEDURE SYNC_ADRESSE_STRUCTURE;
  PROCEDURE SYNC_ADRESSE_INTERVENANT;
  PROCEDURE SYNC_TYPE_INTERVENTION_EP;
  PROCEDURE SYNC_TYPE_MODULATEUR_EP;
  PROCEDURE SYNC_TABLES;
  PROCEDURE SYNCHRONISATION;
  
  FUNCTION IN_COLUMN_LIST( VALEUR VARCHAR2, CHAMPS CLOB ) RETURN NUMERIC;

  -- AUTOMATIC GENERATION --

  PROCEDURE MAJ_VOLUME_HORAIRE_ENS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_TYPE_MODULATEUR_EP(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_TYPE_INTERVENTION_EP(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_TYPE_FORMATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ROLE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_PERSONNEL(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_INTERVENANT_PERMANENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_INTERVENANT_EXTERIEUR(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_INTERVENANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_GROUPE_TYPE_FORMATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ETAPE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ETABLISSEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ELEMENT_TAUX_REGIMES(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ELEMENT_PEDAGOGIQUE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ELEMENT_DISCIPLINE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_EFFECTIFS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_DISCIPLINE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_CORPS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_CHEMIN_PEDAGOGIQUE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_AFFECTATION_RECHERCHE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ADRESSE_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ADRESSE_INTERVENANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');

  -- END OF AUTOMATIC GENERATION --
END ose_import;
/
---------------------------
--Modifié PACKAGE
--OSE_FORMULE
---------------------------
CREATE OR REPLACE PACKAGE "OSE"."OSE_FORMULE" AS 

  FUNCTION  GET_DATE_OBS RETURN DATE;
  FUNCTION  SET_DATE_OBS( DATE_OBS DATE DEFAULT NULL ) RETURN DATE;

  FUNCTION  GET_DEF_SERVICE_DU( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC ) RETURN formule_service_du%rowtype;
  FUNCTION      GET_SERVICE_DU( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC ) RETURN formule_service_du%rowtype;
  FUNCTION     CALC_SERVICE_DU( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC ) RETURN formule_service_du%rowtype;
  PROCEDURE IDT_MAJ_SERVICE_DU( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC );
  PROCEDURE     MAJ_SERVICE_DU( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC );
--  PROCEDURE MAJ_ALL_SERVICE_DU;
--  PROCEDURE MAJ_IDT_SERVICE_DU;

  FUNCTION  GET_DEF_REFERENTIEL( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, STRUCTURE_ENS_ID NUMERIC ) RETURN formule_referentiel%rowtype;
  FUNCTION      GET_REFERENTIEL( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, STRUCTURE_ENS_ID NUMERIC ) RETURN formule_referentiel%rowtype;
  FUNCTION     CALC_REFERENTIEL( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, STRUCTURE_ENS_ID NUMERIC ) RETURN formule_referentiel%rowtype;
  PROCEDURE IDT_MAJ_REFERENTIEL( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, STRUCTURE_ENS_ID NUMERIC );
  PROCEDURE     MAJ_REFERENTIEL( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, STRUCTURE_ENS_ID NUMERIC );
--  PROCEDURE MAJ_ALL_REFERENTIEL;
--  PROCEDURE MAJ_IDT_REFERENTIEL;

  FUNCTION  GET_DEF_SERVICE( SERVICE_ID NUMERIC ) RETURN formule_service%rowtype;
  FUNCTION      GET_SERVICE( SERVICE_ID NUMERIC ) RETURN formule_service%rowtype;
  FUNCTION     CALC_SERVICE( SERVICE_ID NUMERIC ) RETURN formule_service%rowtype;
  PROCEDURE IDT_MAJ_SERVICE( SERVICE_ID NUMERIC );
  PROCEDURE     MAJ_SERVICE( SERVICE_ID NUMERIC );
--  PROCEDURE MAJ_ALL_SERVICE;
--  PROCEDURE MAJ_IDT_SERVICE;

  FUNCTION  GET_DEF_VOLUME_HORAIRE( VOLUME_HORAIRE_ID NUMERIC ) RETURN formule_volume_horaire%rowtype;
  FUNCTION      GET_VOLUME_HORAIRE( VOLUME_HORAIRE_ID NUMERIC ) RETURN formule_volume_horaire%rowtype;
  FUNCTION     CALC_VOLUME_HORAIRE( VOLUME_HORAIRE_ID NUMERIC ) RETURN formule_volume_horaire%rowtype;
  PROCEDURE IDT_MAJ_VOLUME_HORAIRE( VOLUME_HORAIRE_ID NUMERIC );
  PROCEDURE     MAJ_VOLUME_HORAIRE( VOLUME_HORAIRE_ID NUMERIC );
--  PROCEDURE MAJ_ALL_VOLUME_HORAIRE;
-- PROCEDURE MAJ_IDT_VOLUME_HORAIRE;

  FUNCTION  GET_DEF_RESULTAT( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) RETURN formule_resultat%rowtype;
  FUNCTION      GET_RESULTAT( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) RETURN formule_resultat%rowtype;
  PROCEDURE IDT_MAJ_RESULTAT( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC DEFAULT NULL, ETAT_VOLUME_HORAIRE_ID NUMERIC DEFAULT NULL );
  PROCEDURE     MAJ_RESULTAT( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC );
  PROCEDURE     MAJ_RESULTAT( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC );
  PROCEDURE    SAVE_RESULTAT( fr formule_resultat%rowtype );

--  PROCEDURE MAJ_ALL_RESULTAT;
--  PROCEDURE MAJ_IDT_RESULTAT;

  PROCEDURE MAJ_ALL_IDT; -- mise à jour de tous les items identifiés
  PROCEDURE MAJ_ALL;     -- mise à jour de TOUTES les données ! ! ! !

  PROCEDURE REGISTER_SIGNAL;

  PROCEDURE UNREGISTER_SIGNAL;

  PROCEDURE RUN_SIGNAL;

END OSE_FORMULE;

/
---------------------------
--Nouveau PACKAGE BODY
--UNICAEN_OSE_FORMULE
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."UNICAEN_OSE_FORMULE" AS

  TYPE t_valeurs IS TABLE OF FLOAT INDEX BY PLS_INTEGER;
  TYPE t_vh_ids  IS TABLE OF PLS_INTEGER INDEX BY PLS_INTEGER;

  TYPE t_tableau IS RECORD (
    valeurs t_valeurs,
    total   FLOAT
  );

  TYPE t_liste_tableaux   IS VARRAY (100) OF PLS_INTEGER;
  TYPE t_tableaux         IS TABLE OF t_tableau                       INDEX BY PLS_INTEGER;
  TYPE t_referentiels     IS TABLE OF formule_referentiel%rowtype     INDEX BY PLS_INTEGER;
  TYPE t_services         IS TABLE OF formule_service%rowtype         INDEX BY PLS_INTEGER;
  TYPE t_volumes_horaires IS TABLE OF formule_volume_horaire%rowtype  INDEX BY PLS_INTEGER;

  liste_tableaux        t_liste_tableaux;
  referentiels          t_referentiels;
  services              t_services;
  volumes_horaires      t_volumes_horaires;
  t                     t_tableaux;
  service_restant_du    t_valeurs;
  resultat              formule_resultat%rowtype;


  FUNCTION C_11( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
    s  formule_service%rowtype;
    taux_fa float;
  BEGIN
    s  := services( vh.service_id );

    IF NVL(s.structure_ens_id,0) = NVL(s.structure_aff_id,0) THEN
      IF s.taux_fc = 0 THEN taux_fa := s.taux_fa; ELSE taux_fa := 0; END IF;
      RETURN vh.heures * ( s.taux_fi + taux_fa );
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_12( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
    s  formule_service%rowtype;
    taux_fa float;
  BEGIN
    s  := services( vh.service_id );
  
    IF NVL(s.structure_ens_id,0) <> NVL(s.structure_aff_id,0) THEN
      IF s.taux_fc = 0 THEN taux_fa := s.taux_fa; ELSE taux_fa := 0; END IF;
      RETURN vh.heures * ( s.taux_fi + taux_fa );
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_13( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
    s  formule_service%rowtype;
    taux_fa float;
  BEGIN
    s  := services( vh.service_id );
  
    IF NVL(s.structure_ens_id,0) = NVL(s.structure_aff_id,0) THEN
      IF s.taux_fc > 0 THEN taux_fa := s.taux_fa; ELSE taux_fa := 0; END IF;
      RETURN vh.heures * ( s.taux_fc + taux_fa );
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_14( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
    s  formule_service%rowtype;
    taux_fa float;
  BEGIN
    s  := services( vh.service_id );
  
    IF NVL(s.structure_ens_id,0) <> NVL(s.structure_aff_id,0) THEN
      IF s.taux_fc > 0 THEN taux_fa := s.taux_fa; ELSE taux_fa := 0; END IF;
      RETURN vh.heures * ( s.taux_fc + taux_fa );
    ELSE
      RETURN 0;
    END IF;
  END;  

  FUNCTION C_15( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    IF NVL(fr.structure_aff_id,0) = NVL(fr.structure_ens_id,0) THEN
      RETURN fr.referentiel;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_16( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    IF NVL(fr.structure_aff_id,0) <> NVL(fr.structure_ens_id,0) AND NVL(fr.structure_ens_id,0) <> ose_divers.STRUCTURE_UNIV_GET_ID THEN
      RETURN fr.referentiel;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_17( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    IF NVL(fr.structure_ens_id,0) = ose_divers.STRUCTURE_UNIV_GET_ID THEN
      RETURN fr.referentiel;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_21( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(11).valeurs(vh.id) * vh.taux_service_du;
  END;

  FUNCTION C_22( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(12).valeurs(vh.id) * vh.taux_service_du;
  END;
  
  FUNCTION C_23( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(13).valeurs(vh.id) * vh.taux_service_du;
  END;
  
  FUNCTION C_24( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(14).valeurs(vh.id) * vh.taux_service_du;
  END;

  FUNCTION C_25( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(15).valeurs( fr.id );
  END;
  
  FUNCTION C_26( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(16).valeurs( fr.id );
  END;
  
  FUNCTION C_27( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(17).valeurs( fr.id );
  END;

  FUNCTION C_31( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(21).total > 0 THEN
      RETURN t(21).valeurs(vh.id) / t(21).total;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_32( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(22).total > 0 THEN
      RETURN t(22).valeurs(vh.id) / t(22).total;
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C_33( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(23).total > 0 THEN
      RETURN t(23).valeurs(vh.id) / t(23).total;
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C_34( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(24).total > 0 THEN
      RETURN t(24).valeurs(vh.id) / t(24).total;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_35( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(25).total > 0 THEN
      RETURN t(25).valeurs(fr.id) / t(25).total;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_36( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(26).total > 0 THEN
      RETURN t(26).valeurs(fr.id) / t(26).total;
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C_37( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(27).total > 0 THEN
      RETURN t(27).valeurs(fr.id) / t(27).total;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_41 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( resultat.service_du - t(21).total, 0 );
  END;

  FUNCTION C_42 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( service_restant_du(41) - t(22).total, 0 );
  END;

  FUNCTION C_43 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( service_restant_du(42) - t(23).total, 0 );
  END;

  FUNCTION C_44 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( service_restant_du(43) - t(24).total, 0 );
  END;
  
  FUNCTION C_45 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( service_restant_du(44) - t(25).total, 0 );
  END;

  FUNCTION C_46 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( service_restant_du(45) - t(26).total, 0 );
  END;

  FUNCTION C_47 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( service_restant_du(46) - t(27).total, 0 );
  END;

  FUNCTION C_51( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( resultat.service_du, t(21).total ) * t(31).valeurs(vh.id);
  END;

  FUNCTION C_52( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( service_restant_du(41), t(22).total ) * t(32).valeurs(vh.id);
  END;

  FUNCTION C_53( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( service_restant_du(42), t(23).total ) * t(33).valeurs(vh.id);
  END;

  FUNCTION C_54( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( service_restant_du(43), t(24).total ) * t(34).valeurs(vh.id);
  END;

  FUNCTION C_55( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( service_restant_du(44), t(25).total ) * t(35).valeurs(fr.id);
  END;

  FUNCTION C_56( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( service_restant_du(45), t(26).total ) * t(36).valeurs(fr.id);
  END;
  
  FUNCTION C_57( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( service_restant_du(46), t(27).total ) * t(37).valeurs(fr.id);
  END;  

  FUNCTION C_61( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(21).valeurs(vh.id) > 0 THEN
      RETURN t(51).valeurs(vh.id) / t(21).valeurs(vh.id);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_62( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(22).valeurs(vh.id) > 0 THEN
      RETURN t(52).valeurs(vh.id) / t(22).valeurs(vh.id);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_63( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(23).valeurs(vh.id) > 0 THEN
      RETURN t(53).valeurs(vh.id) / t(23).valeurs(vh.id);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_64( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(24).valeurs(vh.id) > 0 THEN
      RETURN t(54).valeurs(vh.id) / t(24).valeurs(vh.id);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_65( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(25).valeurs(fr.id) > 0 THEN
      RETURN t(55).valeurs(fr.id) / t(25).valeurs(fr.id);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_66( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(26).valeurs(fr.id) > 0 THEN
      RETURN t(56).valeurs(fr.id) / t(26).valeurs(fr.id);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_67( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    IF t(27).valeurs(fr.id) > 0 THEN
      RETURN t(57).valeurs(fr.id) / t(27).valeurs(fr.id);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C_71( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    IF service_restant_du(47) > 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - t(61).valeurs(vh.id);
    END IF;
  END;

  FUNCTION C_72( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    IF service_restant_du(47) > 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - t(62).valeurs(vh.id);
    END IF;
  END;

  FUNCTION C_73( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    IF service_restant_du(47) > 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - t(63).valeurs(vh.id);
    END IF;
  END;

  FUNCTION C_74( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    IF service_restant_du(47) > 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - t(64).valeurs(vh.id);
    END IF;
  END;

  FUNCTION C_75( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    IF service_restant_du(47) > 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - t(65).valeurs(fr.id);
    END IF;
  END;

  FUNCTION C_76( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    IF service_restant_du(47) > 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - t(66).valeurs(fr.id);
    END IF;
  END;
  
  FUNCTION C_77( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    IF service_restant_du(47) > 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - t(67).valeurs(fr.id);
    END IF;
  END;
  
  FUNCTION C_81( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(11).valeurs(vh.id) * vh.taux_service_compl * t(71).valeurs(vh.id);
  END;

  FUNCTION C_82( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(12).valeurs(vh.id) * vh.taux_service_compl * t(72).valeurs(vh.id);
  END;

  FUNCTION C_83( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(13).valeurs(vh.id) * vh.taux_service_compl * t(73).valeurs(vh.id);
  END;
  
  FUNCTION C_84( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(14).valeurs(vh.id) * vh.taux_service_compl * t(74).valeurs(vh.id);
  END;

  FUNCTION C_85( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(15).valeurs(fr.id) * t(75).valeurs(fr.id);
  END;

  FUNCTION C_86( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(16).valeurs(fr.id) * t(76).valeurs(fr.id);
  END;

  FUNCTION C_87( fr formule_referentiel%rowtype ) RETURN FLOAT IS
  BEGIN
    RETURN t(17).valeurs(fr.id) * t(77).valeurs(fr.id);
  END;

  FUNCTION C_93( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
    s  formule_service%rowtype;
  BEGIN
    s  := services( vh.service_id );

    IF s.taux_fc > 0 THEN
      RETURN t(83).valeurs(vh.id) * s.ponderation_service_compl;
    ELSE
      RETURN t(83).valeurs(vh.id);
    END IF;
  END;
  
  FUNCTION C_94( vh formule_volume_horaire%rowtype ) RETURN FLOAT IS
    s  formule_service%rowtype;
  BEGIN
    s  := services( vh.service_id );

    IF s.taux_fc > 0 THEN
      RETURN t(84).valeurs(vh.id) * s.ponderation_service_compl;
    ELSE
      RETURN t(84).valeurs(vh.id);
    END IF;    
  END;





  PROCEDURE CALCUL_RESULTAT_V2( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) IS
    service_du       formule_service_du%rowtype;
    current_tableau  PLS_INTEGER;
    id            PLS_INTEGER;
    val           FLOAT;
    etat_volume_horaire_ordre NUMERIC;
  BEGIN
    -- Initialisation
    liste_tableaux := t_liste_tableaux();
    referentiels.delete;
    services.delete;
    volumes_horaires.delete;
    t.delete;
    service_restant_du.delete;
    resultat := OSE_FORMULE.GET_RESULTAT( INTERVENANT_ID, ANNEE_ID, TYPE_VOLUME_HORAIRE_ID, ETAT_VOLUME_HORAIRE_ID );
    resultat.service := 0;
    
    SELECT ordre INTO etat_volume_horaire_ordre FROM etat_volume_horaire WHERE id = ETAT_VOLUME_HORAIRE_ID;

    service_du := OSE_FORMULE.GET_SERVICE_DU( resultat.intervenant_id, resultat.annee_id );

    FOR fr IN (
      SELECT * FROM formule_referentiel fr WHERE
        fr.intervenant_id = resultat.intervenant_id
        AND fr.annee_id   = resultat.annee_id
    ) LOOP
      referentiels( fr.id ) := fr;
    END LOOP;

    FOR fs IN (
      SELECT * FROM formule_service fs WHERE
        fs.intervenant_id = resultat.intervenant_id
        AND fs.annee_id = resultat.annee_id
    ) LOOP
      services( fs.service_id ) := fs;
    END LOOP;

    FOR vh IN (
      SELECT fvh.* 
      FROM
        formule_volume_horaire fvh
        JOIN etat_volume_horaire evh ON evh.id = fvh.etat_volume_horaire_id
      WHERE
        fvh.intervenant_id             = resultat.intervenant_id
        AND fvh.annee_id               = resultat.annee_id
        AND fvh.type_volume_horaire_id = resultat.type_volume_horaire_id
        AND evh.ordre                  >= etat_volume_horaire_ordre
    ) LOOP
      volumes_horaires( vh.id ) := vh;
      resultat.service := resultat.service + vh.heures;
    END LOOP;

    resultat.service_du := service_du.service_du + service_du.service_du_modification;

    liste_tableaux := t_liste_tableaux(
      11, 12, 13, 14, 15, 16, 17,
      21, 22, 23, 24, 25, 26, 27,
      31, 32, 33, 34, 35, 36, 37,
      41, 42, 43, 44, 45, 46, 47,
      51, 52, 53, 54, 55, 56, 57,
      61, 62, 63, 64, 65, 66, 67,
      71, 72, 73, 74, 75, 76, 77,
      81, 82, 83, 84, 85, 86, 87,
              93, 94
    );

    FOR i IN liste_tableaux.FIRST .. liste_tableaux.LAST
    LOOP
      current_tableau := liste_tableaux(i);

      IF current_tableau IN ( -- calcul pour les services
        11, 12, 13, 14,
        21, 22, 23, 24,
        31, 32, 33, 34,
        51, 52, 53, 54,
        61, 62, 63, 64,
        71, 72, 73, 74,
        81, 82, 83, 84,
                93, 94
      ) THEN

        t(current_tableau).total := 0;      
        id := volumes_horaires.FIRST;
        LOOP EXIT WHEN id IS NULL;
          val := CASE current_tableau
            WHEN 11 THEN C_11( volumes_horaires(id) )  WHEN 12 THEN C_12( volumes_horaires(id) )  WHEN 13 THEN C_13( volumes_horaires(id) )  WHEN 14 THEN C_14( volumes_horaires(id) )
            WHEN 21 THEN C_21( volumes_horaires(id) )  WHEN 22 THEN C_22( volumes_horaires(id) )  WHEN 23 THEN C_23( volumes_horaires(id) )  WHEN 24 THEN C_24( volumes_horaires(id) )
            WHEN 31 THEN C_31( volumes_horaires(id) )  WHEN 32 THEN C_32( volumes_horaires(id) )  WHEN 33 THEN C_33( volumes_horaires(id) )  WHEN 34 THEN C_34( volumes_horaires(id) )
            WHEN 51 THEN C_51( volumes_horaires(id) )  WHEN 52 THEN C_52( volumes_horaires(id) )  WHEN 53 THEN C_53( volumes_horaires(id) )  WHEN 54 THEN C_54( volumes_horaires(id) )
            WHEN 61 THEN C_61( volumes_horaires(id) )  WHEN 62 THEN C_62( volumes_horaires(id) )  WHEN 63 THEN C_63( volumes_horaires(id) )  WHEN 64 THEN C_64( volumes_horaires(id) )
            WHEN 71 THEN C_71( volumes_horaires(id) )  WHEN 72 THEN C_72( volumes_horaires(id) )  WHEN 73 THEN C_73( volumes_horaires(id) )  WHEN 74 THEN C_74( volumes_horaires(id) )
            WHEN 81 THEN C_81( volumes_horaires(id) )  WHEN 82 THEN C_82( volumes_horaires(id) )  WHEN 83 THEN C_83( volumes_horaires(id) )  WHEN 84 THEN C_84( volumes_horaires(id) )
                                                                                                  WHEN 93 THEN C_93( volumes_horaires(id) )  WHEN 94 THEN C_94( volumes_horaires(id) )
          END;
          t(current_tableau).valeurs(id) := val;
          t(current_tableau).total       := t(current_tableau).total + val;
  
          id := volumes_horaires.NEXT(id);
        END LOOP;
        
      ELSIF current_tableau IN ( -- calcul des services restants dus
        41, 42, 43, 44, 45, 46, 47
      ) THEN
      
        service_restant_du(current_tableau) := CASE current_tableau
          WHEN 41 THEN C_41  WHEN 42 THEN C_42  WHEN 43 THEN C_43
          WHEN 44 THEN C_44  WHEN 45 THEN C_45  WHEN 46 THEN C_46
          WHEN 47 THEN C_47
        END;

      ELSIF current_tableau IN ( -- tableaux de calcul du référentiel
        15, 16, 17,
        25, 26, 27,
        35, 36, 37,
        55, 56, 57,
        65, 66, 67,
        75, 76, 77,
        85, 86, 87
      ) THEN

        t(current_tableau).total := 0;      
        id := referentiels.FIRST;
        LOOP EXIT WHEN id IS NULL;
          val := CASE current_tableau
            WHEN 15 THEN C_15( referentiels(id) )  WHEN 16 THEN C_16( referentiels(id) )  WHEN 17 THEN C_17( referentiels(id) )
            WHEN 25 THEN C_25( referentiels(id) )  WHEN 26 THEN C_26( referentiels(id) )  WHEN 27 THEN C_27( referentiels(id) )
            WHEN 35 THEN C_35( referentiels(id) )  WHEN 36 THEN C_36( referentiels(id) )  WHEN 37 THEN C_37( referentiels(id) )
            WHEN 55 THEN C_55( referentiels(id) )  WHEN 56 THEN C_56( referentiels(id) )  WHEN 57 THEN C_57( referentiels(id) )
            WHEN 65 THEN C_65( referentiels(id) )  WHEN 66 THEN C_66( referentiels(id) )  WHEN 67 THEN C_67( referentiels(id) )
            WHEN 75 THEN C_75( referentiels(id) )  WHEN 76 THEN C_76( referentiels(id) )  WHEN 77 THEN C_77( referentiels(id) )
            WHEN 85 THEN C_85( referentiels(id) )  WHEN 86 THEN C_86( referentiels(id) )  WHEN 87 THEN C_87( referentiels(id) )
          END;
          t(current_tableau).valeurs(id) := val;
          t(current_tableau).total       := t(current_tableau).total + val;
  
          id := referentiels.NEXT(id);
        END LOOP;

      END IF;
    END LOOP;
    resultat.enseignements            := t(51).total + t(52).total + t(53).total + t(54).total + t(81).total + t(82).total + t(93).total + t(94).total;
    resultat.referentiel              := t(55).total + t(56).total + t(57).total + t(85).total + t(86).total + t(87).total;
    resultat.service_assure           := resultat.enseignements + resultat.referentiel;
    resultat.heures_compl_fi          := t(81).total + t(82).total;
    resultat.heures_compl_fc          := t(93).total + t(94).total;
    resultat.heures_compl_referentiel := t(85).total + t(86).total + t(87).total;
    resultat.heures_solde             := resultat.service_assure - resultat.service_du;
    IF resultat.service_assure - resultat.service_du >= 0 THEN
      resultat.sous_service       := 0;
      resultat.heures_compl_total := resultat.service_assure - resultat.service_du;
    ELSE
      resultat.sous_service       := (resultat.service_assure - resultat.service_du) * -1;
      resultat.heures_compl_total := 0;
    END IF;
    OSE_FORMULE.SAVE_RESULTAT( resultat );
  END;

END UNICAEN_OSE_FORMULE;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_WORKFLOW
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_WORKFLOW" AS

  /**
   * Inscription de l'intervenant dont il faudra regénérer la progression dans le workflow
   */
  PROCEDURE Add_Intervenant_To_Update (p_intervenant_id NUMERIC)
  IS
  BEGIN
    INSERT INTO wf_tmp_intervenant (intervenant_id) VALUES (p_intervenant_id); 
  END;
  
  /**
   * Parcours des intervenants dont il faut regénérer la progression dans le workflow
   */
  PROCEDURE Update_Intervenants_Etapes 
  IS
  BEGIN
    FOR ti IN (SELECT distinct * FROM wf_tmp_intervenant) LOOP
      ose_workflow.Update_Intervenant_Etapes(ti.intervenant_id);
    END LOOP;
    DELETE FROM wf_tmp_intervenant;
  END;
  
  /**
   * Regénère la progression dans le workflow de tous les intervenants dont le statut autorise la saisie de service.
   */
  PROCEDURE Update_All_Intervenants_Etapes 
  IS
    CURSOR intervenant_cur IS 
      SELECT i.* FROM intervenant i 
      JOIN statut_intervenant si ON si.id = i.statut_id AND si.histo_destruction IS NULL AND si.peut_saisir_service = 1
      WHERE i.histo_destruction IS NULL;
  BEGIN
    FOR intervenant_rec IN intervenant_cur
    LOOP
      --DBMS_OUTPUT.put_line (intervenant_rec.nom_usuel || '(' || intervenant_rec.source_code || ')');
      ose_workflow.Update_Intervenant_Etapes(intervenant_rec.id);
    END LOOP;
  END;
  
  /**
   * Regénère la progression dans le workflow d'un intervenant précis.
   */
  PROCEDURE Update_Intervenant_Etapes (p_intervenant_id NUMERIC) 
  IS
    pertinente NUMERIC;
    franchie NUMERIC;
    courante NUMERIC;
    courante_trouvee NUMERIC := 0;
    ordre NUMERIC := 1;
  BEGIN
    --
    -- RAZ progression.
    --
    DELETE FROM wf_intervenant_etape ie WHERE ie.intervenant_id = p_intervenant_id;
        
    FOR etape_rec IN (
      --select e.* from wf_etape e where e.code = 'DEBUT'
      --UNION
      -- liste ordonnée des étapes sans les étapes DEBUT et FIN
      select ea.* --ea.id, ea.code, ed.id depart_etape_id, ed.code depart_etape_code
      from wf_etape_to_etape ee
      inner join wf_etape ed on ed.id = ee.depart_etape_id
      inner join wf_etape ea on ea.id = ee.arrivee_etape_id
      where ea.code <> 'FIN'
      connect by ee.depart_etape_id = prior ee.arrivee_etape_id 
      start with ed.code = 'DEBUT'
      --UNION
      --select e.* from wf_etape e where e.code = 'FIN'
    )
    LOOP
      --
      -- Ajout de l'étape si elle est pertinente.
      --
      pertinente := 0;
      IF etape_rec.PERTIN_FUNC IS NULL THEN
        pertinente := 1;
      ELSE
        EXECUTE IMMEDIATE 'BEGIN :res := ' || etape_rec.PERTIN_FUNC || '(:1); END;' USING OUT pertinente, p_intervenant_id;
        --DBMS_OUTPUT.put_line (etape_rec.libelle || ' --> ' || etape_rec.PERTIN_FUNC || ' returned ' || pertinente);
      END IF;
      IF pertinente = 0 THEN 
        CONTINUE;
      END IF;
      --DBMS_OUTPUT.put_line (etape_rec.code);
      
      --
      -- Marquage de l'étape "franchie" ou "courante".
      --
      IF etape_rec.FRANCH_FUNC IS NULL THEN
        franchie := 1;
      ELSE
        --franch_func := SUBSTR(etape_rec.FRANCH_RULE_CLASS, INSTR(etape_rec.FRANCH_RULE_CLASS, '\', -1) + 1);
        EXECUTE IMMEDIATE 'BEGIN :res := ' || etape_rec.FRANCH_FUNC || '(:1); END;' USING OUT franchie, p_intervenant_id;
        --DBMS_OUTPUT.put_line (etape_rec.FRANCH_FUNC || ' returned ' || franchie);
      END IF;
      IF courante_trouvee = 1 THEN 
        -- une étape située après l'étape courante est forcément "non courante" et "non franchie"
        courante := 0;
        franchie := 0;
      ELSE
        IF franchie = 1 THEN 
          courante := 0;
        ELSE
          courante := 1;
          courante_trouvee := 1;
        END IF;
      END IF;
      
      --
      -- Ecriture dans la table.
      --
      INSERT INTO wf_intervenant_etape (id, intervenant_id, etape_id, courante, franchie, ordre) 
        SELECT wf_intervenant_etape_id_seq.nextval, p_intervenant_id, etape_rec.id, courante, franchie, ordre FROM DUAL;
        
      ordre := ordre + 1;
    END LOOP;
  END;
  
  
  /******************** Règles métiers de pertinence et de franchissement des étapes ********************/
  
  /**
   *
   */
  FUNCTION peut_saisir_dossier (p_intervenant_id NUMERIC, p_structure_id NUMERIC) RETURN NUMERIC
  IS
    res NUMERIC;
  BEGIN
    SELECT si.peut_saisir_dossier INTO res FROM statut_intervenant si 
    JOIN intervenant i ON i.statut_id = si.id 
    WHERE i.id = p_intervenant_id;
    RETURN res;
  END;
  
  /**
   *
   */
  FUNCTION peut_saisir_service (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
  BEGIN
    SELECT si.peut_saisir_service INTO res FROM statut_intervenant si 
    JOIN intervenant i ON i.statut_id = si.id 
    WHERE i.id = p_intervenant_id;
    RETURN res;
  END;
  
  /**
   *
   */
  FUNCTION possede_services (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
  BEGIN
    IF p_structure_id IS NULL THEN
      SELECT count(*) INTO res FROM service s 
      JOIN element_pedagogique ep on ep.id = s.element_pedagogique_id AND ep.histo_destruction IS NULL
      JOIN etape e ON e.id = ep.etape_id AND e.histo_destruction IS NULL
      WHERE s.intervenant_id = p_intervenant_id AND s.annee_id = ose_parametre.get_annee();
    ELSE
      SELECT count(*) INTO res FROM service s 
      JOIN element_pedagogique ep on ep.id = s.element_pedagogique_id 
      JOIN etape e ON e.id = ep.etape_id
      WHERE s.intervenant_id = p_intervenant_id AND s.annee_id = ose_parametre.get_annee()
      AND s.structure_ens_id = p_structure_id;
    END IF;
    RETURN CASE WHEN res > 0 THEN 1 ELSE 0 END;
  END;
  
  /**
   *
   */
  FUNCTION peut_saisir_referentiel (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
  BEGIN
    SELECT si.peut_saisir_referentiel INTO res FROM statut_intervenant si JOIN intervenant i ON i.statut_id = si.id 
    WHERE i.id = p_intervenant_id;
    RETURN res;
  END;
  
  /**
   *
   */
  FUNCTION peut_saisir_piece_jointe (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
  BEGIN
    SELECT count(*) INTO res FROM type_piece_jointe_statut tpjs 
    JOIN statut_intervenant si on tpjs.statut_intervenant_id = si.id 
    JOIN intervenant i ON i.statut_id = si.id
    WHERE i.id = p_intervenant_id;
    RETURN res;
  END;
  
  /**
   *
   */
  FUNCTION necessite_agrement_cr (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
  BEGIN
    SELECT count(*) INTO res FROM type_agrement_statut tas 
    JOIN type_agrement ta ON ta.id = tas.type_agrement_id AND ta.code = 'CONSEIL_RESTREINT'
    JOIN statut_intervenant si on tas.statut_intervenant_id = si.id
    JOIN intervenant i ON i.statut_id = si.id
    WHERE tas.PREMIER_RECRUTEMENT = i.PREMIER_RECRUTEMENT AND tas.OBLIGATOIRE = 1 
    AND i.id = p_intervenant_id;
    RETURN res;
  END;
  
  /**
   *
   */
  FUNCTION necessite_agrement_ca (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
  BEGIN
    SELECT count(*) INTO res FROM type_agrement_statut tas 
    JOIN type_agrement ta ON ta.id = tas.type_agrement_id AND ta.code = 'CONSEIL_ACADEMIQUE'
    JOIN statut_intervenant si on tas.statut_intervenant_id = si.id
    JOIN intervenant i ON i.statut_id = si.id
    WHERE tas.PREMIER_RECRUTEMENT = i.PREMIER_RECRUTEMENT AND tas.OBLIGATOIRE = 1 
    AND i.id = p_intervenant_id;
    RETURN res;
  END;
  
  /**
   *
   */
  FUNCTION necessite_contrat (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
  BEGIN
    SELECT si.peut_avoir_contrat INTO res FROM statut_intervenant si JOIN intervenant i ON i.statut_id = si.id 
    WHERE i.id = p_intervenant_id;
    RETURN res;
  END;
  
  /**
   *
   */
  FUNCTION service_valide (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    CURSOR service_cur IS 
      SELECT s.* FROM service s 
      JOIN volume_horaire vh ON vh.service_id = s.id AND vh.histo_destruction IS NULL
      JOIN v_volume_horaire_etat vhe ON vhe.volume_horaire_id = vh.id
      JOIN etat_volume_horaire evh ON evh.id = vhe.etat_volume_horaire_id AND evh.ordre >= ( SELECT min(ordre) FROM etat_volume_horaire WHERE code = 'valide' )
      JOIN element_pedagogique ep on ep.id = s.element_pedagogique_id AND ep.histo_destruction IS NULL
      JOIN etape e ON e.id = ep.etape_id AND e.histo_destruction IS NULL
      WHERE s.intervenant_id = p_intervenant_id AND s.annee_id = ose_parametre.get_annee();
    service_rec service_cur%rowtype;
    res NUMERIC := 0;
  BEGIN
    
    
    -- on se contente d'un service trouvé
    IF p_structure_id IS NULL THEN
      OPEN service_cur;
      FETCH service_cur INTO service_rec;
      IF service_cur%FOUND THEN
        res := 1;
      END IF;
      CLOSE service_cur;
    ELSE
      FOR service_rec IN service_cur
      LOOP
        IF service_rec.structure_ens_id = p_structure_id THEN
          res := 1;
          EXIT;
        END IF;
      END LOOP;
    END IF;
    
    RETURN res;
  END;

  /**
   *
   */
  FUNCTION possede_dossier (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
  BEGIN
    SELECT count(*) INTO res FROM intervenant_exterieur i JOIN dossier d ON d.id = i.dossier_id AND d.histo_destruction IS NULL
    WHERE i.id = p_intervenant_id;
    RETURN res;
  END;

  /**
   *
   */
  FUNCTION dossier_valide (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
  BEGIN
    SELECT count(*) INTO res FROM validation v 
    JOIN type_validation tv ON tv.id = v.type_validation_id AND tv.code = 'DONNEES_PERSO_PAR_COMP' 
    WHERE v.histo_destruction IS NULL 
    AND v.intervenant_id = p_intervenant_id;
    RETURN res;
  END;

  /**
   *
   */
  FUNCTION referentiel_valide (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
  BEGIN
    SELECT count(*) INTO res FROM validation v 
    JOIN type_validation tv ON tv.id = v.type_validation_id AND tv.code = 'REFERENTIEL' 
    WHERE v.histo_destruction IS NULL 
    AND v.intervenant_id = p_intervenant_id;
    RETURN res;
  END;

  /**
   *
   */
  FUNCTION pieces_jointes_fournies (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
  BEGIN
    SELECT count(*) INTO res FROM (
      WITH 
      ATTENDU_OBLIGATOIRE AS (
          -- nombres de pj OBLIGATOIRES pour chaque intervenant
          SELECT I.ID INTERVENANT_ID, I.SOURCE_CODE, COALESCE(vheures.TOTAL_HEURES, 0) TOTAL_HEURES, count(tpjs.id) NB /*+ materialize */
          FROM INTERVENANT_EXTERIEUR IE
          INNER JOIN INTERVENANT I ON IE.ID = I.ID AND (I.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN DOSSIER d ON IE.DOSSIER_ID = d.ID AND (d.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN STATUT_INTERVENANT si ON d.STATUT_ID = si.ID AND (si.HISTO_DESTRUCTEUR_ID IS NULL AND SYSDATE BETWEEN si.VALIDITE_DEBUT AND COALESCE(si.VALIDITE_FIN, SYSDATE))
          INNER JOIN TYPE_PIECE_JOINTE_STATUT tpjs ON si.ID = tpjs.STATUT_INTERVENANT_ID AND (tpjs.PREMIER_RECRUTEMENT = d.PREMIER_RECRUTEMENT) AND (tpjs.HISTO_DESTRUCTEUR_ID IS NULL) 
          LEFT JOIN V_PJ_HEURES vheures ON vheures.INTERVENANT_ID = I.ID
          WHERE tpjs.OBLIGATOIRE = 1
          AND (tpjs.SEUIL_HETD IS NULL OR COALESCE(vheures.TOTAL_HEURES, 0) >= tpjs.SEUIL_HETD)
          GROUP BY I.ID, I.SOURCE_CODE, COALESCE(vheures.TOTAL_HEURES, 0)
      ), 
      FOURNI_OBLIGATOIRE AS (
          -- nombres de pj OBLIGATOIRES FOURNIES par chaque intervenant
          SELECT I.ID INTERVENANT_ID, I.SOURCE_CODE, count(tpjAttendu.ID) NB /*+ materialize */
          FROM INTERVENANT_EXTERIEUR IE
          INNER JOIN INTERVENANT I ON IE.ID = I.ID AND (I.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN DOSSIER d ON IE.DOSSIER_ID = d.ID AND (d.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN STATUT_INTERVENANT si ON d.STATUT_ID = si.ID AND (si.HISTO_DESTRUCTEUR_ID IS NULL AND SYSDATE BETWEEN si.VALIDITE_DEBUT AND COALESCE(si.VALIDITE_FIN, SYSDATE))
          INNER JOIN TYPE_PIECE_JOINTE_STATUT tpjs ON si.ID = tpjs.STATUT_INTERVENANT_ID AND (tpjs.PREMIER_RECRUTEMENT = d.PREMIER_RECRUTEMENT) AND (tpjs.HISTO_DESTRUCTEUR_ID IS NULL) 
          INNER JOIN TYPE_PIECE_JOINTE tpjAttendu ON tpjs.TYPE_PIECE_JOINTE_ID = tpjAttendu.ID AND (tpjAttendu.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN PIECE_JOINTE pj ON d.ID = pj.DOSSIER_ID AND (pj.HISTO_DESTRUCTEUR_ID IS NULL AND SYSDATE BETWEEN pj.VALIDITE_DEBUT AND COALESCE(pj.VALIDITE_FIN, SYSDATE))
          INNER JOIN TYPE_PIECE_JOINTE tpjFourni ON pj.TYPE_PIECE_JOINTE_ID = tpjFourni.ID AND (tpjFourni.HISTO_DESTRUCTEUR_ID IS NULL AND SYSDATE BETWEEN tpjFourni.VALIDITE_DEBUT AND COALESCE(tpjFourni.VALIDITE_FIN, SYSDATE))
          LEFT JOIN V_PJ_HEURES vheures ON vheures.INTERVENANT_ID = I.ID
          WHERE tpjs.OBLIGATOIRE = 1
          AND tpjFourni.ID = tpjAttendu.ID
          AND (tpjs.SEUIL_HETD IS NULL OR COALESCE(vheures.TOTAL_HEURES, 0) >= tpjs.SEUIL_HETD)
          -- %s
          AND pj.VALIDATION_ID IS NOT NULL -- %s
          GROUP BY I.ID, I.SOURCE_CODE
      ), 
      ATTENDU_FACULTATIF AS (
          -- nombres de pj FACULTATIVES pour chaque intervenant
          SELECT I.ID INTERVENANT_ID, I.SOURCE_CODE, COALESCE(vheures.TOTAL_HEURES, 0) TOTAL_HEURES, count(tpjs.id) NB /*+ materialize */
          FROM INTERVENANT_EXTERIEUR IE
          INNER JOIN INTERVENANT I ON IE.ID = I.ID AND (I.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN DOSSIER d ON IE.DOSSIER_ID = d.ID AND (d.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN STATUT_INTERVENANT si ON d.STATUT_ID = si.ID AND (si.HISTO_DESTRUCTEUR_ID IS NULL AND SYSDATE BETWEEN si.VALIDITE_DEBUT AND COALESCE(si.VALIDITE_FIN, SYSDATE))
          INNER JOIN TYPE_PIECE_JOINTE_STATUT tpjs ON si.ID = tpjs.STATUT_INTERVENANT_ID AND (tpjs.PREMIER_RECRUTEMENT = d.PREMIER_RECRUTEMENT) AND (tpjs.HISTO_DESTRUCTEUR_ID IS NULL) 
          LEFT JOIN V_PJ_HEURES vheures ON vheures.INTERVENANT_ID = I.ID
          WHERE (tpjs.OBLIGATOIRE = 0 OR tpjs.OBLIGATOIRE = 1 AND tpjs.SEUIL_HETD IS NOT NULL AND COALESCE(vheures.TOTAL_HEURES, 0) < tpjs.SEUIL_HETD)
          GROUP BY I.ID, I.SOURCE_CODE, COALESCE(vheures.TOTAL_HEURES, 0)
      ), 
      FOURNI_FACULTATIF AS (
          -- nombres de pj FACULTATIVES FOURNIES par chaque intervenant
          SELECT I.ID INTERVENANT_ID, I.SOURCE_CODE, count(tpjAttendu.ID) NB /*+ materialize */
          FROM INTERVENANT_EXTERIEUR IE
          INNER JOIN INTERVENANT I ON IE.ID = I.ID AND (I.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN DOSSIER d ON IE.DOSSIER_ID = d.ID AND (d.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN STATUT_INTERVENANT si ON d.STATUT_ID = si.ID AND (si.HISTO_DESTRUCTEUR_ID IS NULL AND SYSDATE BETWEEN si.VALIDITE_DEBUT AND COALESCE(si.VALIDITE_FIN, SYSDATE))
          INNER JOIN TYPE_PIECE_JOINTE_STATUT tpjs ON si.ID = tpjs.STATUT_INTERVENANT_ID AND (tpjs.PREMIER_RECRUTEMENT = d.PREMIER_RECRUTEMENT) AND (tpjs.HISTO_DESTRUCTEUR_ID IS NULL) 
          INNER JOIN TYPE_PIECE_JOINTE tpjAttendu ON tpjs.TYPE_PIECE_JOINTE_ID = tpjAttendu.ID AND (tpjAttendu.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN PIECE_JOINTE pj ON d.ID = pj.DOSSIER_ID AND (pj.HISTO_DESTRUCTEUR_ID IS NULL AND SYSDATE BETWEEN pj.VALIDITE_DEBUT AND COALESCE(pj.VALIDITE_FIN, SYSDATE))
          INNER JOIN TYPE_PIECE_JOINTE tpjFourni ON pj.TYPE_PIECE_JOINTE_ID = tpjFourni.ID AND (tpjFourni.HISTO_DESTRUCTEUR_ID IS NULL AND SYSDATE BETWEEN tpjFourni.VALIDITE_DEBUT AND COALESCE(tpjFourni.VALIDITE_FIN, SYSDATE))
          LEFT JOIN V_PJ_HEURES vheures ON vheures.INTERVENANT_ID = I.ID
          WHERE (tpjs.OBLIGATOIRE = 0 OR tpjs.OBLIGATOIRE = 1 AND tpjs.SEUIL_HETD IS NOT NULL AND COALESCE(vheures.TOTAL_HEURES, 0) < tpjs.SEUIL_HETD)
          AND tpjFourni.ID = tpjAttendu.ID
          GROUP BY I.ID, I.SOURCE_CODE
      )
      SELECT 
          COALESCE(AO.INTERVENANT_ID, AF.INTERVENANT_ID) ID, 
          COALESCE(AO.SOURCE_CODE, AF.SOURCE_CODE)       SOURCE_CODE, 
          COALESCE(AO.TOTAL_HEURES, AF.TOTAL_HEURES)     TOTAL_HEURES, 
          COALESCE(AO.NB, 0)                             NB_PJ_OBLIG_ATTENDU, 
          COALESCE(FO.NB, 0)                             NB_PJ_OBLIG_FOURNI, 
          COALESCE(AF.NB, 0)                             NB_PJ_FACUL_ATTENDU, 
          COALESCE(FF.NB, 0)                             NB_PJ_FACUL_FOURNI 
      FROM            ATTENDU_OBLIGATOIRE AO
      FULL OUTER JOIN ATTENDU_FACULTATIF  AF ON AF.INTERVENANT_ID = AO.INTERVENANT_ID
      LEFT JOIN       FOURNI_OBLIGATOIRE  FO ON FO.INTERVENANT_ID = AO.INTERVENANT_ID
      LEFT JOIN       FOURNI_FACULTATIF   FF ON FF.INTERVENANT_ID = AF.INTERVENANT_ID
      WHERE COALESCE(AO.INTERVENANT_ID, AF.INTERVENANT_ID) = p_intervenant_id
    )
    WHERE NB_PJ_OBLIG_ATTENDU <= NB_PJ_OBLIG_FOURNI;
    
    RETURN res;
  END;

  /**
   *
   */
  FUNCTION agrement_cr_fourni (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
    code VARCHAR2(64) := 'CONSEIL_RESTREINT';
  BEGIN
    SELECT count(*) INTO res FROM (
      WITH 
      COMPOSANTES_ENSEIGN AS (
          -- nombre de composantes d'enseignement par intervenant
          SELECT I.ID, I.SOURCE_CODE, COUNT(distinct s.STRUCTURE_ENS_ID) NB_COMP_ENS
          FROM SERVICE s
          INNER JOIN INTERVENANT I ON I.ID = s.INTERVENANT_ID AND (I.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN STRUCTURE comp ON comp.ID = s.STRUCTURE_ENS_ID AND (comp.HISTO_DESTRUCTEUR_ID IS NULL)
          WHERE (s.HISTO_DESTRUCTEUR_ID IS NULL) 
          -- AND s.STRUCTURE_ENS_ID = p_structure_id
          GROUP BY I.ID, I.SOURCE_CODE
      ),
      AGREMENTS_OBLIG_EXIST AS (
          -- nombre d'agréments obligatoires obtenus par intervenant et par type d'agrément
          SELECT I.ID, I.SOURCE_CODE, a.TYPE_AGREMENT_ID, COUNT(a.ID) NB_AGR_OBL_EXIST
          FROM AGREMENT a
          INNER JOIN TYPE_AGREMENT ta ON a.TYPE_AGREMENT_ID = ta.ID AND (ta.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN INTERVENANT I ON a.INTERVENANT_ID = I.ID AND (I.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN TYPE_AGREMENT_STATUT tas ON I.STATUT_ID = tas.STATUT_INTERVENANT_ID AND ta.ID = tas.TYPE_AGREMENT_ID 
              AND COALESCE(I.PREMIER_RECRUTEMENT, 0) = tas.PREMIER_RECRUTEMENT AND tas.OBLIGATOIRE = 1 AND (tas.HISTO_DESTRUCTEUR_ID IS NULL) 
          WHERE (a.HISTO_DESTRUCTEUR_ID IS NULL) 
          -- AND a.STRUCTURE_ID = p_structure_id
          GROUP BY I.ID, I.SOURCE_CODE, a.TYPE_AGREMENT_ID
      )
      -- intervenants concernés de manière FACULTATIVE par le type d'agrément
      SELECT DISTINCT i.ID --, I.SOURCE_CODE, null NB_AGR_OBL_EXIST, COALESCE(c.NB_COMP_ENS, 0) NB_COMP_ENS
      FROM INTERVENANT i
      INNER JOIN TYPE_AGREMENT_STATUT tas ON i.STATUT_ID = tas.STATUT_INTERVENANT_ID AND (tas.HISTO_DESTRUCTEUR_ID IS NULL) 
          AND (i.PREMIER_RECRUTEMENT IS NULL OR i.PREMIER_RECRUTEMENT = tas.PREMIER_RECRUTEMENT) 
      INNER JOIN TYPE_AGREMENT ta ON tas.TYPE_AGREMENT_ID = ta.ID AND (ta.HISTO_DESTRUCTEUR_ID IS NULL)
      --LEFT JOIN COMPOSANTES_ENSEIGN c on c.ID = i.ID
      WHERE (i.HISTO_DESTRUCTEUR_ID IS NULL)
      AND i.ID = p_intervenant_id 
      AND tas.OBLIGATOIRE = 0
      AND ta.CODE = code
  
      UNION
  
      -- intervenants concernés de manière OBLIGATOIRE par le type d'agrément et possédant TOUS les agréments de ce type
      SELECT DISTINCT i.ID --, I.SOURCE_CODE, aoe.NB_AGR_OBL_EXIST, COALESCE(c.NB_COMP_ENS, 0) NB_COMP_ENS
      FROM INTERVENANT i
      INNER JOIN TYPE_AGREMENT_STATUT tas ON i.STATUT_ID = tas.STATUT_INTERVENANT_ID AND COALESCE(i.PREMIER_RECRUTEMENT, 0) = tas.PREMIER_RECRUTEMENT AND (tas.HISTO_DESTRUCTEUR_ID IS NULL)                     
      INNER JOIN TYPE_AGREMENT ta ON tas.TYPE_AGREMENT_ID = ta.ID AND (ta.HISTO_DESTRUCTEUR_ID IS NULL)
      INNER JOIN AGREMENTS_OBLIG_EXIST aoe on aoe.ID = i.ID AND aoe.TYPE_AGREMENT_ID = tas.TYPE_AGREMENT_ID
      LEFT JOIN COMPOSANTES_ENSEIGN c on c.ID = i.ID
      WHERE (i.HISTO_DESTRUCTEUR_ID IS NULL)
      AND i.ID = p_intervenant_id 
      AND tas.OBLIGATOIRE = 1
      AND ta.CODE = code
      -- $andCount
    );
    
    RETURN res;
  END;

  /**
   *
   */
  FUNCTION agrement_ca_fourni (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
    code VARCHAR2(64) := 'CONSEIL_ACADEMIQUE';
  BEGIN
    SELECT count(*) INTO res FROM (
      WITH 
      COMPOSANTES_ENSEIGN AS (
          -- nombre de composantes d'enseignement par intervenant
          SELECT I.ID, I.SOURCE_CODE, COUNT(distinct s.STRUCTURE_ENS_ID) NB_COMP_ENS
          FROM SERVICE s
          INNER JOIN INTERVENANT I ON I.ID = s.INTERVENANT_ID AND (I.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN STRUCTURE comp ON comp.ID = s.STRUCTURE_ENS_ID AND (comp.HISTO_DESTRUCTEUR_ID IS NULL)
          WHERE (s.HISTO_DESTRUCTEUR_ID IS NULL) 
          -- AND s.STRUCTURE_ENS_ID = p_structure_id
          GROUP BY I.ID, I.SOURCE_CODE
      ),
      AGREMENTS_OBLIG_EXIST AS (
          -- nombre d'agréments obligatoires obtenus par intervenant et par type d'agrément
          SELECT I.ID, I.SOURCE_CODE, a.TYPE_AGREMENT_ID, COUNT(a.ID) NB_AGR_OBL_EXIST
          FROM AGREMENT a
          INNER JOIN TYPE_AGREMENT ta ON a.TYPE_AGREMENT_ID = ta.ID AND (ta.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN INTERVENANT I ON a.INTERVENANT_ID = I.ID AND (I.HISTO_DESTRUCTEUR_ID IS NULL)
          INNER JOIN TYPE_AGREMENT_STATUT tas ON I.STATUT_ID = tas.STATUT_INTERVENANT_ID AND ta.ID = tas.TYPE_AGREMENT_ID 
              AND COALESCE(I.PREMIER_RECRUTEMENT, 0) = tas.PREMIER_RECRUTEMENT AND tas.OBLIGATOIRE = 1 AND (tas.HISTO_DESTRUCTEUR_ID IS NULL) 
          WHERE (a.HISTO_DESTRUCTEUR_ID IS NULL) 
          -- AND a.STRUCTURE_ID = p_structure_id
          GROUP BY I.ID, I.SOURCE_CODE, a.TYPE_AGREMENT_ID
      )
      -- intervenants concernés de manière FACULTATIVE par le type d'agrément
      SELECT DISTINCT i.ID --, I.SOURCE_CODE, null NB_AGR_OBL_EXIST, COALESCE(c.NB_COMP_ENS, 0) NB_COMP_ENS
      FROM INTERVENANT i
      INNER JOIN TYPE_AGREMENT_STATUT tas ON i.STATUT_ID = tas.STATUT_INTERVENANT_ID AND (tas.HISTO_DESTRUCTEUR_ID IS NULL) 
          AND (i.PREMIER_RECRUTEMENT IS NULL OR i.PREMIER_RECRUTEMENT = tas.PREMIER_RECRUTEMENT) 
      INNER JOIN TYPE_AGREMENT ta ON tas.TYPE_AGREMENT_ID = ta.ID AND (ta.HISTO_DESTRUCTEUR_ID IS NULL)
      --LEFT JOIN COMPOSANTES_ENSEIGN c on c.ID = i.ID
      WHERE (i.HISTO_DESTRUCTEUR_ID IS NULL)
      AND i.ID = p_intervenant_id 
      AND tas.OBLIGATOIRE = 0
      AND ta.CODE = code
  
      UNION
  
      -- intervenants concernés de manière OBLIGATOIRE par le type d'agrément et possédant TOUS les agréments de ce type
      SELECT DISTINCT i.ID --, I.SOURCE_CODE, aoe.NB_AGR_OBL_EXIST, COALESCE(c.NB_COMP_ENS, 0) NB_COMP_ENS
      FROM INTERVENANT i
      INNER JOIN TYPE_AGREMENT_STATUT tas ON i.STATUT_ID = tas.STATUT_INTERVENANT_ID AND COALESCE(i.PREMIER_RECRUTEMENT, 0) = tas.PREMIER_RECRUTEMENT AND (tas.HISTO_DESTRUCTEUR_ID IS NULL)                     
      INNER JOIN TYPE_AGREMENT ta ON tas.TYPE_AGREMENT_ID = ta.ID AND (ta.HISTO_DESTRUCTEUR_ID IS NULL)
      INNER JOIN AGREMENTS_OBLIG_EXIST aoe on aoe.ID = i.ID AND aoe.TYPE_AGREMENT_ID = tas.TYPE_AGREMENT_ID
      LEFT JOIN COMPOSANTES_ENSEIGN c on c.ID = i.ID
      WHERE (i.HISTO_DESTRUCTEUR_ID IS NULL)
      AND i.ID = p_intervenant_id 
      AND tas.OBLIGATOIRE = 1
      AND ta.CODE = code
      -- $andCount
    );
    
    RETURN res;
  END;

  /**
   *
   */
  FUNCTION possede_contrat (p_intervenant_id NUMERIC, p_structure_id NUMERIC DEFAULT NULL) RETURN NUMERIC
  IS
    res NUMERIC;
  BEGIN
    SELECT count(*) INTO res FROM contrat c
    JOIN validation v ON c.validation_id = v.id AND v.histo_destruction IS NULL
    WHERE c.intervenant_id = p_intervenant_id;
    RETURN res;
  END;

END OSE_WORKFLOW;
/

---------------------------
--Nouveau TRIGGER
--WF_TRG_VH_VALIDATION_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_VH_VALIDATION_S"
  AFTER INSERT OR DELETE ON "OSE"."VALIDATION_VOL_HORAIRE"
  BEGIN
  ose_workflow.update_intervenants_etapes();
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_VH_VALIDATION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_VH_VALIDATION"
  AFTER INSERT OR DELETE ON "OSE"."VALIDATION_VOL_HORAIRE"
  REFERENCING FOR EACH ROW
  DECLARE
  vh_id NUMERIC;
  intervenant_id NUMERIC;
BEGIN
  vh_id := CASE WHEN inserting THEN :NEW.volume_horaire_id ELSE :OLD.volume_horaire_id END;
  SELECT s.intervenant_id INTO intervenant_id FROM service s JOIN volume_horaire vh ON vh.service_id = s.ID WHERE vh.ID = vh_id;
  ose_workflow.add_intervenant_to_update (intervenant_id); 
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_SERVICE_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_SERVICE_S"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_DESTRUCTION ON "OSE"."SERVICE"
  BEGIN
  ose_workflow.update_intervenants_etapes();
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_SERVICE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_SERVICE"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_DESTRUCTION ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  BEGIN
  ose_workflow.add_intervenant_to_update (CASE WHEN deleting THEN :OLD.intervenant_id ELSE :NEW.intervenant_id END); 
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_PJ_VALIDATION_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_PJ_VALIDATION_S"
  AFTER UPDATE OF VALIDATION_ID ON "OSE"."PIECE_JOINTE"
  BEGIN
  ose_workflow.update_intervenants_etapes();
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_PJ_VALIDATION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_PJ_VALIDATION"
  AFTER UPDATE OF VALIDATION_ID ON "OSE"."PIECE_JOINTE"
  REFERENCING FOR EACH ROW
  DECLARE
  intervenant_id NUMERIC;
BEGIN
  SELECT ID INTO intervenant_id FROM intervenant_exterieur ie WHERE ie.dossier_id = :NEW.dossier_id;
  ose_workflow.add_intervenant_to_update (intervenant_id); 
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_INTERV_DOSSIER_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_INTERV_DOSSIER_S"
  AFTER UPDATE OF DOSSIER_ID ON "OSE"."INTERVENANT_EXTERIEUR"
  BEGIN
  ose_workflow.update_intervenants_etapes(); 
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_INTERV_DOSSIER
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_INTERV_DOSSIER"
  AFTER UPDATE OF DOSSIER_ID ON "OSE"."INTERVENANT_EXTERIEUR"
  REFERENCING FOR EACH ROW
  BEGIN
  ose_workflow.add_intervenant_to_update (:NEW.ID); 
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_DOSSIER_VALIDATION_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_DOSSIER_VALIDATION_S"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_DESTRUCTION ON "OSE"."VALIDATION"
  BEGIN
  ose_workflow.update_intervenants_etapes();
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_DOSSIER_VALIDATION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_DOSSIER_VALIDATION"
  AFTER INSERT OR DELETE OR UPDATE OF HISTO_DESTRUCTION ON "OSE"."VALIDATION"
  REFERENCING FOR EACH ROW
  DECLARE
  type_validation_id NUMERIC;
  code VARCHAR2(128);
  intervenant_id NUMERIC;
BEGIN
  type_validation_id := CASE WHEN deleting THEN :OLD.type_validation_id ELSE :NEW.type_validation_id END;
  SELECT code INTO code FROM type_validation WHERE id = type_validation_id;
  --DBMS_OUTPUT.put_line (code);
  IF code = 'DONNEES_PERSO_PAR_COMP' THEN
    intervenant_id := CASE WHEN deleting THEN :OLD.intervenant_id ELSE :NEW.intervenant_id END;
    --DBMS_OUTPUT.put_line ('wf_trg_dossier_validation');
    ose_workflow.add_intervenant_to_update (intervenant_id); 
  END IF;
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_DOSSIER_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_DOSSIER_S"
  AFTER DELETE OR UPDATE ON "OSE"."DOSSIER"
  BEGIN
  ose_workflow.update_intervenants_etapes();
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_DOSSIER
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_DOSSIER"
  AFTER DELETE OR UPDATE ON "OSE"."DOSSIER"
  REFERENCING FOR EACH ROW
  DECLARE
  intervenant_id NUMERIC;
BEGIN
  SELECT ID INTO intervenant_id FROM intervenant_exterieur WHERE dossier_id = :OLD.ID;
  ose_workflow.add_intervenant_to_update (intervenant_id); 
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_CONTRAT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_CONTRAT_S"
  AFTER UPDATE OF VALIDATION_ID ON "OSE"."CONTRAT"
  BEGIN
  ose_workflow.update_intervenants_etapes();
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_CONTRAT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_CONTRAT"
  AFTER UPDATE OF VALIDATION_ID ON "OSE"."CONTRAT"
  REFERENCING FOR EACH ROW
  BEGIN
  ose_workflow.add_intervenant_to_update (CASE WHEN deleting THEN :OLD.intervenant_id ELSE :NEW.intervenant_id END); 
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_AGREMENT_S
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_AGREMENT_S"
  AFTER INSERT OR DELETE ON "OSE"."AGREMENT"
  BEGIN
  ose_workflow.update_intervenants_etapes();
END;
/
---------------------------
--Nouveau TRIGGER
--WF_TRG_AGREMENT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."WF_TRG_AGREMENT"
  AFTER INSERT OR DELETE ON "OSE"."AGREMENT"
  REFERENCING FOR EACH ROW
  BEGIN
  ose_workflow.add_intervenant_to_update (CASE WHEN deleting THEN :OLD.intervenant_id ELSE :NEW.intervenant_id END); 
END;
/


---------------------------
--Nouveau PACKAGE BODY
--OSE_TEST_FORMULE
---------------------------
create or replace PACKAGE BODY OSE_TEST_FORMULE AS

  annee_id numeric;

  FUNCTION GET_ANNEE RETURN NUMERIC IS
  BEGIN
    IF annee_id IS NULL THEN
      annee_id := OSE_PARAMETRE.GET_ANNEE;
    END IF;
    RETURN annee_id;
  END;


  PROCEDURE ASSERT( condition BOOLEAN, MSG CLOB ) IS -- alias
  BEGIN
    OSE_TEST.ASSERT( condition, MSG );
  END;

  PROCEDURE ASSERT_GOOD_F_SERVICE_DU( params formule_service_du%rowtype, MSG CLOB DEFAULT NULL, maj_idt BOOLEAN DEFAULT TRUE ) IS
    tested formule_service_du%ROWTYPE;
    expected formule_service_du%ROWTYPE;
    update_identified NUMERIC;
  BEGIN
    IF maj_idt THEN
      SELECT count(*) INTO update_identified FROM formule_service_du_maj WHERE intervenant_id = params.INTERVENANT_ID AND annee_id = params.annee_id;
      ose_formule.MAJ_ALL_IDT; -- PROVISOIRE
    END IF;
    tested := OSE_FORMULE.GET_SERVICE_DU( params.INTERVENANT_ID, params.annee_id );
    expected := params;

    IF MSG IS NOT NULL THEN
      ose_test.echo (' -- ' || MSG || ' -- ');
    END IF;

--    IF maj_idt THEN
--      ASSERT( 1 = update_identified, 'Mise à jour identifiée' );
--    END IF;

    IF tested.service_du = expected.service_du THEN
      ASSERT( true, 'service_du = ' || tested.service_du );
    ELSE
      ASSERT( false, 'service_du testé = ' || tested.service_du || ', attendu = ' || expected.service_du );
    END IF;

    IF tested.service_du_modification = expected.service_du_modification THEN
      ASSERT( true, 'service_du_modification = ' || tested.service_du_modification );
    ELSE
      ASSERT( false, 'service_du_modification testé = ' || tested.service_du_modification || ', attendu = ' || expected.service_du_modification );
    END IF;

    IF MSG IS NOT NULL THEN
      ose_test.echo (' ');
    END IF;
  END;


  PROCEDURE ASSERT_GOOD_F_REFERENTIEL( params formule_referentiel%rowtype, MSG CLOB DEFAULT NULL, maj_idt BOOLEAN DEFAULT TRUE ) IS
    tested formule_referentiel%ROWTYPE;
    expected formule_referentiel%ROWTYPE;
    update_identified NUMERIC;
  BEGIN
    IF maj_idt THEN
      SELECT count(*) INTO update_identified FROM formule_referentiel_maj WHERE intervenant_id = params.INTERVENANT_ID AND annee_id = params.annee_id AND structure_ens_id = params.structure_ens_id;
      ose_formule.MAJ_ALL_IDT; -- PROVISOIRE
    END IF;
    tested := OSE_FORMULE.GET_REFERENTIEL( params.INTERVENANT_ID, params.annee_id, params.structure_ens_id );
    expected := params;

    IF MSG IS NOT NULL THEN
      ose_test.echo (' -- ' || MSG || ' -- ');
    END IF;

--    IF maj_idt THEN
--      ASSERT( 1 = update_identified, 'Mise à jour identifiée' );
--    END IF;

    IF tested.referentiel = expected.referentiel THEN
      ASSERT( true, 'referentiel = ' || tested.referentiel );
    ELSE
      ASSERT( false, 'referentiel testé = ' || tested.referentiel || ', attendu = ' || expected.referentiel );
    END IF;

    IF MSG IS NOT NULL THEN
      ose_test.echo (' ');
    END IF;
  END;

  PROCEDURE ASSERT_GOOD_F_SERVICE( expected formule_service%rowtype, MSG CLOB DEFAULT NULL, maj_idt BOOLEAN DEFAULT TRUE ) IS
    tested formule_service%ROWTYPE;
    update_identified NUMERIC;
  BEGIN
    IF maj_idt THEN
      SELECT count(*) INTO update_identified FROM formule_service_maj WHERE service_id = expected.SERVICE_ID;
      ose_formule.MAJ_ALL_IDT; -- PROVISOIRE
    END IF;
    tested := OSE_FORMULE.GET_SERVICE( expected.SERVICE_ID );

    IF MSG IS NOT NULL THEN
      ose_test.echo (' -- ' || MSG || ' -- ');
    END IF;

--    IF maj_idt THEN
--      ASSERT( 1 = update_identified, 'Mise à jour identifiée' );
--    END IF;

    IF tested.taux_fi = expected.taux_fi THEN
      ASSERT( true, 'taux_fi = ' || tested.taux_fi );
    ELSE
      ASSERT( false, 'taux_fi testé = ' || tested.taux_fi || ', attendu = ' || expected.taux_fi );
    END IF;

    IF tested.taux_fa = expected.taux_fa THEN
      ASSERT( true, 'taux_fa = ' || tested.taux_fa );
    ELSE
      ASSERT( false, 'taux_fa testé = ' || tested.taux_fa || ', attendu = ' || expected.taux_fa );
    END IF;
    
    IF tested.taux_fc = expected.taux_fc THEN
      ASSERT( true, 'taux_fc = ' || tested.taux_fc );
    ELSE
      ASSERT( false, 'taux_fc testé = ' || tested.taux_fc || ', attendu = ' || expected.taux_fc );
    END IF;    

    IF tested.ponderation_service_du = expected.ponderation_service_du THEN
      ASSERT( true, 'ponderation_service_du = ' || tested.ponderation_service_du );
    ELSE
      ASSERT( false, 'ponderation_service_du testé = ' || tested.ponderation_service_du || ', attendu = ' || expected.ponderation_service_du );
    END IF;

    IF tested.ponderation_service_compl = expected.ponderation_service_compl THEN
      ASSERT( true, 'ponderation_service_compl = ' || tested.ponderation_service_compl );
    ELSE
      ASSERT( false, 'ponderation_service_compl testé = ' || tested.ponderation_service_compl || ', attendu = ' || expected.ponderation_service_compl );
    END IF;
   
    IF nvl(tested.intervenant_id,0) = nvl(expected.intervenant_id,0) THEN
      ASSERT( true, 'intervenant_id = ' || tested.intervenant_id );
    ELSE
      ASSERT( false, 'intervenant_id testé = ' || tested.intervenant_id || ', attendu = ' || expected.intervenant_id );
    END IF;
    
    IF nvl(tested.annee_id,0) = nvl(expected.annee_id,0) THEN
      ASSERT( true, 'annee_id = ' || tested.annee_id );
    ELSE
      ASSERT( false, 'annee_id testé = ' || tested.annee_id || ', attendu = ' || expected.annee_id );
    END IF;
    
    IF MSG IS NOT NULL THEN
      ose_test.echo (' ');
    END IF;
  END;

  PROCEDURE ASSERT_GOOD_F_VOLUME_HORAIRE( expected formule_volume_horaire%rowtype, MSG CLOB DEFAULT NULL, maj_idt BOOLEAN DEFAULT TRUE ) IS
    tested formule_volume_horaire%ROWTYPE;
    update_identified NUMERIC;
  BEGIN
    IF maj_idt THEN
      SELECT count(*) INTO update_identified FROM formule_volume_horaire_maj WHERE volume_horaire_id = expected.volume_horaire_id;
      ose_formule.MAJ_ALL_IDT; -- PROVISOIRE
    END IF;
    tested := OSE_FORMULE.GET_VOLUME_HORAIRE( expected.VOLUME_HORAIRE_ID );

    IF MSG IS NOT NULL THEN
      ose_test.echo (' -- ' || MSG || ' -- ');
    END IF;

--    IF maj_idt THEN
--      ASSERT( 1 = update_identified, 'Mise à jour identifiée' );
--    END IF;

    IF tested.heures = expected.heures THEN
      ASSERT( true, 'heures = ' || tested.heures );
    ELSE
      ASSERT( false, 'heures testé = ' || tested.heures || ', attendu = ' || expected.heures );
    END IF;

    IF tested.taux_service_du = expected.taux_service_du THEN
      ASSERT( true, 'taux_service_du = ' || tested.taux_service_du );
    ELSE
      ASSERT( false, 'taux_service_du testé = ' || tested.taux_service_du || ', attendu = ' || expected.taux_service_du );
    END IF;

    IF tested.taux_service_compl = expected.taux_service_compl THEN
      ASSERT( true, 'taux_service_compl = ' || tested.taux_service_compl );
    ELSE
      ASSERT( false, 'taux_service_compl testé = ' || tested.taux_service_compl || ', attendu = ' || expected.taux_service_compl );
    END IF;
   
    IF nvl(tested.intervenant_id,0) = nvl(expected.intervenant_id,0) THEN
      ASSERT( true, 'intervenant_id = ' || tested.intervenant_id );
    ELSE
      ASSERT( false, 'intervenant_id testé = ' || tested.intervenant_id || ', attendu = ' || expected.intervenant_id );
    END IF;
    
    IF nvl(tested.annee_id,0) = nvl(expected.annee_id,0) THEN
      ASSERT( true, 'annee_id = ' || tested.annee_id );
    ELSE
      ASSERT( false, 'annee_id testé = ' || tested.annee_id || ', attendu = ' || expected.annee_id );
    END IF;
    
    IF nvl(tested.service_id,0) = nvl(expected.service_id,0) THEN
      ASSERT( true, 'service_id = ' || tested.service_id );
    ELSE
      ASSERT( false, 'service_id testé = ' || tested.service_id || ', attendu = ' || expected.service_id );
    END IF;
    
    IF nvl(tested.type_volume_horaire_id,0) = nvl(expected.type_volume_horaire_id,0) THEN
      ASSERT( true, 'type_volume_horaire_id = ' || tested.type_volume_horaire_id );
    ELSE
      ASSERT( false, 'type_volume_horaire_id testé = ' || tested.type_volume_horaire_id || ', attendu = ' || expected.type_volume_horaire_id );
    END IF;
    
    IF nvl(tested.etat_volume_horaire_id,0) = nvl(expected.etat_volume_horaire_id,0) THEN
      ASSERT( true, 'etat_volume_horaire_id = ' || tested.etat_volume_horaire_id );
    ELSE
      ASSERT( false, 'etat_volume_horaire_id testé = ' || tested.etat_volume_horaire_id || ', attendu = ' || expected.etat_volume_horaire_id );
    END IF;
    
    IF nvl(tested.type_intervention_id,0) = nvl(expected.type_intervention_id,0) THEN
      ASSERT( true, 'type_intervention_id = ' || tested.type_intervention_id );
    ELSE
      ASSERT( false, 'type_intervention_id testé = ' || tested.type_intervention_id || ', attendu = ' || expected.type_intervention_id );
    END IF;
    
    IF MSG IS NOT NULL THEN
      ose_test.echo (' ');
    END IF;
  END;

  PROCEDURE TEST_MODIFY_INTERVENANT( intervenant_id NUMERIC ) IS
    has_service NUMERIC;
    has_referentiel NUMERIC;
    has_volume_horaire NUMERIC;
    service_id NUMERIC;
    structure_id NUMERIC;
    volume_horaire_id NUMERIC;
  BEGIN
    ose_test.debut('OSE_TEST_FORMULE.TEST_MODIFY_INTERVENANT' );

    SELECT count(*) INTO has_service FROM formule_service
    WHERE
      intervenant_id = TEST_MODIFY_INTERVENANT.intervenant_id
      AND annee_id = get_annee AND rownum = 1;

    SELECT count(*) INTO has_volume_horaire FROM formule_volume_horaire
    WHERE
      intervenant_id = TEST_MODIFY_INTERVENANT.intervenant_id
      AND annee_id = get_annee AND rownum = 1;

    SELECT count(*) INTO has_referentiel FROM service_referentiel sr
    WHERE sr.annee_id = get_annee
      AND sr.intervenant_id = TEST_MODIFY_INTERVENANT.intervenant_id 
      AND sr.structure_id IS NOT NULL
      AND sr.histo_destruction IS NULL;

    IF has_referentiel > 0 THEN
      SELECT NVL(sr.structure_id,NULL) INTO structure_id FROM service_referentiel sr
      WHERE sr.annee_id = get_annee
        AND sr.intervenant_id = TEST_MODIFY_INTERVENANT.intervenant_id 
        AND sr.structure_id IS NOT NULL
        AND sr.histo_destruction IS NULL
        AND rownum = 1;
    END IF;

    IF has_service > 0 THEN
      SELECT service_id INTO service_id FROM formule_service WHERE intervenant_id = TEST_MODIFY_INTERVENANT.intervenant_id AND annee_id = get_annee AND rownum = 1;
    END IF;
    IF has_volume_horaire > 0 THEN
      SELECT volume_horaire_id INTO volume_horaire_id FROM formule_volume_horaire WHERE intervenant_id = TEST_MODIFY_INTERVENANT.intervenant_id AND annee_id = get_annee AND rownum = 1;
    END IF;

    -- soft delete
    UPDATE intervenant SET histo_destruction = SYSDATE, histo_destructeur_id = ose_test.get_user WHERE id = intervenant_id;
    ASSERT_GOOD_F_SERVICE_DU( ose_formule.get_def_service_du( intervenant_id, get_annee ), 'SOFT DELETE SERVICE_DU' );
    IF structure_id IS NOT NULL THEN
      ASSERT_GOOD_F_REFERENTIEL( ose_formule.get_def_referentiel( intervenant_id, get_annee, structure_id ), 'SOFT DELETE REFERENTIEL' );
    END IF;
    IF has_service > 0 THEN
      ASSERT_GOOD_F_SERVICE( ose_formule.get_def_service( service_id ), 'SOFT DELETE SERVICE');
    END IF;
    IF has_volume_horaire > 0 THEN
      ASSERT_GOOD_F_VOLUME_HORAIRE( ose_formule.get_def_volume_horaire( volume_horaire_id ), 'SOFT DELETE VOLUME HORAIRE');
    END IF;

    -- undelete
    UPDATE intervenant SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE id = intervenant_id;
    ASSERT_GOOD_F_SERVICE_DU( ose_formule.calc_service_du( intervenant_id, get_annee ), 'UNDELETE SERVICE_DU' );
    IF has_service > 0 THEN
      ASSERT_GOOD_F_SERVICE( ose_formule.calc_service( service_id ), 'UNDELETE SERVICE');
    END IF;
    IF has_volume_horaire > 0 THEN
      ASSERT_GOOD_F_VOLUME_HORAIRE( ose_formule.calc_volume_horaire( volume_horaire_id ), 'UNDELETE VOLUME HORAIRE');
    END IF;

    ose_test.fin;

  END;


  PROCEDURE TEST_MODIFY_SERVICE_DU( intervenant_id NUMERIC ) IS
    ori formule_service_du%rowtype;
    exp formule_service_du%rowtype;
    sd OSE.service_du%ROWTYPE;
  BEGIN
    IF ose_divers.intervenant_has_privilege( intervenant_id, 'saisie_service_referentiel' ) = 0 THEN RETURN; END IF;

    ori := ose_formule.calc_service_du( intervenant_id, get_annee );
    exp := ori;
    
    SELECT * INTO sd FROM service_du WHERE intervenant_id = TEST_MODIFY_SERVICE_DU.intervenant_id AND annee_id = get_annee and histo_destruction is null;

    ose_test.debut('OSE_TEST_FORMULE.TEST_MODIFY_SERVICE_DU' );
    
    -- test update --
    UPDATE service_du SET heures = heures + 1 WHERE id = sd.id;
    exp.service_du := ori.service_du + 1;
    ASSERT_GOOD_F_SERVICE_DU( exp, 'UPDATE' );

    -- test soft delete
    UPDATE service_du SET histo_destruction = SYSDATE, histo_destructeur_id = ose_test.get_user WHERE id = sd.id;
    exp.service_du := 0;
    ASSERT_GOOD_F_SERVICE_DU( exp, 'SOFT DELETE' );

    -- test undelete
    UPDATE service_du SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE id = sd.id;
    exp.service_du := ori.service_du + 1;
    ASSERT_GOOD_F_SERVICE_DU( exp, 'UNDELETE' );

    -- test delete --
    DELETE FROM OSE.SERVICE_DU WHERE ID = sd.id;
    exp.service_du := 0;
    ASSERT_GOOD_F_SERVICE_DU( exp, 'DELETE' );

    -- test insert --
    INSERT INTO SERVICE_DU (
      ID,
      INTERVENANT_ID,
      ANNEE_ID,
      HEURES,
      VALIDITE_DEBUT,
      VALIDITE_FIN,
      HISTO_CREATION,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATION,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      sd.ID,
      sd.INTERVENANT_ID,
      sd.ANNEE_ID,
      sd.HEURES,
      sd.VALIDITE_DEBUT,
      sd.VALIDITE_FIN,
      sd.HISTO_CREATION,
      sd.HISTO_CREATEUR_ID,
      sd.HISTO_MODIFICATION,
      sd.HISTO_MODIFICATEUR_ID
    );
    exp.service_du := ori.service_du;
    ASSERT_GOOD_F_SERVICE_DU( exp, 'INSERT' );
    
    ose_test.fin;
  END;


  PROCEDURE TEST_MODIFY_SERVICE_DU_MODIF( intervenant_id NUMERIC ) IS
    ori formule_service_du%rowtype;
    exp formule_service_du%rowtype;
    sdm_id NUMERIC;
  BEGIN
    ori := ose_formule.calc_service_du( intervenant_id, get_annee );
    exp := ori;
  
    IF ose_divers.intervenant_has_privilege( intervenant_id, 'saisie_service_referentiel' ) = 0 THEN RETURN; END IF;
    
    ose_test.debut('OSE_TEST_FORMULE.TEST_MODIFY_SERVICE_DU_MODIF' );

    -- test insert --
    sdm_id := ose_test.add_modification_service_du( intervenant_id, get_annee, 9, OSE_TEST.GET_MOTIF_MODIFICATION_SERVICE( NULL, -1 ).id );
    exp.service_du_modification := ori.service_du_modification - 9;
    ASSERT_GOOD_F_SERVICE_DU( exp, 'INSERT' );
  
    -- test update heures --
    UPDATE modification_service_du SET heures = heures + 1 WHERE id = sdm_id;
    exp.service_du_modification := ori.service_du_modification - 9 - 1;
    ASSERT_GOOD_F_SERVICE_DU( exp, 'UPDATE' );
  
    -- test soft delete --
    UPDATE MODIFICATION_SERVICE_DU SET HISTO_DESTRUCTION = SYSDATE, HISTO_DESTRUCTEUR_ID = 1 WHERE ID = sdm_id;
    exp.service_du_modification := ori.service_du_modification;
    ASSERT_GOOD_F_SERVICE_DU( exp, 'SOFT DELETE' );
      
    -- test undelete
    UPDATE MODIFICATION_SERVICE_DU SET HISTO_DESTRUCTION = NULL, HISTO_DESTRUCTEUR_ID = NULL WHERE ID = sdm_id;
    exp.service_du_modification := ori.service_du_modification - 10;
    ASSERT_GOOD_F_SERVICE_DU( exp, 'UNDELETE' );
      
    -- test hard delete --
    DELETE FROM OSE.modification_service_du WHERE ID = sdm_id;
    exp.service_du_modification := ori.service_du_modification;
    ASSERT_GOOD_F_SERVICE_DU( exp, 'DELETE' );
      
    ose_test.fin;
  END;


  PROCEDURE TEST_MODIFY_MOTIF_MOD_SERV( intervenant_id NUMERIC ) IS
    ori formule_service_du%rowtype;
    exp formule_service_du%rowtype;
    sr_id NUMERIC;
    m_count NUMERIC;
    motif_id NUMERIC;
    heures FLOAT;
    multiplicateur FLOAT;
  BEGIN
    IF ose_divers.intervenant_has_privilege( intervenant_id, 'saisie_service_referentiel' ) = 0 THEN RETURN; END IF;

    SELECT
      count(*) INTO m_count
    FROM modification_service_du msd
    WHERE
      1 = ose_divers.comprise_entre( msd.histo_creation, msd.histo_destruction ) 
      AND msd.intervenant_id = TEST_MODIFY_MOTIF_MOD_SERV.intervenant_id;
    IF 0 = m_count THEN RETURN; END IF; -- intervenant non concerné

    SELECT motif_id, heures, multiplicateur INTO
      motif_id, heures, multiplicateur FROM (
    SELECT
      motif_id,
      SUM( heures ) heures,
      multiplicateur
    
    FROM
      modification_service_du msd
      JOIN motif_modification_service mss ON mss.id = msd.motif_id
    WHERE
      1 = ose_divers.comprise_entre( msd.histo_creation, msd.histo_destruction ) 
      AND msd.intervenant_id = TEST_MODIFY_MOTIF_MOD_SERV.intervenant_id
    GROUP BY
      motif_id, multiplicateur
    ) tmp WHERE rownum = 1;

    ori := ose_formule.calc_service_du( intervenant_id, get_annee );
    exp := ori;

    ose_test.debut('OSE_TEST_FORMULE.TEST_MODIFY_MOTIF_MOD_SERV' );

    UPDATE motif_modification_service SET multiplicateur = multiplicateur * 2 WHERE id = motif_id;
    exp.service_du_modification := ori.service_du_modification + (heures * multiplicateur);
    ASSERT_GOOD_F_SERVICE_DU( exp, 'UPDATE' );

    ose_test.fin;
    
    UPDATE motif_modification_service SET multiplicateur = multiplicateur / 2 WHERE id = motif_id;
    ose_formule.MAJ_ALL_IDT;
  END;


  PROCEDURE TEST_MODIFY_REFERENTIEL ( intervenant_id NUMERIC ) IS
    ori formule_referentiel%rowtype;
    exp formule_referentiel%rowtype;
    structure_id NUMERIC;
    fonction_id NUMERIC;
    sr_id NUMERIC;
  BEGIN
    IF ose_divers.intervenant_has_privilege( intervenant_id, 'saisie_service_referentiel' ) = 0 THEN RETURN; END IF;

    structure_id := ose_test.GET_STRUCTURE_ENS_BY_NIVEAU(2).id;

    ori := ose_formule.calc_referentiel( intervenant_id, get_annee, structure_id );
    exp := ori;

    SELECT id into fonction_id FROM fonction_referentiel fr WHERE fr.histo_destruction is null AND id NOT IN (
      select fonction_id from service_referentiel where
        intervenant_id = TEST_MODIFY_REFERENTIEL.intervenant_id
        AND annee_id = get_annee
        AND structure_id = TEST_MODIFY_REFERENTIEL.structure_id
        
    ) AND rownum = 1;

    ose_test.debut('OSE_TEST_FORMULE.TEST_MODIFY_REFERENTIEL' );
    
    sr_id := ose_test.add_service_referentiel( fonction_id, intervenant_id, structure_id, get_annee, 10 );
    exp.referentiel := ori.referentiel + 10;
    ASSERT_GOOD_F_REFERENTIEL( exp, 'INSERT' );
    
    -- test update --
    UPDATE service_referentiel SET heures = heures + 1 WHERE id = sr_id;
    exp.referentiel := ori.referentiel + 10 + 1;
    ASSERT_GOOD_F_REFERENTIEL( exp, 'UPDATE' );

    -- test soft delete
    UPDATE service_referentiel SET histo_destruction = SYSDATE, histo_destructeur_id = ose_test.get_user WHERE id = sr_id;
    exp.referentiel := ori.referentiel;
    ASSERT_GOOD_F_REFERENTIEL( exp, 'SOFT DELETE' );

    -- test undelete
    UPDATE service_referentiel SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE id = sr_id;
    exp.referentiel := ori.referentiel + 10 + 1;
    ASSERT_GOOD_F_REFERENTIEL( exp, 'UNDELETE' );

    -- test delete --
    DELETE FROM service_referentiel WHERE ID = sr_id;
    exp.referentiel := ori.referentiel;
    ASSERT_GOOD_F_REFERENTIEL( exp, 'DELETE' );
    
    ose_test.fin;
  END;


  PROCEDURE TEST_MODIFY_SERVICE( intervenant_id NUMERIC ) IS
    element_pedagogique     ose.element_pedagogique%rowtype;
    fs_count                NUMERIC;
    upd_ep                  NUMERIC;
    upd_int                 NUMERIC;
    upd_et                  NUMERIC;
    fs                      formule_service%rowtype;
    fs_exp                  formule_service%rowtype;
    modulateur_id           NUMERIC;
    modulateur              ose.modulateur %rowtype;
    volume_horaire_id       NUMERIC;
  BEGIN
    IF OSE_DIVERS.INTERVENANT_HAS_PRIVILEGE( intervenant_id, 'saisie_service') = 0 THEN RETURN; END IF;

    element_pedagogique := ose_test.get_element_pedagogique();

    ose_test.debut('OSE_TEST_FORMULE.TEST_MODIFY_SERVICE' );

    -- insert
    fs.service_id := ose_test.add_service( intervenant_id, get_annee, element_pedagogique.id );
    fs := ose_formule.calc_service(fs.service_id);
    fs_exp := fs;
    ASSERT_GOOD_F_SERVICE( fs_exp, 'INSERT' );

    -- add vh
    volume_horaire_id := ose_test.add_volume_horaire(
      ose_test.get_type_volume_horaire('prevu').id,
      fs.service_id,
      COALESCE( element_pedagogique.periode_id, ose_test.get_periode().id ),
      ose_test.GET_TYPE_INTERVENTION_BY_ELEMT( element_pedagogique.id ).id,
      10
    );
    ASSERT_GOOD_F_VOLUME_HORAIRE( ose_formule.calc_volume_horaire(volume_horaire_id), 'ADD VOLUME HORAIRE' );

    -- soft delete
    update service set histo_destructeur_id = ose_test.get_user, histo_destruction = sysdate where id = fs.service_id;
    select count(*) INTO fs_count FROM formule_service WHERE service_id = fs.service_id;
    ASSERT_GOOD_F_SERVICE( ose_formule.get_def_service(fs.service_id), 'SOFT DELETE SERVICE');
    ASSERT_GOOD_F_VOLUME_HORAIRE( ose_formule.get_def_volume_horaire(volume_horaire_id), 'SOFT DELETE VOLUME HORAIRE' );

    -- undelete
    update service set histo_destructeur_id = null, histo_destruction = null where id = fs.service_id;
    ASSERT_GOOD_F_SERVICE( fs_exp, 'UNDELETE SERVICE' );
    update volume_horaire set histo_destructeur_id = null, histo_destruction = null where id = volume_horaire_id; -- restauration manuelle car pas automatique!!
    ASSERT_GOOD_F_VOLUME_HORAIRE( ose_formule.calc_volume_horaire(volume_horaire_id), 'UNDELETE VOLUME HORAIRE' );
    
    -- update element sans fc sans modulateur
    SELECT id, taux_fi, taux_fa, taux_fc into upd_ep, fs_exp.taux_fi, fs_exp.taux_fa, fs_exp.taux_fc FROM element_pedagogique 
    WHERE
      id <> TEST_MODIFY_SERVICE.element_pedagogique.id
      AND histo_destruction IS NULL
      AND taux_fc = 0
      AND NOT EXISTS(SELECT * FROM element_modulateur em WHERE element_id = element_pedagogique.id AND em.histo_destruction is null AND em.annee_id = get_annee)
      AND rownum = 1;
    update service set element_pedagogique_id = upd_ep WHERE id = fs.service_id;
    fs_exp.ponderation_service_du    := 1;
    fs_exp.ponderation_service_compl := 1;
    ASSERT_GOOD_F_SERVICE( fs_exp, 'UPDATE ELEMENT sans FC' );
    
    -- update element avec fc sans modulateur
    SELECT id, taux_fi, taux_fa, taux_fc into upd_ep, fs_exp.taux_fi, fs_exp.taux_fa, fs_exp.taux_fc FROM element_pedagogique 
    WHERE
      histo_destruction IS NULL
      AND taux_fc > 0
      AND NOT EXISTS(SELECT * FROM element_modulateur em WHERE element_id = element_pedagogique.id AND em.histo_destruction is null AND em.annee_id = get_annee)
      AND rownum = 1;
    update service set element_pedagogique_id = upd_ep WHERE id = fs.service_id;
    ASSERT_GOOD_F_SERVICE( fs_exp, 'UPDATE ELEMENT FC' );

    -- element avec modulateur
    SELECT ep.id, ep.taux_fi, ep.taux_fa, ep.taux_fc, M.PONDERATION_SERVICE_DU, M.PONDERATION_SERVICE_COMPL into upd_ep, fs_exp.taux_fi, fs_exp.taux_fa, fs_exp.taux_fc, fs_exp.ponderation_service_du, fs_exp.ponderation_service_compl
    FROM
      element_pedagogique ep
      JOIN element_modulateur em ON element_id = ep.id AND em.histo_destruction IS NULL AND em.annee_id = get_annee
      JOIN modulateur m ON m.id = em.modulateur_id AND m.histo_destruction IS NULL
    WHERE
      ep.histo_destruction IS NULL
      AND ep.id NOT IN (SELECT element_pedagogique_id FROM service WHERE service.id = fs.service_id)
      AND rownum = 1;
    update service set element_pedagogique_id = upd_ep WHERE id = fs.service_id;
    ASSERT_GOOD_F_SERVICE( fs_exp, 'UPDATE ELEMENT modulateur' );

    -- update intervenant
    SELECT id into upd_int FROM intervenant WHERE id <> intervenant_id AND OSE_DIVERS.INTERVENANT_HAS_PRIVILEGE(id,'saisie_service') = 1 AND histo_destruction IS NULL AND rownum = 1;
    update service set intervenant_id = upd_int WHERE id = fs.service_id;
    fs_exp.intervenant_id := upd_int;
    ASSERT_GOOD_F_SERVICE( fs_exp, 'UPDATE INTERVENANT' );
    update service set intervenant_id = TEST_MODIFY_SERVICE.intervenant_id WHERE id = fs.service_id;
    fs_exp.intervenant_id := intervenant_id;

    -- update etablissement
    IF ose_divers.intervenant_has_privilege( intervenant_id, 'saisie_service_exterieur' ) = 1 THEN
      upd_et := ose_test.get_etablissement().id;
      update service set element_pedagogique_id = null, etablissement_id = upd_et where id = fs.service_id;
      fs_exp.taux_fi := 1;
      fs_exp.taux_fa := 0;
      fs_exp.taux_fc := 0;
      fs_exp.ponderation_service_du    := 1;
      fs_exp.ponderation_service_compl := 1;
      ASSERT_GOOD_F_SERVICE( fs_exp, 'UPDATE ETABLISSEMENT' );
    END IF;

    -- delete
    delete from volume_horaire where id = volume_horaire_id;
    delete from service where id = fs.service_id;
    select count(*) INTO fs_count FROM formule_service WHERE service_id = fs.service_id;
    ASSERT( 0 = fs_count, 'DELETE');

    ose_test.fin;
  END;


  PROCEDURE TEST_MODIFY_ELEMENT( service_id NUMERIC ) IS
    fs                      formule_service%rowtype;
    fs_exp                  formule_service%rowtype;
    element_pedagogique_id  NUMERIC;
    ep     ose.element_pedagogique%rowtype;
  BEGIN
    fs := ose_formule.GET_SERVICE( service_id );
    fs_exp := fs;

    element_pedagogique_id := ose_test.get_service_by_id( service_id ).element_pedagogique_id;
    if element_pedagogique_id is null then return; end if;
    ep := ose_test.get_element_pedagogique_by_id( element_pedagogique_id );

    IF 0 = ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction ) THEN RETURN; END IF;

    ose_test.debut('OSE_TEST_FORMULE.TEST_MODIFY_ELEMENT' );

    -- update fc
    update element_pedagogique set taux_fc = 0.33, taux_fi = 0.33, taux_fa = 0.34 where id = element_pedagogique_id;
    fs_exp.taux_fi := 0.33;
    fs_exp.taux_fa := 0.34;
    fs_exp.taux_fc := 0.33;
    ASSERT_GOOD_F_SERVICE( fs_exp, 'UPDATE TAUX_FORMATION' );
    update element_pedagogique set taux_fc = ep.taux_fc, taux_fi = ep.taux_fi, taux_fa = ep.taux_fa where id = element_pedagogique_id;

    ose_test.fin;
  END;


  PROCEDURE TEST_MODIFY_MODULATEUR( service_id NUMERIC ) IS
    fs                      formule_service%rowtype;
    fs_exp                  formule_service%rowtype;
    element_pedagogique_id  NUMERIC;
    element_pedagogique     ose.element_pedagogique%rowtype;
    type_modulateur_id      NUMERIC;
    modulateur_id           NUMERIC;
    element_modulateur_id   NUMERIC;
  BEGIN
    element_pedagogique_id := ose_test.get_service_by_id( service_id ).element_pedagogique_id;
    if element_pedagogique_id is null then return; end if;

    fs := ose_formule.CALC_SERVICE( service_id );
    fs_exp := fs;

    -- création des données de test
    type_modulateur_id := ose_test.add_type_modulateur( 'MTEST', 'Type de modulateur de test', 1, 0 );
    modulateur_id := ose_test.add_modulateur(
      'MTESTM', 
      'Modulateur de test', 
      type_modulateur_id,
      1,
      1.12
    );


    ose_test.debut('OSE_TEST_FORMULE.TEST_MODIFY_MODULATEUR' );

    -- application du modulateur
    element_modulateur_id := ose_test.add_element_modulateur( element_pedagogique_id, modulateur_id, get_annee );
    fs_exp.ponderation_service_compl := fs.ponderation_service_compl * 1.12;
    ASSERT_GOOD_F_SERVICE( fs_exp, 'ADD MODULATEUR' );

    -- update
    UPDATE modulateur set ponderation_service_compl = 1.25 where id = modulateur_id;
    fs_exp.ponderation_service_compl := fs.ponderation_service_compl * 1.25;
    ASSERT_GOOD_F_SERVICE( fs_exp, 'UPDATE MODULATEUR' );

    delete from element_modulateur where id = element_modulateur_id;
    delete from modulateur where id = modulateur_id;
    delete from type_modulateur_structure where type_modulateur_id = TEST_MODIFY_MODULATEUR.type_modulateur_id;
    delete from type_modulateur where id = type_modulateur_id;

    fs_exp.ponderation_service_compl := fs.ponderation_service_compl;
    ASSERT_GOOD_F_SERVICE( fs_exp, 'AFTER DELETED MODULATEUR' );


    ose_test.fin;
  END;


  PROCEDURE TEST_MODIFY_VOLUME_HORAIRE( service_id NUMERIC ) IS
    fvh_ori           formule_volume_horaire%rowtype;
    fvh_exp           formule_volume_horaire%rowtype;
    s                 ose.service%rowtype;
    volume_horaire_id NUMERIC;
    c_id NUMERIC;
    v_id NUMERIC;
    vc_id NUMERIC;
    ti type_intervention%rowtype;
    pe_id NUMERIC;
    ori_etat NUMERIC;
    mnp_id NUMERIC;
  BEGIN
    ose_test.debut('OSE_TEST_FORMULE.TEST_MODIFY_VOLUME_HORAIRE' );

    s := ose_test.get_service_by_id( service_id );

    -- insert
    IF s.element_pedagogique_id IS NULL THEN
      pe_id := ose_test.get_periode().id;
      ti := ose_test.get_type_intervention('cm');
    ELSE
      pe_id := COALESCE( ose_test.get_element_pedagogique_by_id( s.element_pedagogique_id ).periode_id, ose_test.get_periode().id );
      ti := ose_test.GET_TYPE_INTERVENTION_BY_ELEMT( s.element_pedagogique_id );
    END IF;
    volume_horaire_id := ose_test.add_volume_horaire(
      ose_test.get_type_volume_horaire('prevu').id,
      service_id,
      pe_id,
      ti.id,
      10
    );

    fvh_ori := ose_formule.calc_volume_horaire( volume_horaire_id );
    fvh_exp := fvh_ori;

    ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'INSERT' );

    -- update heures
    update volume_horaire set heures = heures + 5 where id = volume_horaire_id;
    fvh_exp.heures := fvh_ori.heures + 5;
    ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'UPDATE HEURES' );

    -- soft delete
    update volume_horaire set histo_destruction = sysdate, histo_destructeur_id = ose_test.get_user where id = volume_horaire_id;
    ASSERT_GOOD_F_VOLUME_HORAIRE( ose_formule.get_def_volume_horaire( volume_horaire_id ), 'SOFT DELETE' );

    -- undelete
    update volume_horaire set histo_destruction = null, histo_destructeur_id = null where id = volume_horaire_id;
    ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'UNDELETE' );

    -- update motif non paiement
    IF 1 = ose_divers.intervenant_has_privilege( s.intervenant_id, 'saisie_motif_non_paiement' ) THEN
      mnp_id := ose_test.GET_MOTIF_NON_PAIEMENT().id;
      update volume_horaire set motif_non_paiement_id = mnp_id where id = volume_horaire_id;
      ASSERT_GOOD_F_VOLUME_HORAIRE( ose_formule.get_def_volume_horaire(volume_horaire_id), 'UPDATE MOTIF NON PAIEMENT NOT NULL' );

      update volume_horaire set motif_non_paiement_id = null, heures=12 where id = volume_horaire_id;
      fvh_exp.heures := 12;
      ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'UPDATE MOTIF NON PAIEMENT NULL and HEURES' );
    END IF;

    IF ose_divers.intervenant_est_permanent( s.intervenant_id ) = 0 AND s.etablissement_id = ose_parametre.get_etablissement THEN
      -- add validation
      v_id := ose_test.ADD_VALIDATION_VOLUME_HORAIRE( s.structure_ens_id, s.intervenant_id, volume_horaire_id, s.id );

      fvh_exp.etat_volume_horaire_id := ose_test.get_etat_volume_horaire('valide').id;
      ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'UPDATE VALIDATION VH validés' );

      -- add contrat
      c_id := ose_test.add_contrat( s.structure_ens_id, s.intervenant_id, volume_horaire_id, s.id );
      ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'ADD CONTRAT PROJET : un projet de contrat ne change rien', false );

      -- validation contrat
      vc_id := ose_test.add_contrat_validation( c_id );
      fvh_exp.etat_volume_horaire_id := ose_test.get_etat_volume_horaire('contrat_edite').id;
      ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'UPDATE CONTRAT EDITE' );

      -- signature contrat
      c_id := ose_test.SIGNATURE_CONTRAT( c_id );
      fvh_exp.etat_volume_horaire_id := ose_test.get_etat_volume_horaire('contrat_signe').id;
      ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'UPDATE CONTRAT SIGNE' );

      c_id := ose_test.DEL_CONTRAT_VALIDATION( c_id );
      update volume_horaire set contrat_id = NULL where id = volume_horaire_id;
      delete from contrat where id = c_id;
      OSE_TEST.DEL_VALIDATION_VOLUME_HORAIRE( s.structure_ens_id, s.intervenant_id, volume_horaire_id, s.id, v_id );
    END IF;

    -- delete
    delete from volume_horaire where id = volume_horaire_id;
    ASSERT_GOOD_F_VOLUME_HORAIRE( ose_formule.get_def_volume_horaire(volume_horaire_id), 'DELETE', false );

    ose_test.fin;
  END;


  PROCEDURE TEST_MODIFY_TYPE_INTERVENTION( volume_horaire_id NUMERIC ) IS
    fvh_ori           formule_volume_horaire%rowtype;
    fvh_exp           formule_volume_horaire%rowtype;
    vh                volume_horaire%rowtype;
    ti                type_intervention%rowtype;
  BEGIN
    vh := ose_test.get_volume_horaire( volume_horaire_id );

    IF vh.motif_non_paiement_id IS NOT NULL THEN RETURN; END IF;

    ti := ose_test.get_type_intervention_by_id( vh.type_intervention_id );

    fvh_ori := ose_formule.calc_volume_horaire( volume_horaire_id );
    fvh_exp := fvh_ori;

    ose_test.debut('OSE_TEST_FORMULE.TEST_MODIFY_TYPE_INTERVENTION' );

    -- update taux
    UPDATE type_intervention SET taux_hetd_service = 9.4, taux_hetd_complementaire = 9.5 WHERE id = ti.id;
    fvh_exp.taux_service_du := 9.4;
    fvh_exp.taux_service_compl := 9.5;
    ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'UPDATE taux VH' );

    ose_test.fin;
    
    UPDATE type_intervention SET taux_hetd_service = ti.taux_hetd_service, taux_hetd_complementaire = ti.taux_hetd_complementaire WHERE id = ti.id;
  END;
  

  PROCEDURE TEST_MODIFY_VALIDATION ( volume_horaire_id NUMERIC ) IS
    fvh_ori formule_volume_horaire%rowtype;
    fvh_exp formule_volume_horaire%rowtype;
    vh      volume_horaire%rowtype;
    s       service%rowtype;
    c       contrat%rowtype;
    v_id    NUMERIC;
  BEGIN
    vh := ose_test.get_volume_horaire( volume_horaire_id );
    
    IF vh.motif_non_paiement_id IS NOT NULL THEN RETURN; END IF;
    
    s  := ose_test.get_service_by_id ( vh.service_id );
    IF vh.contrat_id IS NOT NULL THEN
      c  := ose_test.get_contrat_by_id ( vh.contrat_id );
      IF c.histo_destruction IS NOT NULL THEN
        c.id := null; -- pas de contrat s'il est historisé!!
      END IF;
    END IF;
    fvh_ori := ose_formule.calc_volume_horaire( volume_horaire_id );
    fvh_exp := fvh_ori;
    
    ose_test.debut('OSE_TEST_FORMULE.TEST_MODIFY_VALIDATION' );

    -- validation du volume horaire
    -- ajout (si nécessaire )

    IF c.id IS NULL AND 0 = ose_divers.volume_horaire_valide(volume_horaire_id) THEN -- validation de volume horaire

      -- insert
      v_id := ose_test.ADD_VALIDATION_VOLUME_HORAIRE( COALESCE( s.structure_ens_id, s.structure_aff_id ), s.intervenant_id, volume_horaire_id, s.id );
      IF fvh_ori.etat_volume_horaire_id = ose_test.get_etat_volume_horaire('saisi').id THEN -- si pas encore validé, alors devient validé !!
        fvh_exp.etat_volume_horaire_id := ose_test.get_etat_volume_horaire('valide').id;
      END IF;
      ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'INSERT pour volume_horaire' );
  
      -- soft delete
      UPDATE validation SET histo_destruction = SYSDATE, histo_destructeur_id = ose_test.get_user WHERE id = v_id;
      fvh_exp.etat_volume_horaire_id := fvh_ori.etat_volume_horaire_id;
      ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'SOFT DELETE pour volume_horaire' );
  
      -- undelete
      UPDATE validation SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE id = v_id;
      IF fvh_ori.etat_volume_horaire_id = ose_test.get_etat_volume_horaire('saisi').id THEN -- si pas encore validé, alors devient validé !!
        fvh_exp.etat_volume_horaire_id := ose_test.get_etat_volume_horaire('valide').id;
      END IF;
      ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'UNDELETE pour volume_horaire' );
  
      -- delete
      ose_test.DEL_VALIDATION_VOLUME_HORAIRE( s.structure_ens_id, s.intervenant_id, volume_horaire_id, s.id, v_id );
      fvh_exp.etat_volume_horaire_id := fvh_ori.etat_volume_horaire_id;
      ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'DELETE pour volume_horaire' );

    ELSIF c.id IS NOT NULL AND c.validation_id IS NULL THEN -- validation de contrat si pas déjà validé

      -- insert
      v_id := ose_test.ADD_CONTRAT_VALIDATION( c.id );
      fvh_exp.etat_volume_horaire_id := ose_test.get_etat_volume_horaire( CASE WHEN c.date_retour_signe IS NULL THEN 'contrat_edite' ELSE 'contrat_signe' END ).id;
      ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'INSERT pour contrat' );
      
      -- soft delete
      UPDATE validation SET histo_destruction = SYSDATE, histo_destructeur_id = ose_test.get_user WHERE id = v_id;
      fvh_exp.etat_volume_horaire_id := fvh_ori.etat_volume_horaire_id;
      ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'SOFT DELETE pour contrat' );
      
      -- undelete
      UPDATE validation SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE id = v_id;
      fvh_exp.etat_volume_horaire_id := ose_test.get_etat_volume_horaire( CASE WHEN c.date_retour_signe IS NULL THEN 'contrat_edite' ELSE 'contrat_signe' END ).id;
      ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'UNDELETE pour contrat' );
      
      -- delete
      c.id := ose_test.DEL_CONTRAT_VALIDATION( c.id );
      fvh_exp.etat_volume_horaire_id := fvh_ori.etat_volume_horaire_id;
      ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'DELETE pour contrat' );
    END IF;

    ose_test.fin;
  END;


  PROCEDURE TEST_MODIFY_CONTRAT ( volume_horaire_id NUMERIC ) IS
    fvh_ori formule_volume_horaire%rowtype;
    fvh_exp formule_volume_horaire%rowtype;
    vh      volume_horaire%rowtype;
    s       service%rowtype;
    c_id    NUMERIC;
    v_id    NUMERIC;
  BEGIN
    vh := ose_test.get_volume_horaire( volume_horaire_id );

    IF vh.motif_non_paiement_id IS NOT NULL THEN RETURN; END IF;

    s  := ose_test.get_service_by_id ( vh.service_id );

    fvh_ori := ose_formule.calc_volume_horaire( volume_horaire_id );
    fvh_exp := fvh_ori;
  
    IF vh.contrat_id IS NOT NULL THEN RETURN; END IF; -- pas de test si un contrat est déjà présent!!
    IF 0 = ose_divers.VOLUME_HORAIRE_VALIDE( volume_horaire_id ) THEN RETURN; END IF; -- Pas de contractualisation sur un volume horaire non validé
  
    ose_test.debut('OSE_TEST_FORMULE.TEST_MODIFY_CONTRAT' );

    -- insert
    c_id := ose_test.add_contrat( COALESCE(s.structure_ens_id,s.structure_aff_id), s.intervenant_id, volume_horaire_id, s.id );
    v_id := ose_test.ADD_CONTRAT_VALIDATION( c_id );
    fvh_exp.etat_volume_horaire_id := ose_test.get_etat_volume_horaire( 'contrat_edite' ).id;
    ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'INSERT pour contrat' );

    -- soft delete
    UPDATE contrat SET histo_destruction = SYSDATE, histo_destructeur_id = ose_test.get_user WHERE id = c_id;
    fvh_exp.etat_volume_horaire_id := fvh_ori.etat_volume_horaire_id;
    ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'SOFT DELETE pour contrat' );

    -- undelete
    UPDATE contrat SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE id = c_id;
    fvh_exp.etat_volume_horaire_id := ose_test.get_etat_volume_horaire( 'contrat_edite' ).id;
    ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'UNDELETE pour contrat' );

    -- signature
    c_id := ose_test.SIGNATURE_CONTRAT( c_id );
    fvh_exp.etat_volume_horaire_id := ose_test.get_etat_volume_horaire( 'contrat_signe' ).id;
    ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'SIGNATURE pour contrat' );

    -- delete
    c_id := ose_test.DEL_CONTRAT_VALIDATION( c_id );
    update volume_horaire set contrat_id = null where contrat_id = c_id;
    delete from contrat where id = c_id;
    fvh_exp.etat_volume_horaire_id := fvh_ori.etat_volume_horaire_id;
    ASSERT_GOOD_F_VOLUME_HORAIRE( fvh_exp, 'DELETE pour contrat' );

    ose_test.fin;
  END;

END OSE_TEST_FORMULE;
/
---------------------------
--Nouveau PACKAGE BODY
--OSE_TEST
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_TEST" AS
  TYPE OUT_LIST IS TABLE OF CLOB;

  SUCCES_SHOWN BOOLEAN DEFAULT TRUE;
  T_SUCCES_COUNT NUMERIC DEFAULT 0;
  T_ECHECS_COUNT NUMERIC DEFAULT 0;
  A_SUCCES_COUNT NUMERIC DEFAULT 0;
  A_ECHECS_COUNT NUMERIC DEFAULT 0;
  CURRENT_TEST CLOB;
  CURRENT_TEST_OUTPUT_BUFFER OUT_LIST := OUT_LIST();
  CURRENT_TEST_OUTPUT_BUFFER_ERR BOOLEAN;
  
  PROCEDURE SHOW_SUCCES IS
  BEGIN
    SUCCES_SHOWN := true;
  END SHOW_SUCCES;

  PROCEDURE HIDE_SUCCES IS
  BEGIN
    SUCCES_SHOWN := false;
  END HIDE_SUCCES;

  PROCEDURE DEBUT( TEST_NAME CLOB ) IS
  BEGIN
    CURRENT_TEST := TEST_NAME;
    CURRENT_TEST_OUTPUT_BUFFER_ERR := FALSE;
    echo (' '); echo('TEST ' || TEST_NAME || ' >>>>>>>>>>' );
  END;

  PROCEDURE FIN IS
    TEST_NAME CLOB;
  BEGIN
    IF CURRENT_TEST_OUTPUT_BUFFER_ERR THEN
      T_ECHECS_COUNT := T_ECHECS_COUNT + 1;
      echo('>>>>>>>>>> FIN DU TEST ' || CURRENT_TEST ); echo (' ');
      CURRENT_TEST := NULL;

      FOR i IN 1 .. CURRENT_TEST_OUTPUT_BUFFER.COUNT LOOP
        echo( CURRENT_TEST_OUTPUT_BUFFER(i) );
      END LOOP;
    ELSE
      T_SUCCES_COUNT := T_SUCCES_COUNT + 1;
      TEST_NAME := CURRENT_TEST;
      CURRENT_TEST := NULL;
      echo('SUCCÈS DU TEST : ' || TEST_NAME );
    END IF;
    CURRENT_TEST_OUTPUT_BUFFER.DELETE; -- clear buffer
  END;

  PROCEDURE ECHO( MSG CLOB ) IS
  BEGIN
    IF CURRENT_TEST IS NULL THEN
      dbms_output.put_line(MSG);
    ELSE
      CURRENT_TEST_OUTPUT_BUFFER.EXTEND;
      CURRENT_TEST_OUTPUT_BUFFER (CURRENT_TEST_OUTPUT_BUFFER.LAST) := MSG;
    END IF;
  END;

  PROCEDURE INIT IS
  BEGIN
    T_SUCCES_COUNT  := 0;
    T_ECHECS_COUNT  := 0;
    A_SUCCES_COUNT  := 0;
    A_ECHECS_COUNT  := 0;
    CURRENT_TEST    := NULL;
  END INIT;

  PROCEDURE SHOW_STATS IS
  BEGIN
    echo ( ' ' );
    echo ( '********************************* STATISTIQUES *********************************' );
    echo ( ' ' );
    echo ( '   - nombre de tests passés avec succès :       ' || T_SUCCES_COUNT );
    echo ( '   - nombre de tests ayant échoué :             ' || T_ECHECS_COUNT );
    echo ( ' ' );
    echo ( '   - nombre d''assertions passés avec succès :   ' || A_SUCCES_COUNT );
    echo ( '   - nombre d''assertions ayant échoué :         ' || A_ECHECS_COUNT );
    echo ( ' ' );
    echo ( '********************************************************************************' );
    echo ( ' ' );
  END;

  PROCEDURE ASSERT( condition BOOLEAN, MSG CLOB ) IS
  BEGIN
    IF condition THEN
      A_SUCCES_COUNT := A_SUCCES_COUNT + 1;
      IF SUCCES_SHOWN THEN
        ECHO('        SUCCÈS : ' || MSG );
      END IF;
    ELSE
      A_ECHECS_COUNT := A_ECHECS_COUNT + 1;
      CURRENT_TEST_OUTPUT_BUFFER_ERR := TRUE;
      ECHO('        ** ECHEC ** : ' || MSG );
    END IF;
  END;
  
  PROCEDURE ADD_BUFFER( table_name VARCHAR2, id NUMERIC ) IS
  BEGIN
    INSERT INTO TEST_BUFFER( ID, TABLE_NAME, DATA_ID ) 
                    VALUES ( TEST_BUFFER_ID_SEQ.NEXTVAL, table_name, id );
  END;
  
  PROCEDURE DELETE_TEST_DATA IS
  BEGIN
    FOR tb IN (SELECT * FROM TEST_BUFFER)
    LOOP
      EXECUTE IMMEDIATE 'DELETE FROM ' || tb.table_name || ' WHERE ID = ' || tb.data_id;
    END LOOP;
    DELETE FROM TEST_BUFFER;
  END;
  
  FUNCTION GET_USER RETURN NUMERIC IS
  BEGIN
    RETURN 1; -- utilisateur réservé aux tests... (à revoir!!)
  END;
 
  FUNCTION GET_SOURCE RETURN NUMERIC IS
    res_id Numeric;
  BEGIN
    SELECT s.id INTO res_id FROM ose.source s WHERE s.code = 'TEST';
    RETURN res_id;
  END;
  
  
  FUNCTION GET_CIVILITE( libelle_court VARCHAR2 DEFAULT NULL ) RETURN civilite%rowtype IS
    res civilite%rowtype;
  BEGIN
    SELECT * INTO res FROM civilite WHERE
      (OSE_DIVERS.LIKED( libelle_court, GET_CIVILITE.libelle_court ) = 1 OR GET_CIVILITE.libelle_court IS NULL) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_TYPE_INTERVENANT( code VARCHAR2 DEFAULT NULL ) RETURN type_intervenant%rowtype IS
    res type_intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM type_intervenant WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_INTERVENANT.code ) = 1 OR GET_TYPE_INTERVENANT.code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_TYPE_INTERVENANT_BY_ID( id NUMERIC ) RETURN type_intervenant%rowtype IS
    res type_intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM type_intervenant WHERE
      id = GET_TYPE_INTERVENANT_BY_ID.id;
    RETURN res;
  END;

  FUNCTION GET_STATUT_INTERVENANT( source_code VARCHAR2 DEFAULT NULL ) RETURN statut_intervenant%rowtype IS
    res statut_intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM statut_intervenant WHERE
      (OSE_DIVERS.LIKED( source_code, GET_STATUT_INTERVENANT.source_code ) = 1 OR GET_STATUT_INTERVENANT.source_code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_STATUT_INTERVENANT_BY_ID( id NUMERIC ) RETURN statut_intervenant%rowtype IS
    res statut_intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM statut_intervenant WHERE id = GET_STATUT_INTERVENANT_BY_ID.id;
    RETURN res;
  END;
  
  FUNCTION GET_TYPE_STRUCTURE( code VARCHAR2 DEFAULT NULL ) RETURN type_structure%rowtype IS
    res type_structure%rowtype;
  BEGIN
    SELECT * INTO res FROM type_structure WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_STRUCTURE.code ) = 1 OR GET_TYPE_STRUCTURE.code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_STRUCTURE( source_code VARCHAR2 DEFAULT NULL ) RETURN structure%rowtype IS
    res structure%rowtype;
  BEGIN
    SELECT * INTO res FROM structure WHERE
      (OSE_DIVERS.LIKED( source_code, GET_STRUCTURE.source_code ) = 1 OR GET_STRUCTURE.source_code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION GET_STRUCTURE_BY_ID( id NUMERIC ) RETURN structure%rowtype IS
    res structure%rowtype;
  BEGIN
    SELECT * INTO res FROM structure WHERE id = GET_STRUCTURE_BY_ID.id;
    RETURN res;
  END;
  
  FUNCTION GET_STRUCTURE_ENS_BY_NIVEAU( niveau NUMERIC ) RETURN structure%rowtype IS
    res structure%rowtype;
  BEGIN
    SELECT * INTO res FROM structure WHERE
      niveau = GET_STRUCTURE_ENS_BY_NIVEAU.niveau AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_STRUCTURE_UNIV RETURN "STRUCTURE"%rowtype IS
    res "STRUCTURE"%rowtype;
  BEGIN
    SELECT * INTO res FROM "STRUCTURE" WHERE source_code = 'UNIV' AND histo_destruction IS NULL ;
    RETURN res;  
  END;

  FUNCTION ADD_STRUCTURE(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    parente_id    NUMERIC,
    type_id       NUMERIC,
    source_code   VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
    parente  structure%rowtype;
    niv2_id  NUMERIC;
  BEGIN
    entity_id := STRUCTURE_ID_SEQ.NEXTVAL;
    IF parente_id IS NOT NULL THEN
      parente := GET_STRUCTURE_BY_ID( parente_id );
      niv2_id := CASE
        WHEN parente.niveau = 1 THEN entity_id
        WHEN parente.niveau = 2 THEN parente_id
        WHEN parente.niveau = 3 THEN parente.parente_id
        WHEN parente.niveau = 4 THEN GET_STRUCTURE_BY_ID( parente.parente_id ).parente_id
        WHEN parente.niveau = 5 THEN GET_STRUCTURE_BY_ID( GET_STRUCTURE_BY_ID( parente.parente_id ).parente_id ).parente_id
        WHEN parente.niveau = 6 THEN GET_STRUCTURE_BY_ID( GET_STRUCTURE_BY_ID( GET_STRUCTURE_BY_ID( parente.parente_id ).parente_id ).parente_id ).parente_id
      END;
    END IF;
    INSERT INTO STRUCTURE (
      ID,
      LIBELLE_LONG,
      LIBELLE_COURT,
      PARENTE_ID,
      STRUCTURE_NIV2_ID,
      TYPE_ID,
      ETABLISSEMENT_ID,
      NIVEAU,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      libelle_long,
      libelle_court,
      parente_id,
      niv2_id,
      type_id,
      OSE_PARAMETRE.GET_ETABLISSEMENT,
      NVL( parente.niveau, 1),
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'structure', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_INTERVENANT( source_code VARCHAR2 DEFAULT NULL ) RETURN intervenant%rowtype IS
    res intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM intervenant WHERE
      (OSE_DIVERS.LIKED( source_code, GET_INTERVENANT.source_code ) = 1 OR GET_INTERVENANT.source_code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_INTERVENANT_BY_ID( id NUMERIC DEFAULT NULL ) RETURN intervenant%rowtype IS
    res intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM intervenant WHERE id = GET_INTERVENANT_BY_ID.id;
    RETURN res;
  END;

  FUNCTION GET_INTERVENANT_BY_STATUT( statut_id NUMERIC ) RETURN intervenant%rowtype IS
    res intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM intervenant WHERE
      statut_id = GET_INTERVENANT_BY_STATUT.statut_id AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_INTERVENANT_BY_TYPE( type_id NUMERIC ) RETURN intervenant%rowtype IS
    res intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM intervenant WHERE
      type_id = GET_INTERVENANT_BY_TYPE.type_id AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;  
  END;

  FUNCTION ADD_INTERVENANT(
    civilite_id     NUMERIC,
    nom_usuel       VARCHAR2,
    prenom          VARCHAR2,
    date_naissance  DATE,
    email           VARCHAR2,
    statut_id       NUMERIC,
    structure_id    NUMERIC,
    source_code     VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
    statut statut_intervenant%rowtype;
    type_interv type_intervenant%rowtype;
  BEGIN
    entity_id := INTERVENANT_ID_SEQ.NEXTVAL;
    statut := GET_STATUT_INTERVENANT_BY_ID( statut_id );
    type_interv := GET_TYPE_INTERVENANT_BY_ID( statut.type_intervenant_id );
    INSERT INTO INTERVENANT (
      ID,
      CIVILITE_ID,
      NOM_USUEL,
      PRENOM,
      NOM_PATRONYMIQUE,
      DATE_NAISSANCE,
      PAYS_NAISSANCE_CODE_INSEE,
      PAYS_NAISSANCE_LIBELLE,
      EMAIL,
      TYPE_ID,
      STATUT_ID,
      STRUCTURE_ID,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      civilite_id,
      nom_usuel,
      prenom,
      nom_usuel,
      date_naissance,
      100,
      'FRANCE',
      email,
      type_interv.id,
      statut_id,
      structure_id,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'intervenant', entity_id);
    IF type_interv.code = 'P' THEN
      INSERT INTO INTERVENANT_PERMANENT(
        ID,
        SOURCE_ID,
        SOURCE_CODE,
        HISTO_CREATEUR_ID,
        HISTO_MODIFICATEUR_ID
      )VALUES(
        entity_id,
        GET_SOURCE,
        source_code,
        GET_USER,
        GET_USER
      );
      INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'intervenant_permanent', entity_id);
    END IF;
    IF type_interv.code = 'E' THEN
      INSERT INTO INTERVENANT_EXTERIEUR(
        ID,
        SOURCE_ID,
        SOURCE_CODE,
        HISTO_CREATEUR_ID,
        HISTO_MODIFICATEUR_ID
      )VALUES(
        entity_id,
        GET_SOURCE,
        source_code,
        GET_USER,
        GET_USER
      );
      INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'intervenant_exterieur', entity_id);
    END IF;
    RETURN entity_id;
  END;

  FUNCTION GET_GROUPE_TYPE_FORMATION( source_code VARCHAR2 DEFAULT NULL ) RETURN groupe_type_formation%rowtype IS
    res groupe_type_formation%rowtype;
  BEGIN
    SELECT * INTO res FROM groupe_type_formation WHERE
      (OSE_DIVERS.LIKED( source_code, GET_GROUPE_TYPE_FORMATION.source_code ) = 1 OR GET_GROUPE_TYPE_FORMATION.source_code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_GROUPE_TYPE_FORMATION(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    source_code   VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := GROUPE_TYPE_FORMATION_ID_SEQ.NEXTVAL;
    INSERT INTO GROUPE_TYPE_FORMATION (
      ID,
      LIBELLE_COURT,
      LIBELLE_LONG,
      ORDRE,
      PERTINENCE_NIVEAU,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    ) VALUES (
      entity_id,
      libelle_court,
      libelle_long,
      999,
      0,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'groupe_type_formation', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_TYPE_FORMATION( source_code VARCHAR2 ) RETURN type_formation%rowtype IS
    res type_formation%rowtype;
  BEGIN
    SELECT * INTO res FROM type_formation WHERE
      (OSE_DIVERS.LIKED( source_code, GET_TYPE_FORMATION.source_code ) = 1 OR GET_TYPE_FORMATION.source_code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_TYPE_FORMATION(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    groupe_id     NUMERIC,
    source_code   VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := TYPE_FORMATION_ID_SEQ.NEXTVAL;
    INSERT INTO TYPE_FORMATION(
      ID,
      LIBELLE_LONG,
      LIBELLE_COURT,
      GROUPE_ID,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    ) VALUES (
      entity_id,
      libelle_long,
      libelle_court,
      groupe_id,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'type_formation', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_ETAPE( source_code VARCHAR2 DEFAULT NULL ) RETURN etape%rowtype IS
    res etape%rowtype;
  BEGIN
    SELECT * INTO res FROM etape WHERE
      (OSE_DIVERS.LIKED( source_code, GET_ETAPE.source_code ) = 1 OR GET_ETAPE.source_code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_ETAPE(
    libelle           VARCHAR2,
    type_formation_id NUMERIC,
    niveau            NUMERIC,
    structure_id      NUMERIC,
    source_code       VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := ETAPE_ID_SEQ.NEXTVAL;
    INSERT INTO ETAPE (
      ID,
      LIBELLE,
      TYPE_FORMATION_ID,
      NIVEAU,
      SPECIFIQUE_ECHANGES,
      STRUCTURE_ID,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      libelle,
      type_formation_id,
      niveau,
      0,
      structure_id,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'etape', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_PERIODE( code VARCHAR2 DEFAULT NULL ) RETURN periode%rowtype IS
    res periode%rowtype;
  BEGIN
    SELECT * INTO res FROM periode WHERE
      (OSE_DIVERS.LIKED( code, GET_PERIODE.code ) = 1 OR GET_PERIODE.code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_ELEMENT_PEDAGOGIQUE( source_code VARCHAR2 DEFAULT NULL ) RETURN element_pedagogique%rowtype IS
    res element_pedagogique%rowtype;
  BEGIN
    SELECT * INTO res FROM element_pedagogique WHERE
      (OSE_DIVERS.LIKED( source_code, GET_ELEMENT_PEDAGOGIQUE.source_code ) = 1 OR GET_ELEMENT_PEDAGOGIQUE.source_code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION GET_ELEMENT_PEDAGOGIQUE_BY_ID( ID NUMERIC ) RETURN element_pedagogique%rowtype IS
    res element_pedagogique%rowtype;
  BEGIN
    SELECT * INTO res FROM element_pedagogique WHERE id = GET_ELEMENT_PEDAGOGIQUE_BY_ID.id;
    RETURN res;
  END;
  
  FUNCTION ADD_ELEMENT_PEDAGOGIQUE(
    libelle       VARCHAR2,
    etape_id      NUMERIC,
    structure_id  NUMERIC,
    periode_id    NUMERIC,
    taux_foad     FLOAT,
    taux_fi       FLOAT,
    taux_fc       FLOAT,
    taux_fa       FLOAT,
    source_code   VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
    ch_id NUMERIC;
  BEGIN
    entity_id := ELEMENT_PEDAGOGIQUE_ID_SEQ.NEXTVAL;
    INSERT INTO ELEMENT_PEDAGOGIQUE (
      ID,
      LIBELLE,
      ETAPE_ID,
      STRUCTURE_ID,
      PERIODE_ID,
      TAUX_FOAD,
      TAUX_FI,
      TAUX_FC,
      TAUX_FA,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      libelle,
      etape_id,
      structure_id,
      periode_id,
      taux_foad,
      taux_fi,
      taux_fc,
      taux_fa,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    ch_id := CHEMIN_PEDAGOGIQUE_ID_SEQ.NEXTVAL;
    INSERT INTO CHEMIN_PEDAGOGIQUE (
      ID,
      ELEMENT_PEDAGOGIQUE_ID,
      ETAPE_ID,
      ORDRE,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      ch_id,
      entity_id,
      etape_id,
      9999999,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'element_pedagogique', entity_id);
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'chemin_pedagogique', ch_id);
    RETURN entity_id;
  END;

  FUNCTION GET_TYPE_MODULATEUR( code VARCHAR2 DEFAULT NULL ) RETURN type_modulateur%rowtype IS
    res type_modulateur%rowtype;
  BEGIN
    SELECT * INTO res FROM type_modulateur WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_MODULATEUR.code ) = 1 OR GET_TYPE_MODULATEUR.code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_TYPE_MODULATEUR(
    code        VARCHAR2,
    libelle     VARCHAR2,
    publique    NUMERIC,
    obligatoire NUMERIC
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
    tms_id    NUMERIC;
    structure_id NUMERIC;
  BEGIN
    entity_id := TYPE_MODULATEUR_ID_SEQ.NEXTVAL;
    INSERT INTO TYPE_MODULATEUR (
      ID,
      CODE,
      LIBELLE,
      PUBLIQUE,
      OBLIGATOIRE,
      SAISIE_PAR_ENSEIGNANT,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      code,
      libelle,
      publique,
      obligatoire,
      0,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'type_modulateur', entity_id);
    structure_id := ose_test.get_structure_univ().id;
    tms_id := TYPE_MODULATEUR_STRUCTU_ID_SEQ.NEXTVAL;
    INSERT INTO TYPE_MODULATEUR_STRUCTURE(
      ID,
      TYPE_MODULATEUR_ID,
      STRUCTURE_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      tms_id,
      entity_id,
      structure_id,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'type_modulateur_structure', tms_id);
    RETURN entity_id;
  END;

  FUNCTION GET_MODULATEUR( code VARCHAR2 DEFAULT NULL ) RETURN modulateur%rowtype IS
    res modulateur%rowtype;
  BEGIN
    SELECT * INTO res FROM modulateur WHERE
      (OSE_DIVERS.LIKED( code, GET_MODULATEUR.code ) = 1 OR GET_MODULATEUR.code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_MODULATEUR(
    code                      VARCHAR2,
    libelle                   VARCHAR2,
    type_modulateur_id        NUMERIC,
    ponderation_service_du    FLOAT,
    ponderation_service_compl FLOAT
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := MODULATEUR_ID_SEQ.NEXTVAL;
    INSERT INTO MODULATEUR (
      ID,
      CODE,
      LIBELLE,
      TYPE_MODULATEUR_ID,
      PONDERATION_SERVICE_DU,
      PONDERATION_SERVICE_COMPL,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      code,
      libelle,
      type_modulateur_id,
      ponderation_service_du,
      ponderation_service_compl,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'modulateur', entity_id);
    RETURN entity_id;
  END;

  FUNCTION ADD_ELEMENT_MODULATEUR(
    element_id    NUMERIC,
    modulateur_id NUMERIC,
    annee_id      NUMERIC
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := ELEMENT_MODULATEUR_ID_SEQ.NEXTVAL;
    INSERT INTO ELEMENT_MODULATEUR (
      ID,
      ELEMENT_ID,
      MODULATEUR_ID,
      ANNEE_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      element_id,
      modulateur_id,
      annee_id,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'element_modulateur', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_FONCTION_REFERENTIEL( code VARCHAR2 DEFAULT NULL ) RETURN fonction_referentiel%rowtype IS
    res fonction_referentiel%rowtype;
  BEGIN
    SELECT * INTO res FROM fonction_referentiel WHERE
      (OSE_DIVERS.LIKED( code, GET_FONCTION_REFERENTIEL.code ) = 1 OR GET_FONCTION_REFERENTIEL.code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_FONCTION_REFERENTIEL(
    code          VARCHAR2,
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    plafond       FLOAT
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := FONCTION_REFERENTIEL_ID_SEQ.NEXTVAL;
    INSERT INTO FONCTION_REFERENTIEL (
      ID,
      CODE,
      LIBELLE_LONG,
      LIBELLE_COURT,
      PLAFOND,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      code,
      libelle_long,
      libelle_court,
      plafond,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'fonction_referentiel', entity_id);
    RETURN entity_id;
  END;
  
  FUNCTION ADD_SERVICE_REFERENTIEL(
    fonction_id     NUMERIC,
    intervenant_id  NUMERIC,
    structure_id    NUMERIC,
    annee_id        NUMERIC,
    heures          FLOAT
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := SERVICE_REFERENTIEL_ID_SEQ.NEXTVAL;
    INSERT INTO SERVICE_REFERENTIEL (
      ID,
      FONCTION_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      ANNEE_ID,
      HEURES,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      fonction_id,
      intervenant_id,
      structure_id,
      annee_id,
      heures,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'service_referentiel', entity_id);
    RETURN entity_id;
  END;
  
  FUNCTION ADD_MODIFICATION_SERVICE_DU(
    intervenant_id  NUMERIC,
    annee_id        NUMERIC,
    heures          FLOAT,
    motif_id        NUMERIC,
    commentaires    CLOB DEFAULT NULL
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := MODIFICATION_SERVICE_DU_ID_SEQ.NEXTVAL;
    INSERT INTO MODIFICATION_SERVICE_DU (
      ID,
      INTERVENANT_ID,
      ANNEE_ID,
      HEURES,
      MOTIF_ID,
      COMMENTAIRES,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      intervenant_id,
      annee_id,
      heures,
      motif_id,
      commentaires,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'modification_service_du', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_MOTIF_MODIFICATION_SERVICE( code VARCHAR2 DEFAULT NULL, multiplicateur FLOAT DEFAULT NULL ) RETURN motif_modification_service%rowtype IS
    res motif_modification_service%rowtype;
  BEGIN
    SELECT * INTO res FROM motif_modification_service WHERE
      (OSE_DIVERS.LIKED( code, GET_MOTIF_MODIFICATION_SERVICE.code ) = 1 OR GET_MOTIF_MODIFICATION_SERVICE.code IS NULL)
      AND (multiplicateur = GET_MOTIF_MODIFICATION_SERVICE.multiplicateur OR GET_MOTIF_MODIFICATION_SERVICE.multiplicateur IS NULL)
      AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_ETABLISSEMENT( source_code VARCHAR2 DEFAULT NULL ) RETURN etablissement%rowtype IS
    res etablissement%rowtype;
  BEGIN
    SELECT * INTO res FROM etablissement WHERE
      (OSE_DIVERS.LIKED( source_code, GET_ETABLISSEMENT.source_code ) = 1 OR (GET_ETABLISSEMENT.source_code IS NULL AND id <> OSE_PARAMETRE.GET_ETABLISSEMENT))
      AND histo_destruction IS NULL
      AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_SERVICE_BY_ID( id NUMERIC ) RETURN service%rowtype IS
    res service%rowtype;
  BEGIN
    SELECT * INTO res FROM service WHERE id = GET_SERVICE_BY_ID.id;
    RETURN res;
  END;

  FUNCTION ADD_SERVICE(
    intervenant_id          NUMERIC,
    annee_id                NUMERIC,
    element_pedagogique_id  NUMERIC,
    etablissement_id        NUMERIC DEFAULT NULL
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
    ep element_pedagogique%rowtype;
    interv intervenant%rowtype;
  BEGIN
    entity_id := SERVICE_ID_SEQ.NEXTVAL;
    IF element_pedagogique_id IS NOT NULL THEN
      ep := GET_ELEMENT_PEDAGOGIQUE_BY_ID( element_pedagogique_id );
    END IF;
    interv := GET_INTERVENANT_BY_ID( intervenant_id );
    INSERT INTO SERVICE (
      ID,
      INTERVENANT_ID,
      STRUCTURE_AFF_ID,
      STRUCTURE_ENS_ID,
      ELEMENT_PEDAGOGIQUE_ID,
      ANNEE_ID,
      ETABLISSEMENT_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      intervenant_id,
      interv.structure_id,
      ep.structure_id,
      element_pedagogique_id,
      annee_id,
      COALESCE( ADD_SERVICE.etablissement_id, OSE_PARAMETRE.GET_ETABLISSEMENT),
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'service', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_ETAT_VOLUME_HORAIRE( code VARCHAR2 DEFAULT NULL ) RETURN etat_volume_horaire%rowtype IS
    res etat_volume_horaire%rowtype;
  BEGIN
    SELECT * INTO res FROM etat_volume_horaire WHERE
      (OSE_DIVERS.LIKED( code, GET_ETAT_VOLUME_HORAIRE.code ) = 1 OR GET_ETAT_VOLUME_HORAIRE.code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION GET_TYPE_VOLUME_HORAIRE( code VARCHAR2 DEFAULT NULL ) RETURN type_volume_horaire%rowtype IS
    res type_volume_horaire%rowtype;
  BEGIN
    SELECT * INTO res FROM type_volume_horaire WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_VOLUME_HORAIRE.code ) = 1 OR GET_TYPE_VOLUME_HORAIRE.code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION GET_TYPE_INTERVENTION( code VARCHAR2 DEFAULT NULL ) RETURN type_intervention%rowtype IS
    res type_intervention%rowtype;
  BEGIN
    SELECT * INTO res FROM type_intervention WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_INTERVENTION.code ) = 1 OR GET_TYPE_INTERVENTION.code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_TYPE_INTERVENTION_BY_ID( id NUMERIC ) RETURN type_intervention%rowtype IS
    res type_intervention%rowtype;
  BEGIN
    SELECT * INTO res FROM type_intervention WHERE id = GET_TYPE_INTERVENTION_BY_ID.id;
    RETURN res;
  END;

  FUNCTION GET_TYPE_INTERVENTION_BY_ELEMT( ELEMENT_ID NUMERIC ) RETURN type_intervention%rowtype IS
    res type_intervention%rowtype;
  BEGIN
    SELECT
      ti.*
    INTO
      res
    FROM
      type_intervention ti
      JOIN v_element_type_intervention eti ON eti.type_intervention_id = ti.id AND eti.element_pedagogique_id = ELEMENT_ID
    WHERE
      ti.histo_destruction IS NULL
      AND rownum = 1;
    RETURN res;
  END;

  FUNCTION GET_MOTIF_NON_PAIEMENT( code VARCHAR2 DEFAULT NULL ) RETURN motif_non_paiement%rowtype IS
    res motif_non_paiement%rowtype;
  BEGIN
    SELECT * INTO res FROM motif_non_paiement WHERE
      (OSE_DIVERS.LIKED( code, GET_MOTIF_NON_PAIEMENT.code ) = 1 OR GET_MOTIF_NON_PAIEMENT.code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_VOLUME_HORAIRE( id NUMERIC DEFAULT NULL ) RETURN volume_horaire%rowtype IS
    res volume_horaire%rowtype;
  BEGIN
    SELECT * INTO res FROM volume_horaire WHERE
      id = GET_VOLUME_HORAIRE.id OR (GET_VOLUME_HORAIRE.id IS NULL AND histo_destruction IS NULL AND ROWNUM = 1);
    RETURN res;    
  END;

  FUNCTION ADD_VOLUME_HORAIRE(
    type_volume_horaire_id  NUMERIC,
    service_id              NUMERIC,
    periode_id              NUMERIC,
    type_intervention_id    NUMERIC,
    heures                  FLOAT,
    motif_non_paiement_id   NUMERIC DEFAULT NULL
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := VOLUME_HORAIRE_ID_SEQ.NEXTVAL;
    INSERT INTO VOLUME_HORAIRE (
      ID,
      TYPE_VOLUME_HORAIRE_ID,
      SERVICE_ID,
      PERIODE_ID,
      TYPE_INTERVENTION_ID,
      HEURES,
      MOTIF_NON_PAIEMENT_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      type_volume_horaire_id,
      service_id,
      periode_id,
      type_intervention_id,
      heures,
      motif_non_paiement_id,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'volume_horaire', entity_id);
    RETURN entity_id;
  END;

  FUNCTION ADD_VALIDATION_VOLUME_HORAIRE(
    structure_id      NUMERIC,
    intervenant_id    NUMERIC,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := VALIDATION_ID_SEQ.NEXTVAL;
    INSERT INTO VALIDATION (
      ID,
      TYPE_VALIDATION_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      (SELECT id FROM type_validation WHERE code = 'SERVICES_PAR_COMP'),
      intervenant_id,
      structure_id,
      GET_USER,
      GET_USER
    );
    FOR vh IN (
      SELECT vh.id FROM volume_horaire vh JOIN service s ON s.id = vh.service_id
      WHERE
        vh.histo_destruction IS NULL AND
        s.histo_destruction IS NULL
        AND (s.structure_ens_id = ADD_VALIDATION_VOLUME_HORAIRE.structure_id OR s.structure_aff_id = ADD_VALIDATION_VOLUME_HORAIRE.structure_id)
        AND (s.intervenant_id = ADD_VALIDATION_VOLUME_HORAIRE.intervenant_id)
        AND (vh.id = ADD_VALIDATION_VOLUME_HORAIRE.volume_horaire_id OR ADD_VALIDATION_VOLUME_HORAIRE.volume_horaire_id IS NULL)
        AND (s.id = ADD_VALIDATION_VOLUME_HORAIRE.service_id OR ADD_VALIDATION_VOLUME_HORAIRE.service_id IS NULL)
    ) LOOP
      INSERT INTO VALIDATION_VOL_HORAIRE(
        VALIDATION_ID,
        VOLUME_HORAIRE_ID
      )VALUES(
        entity_id,
        vh.id
      );
    END LOOP;
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'validation', entity_id);
    RETURN entity_id;
  END;

  PROCEDURE DEL_VALIDATION_VOLUME_HORAIRE(
    structure_id      NUMERIC,
    intervenant_id    NUMERIC,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL,
    validation_id     NUMERIC DEFAULT NULL
  ) IS
    vvh_count NUMERIC;
  BEGIN
    FOR vh IN (
      SELECT vh.id FROM volume_horaire vh JOIN service s ON s.id = vh.service_id
      WHERE
        vh.histo_destruction IS NULL AND
        s.histo_destruction IS NULL
        AND (s.structure_ens_id = DEL_VALIDATION_VOLUME_HORAIRE.structure_id OR s.structure_aff_id = DEL_VALIDATION_VOLUME_HORAIRE.structure_id)
        AND (s.intervenant_id = DEL_VALIDATION_VOLUME_HORAIRE.intervenant_id)
        AND (vh.id = DEL_VALIDATION_VOLUME_HORAIRE.volume_horaire_id OR DEL_VALIDATION_VOLUME_HORAIRE.volume_horaire_id IS NULL)
        AND (s.id = DEL_VALIDATION_VOLUME_HORAIRE.service_id OR DEL_VALIDATION_VOLUME_HORAIRE.service_id IS NULL)
    ) LOOP
      DELETE FROM VALIDATION_VOL_HORAIRE WHERE 
        VOLUME_HORAIRE_ID = vh.id 
        AND (VALIDATION_ID = DEL_VALIDATION_VOLUME_HORAIRE.validation_id OR DEL_VALIDATION_VOLUME_HORAIRE.validation_id IS NULL);
    END LOOP;
    IF VALIDATION_ID IS NOT NULL THEN
      SELECT count(*) INTO vvh_count FROM VALIDATION_VOL_HORAIRE WHERE VALIDATION_ID = DEL_VALIDATION_VOLUME_HORAIRE.validation_id;
      IF 0 = vvh_count THEN
        DELETE FROM validation WHERE id = VALIDATION_ID;
      END IF;
    END IF;
  END;

  FUNCTION GET_CONTRAT_BY_ID( ID NUMERIC ) RETURN contrat%rowtype IS
    res contrat%rowtype;
  BEGIN
    SELECT * INTO res FROM contrat WHERE id = GET_CONTRAT_BY_ID.id;
    RETURN res;
  END;

  FUNCTION ADD_CONTRAT(
    structure_id      NUMERIC DEFAULT NULL,
    intervenant_id    NUMERIC DEFAULT NULL,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL    
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := CONTRAT_ID_SEQ.NEXTVAL;
    INSERT INTO CONTRAT (
      ID,
      TYPE_CONTRAT_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      NUMERO_AVENANT,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      (SELECT id FROM type_contrat WHERE code = 'CONTRAT'),
      intervenant_id,
      structure_id,
      (SELECT MAX(numero_avenant) FROM contrat) + 1,
      GET_USER,
      GET_USER
    );
    FOR vh IN (
      SELECT vh.id FROM volume_horaire vh JOIN service s ON s.id = vh.service_id
      WHERE
        vh.histo_destruction IS NULL
        AND s.histo_destruction IS NULL
        AND (s.intervenant_id = ADD_CONTRAT.intervenant_id OR ADD_CONTRAT.intervenant_id IS NULL)
        AND (vh.id = ADD_CONTRAT.volume_horaire_id OR ADD_CONTRAT.volume_horaire_id IS NULL)
        AND (s.id = ADD_CONTRAT.service_id OR ADD_CONTRAT.service_id IS NULL)
        AND vh.contrat_id IS NULL
    ) LOOP
      UPDATE volume_horaire SET contrat_id = entity_id WHERE volume_horaire.id = vh.id;
    END LOOP;

    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'contrat', entity_id);
    RETURN entity_id;
  END;
  
  FUNCTION SIGNATURE_CONTRAT(
    contrat_id        NUMERIC
  ) RETURN NUMERIC IS
  BEGIN
    UPDATE contrat SET date_retour_signe = SYSDATE WHERE id = SIGNATURE_CONTRAT.contrat_id;
    RETURN contrat_id;
  END;
  
  FUNCTION ADD_CONTRAT_VALIDATION( contrat_id NUMERIC ) RETURN NUMERIC IS
    entity_id NUMERIC;
    ctr contrat%rowtype;
  BEGIN
    ctr := GET_CONTRAT_BY_ID( contrat_id );

    IF ctr.validation_id IS NOT NULL THEN RETURN NULL; END IF;

    entity_id := VALIDATION_ID_SEQ.NEXTVAL;
    INSERT INTO VALIDATION (
      ID,
      TYPE_VALIDATION_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      (SELECT id FROM type_validation WHERE code = 'CONTRAT_PAR_COMP'),
      ctr.intervenant_id,
      ctr.structure_id,
      GET_USER,
      GET_USER
    );
    UPDATE contrat SET validation_id = entity_id WHERE id = ADD_CONTRAT_VALIDATION.contrat_id;
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'validation', entity_id);
    RETURN entity_id;
  END;  
  
  FUNCTION DEL_CONTRAT_VALIDATION( contrat_id NUMERIC ) RETURN NUMERIC IS
    ctr contrat%rowtype;
  BEGIN
    ctr := GET_CONTRAT_BY_ID( contrat_id );
    
    IF ctr.validation_id IS NOT NULL THEN
      UPDATE contrat SET validation_id = NULL WHERE contrat_id = DEL_CONTRAT_VALIDATION.contrat_id;
      DELETE FROM validation WHERE id = ctr.validation_id;
    END IF;
    RETURN contrat_id;
  END;
  
  FUNCTION GET_TYPE_VALIDATION( code VARCHAR2 DEFAULT NULL ) RETURN type_validation%rowtype IS
    res type_validation%rowtype;
  BEGIN
    SELECT * INTO res FROM type_validation WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_VALIDATION.code ) = 1 OR GET_TYPE_VALIDATION.code IS NULL) AND histo_destruction IS NULL AND ROWNUM = 1;
    RETURN res;
  END;
  
END OSE_TEST;
/

---------------------------
--Modifié PACKAGE BODY
--OSE_IMPORT
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_IMPORT" IS

  FUNCTION get_date_obs RETURN Date IS
  BEGIN
    RETURN v_date_obs;
  END get_date_obs;

  FUNCTION get_current_user RETURN INTEGER IS
  BEGIN
    RETURN v_current_user;
  END get_current_user;
 
 
  PROCEDURE set_current_user (p_current_user INTEGER) is
  BEGIN
    v_current_user := p_current_user;
  END set_current_user;


  FUNCTION get_type_intervenant_id( src_code varchar2 ) RETURN Numeric IS
    res_id Numeric;
  BEGIN
    SELECT s.id INTO res_id FROM ose.type_intervenant s WHERE s.code = src_code;
    RETURN res_id;
  END get_type_intervenant_id;


  FUNCTION get_civilite_id( src_libelle_court varchar2 ) RETURN Numeric IS
    res_id Numeric;
  BEGIN
    SELECT s.id INTO res_id FROM ose.civilite s WHERE s.libelle_court = src_libelle_court;
    RETURN res_id;
  END get_civilite_id;


  FUNCTION get_source_id( src_code Varchar2 ) RETURN Numeric IS
    res_id Numeric;
  BEGIN
    SELECT s.id INTO res_id FROM ose.source s WHERE s.code = src_code;
    RETURN res_id;
  END get_source_id;

  PROCEDURE SYNC_LOG( message CLOB ) IS
  BEGIN
    INSERT INTO OSE.SYNC_LOG("ID","DATE_SYNC","MESSAGE") VALUES (SYNC_LOG_ID_SEQ.NEXTVAL, SYSDATE, message);
  END SYNC_LOG;

  PROCEDURE SYNC_MVS IS
  BEGIN
    -- Mise à jour des vues matérialisées
    DBMS_MVIEW.REFRESH('MV_ETABLISSEMENT', 'C');
    DBMS_MVIEW.REFRESH('MV_STRUCTURE', 'C');
    DBMS_MVIEW.REFRESH('MV_ADRESSE_STRUCTURE', 'C');
    
    DBMS_MVIEW.REFRESH('MV_PERSONNEL', 'C');
    DBMS_MVIEW.REFRESH('MV_ROLE', 'C');
    
    DBMS_MVIEW.REFRESH('MV_CORPS', 'C');
    
    DBMS_MVIEW.REFRESH('MV_HARP_IND_DER_STRUCT', 'C');
    DBMS_MVIEW.REFRESH('MV_HARP_INDIVIDU_BANQUE', 'C');
    DBMS_MVIEW.REFRESH('MV_HARP_INDIVIDU_STATUT', 'C');
    
    DBMS_MVIEW.REFRESH('MV_INTERVENANT', 'C');
    DBMS_MVIEW.REFRESH('MV_INTERVENANT_EXTERIEUR', 'C');
    DBMS_MVIEW.REFRESH('MV_INTERVENANT_PERMANENT', 'C');
    DBMS_MVIEW.REFRESH('MV_AFFECTATION_RECHERCHE', 'C');
    DBMS_MVIEW.REFRESH('MV_ADRESSE_INTERVENANT', 'C');
    
    DBMS_MVIEW.REFRESH('MV_GROUPE_TYPE_FORMATION', 'C');
    DBMS_MVIEW.REFRESH('MV_TYPE_FORMATION', 'C');
    DBMS_MVIEW.REFRESH('MV_ETAPE', 'C');
    DBMS_MVIEW.REFRESH('MV_ELEMENT_PEDAGOGIQUE', 'C');
    DBMS_MVIEW.REFRESH('MV_EFFECTIFS', 'C');
    DBMS_MVIEW.REFRESH('MV_ELEMENT_TAUX_REGIMES', 'C');
    DBMS_MVIEW.REFRESH('MV_CHEMIN_PEDAGOGIQUE', 'C');
    DBMS_MVIEW.REFRESH('MV_ELEMENT_PORTEUR_PORTE', 'C');
    DBMS_MVIEW.REFRESH('MV_DISCIPLINE', 'C');
    DBMS_MVIEW.REFRESH('MV_ELEMENT_DISCIPLINE', 'C');
    DBMS_MVIEW.REFRESH('MV_VOLUME_HORAIRE_ENS', 'C');  
  END;

  PROCEDURE SYNC_VOLUME_HORAIRE_ENS IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_VOLUME_HORAIRE_ENS();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_VOLUME_HORAIRE_ENS;

  PROCEDURE SYNC_ELEMENT_DISCIPLINE IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_ELEMENT_DISCIPLINE();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_ELEMENT_DISCIPLINE;

  PROCEDURE SYNC_DISCIPLINE IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_DISCIPLINE();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_DISCIPLINE;

  PROCEDURE SYNC_CHEMIN_PEDAGOGIQUE IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_CHEMIN_PEDAGOGIQUE();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_CHEMIN_PEDAGOGIQUE;

  PROCEDURE SYNC_ELEMENT_PEDAGOGIQUE IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_ELEMENT_PEDAGOGIQUE();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_ELEMENT_PEDAGOGIQUE;


  PROCEDURE SYNC_EFFECTIFS IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_EFFECTIFS();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_EFFECTIFS;

  PROCEDURE SYNC_ELEMENT_TAUX_REGIMES IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_ELEMENT_TAUX_REGIMES();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_ELEMENT_TAUX_REGIMES;

  PROCEDURE SYNC_ETAPE IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_ETAPE();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_ETAPE;

  PROCEDURE SYNC_TYPE_FORMATION IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_TYPE_FORMATION();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_TYPE_FORMATION;

  PROCEDURE SYNC_GROUPE_TYPE_FORMATION IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_GROUPE_TYPE_FORMATION();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_GROUPE_TYPE_FORMATION;

  PROCEDURE SYNC_ADRESSE_INTERVENANT IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_ADRESSE_INTERVENANT('WHERE INTERVENANT_ID IS NOT NULL');
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_ADRESSE_INTERVENANT;

  PROCEDURE SYNC_AFFECTATION_RECHERCHE IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_AFFECTATION_RECHERCHE('WHERE INTERVENANT_ID IS NOT NULL');
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_AFFECTATION_RECHERCHE;

  PROCEDURE SYNC_TYPE_INTERVENTION_EP IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_TYPE_INTERVENTION_EP();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_TYPE_INTERVENTION_EP;

  PROCEDURE SYNC_TYPE_MODULATEUR_EP IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_TYPE_MODULATEUR_EP();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_TYPE_MODULATEUR_EP;

  PROCEDURE SYNC_ETABLISSEMENT IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_ETABLISSEMENT();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_ETABLISSEMENT;

  PROCEDURE SYNC_STRUCTURE IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_STRUCTURE();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_STRUCTURE;

  PROCEDURE SYNC_ADRESSE_STRUCTURE IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_ADRESSE_STRUCTURE();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_ADRESSE_STRUCTURE;

  PROCEDURE SYNC_PERSONNEL IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_PERSONNEL();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_PERSONNEL;
  
  PROCEDURE SYNC_ROLE IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_ROLE();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_ROLE;  

  PROCEDURE SYNC_CORPS IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_CORPS();
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_CORPS; 

  PROCEDURE SYNC_INTERVENANT IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_INTERVENANT( -- Met à jour toutes les données sauf le statut, qui sera traité à part
        'WHERE IMPORT_ACTION IN (''delete'',''update'',''undelete'')'
      );
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_INTERVENANT; 
  
  PROCEDURE SYNC_INTERVENANT_PERMANENT IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_INTERVENANT_PERMANENT(
        'WHERE (IMPORT_ACTION IN (''delete'',''update'',''undelete'') OR SOURCE_CODE IN (SELECT SOURCE_CODE FROM "INTERVENANT"))'
      );
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_INTERVENANT_PERMANENT; 
  
  PROCEDURE SYNC_INTERVENANT_EXTERIEUR IS
  BEGIN
    BEGIN
      OSE_IMPORT.MAJ_INTERVENANT_EXTERIEUR(
        'WHERE (IMPORT_ACTION IN (''delete'',''update'',''undelete'') OR SOURCE_CODE IN (SELECT SOURCE_CODE FROM "INTERVENANT"))'
      );
    EXCEPTION WHEN OTHERS THEN
      OSE_IMPORT.SYNC_LOG( SQLERRM );
    END;
  END SYNC_INTERVENANT_EXTERIEUR;   

  PROCEDURE SYNC_TABLES IS
  BEGIN
    OSE_IMPORT.SET_CURRENT_USER( OSE_PARAMETRE.GET_OSE_USER() );
 
    SYNC_ETABLISSEMENT;
    SYNC_STRUCTURE;
    SYNC_ADRESSE_STRUCTURE;

    SYNC_PERSONNEL;
    SYNC_ROLE;
    
    SYNC_CORPS;

    SYNC_INTERVENANT;
    SYNC_INTERVENANT_EXTERIEUR;
    SYNC_INTERVENANT_PERMANENT;
    
    SYNC_AFFECTATION_RECHERCHE;
    SYNC_ADRESSE_INTERVENANT;
    SYNC_GROUPE_TYPE_FORMATION;
    SYNC_TYPE_FORMATION;
    SYNC_ETAPE;
    SYNC_ELEMENT_PEDAGOGIQUE;
    SYNC_EFFECTIFS;
    --SYNC_ELEMENT_TAUX_REGIMES; -- Synchronisation manuelle ! ! !
    SYNC_CHEMIN_PEDAGOGIQUE;
    SYNC_DISCIPLINE;
    SYNC_ELEMENT_DISCIPLINE;
    SYNC_VOLUME_HORAIRE_ENS;
    
    -- Mise à jour des sources calculées en dernier
    SYNC_TYPE_INTERVENTION_EP;
    SYNC_TYPE_MODULATEUR_EP;
  END;

  PROCEDURE SYNCHRONISATION IS
  BEGIN
    SYNC_MVS;
    SYNC_TABLES;
  END SYNCHRONISATION;

  FUNCTION IN_COLUMN_LIST( VALEUR VARCHAR2, CHAMPS CLOB ) RETURN NUMERIC IS
  BEGIN
    IF REGEXP_LIKE(CHAMPS, '(^|,)[ \t\r\n\v\f]*' || VALEUR || '[ \t\r\n\v\f]*(,|$)') THEN RETURN 1; END IF;
    RETURN 0;
  END;

  -- AUTOMATIC GENERATION --

  PROCEDURE MAJ_VOLUME_HORAIRE_ENS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_VOLUME_HORAIRE_ENS%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_VOLUME_HORAIRE_ENS.* FROM V_DIFF_VOLUME_HORAIRE_ENS ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.VOLUME_HORAIRE_ENS
            ( id, ANNEE_ID,ELEMENT_DISCIPLINE_ID,HEURES,TYPE_INTERVENTION_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,VOLUME_HORAIRE_ENS_ID_SEQ.NEXTVAL), diff_row.ANNEE_ID,diff_row.ELEMENT_DISCIPLINE_ID,diff_row.HEURES,diff_row.TYPE_INTERVENTION_ID, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.VOLUME_HORAIRE_ENS SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_DISCIPLINE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_DISCIPLINE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.VOLUME_HORAIRE_ENS SET ELEMENT_DISCIPLINE_ID = diff_row.ELEMENT_DISCIPLINE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_HEURES = 1 AND IN_COLUMN_LIST('HEURES',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.VOLUME_HORAIRE_ENS SET HEURES = diff_row.HEURES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_INTERVENTION_ID = 1 AND IN_COLUMN_LIST('TYPE_INTERVENTION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.VOLUME_HORAIRE_ENS SET TYPE_INTERVENTION_ID = diff_row.TYPE_INTERVENTION_ID WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.VOLUME_HORAIRE_ENS SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.VOLUME_HORAIRE_ENS SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_DISCIPLINE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_DISCIPLINE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.VOLUME_HORAIRE_ENS SET ELEMENT_DISCIPLINE_ID = diff_row.ELEMENT_DISCIPLINE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_HEURES = 1 AND IN_COLUMN_LIST('HEURES',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.VOLUME_HORAIRE_ENS SET HEURES = diff_row.HEURES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_INTERVENTION_ID = 1 AND IN_COLUMN_LIST('TYPE_INTERVENTION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.VOLUME_HORAIRE_ENS SET TYPE_INTERVENTION_ID = diff_row.TYPE_INTERVENTION_ID WHERE ID = diff_row.id; END IF;
          UPDATE OSE.VOLUME_HORAIRE_ENS SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_VOLUME_HORAIRE_ENS;



  PROCEDURE MAJ_TYPE_MODULATEUR_EP(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_TYPE_MODULATEUR_EP%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_TYPE_MODULATEUR_EP.* FROM V_DIFF_TYPE_MODULATEUR_EP ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.TYPE_MODULATEUR_EP
            ( id, ELEMENT_PEDAGOGIQUE_ID,TYPE_MODULATEUR_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,TYPE_MODULATEUR_EP_ID_SEQ.NEXTVAL), diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.TYPE_MODULATEUR_ID, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_MODULATEUR_EP SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_MODULATEUR_ID = 1 AND IN_COLUMN_LIST('TYPE_MODULATEUR_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_MODULATEUR_EP SET TYPE_MODULATEUR_ID = diff_row.TYPE_MODULATEUR_ID WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.TYPE_MODULATEUR_EP SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_MODULATEUR_EP SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_MODULATEUR_ID = 1 AND IN_COLUMN_LIST('TYPE_MODULATEUR_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_MODULATEUR_EP SET TYPE_MODULATEUR_ID = diff_row.TYPE_MODULATEUR_ID WHERE ID = diff_row.id; END IF;
          UPDATE OSE.TYPE_MODULATEUR_EP SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_TYPE_MODULATEUR_EP;



  PROCEDURE MAJ_TYPE_INTERVENTION_EP(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_TYPE_INTERVENTION_EP%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_TYPE_INTERVENTION_EP.* FROM V_DIFF_TYPE_INTERVENTION_EP ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.TYPE_INTERVENTION_EP
            ( id, ELEMENT_PEDAGOGIQUE_ID,TYPE_INTERVENTION_ID,VISIBLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,TYPE_INTERVENTION_EP_ID_SEQ.NEXTVAL), diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.TYPE_INTERVENTION_ID,diff_row.VISIBLE, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_INTERVENTION_EP SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_INTERVENTION_ID = 1 AND IN_COLUMN_LIST('TYPE_INTERVENTION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_INTERVENTION_EP SET TYPE_INTERVENTION_ID = diff_row.TYPE_INTERVENTION_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VISIBLE = 1 AND IN_COLUMN_LIST('VISIBLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_INTERVENTION_EP SET VISIBLE = diff_row.VISIBLE WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.TYPE_INTERVENTION_EP SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_INTERVENTION_EP SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_INTERVENTION_ID = 1 AND IN_COLUMN_LIST('TYPE_INTERVENTION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_INTERVENTION_EP SET TYPE_INTERVENTION_ID = diff_row.TYPE_INTERVENTION_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VISIBLE = 1 AND IN_COLUMN_LIST('VISIBLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_INTERVENTION_EP SET VISIBLE = diff_row.VISIBLE WHERE ID = diff_row.id; END IF;
          UPDATE OSE.TYPE_INTERVENTION_EP SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_TYPE_INTERVENTION_EP;



  PROCEDURE MAJ_TYPE_FORMATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_TYPE_FORMATION%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_TYPE_FORMATION.* FROM V_DIFF_TYPE_FORMATION ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.TYPE_FORMATION
            ( id, GROUPE_ID,LIBELLE_COURT,LIBELLE_LONG, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,TYPE_FORMATION_ID_SEQ.NEXTVAL), diff_row.GROUPE_ID,diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_GROUPE_ID = 1 AND IN_COLUMN_LIST('GROUPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_FORMATION SET GROUPE_ID = diff_row.GROUPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_FORMATION SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_FORMATION SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.TYPE_FORMATION SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_GROUPE_ID = 1 AND IN_COLUMN_LIST('GROUPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_FORMATION SET GROUPE_ID = diff_row.GROUPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_FORMATION SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.TYPE_FORMATION SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          UPDATE OSE.TYPE_FORMATION SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_TYPE_FORMATION;



  PROCEDURE MAJ_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_STRUCTURE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_STRUCTURE.* FROM V_DIFF_STRUCTURE ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.STRUCTURE
            ( id, ETABLISSEMENT_ID,LIBELLE_COURT,LIBELLE_LONG,NIVEAU,PARENTE_ID,STRUCTURE_NIV2_ID,TYPE_ID,VALIDITE_DEBUT,VALIDITE_FIN, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,STRUCTURE_ID_SEQ.NEXTVAL), diff_row.ETABLISSEMENT_ID,diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG,diff_row.NIVEAU,diff_row.PARENTE_ID,diff_row.STRUCTURE_NIV2_ID,diff_row.TYPE_ID,diff_row.VALIDITE_DEBUT,diff_row.VALIDITE_FIN, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET ETABLISSEMENT_ID = diff_row.ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NIVEAU = 1 AND IN_COLUMN_LIST('NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET NIVEAU = diff_row.NIVEAU WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PARENTE_ID = 1 AND IN_COLUMN_LIST('PARENTE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET PARENTE_ID = diff_row.PARENTE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_NIV2_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_NIV2_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET STRUCTURE_NIV2_ID = diff_row.STRUCTURE_NIV2_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_ID = 1 AND IN_COLUMN_LIST('TYPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET TYPE_ID = diff_row.TYPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.STRUCTURE SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET ETABLISSEMENT_ID = diff_row.ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NIVEAU = 1 AND IN_COLUMN_LIST('NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET NIVEAU = diff_row.NIVEAU WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PARENTE_ID = 1 AND IN_COLUMN_LIST('PARENTE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET PARENTE_ID = diff_row.PARENTE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_NIV2_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_NIV2_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET STRUCTURE_NIV2_ID = diff_row.STRUCTURE_NIV2_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_ID = 1 AND IN_COLUMN_LIST('TYPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET TYPE_ID = diff_row.TYPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.STRUCTURE SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;
          UPDATE OSE.STRUCTURE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_STRUCTURE;



  PROCEDURE MAJ_ROLE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ROLE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ROLE.* FROM V_DIFF_ROLE ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.ROLE
            ( id, PERSONNEL_ID,STRUCTURE_ID,TYPE_ID,VALIDITE_DEBUT,VALIDITE_FIN, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,ROLE_ID_SEQ.NEXTVAL), diff_row.PERSONNEL_ID,diff_row.STRUCTURE_ID,diff_row.TYPE_ID,diff_row.VALIDITE_DEBUT,diff_row.VALIDITE_FIN, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_PERSONNEL_ID = 1 AND IN_COLUMN_LIST('PERSONNEL_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ROLE SET PERSONNEL_ID = diff_row.PERSONNEL_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ROLE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_ID = 1 AND IN_COLUMN_LIST('TYPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ROLE SET TYPE_ID = diff_row.TYPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ROLE SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ROLE SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.ROLE SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_PERSONNEL_ID = 1 AND IN_COLUMN_LIST('PERSONNEL_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ROLE SET PERSONNEL_ID = diff_row.PERSONNEL_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ROLE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_ID = 1 AND IN_COLUMN_LIST('TYPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ROLE SET TYPE_ID = diff_row.TYPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ROLE SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ROLE SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;
          UPDATE OSE.ROLE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_ROLE;



  PROCEDURE MAJ_PERSONNEL(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_PERSONNEL%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_PERSONNEL.* FROM V_DIFF_PERSONNEL ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.PERSONNEL
            ( id, CIVILITE_ID,EMAIL,NOM_PATRONYMIQUE,NOM_USUEL,PRENOM,STRUCTURE_ID,VALIDITE_DEBUT,VALIDITE_FIN, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,PERSONNEL_ID_SEQ.NEXTVAL), diff_row.CIVILITE_ID,diff_row.EMAIL,diff_row.NOM_PATRONYMIQUE,diff_row.NOM_USUEL,diff_row.PRENOM,diff_row.STRUCTURE_ID,diff_row.VALIDITE_DEBUT,diff_row.VALIDITE_FIN, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_CIVILITE_ID = 1 AND IN_COLUMN_LIST('CIVILITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET CIVILITE_ID = diff_row.CIVILITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM = 1 AND IN_COLUMN_LIST('PRENOM',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET PRENOM = diff_row.PRENOM WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.PERSONNEL SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_CIVILITE_ID = 1 AND IN_COLUMN_LIST('CIVILITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET CIVILITE_ID = diff_row.CIVILITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM = 1 AND IN_COLUMN_LIST('PRENOM',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET PRENOM = diff_row.PRENOM WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.PERSONNEL SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;
          UPDATE OSE.PERSONNEL SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_PERSONNEL;



  PROCEDURE MAJ_INTERVENANT_PERMANENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_INTERVENANT_PERMANENT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_INTERVENANT_PERMANENT.* FROM V_DIFF_INTERVENANT_PERMANENT ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.INTERVENANT_PERMANENT
            ( id, CORPS_ID,VALIDITE_DEBUT,VALIDITE_FIN, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,INTERVENANT_PERMANENT_ID_SEQ.NEXTVAL), diff_row.CORPS_ID,diff_row.VALIDITE_DEBUT,diff_row.VALIDITE_FIN, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_CORPS_ID = 1 AND IN_COLUMN_LIST('CORPS_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT_PERMANENT SET CORPS_ID = diff_row.CORPS_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT_PERMANENT SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT_PERMANENT SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.INTERVENANT_PERMANENT SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_CORPS_ID = 1 AND IN_COLUMN_LIST('CORPS_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT_PERMANENT SET CORPS_ID = diff_row.CORPS_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT_PERMANENT SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT_PERMANENT SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;
          UPDATE OSE.INTERVENANT_PERMANENT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_INTERVENANT_PERMANENT;



  PROCEDURE MAJ_INTERVENANT_EXTERIEUR(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_INTERVENANT_EXTERIEUR%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_INTERVENANT_EXTERIEUR.* FROM V_DIFF_INTERVENANT_EXTERIEUR ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.INTERVENANT_EXTERIEUR
            ( id, SITUATION_FAMILIALE_ID,VALIDITE_DEBUT,VALIDITE_FIN, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,INTERVENANT_EXTERIEUR_ID_SEQ.NEXTVAL), diff_row.SITUATION_FAMILIALE_ID,diff_row.VALIDITE_DEBUT,diff_row.VALIDITE_FIN, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_SITUATION_FAMILIALE_ID = 1 AND IN_COLUMN_LIST('SITUATION_FAMILIALE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT_EXTERIEUR SET SITUATION_FAMILIALE_ID = diff_row.SITUATION_FAMILIALE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT_EXTERIEUR SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT_EXTERIEUR SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.INTERVENANT_EXTERIEUR SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_SITUATION_FAMILIALE_ID = 1 AND IN_COLUMN_LIST('SITUATION_FAMILIALE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT_EXTERIEUR SET SITUATION_FAMILIALE_ID = diff_row.SITUATION_FAMILIALE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT_EXTERIEUR SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT_EXTERIEUR SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;
          UPDATE OSE.INTERVENANT_EXTERIEUR SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_INTERVENANT_EXTERIEUR;



  PROCEDURE MAJ_INTERVENANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_INTERVENANT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_INTERVENANT.* FROM V_DIFF_INTERVENANT ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.INTERVENANT
            ( id, BIC,CIVILITE_ID,DATE_NAISSANCE,DEP_NAISSANCE_CODE_INSEE,DEP_NAISSANCE_LIBELLE,EMAIL,IBAN,NOM_PATRONYMIQUE,NOM_USUEL,NUMERO_INSEE,NUMERO_INSEE_CLE,NUMERO_INSEE_PROVISOIRE,PAYS_NAISSANCE_CODE_INSEE,PAYS_NAISSANCE_LIBELLE,PAYS_NATIONALITE_CODE_INSEE,PAYS_NATIONALITE_LIBELLE,PRENOM,STATUT_ID,STRUCTURE_ID,TEL_MOBILE,TEL_PRO,TYPE_ID,VILLE_NAISSANCE_CODE_INSEE,VILLE_NAISSANCE_LIBELLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,INTERVENANT_ID_SEQ.NEXTVAL), diff_row.BIC,diff_row.CIVILITE_ID,diff_row.DATE_NAISSANCE,diff_row.DEP_NAISSANCE_CODE_INSEE,diff_row.DEP_NAISSANCE_LIBELLE,diff_row.EMAIL,diff_row.IBAN,diff_row.NOM_PATRONYMIQUE,diff_row.NOM_USUEL,diff_row.NUMERO_INSEE,diff_row.NUMERO_INSEE_CLE,diff_row.NUMERO_INSEE_PROVISOIRE,diff_row.PAYS_NAISSANCE_CODE_INSEE,diff_row.PAYS_NAISSANCE_LIBELLE,diff_row.PAYS_NATIONALITE_CODE_INSEE,diff_row.PAYS_NATIONALITE_LIBELLE,diff_row.PRENOM,diff_row.STATUT_ID,diff_row.STRUCTURE_ID,diff_row.TEL_MOBILE,diff_row.TEL_PRO,diff_row.TYPE_ID,diff_row.VILLE_NAISSANCE_CODE_INSEE,diff_row.VILLE_NAISSANCE_LIBELLE, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_BIC = 1 AND IN_COLUMN_LIST('BIC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET BIC = diff_row.BIC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CIVILITE_ID = 1 AND IN_COLUMN_LIST('CIVILITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET CIVILITE_ID = diff_row.CIVILITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_NAISSANCE = 1 AND IN_COLUMN_LIST('DATE_NAISSANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DATE_NAISSANCE = diff_row.DATE_NAISSANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DEP_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('DEP_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DEP_NAISSANCE_CODE_INSEE = diff_row.DEP_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DEP_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('DEP_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DEP_NAISSANCE_LIBELLE = diff_row.DEP_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_IBAN = 1 AND IN_COLUMN_LIST('IBAN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET IBAN = diff_row.IBAN WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NUMERO_INSEE = diff_row.NUMERO_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE_CLE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE_CLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NUMERO_INSEE_CLE = diff_row.NUMERO_INSEE_CLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE_PROVISOIRE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE_PROVISOIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NUMERO_INSEE_PROVISOIRE = diff_row.NUMERO_INSEE_PROVISOIRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NAISSANCE_CODE_INSEE = diff_row.PAYS_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NAISSANCE_LIBELLE = diff_row.PAYS_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NATIONALITE_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_NATIONALITE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NATIONALITE_CODE_INSEE = diff_row.PAYS_NATIONALITE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NATIONALITE_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_NATIONALITE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NATIONALITE_LIBELLE = diff_row.PAYS_NATIONALITE_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM = 1 AND IN_COLUMN_LIST('PRENOM',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PRENOM = diff_row.PRENOM WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STATUT_ID = 1 AND IN_COLUMN_LIST('STATUT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET STATUT_ID = diff_row.STATUT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_MOBILE = 1 AND IN_COLUMN_LIST('TEL_MOBILE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET TEL_MOBILE = diff_row.TEL_MOBILE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_PRO = 1 AND IN_COLUMN_LIST('TEL_PRO',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET TEL_PRO = diff_row.TEL_PRO WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_ID = 1 AND IN_COLUMN_LIST('TYPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET TYPE_ID = diff_row.TYPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('VILLE_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET VILLE_NAISSANCE_CODE_INSEE = diff_row.VILLE_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('VILLE_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET VILLE_NAISSANCE_LIBELLE = diff_row.VILLE_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.INTERVENANT SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_BIC = 1 AND IN_COLUMN_LIST('BIC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET BIC = diff_row.BIC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CIVILITE_ID = 1 AND IN_COLUMN_LIST('CIVILITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET CIVILITE_ID = diff_row.CIVILITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_NAISSANCE = 1 AND IN_COLUMN_LIST('DATE_NAISSANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DATE_NAISSANCE = diff_row.DATE_NAISSANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DEP_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('DEP_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DEP_NAISSANCE_CODE_INSEE = diff_row.DEP_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DEP_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('DEP_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET DEP_NAISSANCE_LIBELLE = diff_row.DEP_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_IBAN = 1 AND IN_COLUMN_LIST('IBAN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET IBAN = diff_row.IBAN WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NUMERO_INSEE = diff_row.NUMERO_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE_CLE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE_CLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NUMERO_INSEE_CLE = diff_row.NUMERO_INSEE_CLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE_PROVISOIRE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE_PROVISOIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET NUMERO_INSEE_PROVISOIRE = diff_row.NUMERO_INSEE_PROVISOIRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NAISSANCE_CODE_INSEE = diff_row.PAYS_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NAISSANCE_LIBELLE = diff_row.PAYS_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NATIONALITE_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_NATIONALITE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NATIONALITE_CODE_INSEE = diff_row.PAYS_NATIONALITE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NATIONALITE_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_NATIONALITE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PAYS_NATIONALITE_LIBELLE = diff_row.PAYS_NATIONALITE_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM = 1 AND IN_COLUMN_LIST('PRENOM',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET PRENOM = diff_row.PRENOM WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STATUT_ID = 1 AND IN_COLUMN_LIST('STATUT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET STATUT_ID = diff_row.STATUT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_MOBILE = 1 AND IN_COLUMN_LIST('TEL_MOBILE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET TEL_MOBILE = diff_row.TEL_MOBILE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_PRO = 1 AND IN_COLUMN_LIST('TEL_PRO',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET TEL_PRO = diff_row.TEL_PRO WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_ID = 1 AND IN_COLUMN_LIST('TYPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET TYPE_ID = diff_row.TYPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('VILLE_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET VILLE_NAISSANCE_CODE_INSEE = diff_row.VILLE_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('VILLE_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.INTERVENANT SET VILLE_NAISSANCE_LIBELLE = diff_row.VILLE_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;
          UPDATE OSE.INTERVENANT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_INTERVENANT;



  PROCEDURE MAJ_GROUPE_TYPE_FORMATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_GROUPE_TYPE_FORMATION%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_GROUPE_TYPE_FORMATION.* FROM V_DIFF_GROUPE_TYPE_FORMATION ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.GROUPE_TYPE_FORMATION
            ( id, LIBELLE_COURT,LIBELLE_LONG,ORDRE,PERTINENCE_NIVEAU, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,GROUPE_TYPE_FORMATION_ID_SEQ.NEXTVAL), diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG,diff_row.ORDRE,diff_row.PERTINENCE_NIVEAU, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PERTINENCE_NIVEAU = 1 AND IN_COLUMN_LIST('PERTINENCE_NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET PERTINENCE_NIVEAU = diff_row.PERTINENCE_NIVEAU WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.GROUPE_TYPE_FORMATION SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PERTINENCE_NIVEAU = 1 AND IN_COLUMN_LIST('PERTINENCE_NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.GROUPE_TYPE_FORMATION SET PERTINENCE_NIVEAU = diff_row.PERTINENCE_NIVEAU WHERE ID = diff_row.id; END IF;
          UPDATE OSE.GROUPE_TYPE_FORMATION SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_GROUPE_TYPE_FORMATION;



  PROCEDURE MAJ_ETAPE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ETAPE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ETAPE.* FROM V_DIFF_ETAPE ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.ETAPE
            ( id, LIBELLE,NIVEAU,SPECIFIQUE_ECHANGES,STRUCTURE_ID,TYPE_FORMATION_ID,VALIDITE_DEBUT,VALIDITE_FIN, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,ETAPE_ID_SEQ.NEXTVAL), diff_row.LIBELLE,diff_row.NIVEAU,diff_row.SPECIFIQUE_ECHANGES,diff_row.STRUCTURE_ID,diff_row.TYPE_FORMATION_ID,diff_row.VALIDITE_DEBUT,diff_row.VALIDITE_FIN, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NIVEAU = 1 AND IN_COLUMN_LIST('NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET NIVEAU = diff_row.NIVEAU WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SPECIFIQUE_ECHANGES = 1 AND IN_COLUMN_LIST('SPECIFIQUE_ECHANGES',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET SPECIFIQUE_ECHANGES = diff_row.SPECIFIQUE_ECHANGES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_FORMATION_ID = 1 AND IN_COLUMN_LIST('TYPE_FORMATION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET TYPE_FORMATION_ID = diff_row.TYPE_FORMATION_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.ETAPE SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NIVEAU = 1 AND IN_COLUMN_LIST('NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET NIVEAU = diff_row.NIVEAU WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SPECIFIQUE_ECHANGES = 1 AND IN_COLUMN_LIST('SPECIFIQUE_ECHANGES',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET SPECIFIQUE_ECHANGES = diff_row.SPECIFIQUE_ECHANGES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_FORMATION_ID = 1 AND IN_COLUMN_LIST('TYPE_FORMATION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET TYPE_FORMATION_ID = diff_row.TYPE_FORMATION_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETAPE SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;
          UPDATE OSE.ETAPE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_ETAPE;



  PROCEDURE MAJ_ETABLISSEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ETABLISSEMENT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ETABLISSEMENT.* FROM V_DIFF_ETABLISSEMENT ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.ETABLISSEMENT
            ( id, DEPARTEMENT,LIBELLE,LOCALISATION, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,ETABLISSEMENT_ID_SEQ.NEXTVAL), diff_row.DEPARTEMENT,diff_row.LIBELLE,diff_row.LOCALISATION, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_DEPARTEMENT = 1 AND IN_COLUMN_LIST('DEPARTEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETABLISSEMENT SET DEPARTEMENT = diff_row.DEPARTEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETABLISSEMENT SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALISATION = 1 AND IN_COLUMN_LIST('LOCALISATION',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETABLISSEMENT SET LOCALISATION = diff_row.LOCALISATION WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.ETABLISSEMENT SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_DEPARTEMENT = 1 AND IN_COLUMN_LIST('DEPARTEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETABLISSEMENT SET DEPARTEMENT = diff_row.DEPARTEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETABLISSEMENT SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALISATION = 1 AND IN_COLUMN_LIST('LOCALISATION',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ETABLISSEMENT SET LOCALISATION = diff_row.LOCALISATION WHERE ID = diff_row.id; END IF;
          UPDATE OSE.ETABLISSEMENT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_ETABLISSEMENT;



  PROCEDURE MAJ_ELEMENT_TAUX_REGIMES(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ELEMENT_TAUX_REGIMES%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ELEMENT_TAUX_REGIMES.* FROM V_DIFF_ELEMENT_TAUX_REGIMES ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.ELEMENT_TAUX_REGIMES
            ( id, ANNEE_ID,ELEMENT_PEDAGOGIQUE_ID,TAUX_FA,TAUX_FC,TAUX_FI, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,ELEMENT_TAUX_REGIMES_ID_SEQ.NEXTVAL), diff_row.ANNEE_ID,diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.TAUX_FA,diff_row.TAUX_FC,diff_row.TAUX_FI, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FA = 1 AND IN_COLUMN_LIST('TAUX_FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET TAUX_FA = diff_row.TAUX_FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FC = 1 AND IN_COLUMN_LIST('TAUX_FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET TAUX_FC = diff_row.TAUX_FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FI = 1 AND IN_COLUMN_LIST('TAUX_FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET TAUX_FI = diff_row.TAUX_FI WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.ELEMENT_TAUX_REGIMES SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FA = 1 AND IN_COLUMN_LIST('TAUX_FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET TAUX_FA = diff_row.TAUX_FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FC = 1 AND IN_COLUMN_LIST('TAUX_FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET TAUX_FC = diff_row.TAUX_FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FI = 1 AND IN_COLUMN_LIST('TAUX_FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_TAUX_REGIMES SET TAUX_FI = diff_row.TAUX_FI WHERE ID = diff_row.id; END IF;
          UPDATE OSE.ELEMENT_TAUX_REGIMES SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_ELEMENT_TAUX_REGIMES;



  PROCEDURE MAJ_ELEMENT_PEDAGOGIQUE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ELEMENT_PEDAGOGIQUE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ELEMENT_PEDAGOGIQUE.* FROM V_DIFF_ELEMENT_PEDAGOGIQUE ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.ELEMENT_PEDAGOGIQUE
            ( id, ETAPE_ID,FA,FC,FI,LIBELLE,PERIODE_ID,STRUCTURE_ID,TAUX_FA,TAUX_FC,TAUX_FI,TAUX_FOAD, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,ELEMENT_PEDAGOGIQUE_ID_SEQ.NEXTVAL), diff_row.ETAPE_ID,diff_row.FA,diff_row.FC,diff_row.FI,diff_row.LIBELLE,diff_row.PERIODE_ID,diff_row.STRUCTURE_ID,diff_row.TAUX_FA,diff_row.TAUX_FC,diff_row.TAUX_FI,diff_row.TAUX_FOAD, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FA = 1 AND IN_COLUMN_LIST('FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET FA = diff_row.FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FC = 1 AND IN_COLUMN_LIST('FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET FC = diff_row.FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FI = 1 AND IN_COLUMN_LIST('FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET FI = diff_row.FI WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PERIODE_ID = 1 AND IN_COLUMN_LIST('PERIODE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET PERIODE_ID = diff_row.PERIODE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FA = 1 AND IN_COLUMN_LIST('TAUX_FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FA = diff_row.TAUX_FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FC = 1 AND IN_COLUMN_LIST('TAUX_FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FC = diff_row.TAUX_FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FI = 1 AND IN_COLUMN_LIST('TAUX_FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FI = diff_row.TAUX_FI WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FOAD = 1 AND IN_COLUMN_LIST('TAUX_FOAD',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FOAD = diff_row.TAUX_FOAD WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.ELEMENT_PEDAGOGIQUE SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FA = 1 AND IN_COLUMN_LIST('FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET FA = diff_row.FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FC = 1 AND IN_COLUMN_LIST('FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET FC = diff_row.FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FI = 1 AND IN_COLUMN_LIST('FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET FI = diff_row.FI WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PERIODE_ID = 1 AND IN_COLUMN_LIST('PERIODE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET PERIODE_ID = diff_row.PERIODE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FA = 1 AND IN_COLUMN_LIST('TAUX_FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FA = diff_row.TAUX_FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FC = 1 AND IN_COLUMN_LIST('TAUX_FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FC = diff_row.TAUX_FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FI = 1 AND IN_COLUMN_LIST('TAUX_FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FI = diff_row.TAUX_FI WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FOAD = 1 AND IN_COLUMN_LIST('TAUX_FOAD',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_PEDAGOGIQUE SET TAUX_FOAD = diff_row.TAUX_FOAD WHERE ID = diff_row.id; END IF;
          UPDATE OSE.ELEMENT_PEDAGOGIQUE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_ELEMENT_PEDAGOGIQUE;



  PROCEDURE MAJ_ELEMENT_DISCIPLINE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ELEMENT_DISCIPLINE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ELEMENT_DISCIPLINE.* FROM V_DIFF_ELEMENT_DISCIPLINE ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.ELEMENT_DISCIPLINE
            ( id, DISCIPLINE_ID,ELEMENT_PEDAGOGIQUE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,ELEMENT_DISCIPLINE_ID_SEQ.NEXTVAL), diff_row.DISCIPLINE_ID,diff_row.ELEMENT_PEDAGOGIQUE_ID, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_DISCIPLINE_ID = 1 AND IN_COLUMN_LIST('DISCIPLINE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_DISCIPLINE SET DISCIPLINE_ID = diff_row.DISCIPLINE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_DISCIPLINE SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.ELEMENT_DISCIPLINE SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_DISCIPLINE_ID = 1 AND IN_COLUMN_LIST('DISCIPLINE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_DISCIPLINE SET DISCIPLINE_ID = diff_row.DISCIPLINE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ELEMENT_DISCIPLINE SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          UPDATE OSE.ELEMENT_DISCIPLINE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_ELEMENT_DISCIPLINE;



  PROCEDURE MAJ_EFFECTIFS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_EFFECTIFS%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_EFFECTIFS.* FROM V_DIFF_EFFECTIFS ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.EFFECTIFS
            ( id, ANNEE_ID,ELEMENT_PEDAGOGIQUE_ID,FA,FC,FI, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,EFFECTIFS_ID_SEQ.NEXTVAL), diff_row.ANNEE_ID,diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.FA,diff_row.FC,diff_row.FI, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FA = 1 AND IN_COLUMN_LIST('FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET FA = diff_row.FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FC = 1 AND IN_COLUMN_LIST('FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET FC = diff_row.FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FI = 1 AND IN_COLUMN_LIST('FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET FI = diff_row.FI WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.EFFECTIFS SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FA = 1 AND IN_COLUMN_LIST('FA',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET FA = diff_row.FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FC = 1 AND IN_COLUMN_LIST('FC',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET FC = diff_row.FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FI = 1 AND IN_COLUMN_LIST('FI',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.EFFECTIFS SET FI = diff_row.FI WHERE ID = diff_row.id; END IF;
          UPDATE OSE.EFFECTIFS SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_EFFECTIFS;



  PROCEDURE MAJ_DISCIPLINE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_DISCIPLINE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_DISCIPLINE.* FROM V_DIFF_DISCIPLINE ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.DISCIPLINE
            ( id, LIBELLE_COURT,LIBELLE_LONG,ORDRE, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,DISCIPLINE_ID_SEQ.NEXTVAL), diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG,diff_row.ORDRE, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.DISCIPLINE SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.DISCIPLINE SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.DISCIPLINE SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.DISCIPLINE SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.DISCIPLINE SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.DISCIPLINE SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.DISCIPLINE SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;
          UPDATE OSE.DISCIPLINE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_DISCIPLINE;



  PROCEDURE MAJ_CORPS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_CORPS%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_CORPS.* FROM V_DIFF_CORPS ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.CORPS
            ( id, LIBELLE_COURT,LIBELLE_LONG,VALIDITE_DEBUT,VALIDITE_FIN, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,CORPS_ID_SEQ.NEXTVAL), diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG,diff_row.VALIDITE_DEBUT,diff_row.VALIDITE_FIN, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CORPS SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CORPS SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CORPS SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CORPS SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.CORPS SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CORPS SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CORPS SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CORPS SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CORPS SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;
          UPDATE OSE.CORPS SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_CORPS;



  PROCEDURE MAJ_CHEMIN_PEDAGOGIQUE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_CHEMIN_PEDAGOGIQUE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_CHEMIN_PEDAGOGIQUE.* FROM V_DIFF_CHEMIN_PEDAGOGIQUE ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.CHEMIN_PEDAGOGIQUE
            ( id, ELEMENT_PEDAGOGIQUE_ID,ETAPE_ID,ORDRE,VALIDITE_DEBUT,VALIDITE_FIN, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,CHEMIN_PEDAGOGIQUE_ID_SEQ.NEXTVAL), diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.ETAPE_ID,diff_row.ORDRE,diff_row.VALIDITE_DEBUT,diff_row.VALIDITE_FIN, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.CHEMIN_PEDAGOGIQUE SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.CHEMIN_PEDAGOGIQUE SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;
          UPDATE OSE.CHEMIN_PEDAGOGIQUE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_CHEMIN_PEDAGOGIQUE;



  PROCEDURE MAJ_AFFECTATION_RECHERCHE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_AFFECTATION_RECHERCHE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_AFFECTATION_RECHERCHE.* FROM V_DIFF_AFFECTATION_RECHERCHE ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.AFFECTATION_RECHERCHE
            ( id, INTERVENANT_ID,STRUCTURE_ID,VALIDITE_DEBUT,VALIDITE_FIN, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,AFFECTATION_RECHERCHE_ID_SEQ.NEXTVAL), diff_row.INTERVENANT_ID,diff_row.STRUCTURE_ID,diff_row.VALIDITE_DEBUT,diff_row.VALIDITE_FIN, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_INTERVENANT_ID = 1 AND IN_COLUMN_LIST('INTERVENANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION_RECHERCHE SET INTERVENANT_ID = diff_row.INTERVENANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION_RECHERCHE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION_RECHERCHE SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION_RECHERCHE SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.AFFECTATION_RECHERCHE SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_INTERVENANT_ID = 1 AND IN_COLUMN_LIST('INTERVENANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION_RECHERCHE SET INTERVENANT_ID = diff_row.INTERVENANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION_RECHERCHE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION_RECHERCHE SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.AFFECTATION_RECHERCHE SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;
          UPDATE OSE.AFFECTATION_RECHERCHE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_AFFECTATION_RECHERCHE;



  PROCEDURE MAJ_ADRESSE_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ADRESSE_STRUCTURE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ADRESSE_STRUCTURE.* FROM V_DIFF_ADRESSE_STRUCTURE ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.ADRESSE_STRUCTURE
            ( id, CODE_POSTAL,LOCALITE,NOM_VOIE,NO_VOIE,PAYS_CODE_INSEE,PAYS_LIBELLE,PRINCIPALE,STRUCTURE_ID,TELEPHONE,VALIDITE_DEBUT,VALIDITE_FIN,VILLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,ADRESSE_STRUCTURE_ID_SEQ.NEXTVAL), diff_row.CODE_POSTAL,diff_row.LOCALITE,diff_row.NOM_VOIE,diff_row.NO_VOIE,diff_row.PAYS_CODE_INSEE,diff_row.PAYS_LIBELLE,diff_row.PRINCIPALE,diff_row.STRUCTURE_ID,diff_row.TELEPHONE,diff_row.VALIDITE_DEBUT,diff_row.VALIDITE_FIN,diff_row.VILLE, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_CODE_POSTAL = 1 AND IN_COLUMN_LIST('CODE_POSTAL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET CODE_POSTAL = diff_row.CODE_POSTAL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALITE = 1 AND IN_COLUMN_LIST('LOCALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET LOCALITE = diff_row.LOCALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_VOIE = 1 AND IN_COLUMN_LIST('NOM_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET NOM_VOIE = diff_row.NOM_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NO_VOIE = 1 AND IN_COLUMN_LIST('NO_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET NO_VOIE = diff_row.NO_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET PAYS_CODE_INSEE = diff_row.PAYS_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET PAYS_LIBELLE = diff_row.PAYS_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRINCIPALE = 1 AND IN_COLUMN_LIST('PRINCIPALE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET PRINCIPALE = diff_row.PRINCIPALE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TELEPHONE = 1 AND IN_COLUMN_LIST('TELEPHONE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET TELEPHONE = diff_row.TELEPHONE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE = 1 AND IN_COLUMN_LIST('VILLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET VILLE = diff_row.VILLE WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.ADRESSE_STRUCTURE SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_CODE_POSTAL = 1 AND IN_COLUMN_LIST('CODE_POSTAL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET CODE_POSTAL = diff_row.CODE_POSTAL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALITE = 1 AND IN_COLUMN_LIST('LOCALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET LOCALITE = diff_row.LOCALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_VOIE = 1 AND IN_COLUMN_LIST('NOM_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET NOM_VOIE = diff_row.NOM_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NO_VOIE = 1 AND IN_COLUMN_LIST('NO_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET NO_VOIE = diff_row.NO_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET PAYS_CODE_INSEE = diff_row.PAYS_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET PAYS_LIBELLE = diff_row.PAYS_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRINCIPALE = 1 AND IN_COLUMN_LIST('PRINCIPALE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET PRINCIPALE = diff_row.PRINCIPALE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TELEPHONE = 1 AND IN_COLUMN_LIST('TELEPHONE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET TELEPHONE = diff_row.TELEPHONE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE = 1 AND IN_COLUMN_LIST('VILLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_STRUCTURE SET VILLE = diff_row.VILLE WHERE ID = diff_row.id; END IF;
          UPDATE OSE.ADRESSE_STRUCTURE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_ADRESSE_STRUCTURE;



  PROCEDURE MAJ_ADRESSE_INTERVENANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ADRESSE_INTERVENANT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ADRESSE_INTERVENANT.* FROM V_DIFF_ADRESSE_INTERVENANT ' || SQL_CRITERION;
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row;
      EXIT WHEN diff_cur%NOTFOUND;

      CASE diff_row.import_action
        WHEN 'insert' THEN
          INSERT INTO OSE.ADRESSE_INTERVENANT
            ( id, CODE_POSTAL,INTERVENANT_ID,LOCALITE,MENTION_COMPLEMENTAIRE,NOM_VOIE,NO_VOIE,PAYS_CODE_INSEE,PAYS_LIBELLE,PRINCIPALE,TEL_DOMICILE,VALIDITE_DEBUT,VILLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
          VALUES
            ( COALESCE(diff_row.id,ADRESSE_INTERVENANT_ID_SEQ.NEXTVAL), diff_row.CODE_POSTAL,diff_row.INTERVENANT_ID,diff_row.LOCALITE,diff_row.MENTION_COMPLEMENTAIRE,diff_row.NOM_VOIE,diff_row.NO_VOIE,diff_row.PAYS_CODE_INSEE,diff_row.PAYS_LIBELLE,diff_row.PRINCIPALE,diff_row.TEL_DOMICILE,diff_row.VALIDITE_DEBUT,diff_row.VILLE, diff_row.source_id, diff_row.source_code, v_current_user, v_current_user );

        WHEN 'update' THEN
          IF (diff_row.u_CODE_POSTAL = 1 AND IN_COLUMN_LIST('CODE_POSTAL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET CODE_POSTAL = diff_row.CODE_POSTAL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_INTERVENANT_ID = 1 AND IN_COLUMN_LIST('INTERVENANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET INTERVENANT_ID = diff_row.INTERVENANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALITE = 1 AND IN_COLUMN_LIST('LOCALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET LOCALITE = diff_row.LOCALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_MENTION_COMPLEMENTAIRE = 1 AND IN_COLUMN_LIST('MENTION_COMPLEMENTAIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET MENTION_COMPLEMENTAIRE = diff_row.MENTION_COMPLEMENTAIRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_VOIE = 1 AND IN_COLUMN_LIST('NOM_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET NOM_VOIE = diff_row.NOM_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NO_VOIE = 1 AND IN_COLUMN_LIST('NO_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET NO_VOIE = diff_row.NO_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET PAYS_CODE_INSEE = diff_row.PAYS_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET PAYS_LIBELLE = diff_row.PAYS_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRINCIPALE = 1 AND IN_COLUMN_LIST('PRINCIPALE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET PRINCIPALE = diff_row.PRINCIPALE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_DOMICILE = 1 AND IN_COLUMN_LIST('TEL_DOMICILE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET TEL_DOMICILE = diff_row.TEL_DOMICILE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE = 1 AND IN_COLUMN_LIST('VILLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET VILLE = diff_row.VILLE WHERE ID = diff_row.id; END IF;

        WHEN 'delete' THEN
          UPDATE OSE.ADRESSE_INTERVENANT SET histo_destruction = SYSDATE, histo_destructeur_id = v_current_user WHERE ID = diff_row.id;

        WHEN 'undelete' THEN
          IF (diff_row.u_CODE_POSTAL = 1 AND IN_COLUMN_LIST('CODE_POSTAL',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET CODE_POSTAL = diff_row.CODE_POSTAL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_INTERVENANT_ID = 1 AND IN_COLUMN_LIST('INTERVENANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET INTERVENANT_ID = diff_row.INTERVENANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALITE = 1 AND IN_COLUMN_LIST('LOCALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET LOCALITE = diff_row.LOCALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_MENTION_COMPLEMENTAIRE = 1 AND IN_COLUMN_LIST('MENTION_COMPLEMENTAIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET MENTION_COMPLEMENTAIRE = diff_row.MENTION_COMPLEMENTAIRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_VOIE = 1 AND IN_COLUMN_LIST('NOM_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET NOM_VOIE = diff_row.NOM_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NO_VOIE = 1 AND IN_COLUMN_LIST('NO_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET NO_VOIE = diff_row.NO_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET PAYS_CODE_INSEE = diff_row.PAYS_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET PAYS_LIBELLE = diff_row.PAYS_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRINCIPALE = 1 AND IN_COLUMN_LIST('PRINCIPALE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET PRINCIPALE = diff_row.PRINCIPALE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_DOMICILE = 1 AND IN_COLUMN_LIST('TEL_DOMICILE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET TEL_DOMICILE = diff_row.TEL_DOMICILE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE = 1 AND IN_COLUMN_LIST('VILLE',IGNORE_UPD_COLS) = 0) THEN UPDATE OSE.ADRESSE_INTERVENANT SET VILLE = diff_row.VILLE WHERE ID = diff_row.id; END IF;
          UPDATE OSE.ADRESSE_INTERVENANT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

      END CASE;

    END LOOP;
    CLOSE diff_cur;

  END MAJ_ADRESSE_INTERVENANT;

  -- END OF AUTOMATIC GENERATION --
END ose_import;
/
---------------------------
--Modifié PACKAGE BODY
--OSE_FORMULE
---------------------------
CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_FORMULE" AS

  v_date_obs DATE;



  FUNCTION GET_DATE_OBS RETURN DATE AS
  BEGIN
    --RETURN SYSDATE;
    RETURN COALESCE( v_date_obs, SYSDATE );
  END;

  FUNCTION SET_DATE_OBS( DATE_OBS DATE DEFAULT NULL ) RETURN DATE IS
  BEGIN
    v_date_obs := DATE_OBS;
    RETURN v_date_obs;
  END;




  FUNCTION GET_DEF_SERVICE_DU( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC ) RETURN formule_service_du%rowtype IS
    fr formule_service_du%rowtype;
  BEGIN
    fr.intervenant_id           := INTERVENANT_ID;
    fr.annee_id                 := ANNEE_ID;
    fr.service_du               := 0;
    fr.service_du_modification  := 0;
    RETURN fr;
  END;


  FUNCTION GET_SERVICE_DU( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC ) RETURN formule_service_du%rowtype IS
    fr formule_service_du%rowtype;
  BEGIN
    SELECT * INTO fr FROM formule_service_du WHERE intervenant_id = GET_SERVICE_DU.INTERVENANT_ID AND annee_id = GET_SERVICE_DU.ANNEE_ID;
    RETURN fr;
    EXCEPTION WHEN NO_DATA_FOUND THEN RETURN GET_DEF_SERVICE_DU( INTERVENANT_ID, ANNEE_ID );
  END;


  FUNCTION CALC_SERVICE_DU( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC ) RETURN formule_service_du%rowtype IS
    res formule_service_du%rowtype;
    sd service_du%rowtype;
    rr float;
  BEGIN
    res := GET_SERVICE_DU( INTERVENANT_ID, ANNEE_ID );

    SELECT
      CASE WHEN 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction, ose_formule.get_date_obs ) THEN i.id ELSE NULL END
    INTO
      res.intervenant_id
    FROM
      intervenant i
    WHERE
      i.id = res.intervenant_id;

    IF res.intervenant_id IS NULL THEN RETURN res; END IF;

    SELECT
      NVL( SUM( heures ), 0 ) INTO res.service_du
    FROM
      service_du sd
    WHERE
          1 = ose_divers.comprise_entre( sd.validite_debut, sd.validite_fin,      ose_formule.get_date_obs )
      AND 1 = ose_divers.comprise_entre( sd.histo_creation, sd.histo_destruction, ose_formule.get_date_obs )
      AND sd.annee_id       = res.annee_id
      AND sd.intervenant_id = res.intervenant_id;

    SELECT
      NVL( SUM( msd.heures * mms.multiplicateur ), 0 ) INTO res.service_du_modification
    FROM
      modification_service_du msd
      JOIN MOTIF_MODIFICATION_SERVICE mms ON mms.id = msd.motif_id
    WHERE
          1 = ose_divers.comprise_entre( msd.validite_debut, msd.validite_fin,      ose_formule.get_date_obs )
      AND 1 = ose_divers.comprise_entre( msd.histo_creation, msd.histo_destruction, ose_formule.get_date_obs )
      AND msd.annee_id       = res.annee_id
      AND msd.intervenant_id = res.intervenant_id;

    RETURN res;
    EXCEPTION WHEN NO_DATA_FOUND THEN RETURN GET_DEF_SERVICE_DU( INTERVENANT_ID, ANNEE_ID );
  END;


  PROCEDURE MAJ_SERVICE_DU( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC ) IS
    fr formule_service_du%rowtype;
  BEGIN
    fr := CALC_SERVICE_DU( INTERVENANT_ID, ANNEE_ID );

    IF fr.intervenant_id IS NULL OR (fr.service_du + fr.service_du_modification = 0) THEN

      DELETE FROM formule_service_du WHERE intervenant_id = MAJ_SERVICE_DU.INTERVENANT_ID AND annee_id = MAJ_SERVICE_DU.ANNEE_ID;

    ELSIF fr.id IS NOT NULL THEN

      UPDATE formule_service_du SET
        service_du              = fr.service_du,
        service_du_modification = fr.service_du_modification
      WHERE
        id = fr.id;

    ELSE
      fr.id := FORMULE_SERVICE_DU_ID_SEQ.NEXTVAL;

      INSERT INTO FORMULE_SERVICE_DU(
        ID,
        INTERVENANT_ID,
        ANNEE_ID,
        SERVICE_DU,
        SERVICE_DU_MODIFICATION
      )VALUES(
        fr.id,
        fr.intervenant_id,
        fr.annee_id,
        fr.service_du,
        fr.service_du_modification
      );

    END IF;
    IDT_MAJ_RESULTAT( INTERVENANT_ID, ANNEE_ID );
  END;


  PROCEDURE IDT_MAJ_SERVICE_DU( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC ) IS
  BEGIN
    MERGE INTO formule_service_du_maj frm USING dual ON (frm.intervenant_id = IDT_MAJ_SERVICE_DU.INTERVENANT_ID AND frm.annee_id = IDT_MAJ_SERVICE_DU.ANNEE_ID)
    WHEN NOT MATCHED THEN INSERT ( ID, INTERVENANT_ID, ANNEE_ID ) VALUES ( formule_service_du_maj_id_seq.nextval, IDT_MAJ_SERVICE_DU.INTERVENANT_ID, IDT_MAJ_SERVICE_DU.ANNEE_ID );
  END;


  PROCEDURE MAJ_ALL_SERVICE_DU IS
    a_id NUMERIC;
  BEGIN
    a_id := OSE_PARAMETRE.GET_ANNEE;
    FOR i IN (
      SELECT i.id FROM intervenant i
    )
    LOOP
      MAJ_SERVICE_DU( i.id, a_id );
    END LOOP;
  END;


  PROCEDURE MAJ_IDT_SERVICE_DU IS
  BEGIN
    FOR mp IN (SELECT * FROM formule_service_du_maj)
    LOOP
      MAJ_SERVICE_DU( mp.intervenant_id, mp.annee_id );
    END LOOP;
    DELETE FROM formule_service_du_maj;
  END;
   



  FUNCTION GET_DEF_REFERENTIEL( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, STRUCTURE_ENS_ID NUMERIC ) RETURN formule_referentiel%rowtype IS
    fr formule_referentiel%rowtype;
  BEGIN
    fr.intervenant_id           := INTERVENANT_ID;
    fr.annee_id                 := ANNEE_ID;
    fr.structure_aff_id         := NULL;
    fr.structure_ens_id         := STRUCTURE_ENS_ID;
    fr.referentiel              := 0;
    RETURN fr;
  END;
  
  
  FUNCTION GET_REFERENTIEL( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, STRUCTURE_ENS_ID NUMERIC ) RETURN formule_referentiel%rowtype IS
    fr formule_referentiel%rowtype;
  BEGIN
    SELECT * INTO fr FROM formule_referentiel WHERE intervenant_id = GET_REFERENTIEL.INTERVENANT_ID AND annee_id = GET_REFERENTIEL.ANNEE_ID AND structure_ens_id = GET_REFERENTIEL.STRUCTURE_ENS_ID;
    RETURN fr;
    EXCEPTION WHEN NO_DATA_FOUND THEN RETURN GET_DEF_REFERENTIEL( INTERVENANT_ID, ANNEE_ID, STRUCTURE_ENS_ID );
  END;
  
  
  FUNCTION CALC_REFERENTIEL( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, STRUCTURE_ENS_ID NUMERIC ) RETURN formule_referentiel%rowtype IS
    res formule_referentiel%rowtype;
  BEGIN
    res := GET_REFERENTIEL( INTERVENANT_ID, ANNEE_ID, STRUCTURE_ENS_ID );

    SELECT
      CASE WHEN 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction, ose_formule.get_date_obs ) THEN i.id ELSE NULL END
    INTO
      res.intervenant_id
    FROM
      intervenant i
    WHERE
      i.id = res.intervenant_id;

    IF res.intervenant_id IS NULL THEN RETURN GET_DEF_REFERENTIEL( INTERVENANT_ID, ANNEE_ID, STRUCTURE_ENS_ID ); END IF;

    SELECT
      i.structure_id,
      sr.structure_id,
      NVL( SUM( sr.heures ), 0 )
    INTO
      res.structure_aff_id,
      res.structure_ens_id,
      res.referentiel
    FROM
      service_referentiel sr
      JOIN intervenant i ON i.id = sr.intervenant_id
    WHERE
          1 = ose_divers.comprise_entre( sr.histo_creation, sr.histo_destruction, ose_formule.get_date_obs )
      AND sr.intervenant_id = res.intervenant_id
      AND sr.annee_id       = res.annee_id
      AND sr.structure_id   = res.structure_ens_id
    GROUP BY
      i.structure_id,
      sr.structure_id;

    RETURN res;
    EXCEPTION WHEN NO_DATA_FOUND THEN RETURN GET_DEF_REFERENTIEL( INTERVENANT_ID, ANNEE_ID, STRUCTURE_ENS_ID );
  END;
  
  
  PROCEDURE IDT_MAJ_REFERENTIEL( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, STRUCTURE_ENS_ID NUMERIC ) IS
  BEGIN
    MERGE INTO formule_referentiel_maj frm USING dual ON
    (
          frm.intervenant_id = IDT_MAJ_REFERENTIEL.INTERVENANT_ID
      AND frm.annee_id = IDT_MAJ_REFERENTIEL.ANNEE_ID 
      AND frm.structure_ens_id = IDT_MAJ_REFERENTIEL.STRUCTURE_ENS_ID
    )
    WHEN NOT MATCHED THEN INSERT ( ID, INTERVENANT_ID, ANNEE_ID, STRUCTURE_ENS_ID ) VALUES 
    ( 
      formule_referentiel_maj_id_seq.nextval,
      IDT_MAJ_REFERENTIEL.INTERVENANT_ID, 
      IDT_MAJ_REFERENTIEL.ANNEE_ID, 
      IDT_MAJ_REFERENTIEL.STRUCTURE_ENS_ID 
    );
  END;


  PROCEDURE MAJ_REFERENTIEL( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, STRUCTURE_ENS_ID NUMERIC ) IS
    fr formule_referentiel%rowtype; 
  BEGIN
    fr := CALC_REFERENTIEL( INTERVENANT_ID, ANNEE_ID, STRUCTURE_ENS_ID );

    IF fr.intervenant_id IS NULL OR fr.referentiel = 0 THEN -- 0 = aucun service référentiel de saisi...

      DELETE FROM formule_referentiel WHERE intervenant_id = MAJ_REFERENTIEL.INTERVENANT_ID AND annee_id = MAJ_REFERENTIEL.ANNEE_ID AND structure_ens_id = MAJ_REFERENTIEL.STRUCTURE_ENS_ID;

    ELSIF fr.id IS NOT NULL THEN

      UPDATE formule_referentiel SET
        structure_aff_id = fr.structure_aff_id,
        referentiel      = fr.referentiel
      WHERE
        id = fr.id;

    ELSE
      fr.id := FORMULE_REFERENTIEL_ID_SEQ.NEXTVAL;

      INSERT INTO FORMULE_REFERENTIEL(
        ID,
        INTERVENANT_ID,
        ANNEE_ID,
        STRUCTURE_AFF_ID,
        STRUCTURE_ENS_ID,
        REFERENTIEL
      )VALUES(
        fr.id,
        fr.intervenant_id,
        fr.annee_id,
        fr.structure_aff_id,
        fr.structure_ens_id,
        fr.referentiel
      );

    END IF;
    IDT_MAJ_RESULTAT( INTERVENANT_ID, ANNEE_ID );
  END;
  
  
  PROCEDURE MAJ_ALL_REFERENTIEL IS
  BEGIN
    FOR d IN (
      SELECT
        i.id intervenant_id,
        sr.annee_id,
        sr.structure_id structure_ens_id
      FROM
        service_referentiel sr
        JOIN intervenant i ON  i.id = sr.intervenant_id 
                           AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction, ose_formule.get_date_obs )
    )
    LOOP
      MAJ_REFERENTIEL( d.intervenant_id, d.annee_id, d.structure_ens_id );
    END LOOP;
  END;
  
  
  PROCEDURE MAJ_IDT_REFERENTIEL IS
  BEGIN
    FOR mp IN (SELECT * FROM formule_referentiel_maj)
    LOOP
      MAJ_REFERENTIEL( mp.intervenant_id, mp.annee_id, mp.structure_ens_id );
    END LOOP;
    DELETE FROM formule_referentiel_maj;
  END;




  FUNCTION GET_DEF_SERVICE( SERVICE_ID NUMERIC ) RETURN formule_service%rowtype IS
    fs formule_service%rowtype;
  BEGIN
    fs.service_id                := SERVICE_ID;
    fs.taux_fi                   := 1;
    fs.taux_fa                   := 0;
    fs.taux_fc                   := 0;
    fs.ponderation_service_du    := 0;
    fs.ponderation_service_compl := 0;
    fs.structure_aff_id          := NULL;
    fs.structure_ens_id          := NULL;
    RETURN fs;
  END;
  

  FUNCTION GET_SERVICE( SERVICE_ID NUMERIC ) RETURN formule_service%rowtype IS
    fs formule_service%rowtype;
  BEGIN
    SELECT * INTO fs FROM formule_service WHERE service_id = GET_SERVICE.service_id;
    RETURN fs;
    EXCEPTION WHEN NO_DATA_FOUND THEN RETURN GET_DEF_SERVICE( SERVICE_ID );
  END;


  FUNCTION CALC_SERVICE( SERVICE_ID NUMERIC ) RETURN formule_service%rowtype IS
    res formule_service%rowtype;
  BEGIN
    res := GET_SERVICE( SERVICE_ID );
    
    SELECT
      CASE WHEN ep.id IS NOT NULL THEN ep.taux_fi ELSE 1 END,
      CASE WHEN ep.id IS NOT NULL THEN ep.taux_fa ELSE 0 END,
      CASE WHEN ep.id IS NOT NULL THEN ep.taux_fc ELSE 0 END,
      CASE WHEN ose_divers.comprise_entre( i.histo_creation, i.histo_destruction, ose_formule.get_date_obs ) = 1 THEN i.id ELSE NULL END,
      s.annee_id,
      CASE WHEN ose_divers.comprise_entre( s.histo_creation, s.histo_destruction, ose_formule.get_date_obs ) = 1 THEN s.id ELSE NULL END,
      s.structure_aff_id,
      s.structure_ens_id
    INTO
      res.taux_fi,
      res.taux_fa,
      res.taux_fc,
      res.intervenant_id,
      res.annee_id,
      res.service_id,
      res.structure_aff_id,
      res.structure_ens_id
    FROM
      service s
      JOIN intervenant i ON i.id = s.intervenant_id
      LEFT JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id 
    WHERE
      s.id = CALC_SERVICE.SERVICE_ID;

    IF res.service_id IS NULL THEN RETURN res; END IF;

    SELECT
      NVL( EXP (SUM (LN (m.ponderation_service_du))), 1),
      NVL( EXP (SUM (LN (m.ponderation_service_compl))), 1)
    INTO
      res.ponderation_service_du,
      res.ponderation_service_compl
    FROM
      service                      s
      LEFT JOIN element_modulateur em ON
        em.element_id = s.element_pedagogique_id
        AND em.annee_id = s.annee_id
        AND 1 = ose_divers.comprise_entre( em.histo_creation, em.histo_destruction, ose_formule.get_date_obs )
      LEFT JOIN modulateur         m ON m.id = em.modulateur_id
    WHERE
      1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction, ose_formule.get_date_obs )
      AND s.id = res.service_id;

    RETURN res;
    EXCEPTION WHEN NO_DATA_FOUND THEN RETURN GET_DEF_SERVICE( SERVICE_ID );
  END;


  PROCEDURE MAJ_SERVICE( SERVICE_ID NUMERIC ) IS
    fs formule_service%rowtype; 
    oldfs formule_service%rowtype;
  BEGIN
    fs := CALC_SERVICE( SERVICE_ID );

    IF fs.service_id IS NULL OR fs.intervenant_id IS NULL THEN
    
      oldfs := GET_SERVICE( SERVICE_ID );
      DELETE FROM formule_service WHERE service_id = MAJ_SERVICE.SERVICE_ID;
      IF oldfs.id IS NOT NULL THEN
        IDT_MAJ_RESULTAT( oldfs.intervenant_id, oldfs.annee_id );
      END IF;
    
    ELSIF fs.id IS NOT NULL THEN

      UPDATE formule_service SET
        taux_fi                   = fs.taux_fi,
        taux_fa                   = fs.taux_fa,
        taux_fc                   = fs.taux_fc,
        ponderation_service_du    = fs.ponderation_service_du,
        ponderation_service_compl = fs.ponderation_service_compl,
        intervenant_id            = fs.intervenant_id,
        annee_id                  = fs.annee_id,
        structure_aff_id          = fs.structure_aff_id,
        structure_ens_id          = fs.structure_ens_id
      WHERE
        id = fs.id;
      IDT_MAJ_RESULTAT( fs.intervenant_id, fs.annee_id );

    ELSE
      fs.id := FORMULE_SERVICE_ID_SEQ.NEXTVAL;

      INSERT INTO FORMULE_SERVICE(
        ID,
        SERVICE_ID,
        TAUX_FI,
        TAUX_FA,
        TAUX_FC,
        PONDERATION_SERVICE_DU,
        PONDERATION_SERVICE_COMPL,
        INTERVENANT_ID,
        ANNEE_ID,
        STRUCTURE_AFF_ID,
        STRUCTURE_ENS_ID
      )VALUES(
        fs.id,
        fs.service_id,
        fs.taux_fi,
        fs.taux_fa,
        fs.taux_fc,
        fs.ponderation_service_du,
        fs.ponderation_service_compl,
        fs.intervenant_id,
        fs.annee_id,
        fs.structure_aff_id,
        fs.structure_ens_id
      );
      IDT_MAJ_RESULTAT( fs.intervenant_id, fs.annee_id );
      
    END IF;
  END;
  
  
  PROCEDURE IDT_MAJ_SERVICE( SERVICE_ID NUMERIC ) IS
  BEGIN
    MERGE INTO formule_service_maj fsm USING dual ON (fsm.service_id = IDT_MAJ_SERVICE.SERVICE_ID)
    WHEN NOT MATCHED THEN INSERT ( ID, SERVICE_ID ) VALUES ( formule_service_maj_id_seq.nextval, IDT_MAJ_SERVICE.SERVICE_ID );
  END;
  
  
  PROCEDURE MAJ_ALL_SERVICE IS
  BEGIN
    FOR s IN (
      SELECT s.id FROM service s
    )
    LOOP
      MAJ_SERVICE( s.id );
    END LOOP;
  END;


  PROCEDURE MAJ_IDT_SERVICE IS
  BEGIN
    FOR mp IN (SELECT * FROM formule_service_maj)
    LOOP
      MAJ_SERVICE( mp.service_id );
    END LOOP;
    DELETE FROM formule_service_maj;
  END;
  
  



  FUNCTION GET_DEF_VOLUME_HORAIRE( VOLUME_HORAIRE_ID NUMERIC ) RETURN formule_volume_horaire%rowtype IS
    fvh formule_volume_horaire%rowtype;
  BEGIN
    fvh.volume_horaire_id  := VOLUME_HORAIRE_ID;
    fvh.heures             := 0;
    fvh.taux_service_du    := 1;
    fvh.taux_service_compl := 1;
    RETURN fvh;
  END;
  

  FUNCTION GET_VOLUME_HORAIRE( VOLUME_HORAIRE_ID NUMERIC ) RETURN formule_volume_horaire%rowtype IS
    fvh formule_volume_horaire%rowtype;
  BEGIN
    SELECT * INTO fvh FROM formule_volume_horaire WHERE volume_horaire_id = GET_VOLUME_HORAIRE.volume_horaire_id;
    RETURN fvh;
    EXCEPTION WHEN NO_DATA_FOUND THEN RETURN GET_DEF_VOLUME_HORAIRE( VOLUME_HORAIRE_ID );
  END;


  FUNCTION CALC_VOLUME_HORAIRE( VOLUME_HORAIRE_ID NUMERIC ) RETURN formule_volume_horaire%rowtype IS
    res formule_volume_horaire%rowtype;
  BEGIN
    res := GET_VOLUME_HORAIRE( VOLUME_HORAIRE_ID );

    SELECT
      CASE WHEN 1 = ose_divers.comprise_entre( vh.histo_creation,  vh.histo_destruction,  ose_formule.get_date_obs ) AND vh.motif_non_paiement_id IS NULL THEN vh.id ELSE NULL END,
      vh.heures,
      ti.taux_hetd_service,
      ti.taux_hetd_complementaire,
      CASE WHEN 1 = ose_divers.comprise_entre( i.histo_creation,   i.histo_destruction,   ose_formule.get_date_obs ) THEN i.id   ELSE NULL END,
      s.annee_id,
      CASE WHEN 1 = ose_divers.comprise_entre( s.histo_creation,   s.histo_destruction,   ose_formule.get_date_obs ) THEN s.id   ELSE NULL END,
      CASE WHEN 1 = ose_divers.comprise_entre( tvh.histo_creation, tvh.histo_destruction, ose_formule.get_date_obs ) THEN tvh.id ELSE NULL END,
      CASE WHEN 1 = ose_divers.comprise_entre( evh.histo_creation, evh.histo_destruction, ose_formule.get_date_obs ) THEN evh.id ELSE NULL END,
      CASE WHEN 1 = ose_divers.comprise_entre( ti.histo_creation,  ti.histo_destruction,  ose_formule.get_date_obs ) THEN ti.id  ELSE NULL END
    INTO
      res.volume_horaire_id,
      res.heures,
      res.taux_service_du,
      res.taux_service_compl,
      res.intervenant_id,
      res.annee_id,
      res.service_id,
      res.type_volume_horaire_id,
      res.etat_volume_horaire_id,
      res.type_intervention_id
    FROM
      volume_horaire            vh
      JOIN service              s   ON s.id     = vh.service_id
      JOIN type_intervention    ti  ON ti.id    = vh.type_intervention_id
      JOIN intervenant          i   ON i.id     = s.intervenant_id
      JOIN type_volume_horaire  tvh ON tvh.id   = vh.type_volume_horaire_id
      LEFT JOIN contrat         c   ON c.id     = vh.contrat_id   AND 1 = ose_divers.comprise_entre( c.histo_creation,  c.histo_destruction,  ose_formule.get_date_obs )
      LEFT JOIN validation      cv  ON cv.id    = c.validation_id AND 1 = ose_divers.comprise_entre( cv.histo_creation, cv.histo_destruction, ose_formule.get_date_obs )
      JOIN etat_volume_horaire  evh ON evh.code = CASE
        WHEN c.date_retour_signe IS NOT NULL THEN 'contrat-signe'
        WHEN cv.id IS NOT NULL THEN 'contrat-edite'
        WHEN EXISTS(
          SELECT * FROM validation v JOIN validation_vol_horaire vvh ON vvh.validation_id = v.id
          WHERE vvh.volume_horaire_id = vh.id AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction, ose_formule.get_date_obs )
        ) THEN 'valide'
        ELSE 'saisi'
      END
    WHERE
      vh.ID = CALC_VOLUME_HORAIRE.VOLUME_HORAIRE_ID;

    RETURN res;
    EXCEPTION WHEN NO_DATA_FOUND THEN RETURN GET_DEF_VOLUME_HORAIRE( VOLUME_HORAIRE_ID );
  END;


  PROCEDURE MAJ_VOLUME_HORAIRE( VOLUME_HORAIRE_ID NUMERIC ) IS
    fvh formule_volume_horaire%rowtype;
    oldfvh formule_volume_horaire%rowtype;
  BEGIN
    fvh := CALC_VOLUME_HORAIRE( VOLUME_HORAIRE_ID );
    IF fvh.volume_horaire_id IS NULL
       OR fvh.intervenant_id IS NULL
       OR fvh.service_id IS NULL
       OR fvh.type_volume_horaire_id IS NULL
       OR fvh.etat_volume_horaire_id IS NULL
       OR fvh.type_intervention_id IS NULL
    THEN
    
      oldfvh := GET_VOLUME_HORAIRE( VOLUME_HORAIRE_ID );
      DELETE FROM formule_volume_horaire WHERE volume_horaire_id = MAJ_VOLUME_HORAIRE.VOLUME_HORAIRE_ID;
      IF oldfvh.id IS NOT NULL THEN
        IDT_MAJ_RESULTAT( oldfvh.intervenant_id, oldfvh.annee_id, oldfvh.type_volume_horaire_id, oldfvh.etat_volume_horaire_id );
      END IF;
    
    ELSIF fvh.id IS NOT NULL THEN

      UPDATE formule_volume_horaire SET
        heures                  = fvh.heures,
        taux_service_du         = fvh.taux_service_du,
        taux_service_compl      = fvh.taux_service_compl,
        intervenant_id          = fvh.intervenant_id,
        annee_id                = fvh.annee_id,
        service_id              = fvh.service_id,
        type_volume_horaire_id  = fvh.type_volume_horaire_id,
        etat_volume_horaire_id  = fvh.etat_volume_horaire_id,
        type_intervention_id    = fvh.type_intervention_id
      WHERE
        id = fvh.id;
      IDT_MAJ_RESULTAT( fvh.intervenant_id, fvh.annee_id, fvh.type_volume_horaire_id, fvh.etat_volume_horaire_id );
      
    ELSE
      fvh.id := FORMULE_VOLUME_HORAIRE_ID_SEQ.NEXTVAL;

      INSERT INTO FORMULE_VOLUME_HORAIRE(
        ID,
        VOLUME_HORAIRE_ID,
        HEURES,
        TAUX_SERVICE_DU,
        TAUX_SERVICE_COMPL,
        INTERVENANT_ID,
        ANNEE_ID,
        SERVICE_ID,        
        TYPE_VOLUME_HORAIRE_ID,
        ETAT_VOLUME_HORAIRE_ID,
        TYPE_INTERVENTION_ID
      )VALUES(
        fvh.id,
        fvh.volume_horaire_id,
        fvh.heures,
        fvh.taux_service_du,
        fvh.taux_service_compl,
        fvh.intervenant_id,
        fvh.annee_id,
        fvh.service_id,
        fvh.type_volume_horaire_id,
        fvh.etat_volume_horaire_id,
        fvh.type_intervention_id
      );
      IDT_MAJ_RESULTAT( fvh.intervenant_id, fvh.annee_id, fvh.type_volume_horaire_id, fvh.etat_volume_horaire_id );
      
    END IF;
  END;


  PROCEDURE IDT_MAJ_VOLUME_HORAIRE( VOLUME_HORAIRE_ID NUMERIC ) IS
  BEGIN
    MERGE INTO formule_volume_horaire_maj fvhm USING dual ON (fvhm.volume_horaire_id = IDT_MAJ_VOLUME_HORAIRE.VOLUME_HORAIRE_ID)
    WHEN NOT MATCHED THEN INSERT ( ID, VOLUME_HORAIRE_ID ) VALUES ( formule_volume_horairem_id_seq.nextval, IDT_MAJ_VOLUME_HORAIRE.VOLUME_HORAIRE_ID );
  END;


  PROCEDURE MAJ_ALL_VOLUME_HORAIRE IS
  BEGIN
    FOR vh IN (
      SELECT vh.id FROM volume_horaire vh
    )
    LOOP
      MAJ_VOLUME_HORAIRE( vh.id );
    END LOOP;
  END;


  PROCEDURE MAJ_IDT_VOLUME_HORAIRE IS
  BEGIN
    FOR mp IN (SELECT * FROM formule_volume_horaire_maj)
    LOOP
      MAJ_VOLUME_HORAIRE( mp.volume_horaire_id );
    END LOOP;
    DELETE FROM formule_volume_horaire_maj;
  END;





  FUNCTION GET_DEF_RESULTAT( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) RETURN formule_resultat%rowtype IS
    fr formule_resultat%rowtype;
  BEGIN
    fr.intervenant_id           := INTERVENANT_ID;
    fr.annee_id                 := ANNEE_ID;
    fr.type_volume_horaire_id   := TYPE_VOLUME_HORAIRE_ID;
    fr.etat_volume_horaire_id   := ETAT_VOLUME_HORAIRE_ID;
    fr.service_du               := 0;
    fr.enseignements            := 0;
    fr.service                  := 0;
    fr.referentiel              := 0;
    fr.service_assure           := 0;
    fr.heures_solde             := 0;
    fr.heures_compl_fi          := 0;
    fr.heures_compl_fa          := 0;
    fr.heures_compl_fc          := 0;
    fr.heures_compl_referentiel := 0;
    fr.heures_compl_total       := 0;
    fr.sous_service             := 0;
    fr.a_payer                  := 0;
    RETURN fr;
  END;


  FUNCTION GET_RESULTAT( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) RETURN formule_resultat%rowtype IS
    fr formule_resultat%rowtype;
  BEGIN
    SELECT * INTO fr FROM formule_resultat WHERE
           INTERVENANT_ID         = GET_RESULTAT.INTERVENANT_ID
       AND ANNEE_ID               = GET_RESULTAT.ANNEE_ID
       AND TYPE_VOLUME_HORAIRE_ID = GET_RESULTAT.TYPE_VOLUME_HORAIRE_ID
       AND ETAT_VOLUME_HORAIRE_ID = GET_RESULTAT.ETAT_VOLUME_HORAIRE_ID;
    RETURN fr;
    EXCEPTION WHEN NO_DATA_FOUND THEN RETURN GET_DEF_RESULTAT( INTERVENANT_ID, ANNEE_ID, TYPE_VOLUME_HORAIRE_ID, ETAT_VOLUME_HORAIRE_ID );
  END;


  PROCEDURE IDT_MAJ_RESULTAT( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC DEFAULT NULL, ETAT_VOLUME_HORAIRE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    MERGE INTO formule_resultat_maj frm USING dual ON (
          frm.INTERVENANT_ID                = IDT_MAJ_RESULTAT.INTERVENANT_ID
      AND frm.ANNEE_ID                      = IDT_MAJ_RESULTAT.ANNEE_ID
      AND NVL(frm.TYPE_VOLUME_HORAIRE_ID,0) = NVL(IDT_MAJ_RESULTAT.TYPE_VOLUME_HORAIRE_ID,0)
      AND NVL(frm.ETAT_VOLUME_HORAIRE_ID,0) = NVL(IDT_MAJ_RESULTAT.ETAT_VOLUME_HORAIRE_ID,0)
    )
    WHEN NOT MATCHED THEN INSERT ( 
      ID,
      INTERVENANT_ID, 
      ANNEE_ID, 
      TYPE_VOLUME_HORAIRE_ID, 
      ETAT_VOLUME_HORAIRE_ID
    ) VALUES (
      FORMULE_RESULTAT_MAJ_ID_SEQ.NEXTVAL,
      IDT_MAJ_RESULTAT.INTERVENANT_ID, 
      IDT_MAJ_RESULTAT.ANNEE_ID, 
      IDT_MAJ_RESULTAT.TYPE_VOLUME_HORAIRE_ID, 
      IDT_MAJ_RESULTAT.ETAT_VOLUME_HORAIRE_ID
    );
  END;


  PROCEDURE MAJ_RESULTAT( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) IS
    function_name VARCHAR2(30);
    package_name VARCHAR2(30);
  BEGIN
    package_name  := OSE_PARAMETRE.GET_FORMULE_PACKAGE_NAME;
    function_name := OSE_PARAMETRE.GET_FORMULE_FUNCTION_NAME;

    FOR evh IN ( -- on met à jour également tous les résultats des états de volumes horaires antérieurs
      SELECT
        evh2.id id
      FROM
        etat_volume_horaire evh
        JOIN etat_volume_horaire evh2 ON evh2.ordre <= evh.ordre AND ose_divers.comprise_entre( evh2.histo_creation, evh2.histo_destruction ) = 1
      WHERE
        evh.id = ETAT_VOLUME_HORAIRE_ID
      ORDER BY
        evh2.ordre    
    ) LOOP

      EXECUTE IMMEDIATE 
        'BEGIN ' || package_name || '.' || function_name || '( :1, :2, :3, :4 ); END;'
      USING
        INTERVENANT_ID, ANNEE_ID, TYPE_VOLUME_HORAIRE_ID, evh.id;

    END LOOP;
  END;

  PROCEDURE MAJ_RESULTAT( INTERVENANT_ID NUMERIC, ANNEE_ID NUMERIC )IS
  BEGIN
    DELETE FROM -- pour éliminer les anciens résultats avec des états non corrects
      formule_resultat
    WHERE
          intervenant_id = MAJ_RESULTAT.INTERVENANT_ID
      AND annee_id       = MAJ_RESULTAT.ANNEE_ID;

    FOR fr IN ( -- on ne prend que les plus grands états de volumes horaires car les plus petits sont toujours remis à jour!!
      SELECT DISTINCT type_volume_horaire_id, MAX(etat_volume_horaire_id) etat_volume_horaire_id
      FROM formule_volume_horaire
      WHERE intervenant_id = MAJ_RESULTAT.INTERVENANT_ID AND annee_id = MAJ_RESULTAT.ANNEE_ID
      GROUP BY type_volume_horaire_id
    ) LOOP
      MAJ_RESULTAT( INTERVENANT_ID, ANNEE_ID, fr.type_volume_horaire_id, fr.etat_volume_horaire_id );
    END LOOP;
  END;


  PROCEDURE SAVE_RESULTAT( fr formule_resultat%rowtype ) IS
  BEGIN

    IF fr.id IS NOT NULL THEN

      UPDATE formule_resultat SET
        service_du               = fr.service_du,
        enseignements            = fr.enseignements,
        service                  = fr.service,
        referentiel              = fr.referentiel,
        service_assure           = fr.service_assure,
        heures_solde             = fr.heures_solde,
        heures_compl_fi          = fr.heures_compl_fi,
        heures_compl_fa          = fr.heures_compl_fa,
        heures_compl_fc          = fr.heures_compl_fc,
        heures_compl_referentiel = fr.heures_compl_referentiel,
        heures_compl_total       = fr.heures_compl_total,
        sous_service             = fr.sous_service,
        a_payer                  = fr.a_payer
      WHERE
        intervenant_id             = fr.INTERVENANT_ID
        AND annee_id               = fr.ANNEE_ID
        AND type_volume_horaire_id = fr.TYPE_VOLUME_HORAIRE_ID
        AND etat_volume_horaire_id = fr.ETAT_VOLUME_HORAIRE_ID;

    ELSE

      INSERT INTO formule_resultat(
        ID,
        INTERVENANT_ID,
        ANNEE_ID,
        TYPE_VOLUME_HORAIRE_ID,
        ETAT_VOLUME_HORAIRE_ID,
        SERVICE_DU,
        SERVICE,
        ENSEIGNEMENTS,
        REFERENTIEL,
        SERVICE_ASSURE,
        HEURES_SOLDE,
        HEURES_COMPL_FI,
        HEURES_COMPL_FA,
        HEURES_COMPL_FC,
        HEURES_COMPL_REFERENTIEL,
        HEURES_COMPL_TOTAL,
        SOUS_SERVICE,
        A_PAYER
      )VALUES(
        FORMULE_RESULTAT_ID_SEQ.NEXTVAL,
        fr.intervenant_id,
        fr.annee_id,
        fr.type_volume_horaire_id,
        fr.etat_volume_horaire_id,
        fr.service_du,
        fr.service,
        fr.enseignements,
        fr.referentiel,
        fr.service_assure,
        fr.heures_solde,
        fr.heures_compl_fi,
        fr.heures_compl_fa,
        fr.heures_compl_fc,
        fr.heures_compl_referentiel,
        fr.heures_compl_total,
        fr.sous_service,
        fr.a_payer
      );

    END IF;
  END;


  PROCEDURE MAJ_ALL_RESULTAT IS
    a_id NUMERIC;
  BEGIN
    a_id := OSE_PARAMETRE.GET_ANNEE;
    FOR mp IN (
      SELECT DISTINCT
        i.id                        intervenant_id,
        s.annee_id                  annee_id,
        COALESCE( vh.type_volume_horaire_id,  (SELECT id FROM type_volume_horaire WHERE code = 'PREVU') ) type_volume_horaire_id,
        COALESCE( vhe.etat_volume_horaire_id, (SELECT id FROM etat_volume_horaire WHERE code = 'saisi') ) etat_volume_horaire_id
      FROM 
        intervenant i
        JOIN service s                       ON s.intervenant_id = i.id 
                                            AND s.annee_id = a_id
                                            AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction, ose_formule.get_date_obs )
        LEFT JOIN volume_horaire vh          ON vh.service_id = s.id 
                                            AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction, ose_formule.get_date_obs )
                                            AND vh.motif_non_paiement_id IS NULL
        LEFT JOIN v_volume_horaire_etat vhe  ON vhe.volume_horaire_id = vh.id
    )
    LOOP
      MAJ_RESULTAT( mp.intervenant_id, mp.annee_id, mp.type_volume_horaire_id, mp.etat_volume_horaire_id );
    END LOOP;
  END;


  PROCEDURE MAJ_IDT_RESULTAT IS
  BEGIN
    FOR mp IN (SELECT * FROM formule_resultat_maj)
    LOOP
      IF mp.type_volume_horaire_id IS NULL AND mp.etat_volume_horaire_id IS NULL THEN
        OSE_FORMULE.MAJ_RESULTAT( mp.intervenant_id, mp.annee_id );
      ELSE
        MAJ_RESULTAT( mp.intervenant_id, mp.annee_id, mp.type_volume_horaire_id, mp.etat_volume_horaire_id );
      END IF;
    END LOOP;
    DELETE FROM formule_resultat_maj;
  END;



  PROCEDURE MAJ_ALL_IDT IS
  BEGIN
    MAJ_IDT_SERVICE_DU;
    MAJ_IDT_REFERENTIEL;
    MAJ_IDT_SERVICE;
    MAJ_IDT_VOLUME_HORAIRE;
    MAJ_IDT_RESULTAT;
  END;
  
  PROCEDURE MAJ_ALL IS
  BEGIN
    MAJ_ALL_SERVICE_DU;
    MAJ_ALL_REFERENTIEL;
    MAJ_ALL_SERVICE;
    MAJ_ALL_VOLUME_HORAIRE;
    MAJ_ALL_RESULTAT;
  END;

  PROCEDURE EXECUTE_SIGNAL IS
    v_mesg VARCHAR2(30);
    v_status INTEGER;
  BEGIN
    dbms_output.put_line('OK, c''est fait!');
    INSERT INTO SYNC_LOG(
      ID, DATE_SYNC, MESSAGE
    ) VALUES (
      SYNC_LOG_ID_SEQ.NEXTVAL, SYSDATE, 'EXECUTE SIGNAL'
    );
    OSE_FORMULE.MAJ_ALL_IDT;

    --DBMS_ALERT.WAITONE('ose_formule_maj', v_mesg, v_status); 
    --IF v_status = 0 THEN EXECUTE_SIGNAL; END IF;
  END;

 /* PROCEDURE REGISTER_SIGNAL IS
  BEGIN
    DBMS_ALERT.REGISTER('ose_formule_maj');
    EXECUTE_SIGNAL;
  END;*/

  PROCEDURE REGISTER_SIGNAL IS
    v_mesg VARCHAR2(30);
    v_status INTEGER;
  BEGIN
    RETURN;
/*    DBMS_ALERT.REGISTER('ose_formule_maj');

    DBMS_ALERT.WAITONE('ose_formule_maj', v_mesg, v_status); 
    dbms_output.put_line('Msg: ' || v_mesg || ' Stat: ' || TO_CHAR(v_status));
  */    
  END;
  
  PROCEDURE UNREGISTER_SIGNAL IS
  BEGIN
    RETURN;
    --DBMS_ALERT.REMOVE('ose_formule_maj');
  END;


  PROCEDURE RUN_SIGNAL IS
  BEGIN
    RETURN;
    --DBMS_ALERT.SIGNAL('ose_formule_maj', 'test'); 
  END;

END OSE_FORMULE;
/

---------------------------
--Nouveau TRIGGER
--F_VOLUME_HORAIRE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_VOLUME_HORAIRE"
  AFTER INSERT OR UPDATE ON "OSE"."VOLUME_HORAIRE"
  REFERENCING FOR EACH ROW
  BEGIN
  IF UPDATING THEN
    OSE_FORMULE.IDT_MAJ_VOLUME_HORAIRE( :OLD.id );
  END IF;
  IF INSERTING OR UPDATING THEN
    OSE_FORMULE.IDT_MAJ_VOLUME_HORAIRE( :NEW.id );
  END IF;
  OSE_FORMULE.RUN_SIGNAL;
END;
/
---------------------------
--Nouveau TRIGGER
--F_VALIDATION_VOL_HORAIRE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION_VOL_HORAIRE"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."VALIDATION_VOL_HORAIRE"
  REFERENCING FOR EACH ROW
  BEGIN
  IF INSERTING OR UPDATING THEN
    OSE_FORMULE.IDT_MAJ_VOLUME_HORAIRE( :NEW.volume_horaire_id );
  END IF;
  IF DELETING OR UPDATING THEN
    OSE_FORMULE.IDT_MAJ_VOLUME_HORAIRE( :OLD.volume_horaire_id );
  END IF;
  OSE_FORMULE.RUN_SIGNAL;
END;
/
---------------------------
--Nouveau TRIGGER
--F_VALIDATION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION"
  AFTER UPDATE ON "OSE"."VALIDATION"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN ( -- validations de volume horaire

    SELECT
      vh.id volume_horaire_id
    FROM
      validation_vol_horaire vvh
      JOIN volume_horaire vh ON vh.id = vvh.volume_horaire_id AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
    WHERE
      (vvh.validation_id = :OLD.ID OR vvh.validation_id = :NEW.id)

  ) LOOP

    OSE_FORMULE.IDT_MAJ_VOLUME_HORAIRE( p.volume_horaire_id );

  END LOOP;

  FOR p IN ( -- validations de contrat

    SELECT
      vh.id volume_horaire_id
    FROM
      contrat c
      JOIN volume_horaire vh ON vh.contrat_id = c.id AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
    WHERE
      (c.validation_id = :OLD.ID OR c.validation_id = :NEW.id)

  ) LOOP

    OSE_FORMULE.IDT_MAJ_VOLUME_HORAIRE( p.volume_horaire_id );

  END LOOP;

  OSE_FORMULE.RUN_SIGNAL;
END;
/
---------------------------
--Nouveau TRIGGER
--F_TYPE_INTERVENTION
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_TYPE_INTERVENTION"
  AFTER UPDATE ON "OSE"."TYPE_INTERVENTION"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (
  
    SELECT
      vh.id volume_horaire_id
    FROM
      volume_horaire vh
    WHERE
      1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      AND (vh.type_intervention_id = :NEW.id OR vh.type_intervention_id = :OLD.id)
  
  ) LOOP
  
    OSE_FORMULE.IDT_MAJ_VOLUME_HORAIRE( p.volume_horaire_id );
  
  END LOOP;
  OSE_FORMULE.RUN_SIGNAL;
END;
/
---------------------------
--Nouveau TRIGGER
--F_SERVICE_REFERENTIEL
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_SERVICE_REFERENTIEL"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE_REFERENTIEL"
  REFERENCING FOR EACH ROW
  BEGIN

  IF DELETING OR UPDATING THEN
    OSE_FORMULE.IDT_MAJ_REFERENTIEL( :OLD.intervenant_id, :OLD.annee_id, :OLD.structure_id );
  END IF;
  IF INSERTING OR UPDATING THEN
    OSE_FORMULE.IDT_MAJ_REFERENTIEL( :NEW.intervenant_id, :NEW.annee_id, :NEW.structure_id );
  END IF;
  OSE_FORMULE.RUN_SIGNAL;

END;
/
---------------------------
--Nouveau TRIGGER
--F_SERVICE_DU
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_SERVICE_DU"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."SERVICE_DU"
  REFERENCING FOR EACH ROW
  BEGIN
  IF DELETING OR UPDATING THEN
    OSE_FORMULE.IDT_MAJ_SERVICE_DU( :OLD.intervenant_id, :OLD.annee_id );
  END IF;
  IF INSERTING OR UPDATING THEN
    OSE_FORMULE.IDT_MAJ_SERVICE_DU( :NEW.intervenant_id, :NEW.annee_id );
  END IF;
  OSE_FORMULE.RUN_SIGNAL;
END;
/
---------------------------
--Nouveau TRIGGER
--F_SERVICE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_SERVICE"
  AFTER INSERT OR UPDATE ON "OSE"."SERVICE"
  REFERENCING FOR EACH ROW
  BEGIN

  IF :OLD.id IS NOT NULL THEN
    OSE_FORMULE.IDT_MAJ_SERVICE( :OLD.id );
  END IF;
  IF :NEW.id IS NOT NULL THEN
    OSE_FORMULE.IDT_MAJ_SERVICE( :NEW.id );
  END IF;
  FOR p IN (
  
    SELECT
      vh.id volume_horaire_id
    FROM
      volume_horaire vh
    WHERE
      (vh.service_id = :NEW.id OR vh.service_id = :OLD.id)
      --AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction ) -- pas d'historique car des VH peuvent être restaurés!!
      
  ) LOOP
  
    OSE_FORMULE.IDT_MAJ_VOLUME_HORAIRE( p.volume_horaire_id );
    
  END LOOP;
  OSE_FORMULE.RUN_SIGNAL;
END;
/
---------------------------
--Nouveau TRIGGER
--F_MOTIF_MODIFICATION_SERVICE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_MOTIF_MODIFICATION_SERVICE"
  AFTER DELETE OR UPDATE ON "OSE"."MOTIF_MODIFICATION_SERVICE"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (
  
    SELECT DISTINCT
      intervenant_id, 
      annee_id
    FROM
      modification_service_du msd
    WHERE
      1 = OSE_DIVERS.COMPRISE_ENTRE( msd.histo_creation, msd.histo_destruction )
      AND (msd.motif_id = :NEW.id OR msd.motif_id = :OLD.id)
      
  ) LOOP
  
    OSE_FORMULE.IDT_MAJ_SERVICE_DU( p.intervenant_id, p.annee_id );
  
  END LOOP;
  OSE_FORMULE.RUN_SIGNAL;
END;
/
---------------------------
--Nouveau TRIGGER
--F_MODULATEUR
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_MODULATEUR"
  AFTER DELETE OR UPDATE ON "OSE"."MODULATEUR"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (

    SELECT
      s.id service_id
    FROM
      service s
      JOIN element_modulateur em ON 
        em.element_id   = s.element_pedagogique_id 
        AND em.annee_id = s.annee_id 
        AND 1 = ose_divers.comprise_entre( em.histo_creation, em.histo_destruction )
    WHERE
      1 = OSE_DIVERS.COMPRISE_ENTRE( s.histo_creation, s.histo_destruction )
      AND (em.modulateur_id = :OLD.id OR em.modulateur_id = :NEW.id)

  ) LOOP

    OSE_FORMULE.IDT_MAJ_SERVICE( p.service_id );

  END LOOP;
  OSE_FORMULE.RUN_SIGNAL;
END;
/
---------------------------
--Nouveau TRIGGER
--F_MODIF_SERVICE_DU
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_MODIF_SERVICE_DU"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."MODIFICATION_SERVICE_DU"
  REFERENCING FOR EACH ROW
  BEGIN
  IF DELETING OR UPDATING THEN
    OSE_FORMULE.IDT_MAJ_SERVICE_DU( :OLD.intervenant_id, :OLD.annee_id );
  END IF;
  IF INSERTING OR UPDATING THEN
    OSE_FORMULE.IDT_MAJ_SERVICE_DU( :NEW.intervenant_id, :NEW.annee_id );
  END IF;
  OSE_FORMULE.RUN_SIGNAL;
END;
/
---------------------------
--Nouveau TRIGGER
--F_INTERVENANT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_INTERVENANT"
  AFTER UPDATE ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN
  IF :OLD.id IS NOT NULL THEN
    OSE_FORMULE.IDT_MAJ_SERVICE_DU( :OLD.id, OSE_PARAMETRE.GET_ANNEE );
  END IF;
  IF :NEW.id IS NOT NULL THEN
    OSE_FORMULE.IDT_MAJ_SERVICE_DU( :NEW.id, OSE_PARAMETRE.GET_ANNEE );
  END IF;

  FOR p IN (

    SELECT
      s.id  service_id,
      vh.id volume_horaire_id
    FROM
      service s
      LEFT JOIN volume_horaire vh ON vh.service_id = s.id AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
    WHERE
      1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
      AND (s.intervenant_id = :NEW.id OR s.intervenant_id = :OLD.id)
  
  ) LOOP
  
    OSE_FORMULE.IDT_MAJ_SERVICE( p.service_id );  
    IF p.volume_horaire_id IS NOT NULL THEN
      OSE_FORMULE.IDT_MAJ_VOLUME_HORAIRE( p.volume_horaire_id );
    END IF;

  END LOOP;
  OSE_FORMULE.RUN_SIGNAL;
END;
/
---------------------------
--Nouveau TRIGGER
--F_ELEMENT_PEDAGOGIQUE
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_ELEMENT_PEDAGOGIQUE"
  AFTER UPDATE ON "OSE"."ELEMENT_PEDAGOGIQUE"
  REFERENCING FOR EACH ROW
  BEGIN

  FOR p IN (

    SELECT
      s.id service_id
    FROM
      service s
    WHERE
      (s.element_pedagogique_id = :NEW.id OR s.element_pedagogique_id = :OLD.id)
      AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )

  ) LOOP

    OSE_FORMULE.IDT_MAJ_SERVICE( p.service_id );

  END LOOP;
  OSE_FORMULE.RUN_SIGNAL;
END;
/
---------------------------
--Nouveau TRIGGER
--F_ELEMENT_MODULATEUR
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_ELEMENT_MODULATEUR"
  AFTER INSERT OR DELETE OR UPDATE ON "OSE"."ELEMENT_MODULATEUR"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (
  
    SELECT
      id service_id
    FROM
      service s
    WHERE
      1 = OSE_DIVERS.COMPRISE_ENTRE( s.histo_creation, s.histo_destruction )
      AND (s.element_pedagogique_id = :OLD.element_id OR s.element_pedagogique_id = :NEW.element_id)
      
  ) LOOP
  
    OSE_FORMULE.IDT_MAJ_SERVICE( p.service_id );
    
  END LOOP;
  OSE_FORMULE.RUN_SIGNAL;
END;
/
---------------------------
--Nouveau TRIGGER
--F_CONTRAT
---------------------------
  CREATE OR REPLACE TRIGGER "OSE"."F_CONTRAT"
  AFTER DELETE OR UPDATE ON "OSE"."CONTRAT"
  REFERENCING FOR EACH ROW
  BEGIN
  FOR p IN (

    SELECT
      vh.id volume_horaire_id
    FROM
      volume_horaire vh 
    WHERE
      1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      AND (vh.contrat_id = :OLD.id OR vh.contrat_id = :NEW.id)

  ) LOOP

    OSE_FORMULE.IDT_MAJ_VOLUME_HORAIRE( p.volume_horaire_id );

  END LOOP;
  OSE_FORMULE.RUN_SIGNAL;
END;
/


BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
            job_name => '"OSE"."OSE_FORMULE_REFRESH"',
            job_type => 'STORED_PROCEDURE',
            job_action => 'OSE.OSE_FORMULE.MAJ_ALL',
            number_of_arguments => 0,
            start_date => NULL,
            repeat_interval => 'FREQ=DAILY;BYDAY=MON,TUE,WED,THU,FRI,SAT,SUN;BYHOUR=5;BYMINUTE=0;BYSECOND=0',
            end_date => NULL,
            enabled => FALSE,
            auto_drop => FALSE,
            comments => '');

         
     
 
    DBMS_SCHEDULER.SET_ATTRIBUTE( 
             name => '"OSE"."OSE_FORMULE_REFRESH"', 
             attribute => 'logging_level', value => DBMS_SCHEDULER.LOGGING_OFF);
      
  
    
    DBMS_SCHEDULER.enable(
             name => '"OSE"."OSE_FORMULE_REFRESH"');
END;
/




  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_ELEMENT_PEDAGOGIQUE" ("ID", "LIBELLE", "ETAPE_ID", "STRUCTURE_ID", "PERIODE_ID", "TAUX_FI", "TAUX_FC", "TAUX_FA", "TAUX_FOAD", "FC", "FI", "FA", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null id,
  E.LIBELLE,
  etp.id ETAPE_ID,
  NVL(str.STRUCTURE_NIV2_ID,str.id) structure_id,
  per.id periode_id,
  CASE 
    WHEN etr.id IS NOT NULL THEN etr.taux_fi
    ELSE ose_divers.calcul_taux_fi( e.fi, e.fc, e.fa, e.fi, e.fc, e.fa )
  END taux_fi,
  CASE 
    WHEN etr.id IS NOT NULL THEN etr.taux_fc
    ELSE ose_divers.calcul_taux_fc( e.fi, e.fc, e.fa, e.fi, e.fc, e.fa )
  END taux_fc,
  CASE 
    WHEN etr.id IS NOT NULL THEN etr.taux_fa
    ELSE ose_divers.calcul_taux_fa( e.fi, e.fc, e.fa, e.fi, e.fc, e.fa )
  END taux_fa,
  e.taux_foad,
  e.fc,
  e.fi,
  e.fa,
  E.SOURCE_ID,
  E.SOURCE_CODE
FROM
  MV_ELEMENT_PEDAGOGIQUE E
  LEFT JOIN etape etp ON etp.source_code = E.Z_ETAPE_ID
  LEFT JOIN structure str ON str.source_code = E.Z_STRUCTURE_ID
  LEFT JOIN periode per ON per.libelle_court = E.Z_PERIODE_ID
  LEFT JOIN element_pedagogique ep ON ep.source_code = e.source_code
  LEFT JOIN element_taux_regimes etr ON
    etr.element_pedagogique_id = ep.id
    AND etr.annee_id = OSE_PARAMETRE.GET_ANNEE
    AND 1 = OSE_DIVERS.COMPRISE_ENTRE( etr.histo_creation, etr.histo_destruction );


DROP MATERIALIZED VIEW "OSE"."MV_ELEMENT_TAUX_REGIMES";
  CREATE MATERIALIZED VIEW "OSE"."MV_ELEMENT_TAUX_REGIMES" ("Z_ELEMENT_PEDAGOGIQUE_ID", "ANNEE_ID", "TAUX_FI", "TAUX_FC", "TAUX_FA", "SOURCE_ID", "SOURCE_CODE") AS
  SELECT
  e.source_code z_element_pedagogique_id,
  to_number(e.annee_id) + 1 annee_id,
  OSE_DIVERS.CALCUL_TAUX_FI( effectif_fi, effectif_fc, effectif_fa, ep.fi, ep.fc, ep.fa ) taux_fi,
  OSE_DIVERS.CALCUL_TAUX_FC( effectif_fi, effectif_fc, effectif_fa, ep.fi, ep.fc, ep.fa ) taux_fc,
  OSE_DIVERS.CALCUL_TAUX_FA( effectif_fi, effectif_fc, effectif_fa, ep.fi, ep.fc, ep.fa ) taux_fa,
  ose_import.get_source_id('Apogee') source_id,
  e.annee_id || '-' || e.source_code source_code
FROM
  ucbn_ose_element_effectifs@apoprod e
  JOIN element_pedagogique ep ON ep.source_code = e.source_code
WHERE
  (effectif_fi + effectif_fc + effectif_fa) > 0
  AND NOT EXISTS(
    SELECT * FROM element_taux_regimes etr JOIN element_pedagogique ep2 ON ep2.id = etr.element_pedagogique_id WHERE
      ep2.source_code = e.source_code
      AND etr.annee_id = to_number(e.annee_id) + 1
      AND etr.source_id <> ose_import.get_source_id('Apogee')
  );


-- ********************************************************************* --
-- *          à faire APRÈS avoir mis à jour le code source            * --
-- ********************************************************************* --
-- ++++++ OSE_DIVERS

BEGIN DBMS_SCHEDULER.enable(name=>'"OSE"."OSE_SRC_SYNC"'); END; 
/