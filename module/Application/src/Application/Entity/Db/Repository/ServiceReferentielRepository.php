<?php

namespace Application\Entity\Db\Repository;

use Doctrine\ORM\EntityRepository;
use Common\Exception\RuntimeException;
use Common\Exception\InvalidArgumentException;
use Application\Entity\Db\Intervenant;
use Application\Entity\Db\IntervenantPermanent;
use Application\Entity\Db\Annee;

/**
 * ServiceReferentielRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceReferentielRepository extends EntityRepository
{
    /**
     * 
     * @param \Application\Entity\Db\Intervenant $intervenant
     * @param \Application\Entity\Db\Annee $annee
     * @param type $data
     * @return \Application\Entity\Db\Repository\ServiceReferentielRepository
     */
    public function createServiceReferentiel(Intervenant $intervenant, Annee $annee, $data)
    {
        $data = $this->normalizeServiceReferentielUpdateData($data);
        
        $sr = new \Application\Entity\Db\ServiceReferentiel();
        $sr
                ->setAnnee($annee)
                ->setFonction($data['fonction'])
                ->setHeures($data['heures'])
                ->setIntervenant($intervenant);
        
        $intervenant->addServiceReferentiel($sr);
        
        $this->getEntityManager()->persist($sr);
        
        return $this;
    }
    
    /**
     * 
     * @param \Application\Entity\Db\Intervenant $intervenant
     * @param \Application\Entity\Db\Annee $annee
     * @return \Application\Entity\Db\Repository\ServiceReferentielRepository
     * @throws InvalidArgumentException
     */
    public function updateServicesReferentiel(Intervenant $intervenant, Annee $annee, array $data = array())
    {
        if (!$intervenant instanceof IntervenantPermanent) {
            throw new InvalidArgumentException("Impossible de saisir un service référentiel pour un intervenant autre que permanent. " .
            "Intervenant spécifié : $intervenant (id = {$intervenant->getId()}).");
        }
        
        $em = $this->getEntityManager();
        
        $em->getConnection()->beginTransaction();
        try {
            foreach ($intervenant->getServiceReferentiel($annee) as $serviceReferentiel) {
                $intervenant->removeServiceReferentiel($serviceReferentiel);
                $em->remove($serviceReferentiel);
            }
            $em->flush();
            if ($data) {
                foreach ($data as $value) {
                    $this->createServiceReferentiel($intervenant, $annee, $value);
                }
                $em->flush();
            }
            $em->getConnection()->commit();
        }
        catch (\Exception $e) {
            $em->getConnection()->rollback();
            $em->close();
            throw $e;
        }
                
        return $this;
    }
    
    /**
     * 
     * @param array $data
     * @return array
     * @throws InvalidArgumentException
     * @throws RuntimeException
     */
    protected function normalizeServiceReferentielUpdateData($data)
    {
        if (!is_array($data)) {
            throw new InvalidArgumentException("Un tableau est attendu.");
        }
        if (!isset($data[$key = 'fonction'])) {
            throw new InvalidArgumentException("Clé '$key' introuvable dans les données spécifiées.");
        }
        if (!isset($data[$key = 'heures'])) {
            throw new InvalidArgumentException("Clé '$key' introuvable dans les données spécifiées.");
        }
        
        $fonctionId = $data['fonction'];
        $heures     = $data['heures'];
                   
        $f = $this->getEntityManager()->getRepository('Application\Entity\Db\FonctionReferentiel')->find($fonctionId);
        if (!$f) {
            throw new RuntimeException("Fonction référentiel introuvable avec l'id '$fonctionId'.");
        }
        
        return array(
            'fonction' => $f,
            'heures'   => (float) $heures,
        );
    }
}