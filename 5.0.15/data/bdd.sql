--------------------------------------------------------
--  DDL for View SRC_ADRESSE_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_ADRESSE_INTERVENANT" ("ID", "INTERVENANT_ID", "TEL_DOMICILE", "MENTION_COMPLEMENTAIRE", "NO_VOIE", "NOM_VOIE", "LOCALITE", "CODE_POSTAL", "VILLE", "PAYS_CODE_INSEE", "PAYS_LIBELLE", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  NULL id,
  i.ID  INTERVENANT_ID,
  AI.TEL_DOMICILE,
  AI.MENTION_COMPLEMENTAIRE,
  AI.NO_VOIE,
  AI.NOM_VOIE,
  AI.LOCALITE,
  AI.CODE_POSTAL,
  AI.VILLE,
  AI.PAYS_CODE_INSEE,
  AI.PAYS_LIBELLE,
  AI.SOURCE_ID,
  AI.SOURCE_CODE || '_' || unicaen_import.get_current_annee SOURCE_CODE
FROM
  MV_ADRESSE_intervenant ai
  LEFT JOIN INTERVENANT i ON i.SOURCE_CODE = AI.Z_INTERVENANT_ID AND i.annee_id = unicaen_import.get_current_annee;
--------------------------------------------------------
--  DDL for View SRC_ADRESSE_STRUCTURE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_ADRESSE_STRUCTURE" ("ID", "STRUCTURE_ID", "PRINCIPALE", "TELEPHONE", "NO_VOIE", "NOM_VOIE", "LOCALITE", "CODE_POSTAL", "VILLE", "PAYS_CODE_INSEE", "PAYS_LIBELLE", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  NULL id,
  s.id structure_id,
  astr.PRINCIPALE,
  astr.TELEPHONE,
  astr.NO_VOIE,
  astr.NOM_VOIE,
  astr.LOCALITE,
  astr.CODE_POSTAL,
  astr.VILLE,
  astr.PAYS_CODE_INSEE,
  astr.PAYS_LIBELLE,
  astr.SOURCE_ID,
  astr.SOURCE_CODE
FROM
  mv_adresse_structure astr
  JOIN structure s ON s.source_code = astr.z_structure_id;
--------------------------------------------------------
--  DDL for View SRC_AFFECTATION
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_AFFECTATION" ("ID", "STRUCTURE_ID", "PERSONNEL_ID", "ROLE_ID", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  NULL id,
  NVL(s.structure_niv2_id,s.id) structure_id,
  p.id personnel_id,
  r.id role_id,
  a.source_id,
  a.source_code
FROM
  mv_AFFECTATION a
  LEFT JOIN personnel p ON p.source_code = a.z_personnel_id
  LEFT JOIN structure s ON s.source_code = a.z_structure_id
  LEFT JOIN role r ON r.code = a.z_role_id
WHERE
  s.id IS NULL -- r√¥le global
  OR (
    (
      EXISTS (SELECT * FROM element_pedagogique ep WHERE EP.STRUCTURE_ID = NVL(s.STRUCTURE_NIV2_ID,s.id)) -- soit une resp. dans une composante d'enseignement
      OR a.z_role_id IN ('responsable-recherche-labo')                                                    -- soit un responsable de labo
    )
    AND s.niveau <= 2
  );
--------------------------------------------------------
--  DDL for View SRC_AFFECTATION_RECHERCHE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_AFFECTATION_RECHERCHE" ("ID", "INTERVENANT_ID", "STRUCTURE_ID", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  NULL id,
  i.id intervenant_id,
  NVL(s.structure_niv2_id,s.id) structure_id,
  aff.source_id,
  aff.source_code || '_' || unicaen_import.get_current_annee source_code
FROM
  mv_affectation_recherche aff
  LEFT JOIN intervenant i ON i.source_code = aff.z_intervenant_id AND i.annee_id = unicaen_import.get_current_annee
  LEFT JOIN structure s ON s.source_code = aff.z_structure_id;
--------------------------------------------------------
--  DDL for View SRC_CENTRE_COUT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_CENTRE_COUT" ("ID", "LIBELLE", "ACTIVITE_ID", "TYPE_RESSOURCE_ID", "UNITE_BUDGETAIRE", "PARENT_ID", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null              id,
  mvcc.libelle      libelle,
  a.id              activite_id,
  tr.id             type_ressource_id,
  mvcc.unite_budgetaire unite_budgetaire,
  cc.id             parent_id,
  mvcc.source_id    source_id,
  mvcc.source_code  source_code
FROM
  MV_centre_cout mvcc
  LEFT JOIN cc_activite        a ON a.code         = mvcc.z_activite_id
  LEFT JOIN type_ressource    tr ON tr.code        = mvcc.z_type_ressource_id
  LEFT JOIN centre_cout       cc ON cc.source_code = mvcc.z_parent_id
WHERE
  mvcc.z_activite_id IS NOT NULL;
--------------------------------------------------------
--  DDL for View SRC_CENTRE_COUT_STRUCTURE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_CENTRE_COUT_STRUCTURE" ("ID", "CENTRE_COUT_ID", "STRUCTURE_ID", "SOURCE_ID", "SOURCE_CODE") AS 
  WITH cc AS (

SELECT
  cc.id id,
  cc.source_code source_code,
  cc.source_code ori_source_code
FROM
  centre_cout cc
  LEFT JOIN centre_cout pcc ON pcc.id = cc.parent_id
WHERE
  pcc.id IS NULL
  
UNION ALL

SELECT
  cc.id id,
  pcc.source_code source_code,
  cc.source_code ori_source_code
FROM
  centre_cout cc
  JOIN centre_cout pcc ON pcc.id = cc.parent_id

)
SELECT
  NULL id,
  cc.id centre_cout_id,
  s.id structure_id,
  (SELECT id FROM source WHERE code='Calcul') source_id,
  cc.ori_source_code || '_' || s.source_code source_code
FROM
  unicaen_corresp_structure_cc ucs
  JOIN cc ON substr( cc.source_code, 2, 3 ) = ucs.code_sifac
  JOIN structure s ON s.source_code = CASE WHEN cc.source_code = 'P950DRRA' THEN 'ECODOCT' ELSE ucs.code_harpege END;
--------------------------------------------------------
--  DDL for View SRC_CHEMIN_PEDAGOGIQUE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_CHEMIN_PEDAGOGIQUE" ("ID", "ELEMENT_PEDAGOGIQUE_ID", "ETAPE_ID", "ORDRE", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null id,
  elp.id element_pedagogique_id,
  etp.id ETAPE_ID,
  c.ordre,
  c.source_id,
  C.SOURCE_CODE || '_' || unicaen_import.get_current_annee SOURCE_CODE
FROM
  MV_CHEMIN_PEDAGOGIQUE C
  LEFT JOIN ELEMENT_PEDAGOGIQUE elp ON elp.source_code = C.Z_ELEMENT_PEDAGOGIQUE_ID AND elp.annee_id = unicaen_import.get_current_annee
  LEFT JOIN ETAPE etp ON etp.source_code = C.Z_ETAPE_ID AND etp.annee_id = unicaen_import.get_current_annee

UNION ALL

SELECT
  null id,
  cp.element_pedagogique_id,
  cp.etape_id,
  cp.ordre,
  cp.source_id,
  cp.source_code
FROM
  chemin_pedagogique cp
  JOIN ELEMENT_PEDAGOGIQUE ep ON ep.id = CP.ELEMENT_PEDAGOGIQUE_ID
WHERE
  ep.annee_id < unicaen_import.get_current_annee
  AND 1 = OSE_DIVERS.comprise_entre( cp.histo_creation, cp.histo_destruction );
--------------------------------------------------------
--  DDL for View SRC_CORPS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_CORPS" ("ID", "LIBELLE_LONG", "LIBELLE_COURT", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null id,
  C.LIBELLE_LONG,
  C.LIBELLE_COURT,
  C.SOURCE_ID,
  C.SOURCE_CODE
FROM
  MV_corps c;
--------------------------------------------------------
--  DDL for View SRC_DEPARTEMENT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_DEPARTEMENT" ("ID", "CODE", "LIBELLE_LONG", "LIBELLE_COURT", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  NULL id,
  source_code code,
  libelle_long,
  libelle_court,
  source_id,
  source_code
FROM
  mv_departement d;
--------------------------------------------------------
--  DDL for View SRC_DOMAINE_FONCTIONNEL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_DOMAINE_FONCTIONNEL" ("ID", "LIBELLE", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null            id,
  df.libelle      libelle,
  df.source_id    source_id,
  df.source_code  source_code
FROM
  MV_DOMAINE_FONCTIONNEL df;
--------------------------------------------------------
--  DDL for View SRC_EFFECTIFS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_EFFECTIFS" ("ID", "ELEMENT_PEDAGOGIQUE_ID", "ANNEE_ID", "FI", "FC", "FA", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null id,
  ep.id element_pedagogique_id,
  e.annee_id annee_id,
  e.fi fi,
  e.fc fc,
  e.fa fa,
  e.source_id source_id,
  e.source_code source_code
from
  mv_effectifs e
  LEFT JOIN element_pedagogique ep ON ep.source_code = e.z_element_pedagogique_id AND ep.annee_id = e.annee_id;
--------------------------------------------------------
--  DDL for View SRC_ELEMENT_PEDAGOGIQUE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_ELEMENT_PEDAGOGIQUE" ("ID", "CODE", "LIBELLE", "ETAPE_ID", "STRUCTURE_ID", "PERIODE_ID", "TAUX_FI", "TAUX_FC", "TAUX_FA", "TAUX_FOAD", "FC", "FI", "FA", "SOURCE_ID", "SOURCE_CODE", "ANNEE_ID", "DISCIPLINE_ID") AS 
  SELECT
  null id,
  e.code,
  E.LIBELLE,
  etp.id ETAPE_ID,
  NVL(str.structure_niv2_id,str.id) structure_id,
  per.id periode_id,
  CASE 
    WHEN etr.id IS NOT NULL
    THEN ose_divers.calcul_taux_fi( etr.taux_fi, etr.taux_fc, etr.taux_fa, e.fi, e.fc, e.fa )
    ELSE ose_divers.calcul_taux_fi( e.fi, e.fc, e.fa, e.fi, e.fc, e.fa )
  END taux_fi,
  CASE 
    WHEN etr.id IS NOT NULL
    THEN ose_divers.calcul_taux_fc( etr.taux_fi, etr.taux_fc, etr.taux_fa, e.fi, e.fc, e.fa )
    ELSE ose_divers.calcul_taux_fc( e.fi, e.fc, e.fa, e.fi, e.fc, e.fa )
  END taux_fc,
  CASE 
    WHEN etr.id IS NOT NULL
    THEN ose_divers.calcul_taux_fa( etr.taux_fi, etr.taux_fc, etr.taux_fa, e.fi, e.fc, e.fa )
    ELSE ose_divers.calcul_taux_fa( e.fi, e.fc, e.fa, e.fi, e.fc, e.fa )
  END taux_fa,
  e.taux_foad,
  e.fc,
  e.fi,
  e.fa,
  E.SOURCE_ID,
  E.SOURCE_CODE,
  unicaen_import.get_current_annee annee_id,
  NVL( d.id, d99.id ) discipline_id
FROM
  MV_ELEMENT_PEDAGOGIQUE E
  LEFT JOIN etape etp ON etp.source_code = E.Z_ETAPE_ID AND etp.annee_id = unicaen_import.get_current_annee
  LEFT JOIN structure str ON str.source_code = E.Z_STRUCTURE_ID
  LEFT JOIN periode per ON per.libelle_court = E.Z_PERIODE_ID
  LEFT JOIN element_pedagogique ep ON ep.source_code = e.source_code AND ep.annee_id = unicaen_import.get_current_annee
  LEFT JOIN element_taux_regimes etr ON
    etr.element_pedagogique_id = ep.id
    AND 1 = OSE_DIVERS.COMPRISE_ENTRE( etr.histo_creation, etr.histo_destruction )
  LEFT JOIN discipline d99 ON d99.source_code = '99'
  LEFT JOIN discipline d ON 
    ',' || d.CODES_CORRESP_1 || ',' LIKE '%,' || NVL(e.z_discipline_id,'00') || ',%'
    AND 1 = ose_divers.comprise_entre( d.histo_creation, d.histo_destruction )
;
--------------------------------------------------------
--  DDL for View SRC_ELEMENT_TAUX_REGIMES
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_ELEMENT_TAUX_REGIMES" ("ID", "ELEMENT_PEDAGOGIQUE_ID", "ANNEE_ID", "TAUX_FI", "TAUX_FC", "TAUX_FA", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null ID,
  ep.id element_pedagogique_id,
  etr.annee_id,
  OSE_DIVERS.CALCUL_TAUX_FI( etr.effectif_fi, etr.effectif_fc, etr.effectif_fa, ep.fi, ep.fc, ep.fa ) taux_fi,
  OSE_DIVERS.CALCUL_TAUX_FC( etr.effectif_fi, etr.effectif_fc, etr.effectif_fa, ep.fi, ep.fc, ep.fa ) taux_fc,
  OSE_DIVERS.CALCUL_TAUX_FA( etr.effectif_fi, etr.effectif_fc, etr.effectif_fa, ep.fi, ep.fc, ep.fa ) taux_fa,
  etr.source_id,
  etr.source_code source_code
FROM
  MV_ELEMENT_TAUX_REGIMES etr
  JOIN ELEMENT_PEDAGOGIQUE ep ON ep.source_code = etr.z_element_pedagogique_id AND ep.annee_id = etr.annee_id
WHERE
  NOT EXISTS( -- on √©vite de remonter des ETR issus d'autres sources pour le pas risquer de les √©craser!!
    SELECT * FROM element_taux_regimes etr_tbl WHERE
      etr_tbl.element_pedagogique_id = ep.id
      AND etr_tbl.source_id <> etr.source_id
  );
--------------------------------------------------------
--  DDL for View SRC_ETABLISSEMENT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_ETABLISSEMENT" ("ID", "LIBELLE", "LOCALISATION", "DEPARTEMENT", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null id,
  E.LIBELLE,
  E.LOCALISATION,
  E.DEPARTEMENT,
  E.SOURCE_ID,
  E.SOURCE_CODE
FROM
  MV_ETABLISSEMENT E;
--------------------------------------------------------
--  DDL for View SRC_ETAPE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_ETAPE" ("ID", "CODE", "LIBELLE", "ANNEE_ID", "TYPE_FORMATION_ID", "NIVEAU", "SPECIFIQUE_ECHANGES", "STRUCTURE_ID", "SOURCE_ID", "SOURCE_CODE", "DOMAINE_FONCTIONNEL_ID") AS 
  SELECT
  null id,
  e.code,
  e.libelle,
  unicaen_import.get_current_annee annee_id,
  tf.id type_formation_id,
  e.niveau,
  e.specifique_echanges,
  NVL(s.STRUCTURE_NIV2_ID,s.id) structure_id,
  e.source_id,
  e.source_code,
  df.id domaine_fonctionnel_id
FROM
  MV_ETAPE e
  LEFT JOIN TYPE_FORMATION tf ON tf.source_code = E.Z_TYPE_FORMATION_ID
  LEFT JOIN STRUCTURE s ON s.source_code = E.Z_STRUCTURE_ID
  LEFT JOIN domaine_fonctionnel df ON df.source_code = e.z_domaine_fonctionnel_id;
--------------------------------------------------------
--  DDL for View SRC_GRADE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_GRADE" ("ID", "LIBELLE_LONG", "LIBELLE_COURT", "SOURCE_ID", "SOURCE_CODE", "ECHELLE", "CORPS_ID") AS 
  SELECT
  null id,
  g.LIBELLE_LONG,
  g.LIBELLE_COURT,
  g.SOURCE_ID,
  g.SOURCE_CODE,
  g.echelle,
  c.id corps_id
FROM
  MV_grade g
  JOIN corps c ON c.source_code = g.z_corps_id;
--------------------------------------------------------
--  DDL for View SRC_GROUPE_TYPE_FORMATION
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_GROUPE_TYPE_FORMATION" ("ID", "LIBELLE_COURT", "LIBELLE_LONG", "ORDRE", "PERTINENCE_NIVEAU", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null id,
  libelle_court,
  libelle_long,
  ordre,
  pertinence_niveau,
  source_id,
  source_code
FROM
  MV_GROUPE_TYPE_FORMATION;
--------------------------------------------------------
--  DDL for View SRC_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_INTERVENANT" ("ID", "CODE", "SUPANN_EMP_ID", "CIVILITE_ID", "NOM_USUEL", "PRENOM", "NOM_PATRONYMIQUE", "DATE_NAISSANCE", "PAYS_NAISSANCE_ID", "DEP_NAISSANCE_ID", "VILLE_NAISSANCE_CODE_INSEE", "VILLE_NAISSANCE_LIBELLE", "PAYS_NATIONALITE_ID", "TEL_PRO", "TEL_MOBILE", "EMAIL", "STATUT_ID", "STRUCTURE_ID", "SOURCE_ID", "SOURCE_CODE", "NUMERO_INSEE", "NUMERO_INSEE_CLE", "NUMERO_INSEE_PROVISOIRE", "IBAN", "BIC", "GRADE_ID", "DISCIPLINE_ID", "ANNEE_ID", "CRITERE_RECHERCHE") AS 
  WITH srci as (
SELECT
  i.civilite_id,
  i.nom_usuel, i.prenom, i.nom_patronymique,
  COALESCE(i.date_naissance,TO_DATE('2099-01-01','YYYY-MM-DD')) date_naissance,
  pnaiss.id pays_naissance_id,
  dep.id dep_naissance_id,
  i.ville_naissance_code_insee,  i.ville_naissance_libelle,
  pnat.id pays_nationalite_id,
  i.tel_pro, i.tel_mobile, i.email,
  i.statut_id, i.statut_code,
  NVL(s.structure_niv2_id,s.id) structure_id,
  i.source_id, i.source_code,
  i.numero_insee, i.numero_insee_cle, i.numero_insee_provisoire,
  i.iban, i.bic,
  g.id grade_id,
  NVL( d.id, d99.id ) discipline_id,
  i.critere_recherche
FROM
            mv_intervenant  i
       JOIN structure       s ON s.source_code = i.z_structure_id
  LEFT JOIN grade           g ON g.source_code = i.z_grade_id
  LEFT JOIN pays       pnaiss ON pnaiss.source_code = i.z_pays_naissance_id  
  LEFT JOIN pays         pnat ON pnat.source_code = i.z_pays_nationalite_id
  LEFT JOIN departement   dep ON dep.source_code = i.z_dep_naissance_id
  LEFT JOIN discipline d99 ON d99.source_code = '99'
  LEFT JOIN discipline d ON
    1 = ose_divers.comprise_entre( d.histo_creation, d.histo_destruction )
    AND 1 = CASE WHEN -- si rien n'ac √©t√© d√©fini
    
      COALESCE( i.z_discipline_id_cnu, i.z_discipline_id_sous_cnu, i.z_discipline_id_spe_cnu, i.z_discipline_id_dis2deg ) IS NULL
      AND d.source_code = '00'
    
    THEN 1 WHEN -- si une CNU ou une sp√©cialit√© a √©t√© d√©finie...
      
      COALESCE( i.z_discipline_id_cnu, i.z_discipline_id_sous_cnu, z_discipline_id_spe_cnu ) IS NOT NULL
    
    THEN CASE WHEN -- alors on teste par les sections CNU et sp√©cialit√©s

      (
           ',' || d.CODES_CORRESP_2 || ',' LIKE '%,' || i.z_discipline_id_cnu || NVL(i.z_discipline_id_sous_cnu,'') || ',%'
        OR ',' || d.CODES_CORRESP_2 || ',' LIKE '%,' || i.z_discipline_id_cnu || NVL(i.z_discipline_id_sous_cnu,'00') || ',%'
      )
      AND ',' || NVL(d.CODES_CORRESP_3,'000') || ',' LIKE  '%,' || NVL(CASE WHEN d.CODES_CORRESP_3 IS NOT NULL THEN z_discipline_id_spe_cnu ELSE NULL END,'000') || ',%'
    
    THEN 1 ELSE 0 END ELSE CASE WHEN -- sinon on teste par les disciplines du 2nd degr√©
    
      i.z_discipline_id_dis2deg IS NOT NULL
      AND ',' || NVL(d.CODES_CORRESP_4,'') || ',' LIKE  '%,' || i.z_discipline_id_dis2deg || ',%'
      
    THEN 1 ELSE 0 END END -- fin du test
WHERE
  i.ordre = i.min_ordre
)
SELECT
  null id,
  i.source_code code, i.source_code supann_emp_id,
  i.civilite_id,
  i.nom_usuel, i.prenom, i.nom_patronymique,
  i.date_naissance,
  i.pays_naissance_id,
  i.dep_naissance_id,
  i.ville_naissance_code_insee,  i.ville_naissance_libelle,
  i.pays_nationalite_id,
  i.tel_pro, i.tel_mobile, i.email,
  COALESCE( 
    isai.statut_id, 
    CASE WHEN i.statut_code = 'AUTRES' AND d.statut_id IS NOT NULL THEN d.statut_id ELSE i.statut_id END
  ) statut_id,
  i. structure_id,
  i.source_id, i.source_code,
  i.numero_insee, i.numero_insee_cle, i.numero_insee_provisoire,
  i.iban, i.bic,
  i.grade_id,
  i.discipline_id,
  unicaen_import.get_current_annee annee_id,
  i.critere_recherche
FROM
  srci i
  LEFT JOIN intervenant           i2 ON i2.source_code = i.source_code AND i2.annee_id = unicaen_import.get_current_annee
  LEFT JOIN intervenant_saisie  isai ON isai.intervenant_id = i2.id
  LEFT JOIN dossier               d  ON d.intervenant_id = i2.id

UNION ALL

SELECT
  null id,
  i.source_code code, i.source_code supann_emp_id,
  i.civilite_id,
  i.nom_usuel, i.prenom, i.nom_patronymique,
  i.date_naissance,
  i.pays_naissance_id,
  i.dep_naissance_id,
  i.ville_naissance_code_insee,  i.ville_naissance_libelle,
  i.pays_nationalite_id,
  i.tel_pro, i.tel_mobile, i.email,
  COALESCE(i2.statut_id,i.statut_id) statut_id,
  COALESCE(i2.structure_id,i.structure_id) structure_id,
  i.source_id, i.source_code,
  i.numero_insee, i.numero_insee_cle, i.numero_insee_provisoire,
  i.iban, i.bic,
  i.grade_id,
  i.discipline_id,
  unicaen_import.get_current_annee - 1 annee_id,
  i.critere_recherche
FROM
  srci i
  LEFT JOIN intervenant           i2 ON i2.source_code = i.source_code AND i2.annee_id = unicaen_import.get_current_annee - 1
  LEFT JOIN dossier               d  ON d.intervenant_id = i2.id AND 1 = ose_divers.comprise_entre( d.histo_creation, d.histo_destruction );
--------------------------------------------------------
--  DDL for View SRC_LIEN
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_LIEN" ("ID", "NOEUD_SUP_ID", "NOEUD_INF_ID", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null id,
  nsup.id noeud_sup_id,
  ninf.id noeud_inf_id,
  s.id source_id,
  l.z_source_code source_code
FROM
  ose_lien@apoprod l
  JOIN source s ON s.code = 'Apogee'
  JOIN noeud nsup ON nsup.source_code = l.noeud_sup_id
  JOIN noeud ninf ON ninf.source_code = l.noeud_inf_id;
--------------------------------------------------------
--  DDL for View SRC_NOEUD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_NOEUD" ("ID", "CODE", "LIBELLE", "LISTE", "ANNEE_ID", "ETAPE_ID", "ELEMENT_PEDAGOGIQUE_ID", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null id,
  n.code code,
  n.libelle_court libelle,
  n.liste liste,
  to_number(n.annee_id) annee_id,
  e.id etape_id,
  ep.id element_pedagogique_id,
  s.id source_id,
  n.z_source_code source_code
FROM 
  ose_noeud@apoprod n
  JOIN source s ON s.code = 'Apogee'
  LEFT JOIN etape e ON e.source_code = n.z_etape_id AND e.annee_id = n.annee_id
  LEFT JOIN element_pedagogique ep ON ep.source_code = n.z_element_pedagogique_id AND ep.annee_id = n.annee_id;
--------------------------------------------------------
--  DDL for View SRC_PAYS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_PAYS" ("ID", "LIBELLE_LONG", "LIBELLE_COURT", "VALIDITE_DEBUT", "VALIDITE_FIN", "TEMOIN_UE", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  NULL id,
  libelle_long,
  libelle_court,
  validite_debut,
  validite_fin,
  temoin_ue,
  source_id,
  source_code
FROM
  mv_pays p;
--------------------------------------------------------
--  DDL for View SRC_PERSONNEL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_PERSONNEL" ("ID", "CODE", "SUPANN_EMP_ID", "CIVILITE_ID", "NOM_USUEL", "PRENOM", "NOM_PATRONYMIQUE", "EMAIL", "DATE_NAISSANCE", "STRUCTURE_ID", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  NULL id,
  p.source_code code, p.source_code supann_emp_id,
  p.civilite_id,
  p.nom_usuel,
  p.prenom,
  p.nom_patronymique,
  p.email,
  p.date_naissance,
  NVL(s.STRUCTURE_NIV2_ID,s.id) structure_id,
  p.source_id,
  p.source_code
FROM
  mv_personnel p
  JOIN structure s ON s.source_code = p.z_structure_id;
--------------------------------------------------------
--  DDL for View SRC_STRUCTURE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_STRUCTURE" ("ID", "LIBELLE_LONG", "LIBELLE_COURT", "PARENTE_ID", "STRUCTURE_NIV2_ID", "TYPE_ID", "ETABLISSEMENT_ID", "NIVEAU", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null id,
  S.LIBELLE_LONG,
  S.LIBELLE_COURT,
  sp.id parente_id,
  S2.id structure_niv2_id,
  ts.id type_id,
  OSE_PARAMETRE.GET_ETABLISSEMENT etablissement_id,
  S.niveau,
  S.SOURCE_ID,
  S.SOURCE_CODE
FROM
  mv_structure s
  JOIN type_structure ts on ts.code = S.Z_TYPE_ID
  LEFT JOIN structure sp on (sp.source_code = s.z_parente_id)
  LEFT JOIN structure s2 on (s2.source_code = s.z_structure_niv2_id);
--------------------------------------------------------
--  DDL for View SRC_TYPE_FORMATION
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_TYPE_FORMATION" ("ID", "LIBELLE_LONG", "LIBELLE_COURT", "GROUPE_ID", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null id,
  tf.libelle_long,
  tf.libelle_court,
  gtf.id groupe_id,
  tf.source_id,
  tf.source_code
FROM
  MV_TYPE_FORMATION tf
  LEFT JOIN GROUPE_TYPE_FORMATION gtf ON gtf.source_code = TF.Z_GROUPE_ID;
--------------------------------------------------------
--  DDL for View SRC_TYPE_INTERVENTION_EP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_TYPE_INTERVENTION_EP" ("ID", "TYPE_INTERVENTION_ID", "ELEMENT_PEDAGOGIQUE_ID", "VISIBLE", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null id,
  ti.id type_intervention_id,
  ep.id element_pedagogique_id,
  1 visible,
  src.id source_id,
  ti.code || '_' || ep.source_code || '_' || ep.annee_id source_code
FROM
  element_pedagogique ep
  JOIN type_intervention ti ON ti.code = 'FOAD' AND 1 = ose_divers.comprise_entre( ti.histo_creation, ti.histo_destruction )
  JOIN structure s ON s.id = ep.structure_id
  JOIN source src ON src.code = 'Calcul'
WHERE
  ep.taux_foad > 0
  AND 1 = ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction )
  AND s.source_code IN ('U07','U08','U04','12')
  
UNION

SELECT
  null id,
  ti.id type_intervention_id,
  ep.id element_pedagogique_id,
  1 visible,
  src.id source_id,
  ti.code || '_' || ep.source_code || '_' || ep.annee_id source_code
FROM
  element_pedagogique ep
  JOIN type_intervention ti ON ti.code IN ('FOAD-ECR', 'FOAD-ACTU', 'FOAD-EXPL') AND 1 = ose_divers.comprise_entre( ti.histo_creation, ti.histo_destruction )
  JOIN structure s ON s.id = ep.structure_id
  JOIN source src ON src.code = 'Calcul'
WHERE
  ep.taux_foad > 0
  AND 1 = ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction )
  AND s.source_code IN ('U10') /* IAE uniquement */
  
UNION

SELECT
  null id,
  ti.id type_intervention_id,
  ep.id element_pedagogique_id,
  1 visible,
  src.id source_id,
  ti.code || '_' || ep.source_code || '_' || ep.annee_id source_code
FROM
  element_pedagogique ep
  JOIN type_intervention ti ON ti.code IN ('FOAD-ECR', 'FOAD-ACTU', 'FOAD-EXPL') AND 1 = ose_divers.comprise_entre( ti.histo_creation, ti.histo_destruction )
  JOIN structure s ON s.id = ep.structure_id
  JOIN source src ON src.code = 'Calcul'
WHERE
  ep.taux_foad > 0
  AND ep.annee_id >= 2015 -- √† partir de 2015-2016 uniquement
  AND 1 = ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction )
  AND s.source_code IN ('C53') /* CEMU */;
--------------------------------------------------------
--  DDL for View SRC_TYPE_MODULATEUR_EP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."SRC_TYPE_MODULATEUR_EP" ("ID", "TYPE_MODULATEUR_ID", "ELEMENT_PEDAGOGIQUE_ID", "SOURCE_ID", "SOURCE_CODE") AS 
  SELECT
  null                                id,
  tm.id                               type_modulateur_id,
  ep.id                               element_pedagogique_id,
  src.id                              source_id,
  tm.code || '_' || ep.source_code || '_' || ep.annee_id  source_code
FROM
  element_pedagogique  ep
  JOIN type_modulateur tm ON ose_divers.comprise_entre( tm.histo_creation, tm.histo_destruction ) = 1
  JOIN structure        s ON s.id = ep.structure_id
  JOIN source         src ON src.code = 'Calcul'
WHERE
  ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction ) = 1
  AND ep.taux_fc > 0
  AND (
       (tm.code = 'IAE_FC'      AND s.source_code IN ('U10')) -- IAE
    OR (tm.code = 'DROIT_FC'    AND s.source_code IN ('U01')) -- Droit
    OR (tm.code = 'IUTCAEN_FC'  AND s.source_code IN ('I13')) -- IUT Caen
    OR (tm.code = 'CEMU_FC'     AND s.source_code IN ('C53')) -- CEMU
  );
--------------------------------------------------------
--  DDL for View V_CENTRE_COUT_STRUCTURE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_CENTRE_COUT_STRUCTURE" ("CENTRE_COUT_ID", "STRUCTURE_ID") AS 
  SELECT
  ccs.centre_cout_id,
  ccs.structure_id
FROM
  centre_cout_structure ccs
WHERE
  1 = ose_divers.comprise_entre( ccs.histo_creation, ccs.histo_destruction );
--------------------------------------------------------
--  DDL for View V_CENTRE_COUT_TYPE_HEURES
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_CENTRE_COUT_TYPE_HEURES" ("CENTRE_COUT_ID", "TYPE_HEURES_ID") AS 
  select 
  cc.id centre_cout_id, 
  th.id type_heures_id
from
  centre_cout cc
  join type_ressource  tr on tr.id = cc.type_ressource_id
  join cc_activite    cca on cca.id = cc.activite_id
  join type_heures     th on th.code = decode(tr.fi + cca.fi, 2, 'fi', null)
  
union all

select
  cc.id centre_cout_id,
  th.id type_heures_id
from
  centre_cout cc
  join type_ressource  tr on tr.id = cc.type_ressource_id
  join cc_activite    cca on cca.id = cc.activite_id
  join type_heures     th on th.code = decode(tr.fc + cca.fc, 2, 'fc', null)

union all

select 
  cc.id centre_cout_id,
  th.id type_heures_id
from
  centre_cout cc
  join type_ressource  tr on tr.id = cc.type_ressource_id
  join cc_activite    cca on cca.id = cc.activite_id
  join type_heures     th on th.code = decode(tr.fa + cca.fa, 2, 'fa', null)

union all

select 
  cc.id centre_cout_id,
  th.id type_heures_id
from
  centre_cout cc
  join type_ressource  tr on tr.id = cc.type_ressource_id
  join cc_activite    cca on cca.id = cc.activite_id
  join type_heures     th on th.code = decode(tr.referentiel + cca.referentiel, 2, 'referentiel', null)

union all

select 
  cc.id centre_cout_id,
  th.id type_heures_id
from
  centre_cout cc
  join type_ressource  tr on tr.id = cc.type_ressource_id
  join cc_activite    cca on cca.id = cc.activite_id
  join type_heures     th on th.code = decode(tr.fc_majorees + cca.fc_majorees, 2, 'fc_majorees', null);
--------------------------------------------------------
--  DDL for View V_CHARGENS_CALC_EFFECTIFS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_CHARGENS_CALC_EFFECTIFS" ("NOEUD_SUP_ID", "SCENARIO_NOEUD_ID", "NOEUD_ID", "SCENARIO_ID", "TYPE_HEURES_ID", "ETAPE_ID", "EFFECTIF") AS 
  SELECT
  ns.id noeud_sup_id,
--  lsup.lien_id lien_sup_id,
--  nl.id noeud_liste_id,
--  linf.lien_id lien_inf_id,
  sni.id scenario_noeud_id,
  ni.id noeud_id,
  sn.scenario_id scenario_id,
  sne.type_heures_id,
  sne.etape_id,

--  lsup.choix_minimum,
--  lsup.choix_maximum,
--  linf.poids,
--  linf.max_poids,
--  linf.nb_choix,
--  linf.total_poids,
    NVL(sni.assiduite,1) * OSE_CHARGENS.CALC_COEF( 
      lsup.choix_minimum, lsup.choix_maximum,linf.poids, linf.total_poids, linf.nb_choix 
    ) * sne.effectif effectif

FROM
            scenario_noeud_effectif sne
       JOIN scenario_noeud          sn   ON sn.id = sne.scenario_noeud_id 
                                        AND sn.histo_destruction IS NULL
                                       
       JOIN noeud                   ns   ON ns.id = sn.noeud_id 
                                        AND ns.histo_destruction IS NULL 
                                        AND ns.liste = 0
                                       
       JOIN v_tbl_lien              lsup ON lsup.noeud_sup_id = ns.id 
                                        AND lsup.actif = 1
                                        AND lsup.scenario_id = sn.scenario_id
                                       
       JOIN noeud                   nl   ON nl.liste = 1
                                        AND nl.histo_destruction IS NULL
                                        AND nl.id = lsup.noeud_inf_id
                                       
       JOIN v_tbl_lien              linf ON linf.noeud_sup_id = nl.id 
                                        AND linf.actif = 1 
                                        AND linf.scenario_id = sn.scenario_id
                                   
       JOIN noeud                   ni   ON ni.id = linf.noeud_inf_id 
                                        AND ni.histo_destruction IS NULL 
                                        AND ni.liste = 0
                                        
  LEFT JOIN scenario_noeud         sni   ON sni.noeud_id = ni.id 
                                        AND sni.scenario_id = sn.scenario_id
                                        AND sni.histo_destruction IS NULL;
--------------------------------------------------------
--  DDL for View V_CHARGENS_GRANDS_LIENS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_CHARGENS_GRANDS_LIENS" ("SCENARIO_NOEUD_SUP_ID", "SCENARIO_ID", "SCENARIO_NOEUD_ID", "NOEUD_LISTE_ID", "NOEUD_ID", "CHOIX_MINIMUM", "CHOIX_MAXIMUM", "POIDS", "ASSIDUITE") AS 
  SELECT
  sn.id scenario_noeud_sup_id,

  sn.scenario_id scenario_id,
  sni.id scenario_noeud_id,
  nl.id noeud_liste_id,
  ni.id noeud_id,

  slsup.choix_minimum,
  slsup.choix_maximum,
  slinf.poids poids,
  COALESCE(sni.assiduite,1) assiduite
FROM
            scenario_noeud     sn

       JOIN noeud              ns   ON ns.id = sn.noeud_id 
                                   AND ns.histo_destruction IS NULL 
                                   AND ns.liste = 0
                                       
       JOIN lien             lsup   ON lsup.noeud_sup_id = ns.id 
                                   AND lsup.histo_destruction IS NULL
       
  LEFT JOIN scenario_lien   slsup   ON slsup.lien_id = lsup.id
                                   AND slsup.scenario_id = sn.scenario_id
                                       
       JOIN noeud              nl   ON nl.liste = 1
                                   AND nl.histo_destruction IS NULL
                                   AND nl.id = lsup.noeud_inf_id
                                       
       JOIN lien             linf   ON linf.noeud_sup_id = nl.id 
                                   AND linf.histo_destruction IS NULL
       
  LEFT JOIN scenario_lien   slinf   ON slinf.lien_id = linf.id
                                   AND slinf.scenario_id = sn.scenario_id
                                   
       JOIN noeud              ni   ON ni.id = linf.noeud_inf_id 
                                   AND ni.histo_destruction IS NULL 
                                   AND ni.liste = 0
                                        
  LEFT JOIN scenario_noeud    sni   ON sni.noeud_id = ni.id 
                                   AND sni.scenario_id = sn.scenario_id
                                   AND sni.histo_destruction IS NULL

WHERE
  (slsup.actif = 1 OR slsup.actif IS NULL)
  AND (slinf.actif = 1 OR slinf.actif IS NULL);
--------------------------------------------------------
--  DDL for View V_CTL_SERVICES_ODF_HISTO
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_CTL_SERVICES_ODF_HISTO" ("PRENOM", "NOM_USUEL", "ELEMENT", "ETAPE", "TYPE_INTERVENTION", "HEURES", "HAS_CONTRAT", "HAS_VALIDATION", "ELEMENT_SUPPRIME", "ETAPE_SUPPRIMEE", "ETABLISSEMENT_SUPPRIME") AS 
  with vh as (
  SELECT
    vh.service_id,
    ti.code type_intervention,
    SUM(heures) heures,
    CASE WHEN vh.contrat_id IS NULL THEN 0 ELSE 1 END has_contrat,
    CASE WHEN (SELECT COUNT(*) FROM validation_vol_horaire vvh WHERE vvh.volume_horaire_id = vh.id) = 1 THEN 1 ELSE 0 END has_validation
  FROM
    volume_horaire vh
    JOIN type_volume_horaire tvh ON tvh.id = vh.type_volume_horaire_id
    JOIN type_intervention ti ON ti.id = vh.type_intervention_id
  WHERE
    1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
    AND tvh.code = 'PREVU'
  GROUP BY
    vh.id, ti.code, vh.service_id, vh.contrat_id
)
SELECT
  i.prenom, i.nom_usuel,
  ep.source_code "ELEMENT",
  e.source_code etape,

  vh.type_intervention,
  vh.heures,
  vh.has_contrat,
  vh.has_validation,
  CASE WHEN ep.histo_destruction IS NOT NULL THEN 1 ELSE 0 END element_supprime,
  CASE WHEN e.histo_destruction IS NOT NULL THEN 1 ELSE 0 END etape_supprimee,
  CASE WHEN et.histo_destruction IS NOT NULL THEN 1 ELSE 0 END etablissement_supprime
FROM
  service s
  JOIN intervenant i ON i.id = s.intervenant_id
  LEFT JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
  LEFT JOIN etape e ON e.id = ep.etape_id
  LEFT JOIN etablissement et ON et.id = s.etablissement_id
  LEFT JOIN vh ON vh.service_id = s.id
WHERE
  1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
  AND (
    (ep.id IS NOT NULL AND ep.histo_destruction IS NOT NULL)
    OR
    (e.id IS NOT NULL AND e.histo_destruction IS NOT NULL)
    OR
    (et.id IS NOT NULL AND et.histo_destruction IS NOT NULL)
  )
order by
  nom_usuel, prenom, etape, "ELEMENT", heures;
--------------------------------------------------------
--  DDL for View V_CTL_VH_MAUVAIS_SEMESTRE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_CTL_VH_MAUVAIS_SEMESTRE" ("ID", "NOM_USUEL", "PRENOM", "HEURES", "VALIDATION_ID") AS 
  SELECT
  vh.id,
  i.nom_usuel, i.prenom,
  vh.heures,
  vvh.validation_id
FROM
  volume_horaire vh
  JOIN type_volume_horaire tvh ON tvh.id = vh.type_volume_horaire_id
  JOIN service s ON s.id = vh.service_id
  JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
  JOIN intervenant i ON i.id = s.intervenant_id
  LEFT JOIN VALIDATION_VOL_HORAIRE vvh on VVH.VOLUME_HORAIRE_ID = vh.id
WHERE
  tvh.code = 'PREVU'
  AND ep.periode_id IS NOT NULL
  AND vh.periode_id <> ep.periode_id
ORDER BY
  nom_usuel, prenom, heures;
--------------------------------------------------------
--  DDL for View V_DIFF_ADRESSE_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_ADRESSE_INTERVENANT" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "CODE_POSTAL", "INTERVENANT_ID", "LOCALITE", "MENTION_COMPLEMENTAIRE", "NOM_VOIE", "NO_VOIE", "PAYS_CODE_INSEE", "PAYS_LIBELLE", "TEL_DOMICILE", "VILLE", "U_CODE_POSTAL", "U_INTERVENANT_ID", "U_LOCALITE", "U_MENTION_COMPLEMENTAIRE", "U_NOM_VOIE", "U_NO_VOIE", "U_PAYS_CODE_INSEE", "U_PAYS_LIBELLE", "U_TEL_DOMICILE", "U_VILLE") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CODE_POSTAL",diff."INTERVENANT_ID",diff."LOCALITE",diff."MENTION_COMPLEMENTAIRE",diff."NOM_VOIE",diff."NO_VOIE",diff."PAYS_CODE_INSEE",diff."PAYS_LIBELLE",diff."TEL_DOMICILE",diff."VILLE",diff."U_CODE_POSTAL",diff."U_INTERVENANT_ID",diff."U_LOCALITE",diff."U_MENTION_COMPLEMENTAIRE",diff."U_NOM_VOIE",diff."U_NO_VOIE",diff."U_PAYS_CODE_INSEE",diff."U_PAYS_LIBELLE",diff."U_TEL_DOMICILE",diff."U_VILLE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND rt.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE_POSTAL ELSE S.CODE_POSTAL END CODE_POSTAL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.INTERVENANT_ID ELSE S.INTERVENANT_ID END INTERVENANT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LOCALITE ELSE S.LOCALITE END LOCALITE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.MENTION_COMPLEMENTAIRE ELSE S.MENTION_COMPLEMENTAIRE END MENTION_COMPLEMENTAIRE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_VOIE ELSE S.NOM_VOIE END NOM_VOIE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NO_VOIE ELSE S.NO_VOIE END NO_VOIE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PAYS_CODE_INSEE ELSE S.PAYS_CODE_INSEE END PAYS_CODE_INSEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PAYS_LIBELLE ELSE S.PAYS_LIBELLE END PAYS_LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TEL_DOMICILE ELSE S.TEL_DOMICILE END TEL_DOMICILE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VILLE ELSE S.VILLE END VILLE,
    CASE WHEN D.CODE_POSTAL <> S.CODE_POSTAL OR (D.CODE_POSTAL IS NULL AND S.CODE_POSTAL IS NOT NULL) OR (D.CODE_POSTAL IS NOT NULL AND S.CODE_POSTAL IS NULL) THEN 1 ELSE 0 END U_CODE_POSTAL,
    CASE WHEN D.INTERVENANT_ID <> S.INTERVENANT_ID OR (D.INTERVENANT_ID IS NULL AND S.INTERVENANT_ID IS NOT NULL) OR (D.INTERVENANT_ID IS NOT NULL AND S.INTERVENANT_ID IS NULL) THEN 1 ELSE 0 END U_INTERVENANT_ID,
    CASE WHEN D.LOCALITE <> S.LOCALITE OR (D.LOCALITE IS NULL AND S.LOCALITE IS NOT NULL) OR (D.LOCALITE IS NOT NULL AND S.LOCALITE IS NULL) THEN 1 ELSE 0 END U_LOCALITE,
    CASE WHEN D.MENTION_COMPLEMENTAIRE <> S.MENTION_COMPLEMENTAIRE OR (D.MENTION_COMPLEMENTAIRE IS NULL AND S.MENTION_COMPLEMENTAIRE IS NOT NULL) OR (D.MENTION_COMPLEMENTAIRE IS NOT NULL AND S.MENTION_COMPLEMENTAIRE IS NULL) THEN 1 ELSE 0 END U_MENTION_COMPLEMENTAIRE,
    CASE WHEN D.NOM_VOIE <> S.NOM_VOIE OR (D.NOM_VOIE IS NULL AND S.NOM_VOIE IS NOT NULL) OR (D.NOM_VOIE IS NOT NULL AND S.NOM_VOIE IS NULL) THEN 1 ELSE 0 END U_NOM_VOIE,
    CASE WHEN D.NO_VOIE <> S.NO_VOIE OR (D.NO_VOIE IS NULL AND S.NO_VOIE IS NOT NULL) OR (D.NO_VOIE IS NOT NULL AND S.NO_VOIE IS NULL) THEN 1 ELSE 0 END U_NO_VOIE,
    CASE WHEN D.PAYS_CODE_INSEE <> S.PAYS_CODE_INSEE OR (D.PAYS_CODE_INSEE IS NULL AND S.PAYS_CODE_INSEE IS NOT NULL) OR (D.PAYS_CODE_INSEE IS NOT NULL AND S.PAYS_CODE_INSEE IS NULL) THEN 1 ELSE 0 END U_PAYS_CODE_INSEE,
    CASE WHEN D.PAYS_LIBELLE <> S.PAYS_LIBELLE OR (D.PAYS_LIBELLE IS NULL AND S.PAYS_LIBELLE IS NOT NULL) OR (D.PAYS_LIBELLE IS NOT NULL AND S.PAYS_LIBELLE IS NULL) THEN 1 ELSE 0 END U_PAYS_LIBELLE,
    CASE WHEN D.TEL_DOMICILE <> S.TEL_DOMICILE OR (D.TEL_DOMICILE IS NULL AND S.TEL_DOMICILE IS NOT NULL) OR (D.TEL_DOMICILE IS NOT NULL AND S.TEL_DOMICILE IS NULL) THEN 1 ELSE 0 END U_TEL_DOMICILE,
    CASE WHEN D.VILLE <> S.VILLE OR (D.VILLE IS NULL AND S.VILLE IS NOT NULL) OR (D.VILLE IS NOT NULL AND S.VILLE IS NULL) THEN 1 ELSE 0 END U_VILLE
FROM
  ADRESSE_INTERVENANT D
  LEFT JOIN INTERVENANT rt ON rt.ID = d.INTERVENANT_ID
  FULL JOIN SRC_ADRESSE_INTERVENANT S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CODE_POSTAL <> S.CODE_POSTAL OR (D.CODE_POSTAL IS NULL AND S.CODE_POSTAL IS NOT NULL) OR (D.CODE_POSTAL IS NOT NULL AND S.CODE_POSTAL IS NULL)
  OR D.INTERVENANT_ID <> S.INTERVENANT_ID OR (D.INTERVENANT_ID IS NULL AND S.INTERVENANT_ID IS NOT NULL) OR (D.INTERVENANT_ID IS NOT NULL AND S.INTERVENANT_ID IS NULL)
  OR D.LOCALITE <> S.LOCALITE OR (D.LOCALITE IS NULL AND S.LOCALITE IS NOT NULL) OR (D.LOCALITE IS NOT NULL AND S.LOCALITE IS NULL)
  OR D.MENTION_COMPLEMENTAIRE <> S.MENTION_COMPLEMENTAIRE OR (D.MENTION_COMPLEMENTAIRE IS NULL AND S.MENTION_COMPLEMENTAIRE IS NOT NULL) OR (D.MENTION_COMPLEMENTAIRE IS NOT NULL AND S.MENTION_COMPLEMENTAIRE IS NULL)
  OR D.NOM_VOIE <> S.NOM_VOIE OR (D.NOM_VOIE IS NULL AND S.NOM_VOIE IS NOT NULL) OR (D.NOM_VOIE IS NOT NULL AND S.NOM_VOIE IS NULL)
  OR D.NO_VOIE <> S.NO_VOIE OR (D.NO_VOIE IS NULL AND S.NO_VOIE IS NOT NULL) OR (D.NO_VOIE IS NOT NULL AND S.NO_VOIE IS NULL)
  OR D.PAYS_CODE_INSEE <> S.PAYS_CODE_INSEE OR (D.PAYS_CODE_INSEE IS NULL AND S.PAYS_CODE_INSEE IS NOT NULL) OR (D.PAYS_CODE_INSEE IS NOT NULL AND S.PAYS_CODE_INSEE IS NULL)
  OR D.PAYS_LIBELLE <> S.PAYS_LIBELLE OR (D.PAYS_LIBELLE IS NULL AND S.PAYS_LIBELLE IS NOT NULL) OR (D.PAYS_LIBELLE IS NOT NULL AND S.PAYS_LIBELLE IS NULL)
  OR D.TEL_DOMICILE <> S.TEL_DOMICILE OR (D.TEL_DOMICILE IS NULL AND S.TEL_DOMICILE IS NOT NULL) OR (D.TEL_DOMICILE IS NOT NULL AND S.TEL_DOMICILE IS NULL)
  OR D.VILLE <> S.VILLE OR (D.VILLE IS NULL AND S.VILLE IS NOT NULL) OR (D.VILLE IS NOT NULL AND S.VILLE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_ADRESSE_STRUCTURE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_ADRESSE_STRUCTURE" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "CODE_POSTAL", "LOCALITE", "NOM_VOIE", "NO_VOIE", "PAYS_CODE_INSEE", "PAYS_LIBELLE", "PRINCIPALE", "STRUCTURE_ID", "TELEPHONE", "VILLE", "U_CODE_POSTAL", "U_LOCALITE", "U_NOM_VOIE", "U_NO_VOIE", "U_PAYS_CODE_INSEE", "U_PAYS_LIBELLE", "U_PRINCIPALE", "U_STRUCTURE_ID", "U_TELEPHONE", "U_VILLE") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CODE_POSTAL",diff."LOCALITE",diff."NOM_VOIE",diff."NO_VOIE",diff."PAYS_CODE_INSEE",diff."PAYS_LIBELLE",diff."PRINCIPALE",diff."STRUCTURE_ID",diff."TELEPHONE",diff."VILLE",diff."U_CODE_POSTAL",diff."U_LOCALITE",diff."U_NOM_VOIE",diff."U_NO_VOIE",diff."U_PAYS_CODE_INSEE",diff."U_PAYS_LIBELLE",diff."U_PRINCIPALE",diff."U_STRUCTURE_ID",diff."U_TELEPHONE",diff."U_VILLE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE_POSTAL ELSE S.CODE_POSTAL END CODE_POSTAL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LOCALITE ELSE S.LOCALITE END LOCALITE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_VOIE ELSE S.NOM_VOIE END NOM_VOIE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NO_VOIE ELSE S.NO_VOIE END NO_VOIE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PAYS_CODE_INSEE ELSE S.PAYS_CODE_INSEE END PAYS_CODE_INSEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PAYS_LIBELLE ELSE S.PAYS_LIBELLE END PAYS_LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PRINCIPALE ELSE S.PRINCIPALE END PRINCIPALE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TELEPHONE ELSE S.TELEPHONE END TELEPHONE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VILLE ELSE S.VILLE END VILLE,
    CASE WHEN D.CODE_POSTAL <> S.CODE_POSTAL OR (D.CODE_POSTAL IS NULL AND S.CODE_POSTAL IS NOT NULL) OR (D.CODE_POSTAL IS NOT NULL AND S.CODE_POSTAL IS NULL) THEN 1 ELSE 0 END U_CODE_POSTAL,
    CASE WHEN D.LOCALITE <> S.LOCALITE OR (D.LOCALITE IS NULL AND S.LOCALITE IS NOT NULL) OR (D.LOCALITE IS NOT NULL AND S.LOCALITE IS NULL) THEN 1 ELSE 0 END U_LOCALITE,
    CASE WHEN D.NOM_VOIE <> S.NOM_VOIE OR (D.NOM_VOIE IS NULL AND S.NOM_VOIE IS NOT NULL) OR (D.NOM_VOIE IS NOT NULL AND S.NOM_VOIE IS NULL) THEN 1 ELSE 0 END U_NOM_VOIE,
    CASE WHEN D.NO_VOIE <> S.NO_VOIE OR (D.NO_VOIE IS NULL AND S.NO_VOIE IS NOT NULL) OR (D.NO_VOIE IS NOT NULL AND S.NO_VOIE IS NULL) THEN 1 ELSE 0 END U_NO_VOIE,
    CASE WHEN D.PAYS_CODE_INSEE <> S.PAYS_CODE_INSEE OR (D.PAYS_CODE_INSEE IS NULL AND S.PAYS_CODE_INSEE IS NOT NULL) OR (D.PAYS_CODE_INSEE IS NOT NULL AND S.PAYS_CODE_INSEE IS NULL) THEN 1 ELSE 0 END U_PAYS_CODE_INSEE,
    CASE WHEN D.PAYS_LIBELLE <> S.PAYS_LIBELLE OR (D.PAYS_LIBELLE IS NULL AND S.PAYS_LIBELLE IS NOT NULL) OR (D.PAYS_LIBELLE IS NOT NULL AND S.PAYS_LIBELLE IS NULL) THEN 1 ELSE 0 END U_PAYS_LIBELLE,
    CASE WHEN D.PRINCIPALE <> S.PRINCIPALE OR (D.PRINCIPALE IS NULL AND S.PRINCIPALE IS NOT NULL) OR (D.PRINCIPALE IS NOT NULL AND S.PRINCIPALE IS NULL) THEN 1 ELSE 0 END U_PRINCIPALE,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID,
    CASE WHEN D.TELEPHONE <> S.TELEPHONE OR (D.TELEPHONE IS NULL AND S.TELEPHONE IS NOT NULL) OR (D.TELEPHONE IS NOT NULL AND S.TELEPHONE IS NULL) THEN 1 ELSE 0 END U_TELEPHONE,
    CASE WHEN D.VILLE <> S.VILLE OR (D.VILLE IS NULL AND S.VILLE IS NOT NULL) OR (D.VILLE IS NOT NULL AND S.VILLE IS NULL) THEN 1 ELSE 0 END U_VILLE
FROM
  ADRESSE_STRUCTURE D
  FULL JOIN SRC_ADRESSE_STRUCTURE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CODE_POSTAL <> S.CODE_POSTAL OR (D.CODE_POSTAL IS NULL AND S.CODE_POSTAL IS NOT NULL) OR (D.CODE_POSTAL IS NOT NULL AND S.CODE_POSTAL IS NULL)
  OR D.LOCALITE <> S.LOCALITE OR (D.LOCALITE IS NULL AND S.LOCALITE IS NOT NULL) OR (D.LOCALITE IS NOT NULL AND S.LOCALITE IS NULL)
  OR D.NOM_VOIE <> S.NOM_VOIE OR (D.NOM_VOIE IS NULL AND S.NOM_VOIE IS NOT NULL) OR (D.NOM_VOIE IS NOT NULL AND S.NOM_VOIE IS NULL)
  OR D.NO_VOIE <> S.NO_VOIE OR (D.NO_VOIE IS NULL AND S.NO_VOIE IS NOT NULL) OR (D.NO_VOIE IS NOT NULL AND S.NO_VOIE IS NULL)
  OR D.PAYS_CODE_INSEE <> S.PAYS_CODE_INSEE OR (D.PAYS_CODE_INSEE IS NULL AND S.PAYS_CODE_INSEE IS NOT NULL) OR (D.PAYS_CODE_INSEE IS NOT NULL AND S.PAYS_CODE_INSEE IS NULL)
  OR D.PAYS_LIBELLE <> S.PAYS_LIBELLE OR (D.PAYS_LIBELLE IS NULL AND S.PAYS_LIBELLE IS NOT NULL) OR (D.PAYS_LIBELLE IS NOT NULL AND S.PAYS_LIBELLE IS NULL)
  OR D.PRINCIPALE <> S.PRINCIPALE OR (D.PRINCIPALE IS NULL AND S.PRINCIPALE IS NOT NULL) OR (D.PRINCIPALE IS NOT NULL AND S.PRINCIPALE IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
  OR D.TELEPHONE <> S.TELEPHONE OR (D.TELEPHONE IS NULL AND S.TELEPHONE IS NOT NULL) OR (D.TELEPHONE IS NOT NULL AND S.TELEPHONE IS NULL)
  OR D.VILLE <> S.VILLE OR (D.VILLE IS NULL AND S.VILLE IS NOT NULL) OR (D.VILLE IS NOT NULL AND S.VILLE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_AFFECTATION
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_AFFECTATION" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "PERSONNEL_ID", "ROLE_ID", "STRUCTURE_ID", "U_PERSONNEL_ID", "U_ROLE_ID", "U_STRUCTURE_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."PERSONNEL_ID",diff."ROLE_ID",diff."STRUCTURE_ID",diff."U_PERSONNEL_ID",diff."U_ROLE_ID",diff."U_STRUCTURE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PERSONNEL_ID ELSE S.PERSONNEL_ID END PERSONNEL_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ROLE_ID ELSE S.ROLE_ID END ROLE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN D.PERSONNEL_ID <> S.PERSONNEL_ID OR (D.PERSONNEL_ID IS NULL AND S.PERSONNEL_ID IS NOT NULL) OR (D.PERSONNEL_ID IS NOT NULL AND S.PERSONNEL_ID IS NULL) THEN 1 ELSE 0 END U_PERSONNEL_ID,
    CASE WHEN D.ROLE_ID <> S.ROLE_ID OR (D.ROLE_ID IS NULL AND S.ROLE_ID IS NOT NULL) OR (D.ROLE_ID IS NOT NULL AND S.ROLE_ID IS NULL) THEN 1 ELSE 0 END U_ROLE_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID
FROM
  AFFECTATION D
  FULL JOIN SRC_AFFECTATION S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.PERSONNEL_ID <> S.PERSONNEL_ID OR (D.PERSONNEL_ID IS NULL AND S.PERSONNEL_ID IS NOT NULL) OR (D.PERSONNEL_ID IS NOT NULL AND S.PERSONNEL_ID IS NULL)
  OR D.ROLE_ID <> S.ROLE_ID OR (D.ROLE_ID IS NULL AND S.ROLE_ID IS NOT NULL) OR (D.ROLE_ID IS NOT NULL AND S.ROLE_ID IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_AFFECTATION_RECHERCHE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_AFFECTATION_RECHERCHE" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "INTERVENANT_ID", "STRUCTURE_ID", "U_INTERVENANT_ID", "U_STRUCTURE_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."INTERVENANT_ID",diff."STRUCTURE_ID",diff."U_INTERVENANT_ID",diff."U_STRUCTURE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND rt.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.INTERVENANT_ID ELSE S.INTERVENANT_ID END INTERVENANT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN D.INTERVENANT_ID <> S.INTERVENANT_ID OR (D.INTERVENANT_ID IS NULL AND S.INTERVENANT_ID IS NOT NULL) OR (D.INTERVENANT_ID IS NOT NULL AND S.INTERVENANT_ID IS NULL) THEN 1 ELSE 0 END U_INTERVENANT_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID
FROM
  AFFECTATION_RECHERCHE D
  LEFT JOIN INTERVENANT rt ON rt.ID = d.INTERVENANT_ID
  FULL JOIN SRC_AFFECTATION_RECHERCHE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.INTERVENANT_ID <> S.INTERVENANT_ID OR (D.INTERVENANT_ID IS NULL AND S.INTERVENANT_ID IS NOT NULL) OR (D.INTERVENANT_ID IS NOT NULL AND S.INTERVENANT_ID IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_CENTRE_COUT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_CENTRE_COUT" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ACTIVITE_ID", "LIBELLE", "PARENT_ID", "TYPE_RESSOURCE_ID", "UNITE_BUDGETAIRE", "U_ACTIVITE_ID", "U_LIBELLE", "U_PARENT_ID", "U_TYPE_RESSOURCE_ID", "U_UNITE_BUDGETAIRE") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ACTIVITE_ID",diff."LIBELLE",diff."PARENT_ID",diff."TYPE_RESSOURCE_ID",diff."UNITE_BUDGETAIRE",diff."U_ACTIVITE_ID",diff."U_LIBELLE",diff."U_PARENT_ID",diff."U_TYPE_RESSOURCE_ID",diff."U_UNITE_BUDGETAIRE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ACTIVITE_ID ELSE S.ACTIVITE_ID END ACTIVITE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE ELSE S.LIBELLE END LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PARENT_ID ELSE S.PARENT_ID END PARENT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_RESSOURCE_ID ELSE S.TYPE_RESSOURCE_ID END TYPE_RESSOURCE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.UNITE_BUDGETAIRE ELSE S.UNITE_BUDGETAIRE END UNITE_BUDGETAIRE,
    CASE WHEN D.ACTIVITE_ID <> S.ACTIVITE_ID OR (D.ACTIVITE_ID IS NULL AND S.ACTIVITE_ID IS NOT NULL) OR (D.ACTIVITE_ID IS NOT NULL AND S.ACTIVITE_ID IS NULL) THEN 1 ELSE 0 END U_ACTIVITE_ID,
    CASE WHEN D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL) THEN 1 ELSE 0 END U_LIBELLE,
    CASE WHEN D.PARENT_ID <> S.PARENT_ID OR (D.PARENT_ID IS NULL AND S.PARENT_ID IS NOT NULL) OR (D.PARENT_ID IS NOT NULL AND S.PARENT_ID IS NULL) THEN 1 ELSE 0 END U_PARENT_ID,
    CASE WHEN D.TYPE_RESSOURCE_ID <> S.TYPE_RESSOURCE_ID OR (D.TYPE_RESSOURCE_ID IS NULL AND S.TYPE_RESSOURCE_ID IS NOT NULL) OR (D.TYPE_RESSOURCE_ID IS NOT NULL AND S.TYPE_RESSOURCE_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_RESSOURCE_ID,
    CASE WHEN D.UNITE_BUDGETAIRE <> S.UNITE_BUDGETAIRE OR (D.UNITE_BUDGETAIRE IS NULL AND S.UNITE_BUDGETAIRE IS NOT NULL) OR (D.UNITE_BUDGETAIRE IS NOT NULL AND S.UNITE_BUDGETAIRE IS NULL) THEN 1 ELSE 0 END U_UNITE_BUDGETAIRE
FROM
  CENTRE_COUT D
  FULL JOIN SRC_CENTRE_COUT S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ACTIVITE_ID <> S.ACTIVITE_ID OR (D.ACTIVITE_ID IS NULL AND S.ACTIVITE_ID IS NOT NULL) OR (D.ACTIVITE_ID IS NOT NULL AND S.ACTIVITE_ID IS NULL)
  OR D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL)
  OR D.PARENT_ID <> S.PARENT_ID OR (D.PARENT_ID IS NULL AND S.PARENT_ID IS NOT NULL) OR (D.PARENT_ID IS NOT NULL AND S.PARENT_ID IS NULL)
  OR D.TYPE_RESSOURCE_ID <> S.TYPE_RESSOURCE_ID OR (D.TYPE_RESSOURCE_ID IS NULL AND S.TYPE_RESSOURCE_ID IS NOT NULL) OR (D.TYPE_RESSOURCE_ID IS NOT NULL AND S.TYPE_RESSOURCE_ID IS NULL)
  OR D.UNITE_BUDGETAIRE <> S.UNITE_BUDGETAIRE OR (D.UNITE_BUDGETAIRE IS NULL AND S.UNITE_BUDGETAIRE IS NOT NULL) OR (D.UNITE_BUDGETAIRE IS NOT NULL AND S.UNITE_BUDGETAIRE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_CENTRE_COUT_STRUCTURE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_CENTRE_COUT_STRUCTURE" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "CENTRE_COUT_ID", "STRUCTURE_ID", "U_CENTRE_COUT_ID", "U_STRUCTURE_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CENTRE_COUT_ID",diff."STRUCTURE_ID",diff."U_CENTRE_COUT_ID",diff."U_STRUCTURE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CENTRE_COUT_ID ELSE S.CENTRE_COUT_ID END CENTRE_COUT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN D.CENTRE_COUT_ID <> S.CENTRE_COUT_ID OR (D.CENTRE_COUT_ID IS NULL AND S.CENTRE_COUT_ID IS NOT NULL) OR (D.CENTRE_COUT_ID IS NOT NULL AND S.CENTRE_COUT_ID IS NULL) THEN 1 ELSE 0 END U_CENTRE_COUT_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID
FROM
  CENTRE_COUT_STRUCTURE D
  FULL JOIN SRC_CENTRE_COUT_STRUCTURE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CENTRE_COUT_ID <> S.CENTRE_COUT_ID OR (D.CENTRE_COUT_ID IS NULL AND S.CENTRE_COUT_ID IS NOT NULL) OR (D.CENTRE_COUT_ID IS NOT NULL AND S.CENTRE_COUT_ID IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_CHEMIN_PEDAGOGIQUE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_CHEMIN_PEDAGOGIQUE" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ELEMENT_PEDAGOGIQUE_ID", "ETAPE_ID", "ORDRE", "U_ELEMENT_PEDAGOGIQUE_ID", "U_ETAPE_ID", "U_ORDRE") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ELEMENT_PEDAGOGIQUE_ID",diff."ETAPE_ID",diff."ORDRE",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_ETAPE_ID",diff."U_ORDRE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND rt.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETAPE_ID ELSE S.ETAPE_ID END ETAPE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ORDRE ELSE S.ORDRE END ORDRE,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.ETAPE_ID <> S.ETAPE_ID OR (D.ETAPE_ID IS NULL AND S.ETAPE_ID IS NOT NULL) OR (D.ETAPE_ID IS NOT NULL AND S.ETAPE_ID IS NULL) THEN 1 ELSE 0 END U_ETAPE_ID,
    CASE WHEN D.ORDRE <> S.ORDRE OR (D.ORDRE IS NULL AND S.ORDRE IS NOT NULL) OR (D.ORDRE IS NOT NULL AND S.ORDRE IS NULL) THEN 1 ELSE 0 END U_ORDRE
FROM
  CHEMIN_PEDAGOGIQUE D
  LEFT JOIN ELEMENT_PEDAGOGIQUE rt ON rt.ID = d.ELEMENT_PEDAGOGIQUE_ID
  FULL JOIN SRC_CHEMIN_PEDAGOGIQUE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.ETAPE_ID <> S.ETAPE_ID OR (D.ETAPE_ID IS NULL AND S.ETAPE_ID IS NOT NULL) OR (D.ETAPE_ID IS NOT NULL AND S.ETAPE_ID IS NULL)
  OR D.ORDRE <> S.ORDRE OR (D.ORDRE IS NULL AND S.ORDRE IS NOT NULL) OR (D.ORDRE IS NOT NULL AND S.ORDRE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_CORPS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_CORPS" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "LIBELLE_COURT", "LIBELLE_LONG", "U_LIBELLE_COURT", "U_LIBELLE_LONG") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."LIBELLE_COURT",diff."LIBELLE_LONG",diff."U_LIBELLE_COURT",diff."U_LIBELLE_LONG" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_COURT ELSE S.LIBELLE_COURT END LIBELLE_COURT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_LONG ELSE S.LIBELLE_LONG END LIBELLE_LONG,
    CASE WHEN D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL) THEN 1 ELSE 0 END U_LIBELLE_COURT,
    CASE WHEN D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL) THEN 1 ELSE 0 END U_LIBELLE_LONG
FROM
  CORPS D
  FULL JOIN SRC_CORPS S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL)
  OR D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_DEPARTEMENT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_DEPARTEMENT" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "CODE", "LIBELLE_COURT", "LIBELLE_LONG", "U_CODE", "U_LIBELLE_COURT", "U_LIBELLE_LONG") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CODE",diff."LIBELLE_COURT",diff."LIBELLE_LONG",diff."U_CODE",diff."U_LIBELLE_COURT",diff."U_LIBELLE_LONG" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_COURT ELSE S.LIBELLE_COURT END LIBELLE_COURT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_LONG ELSE S.LIBELLE_LONG END LIBELLE_LONG,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL) THEN 1 ELSE 0 END U_LIBELLE_COURT,
    CASE WHEN D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL) THEN 1 ELSE 0 END U_LIBELLE_LONG
FROM
  DEPARTEMENT D
  FULL JOIN SRC_DEPARTEMENT S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL)
  OR D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_DOMAINE_FONCTIONNEL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_DOMAINE_FONCTIONNEL" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "LIBELLE", "U_LIBELLE") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."LIBELLE",diff."U_LIBELLE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE ELSE S.LIBELLE END LIBELLE,
    CASE WHEN D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL) THEN 1 ELSE 0 END U_LIBELLE
FROM
  DOMAINE_FONCTIONNEL D
  FULL JOIN SRC_DOMAINE_FONCTIONNEL S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_EFFECTIFS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_EFFECTIFS" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ANNEE_ID", "ELEMENT_PEDAGOGIQUE_ID", "FA", "FC", "FI", "U_ANNEE_ID", "U_ELEMENT_PEDAGOGIQUE_ID", "U_FA", "U_FC", "U_FI") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_ID",diff."ELEMENT_PEDAGOGIQUE_ID",diff."FA",diff."FC",diff."FI",diff."U_ANNEE_ID",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_FA",diff."U_FC",diff."U_FI" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND d.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_ID ELSE S.ANNEE_ID END ANNEE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FA ELSE S.FA END FA,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FC ELSE S.FC END FC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FI ELSE S.FI END FI,
    CASE WHEN D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL) THEN 1 ELSE 0 END U_ANNEE_ID,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.FA <> S.FA OR (D.FA IS NULL AND S.FA IS NOT NULL) OR (D.FA IS NOT NULL AND S.FA IS NULL) THEN 1 ELSE 0 END U_FA,
    CASE WHEN D.FC <> S.FC OR (D.FC IS NULL AND S.FC IS NOT NULL) OR (D.FC IS NOT NULL AND S.FC IS NULL) THEN 1 ELSE 0 END U_FC,
    CASE WHEN D.FI <> S.FI OR (D.FI IS NULL AND S.FI IS NOT NULL) OR (D.FI IS NOT NULL AND S.FI IS NULL) THEN 1 ELSE 0 END U_FI
FROM
  EFFECTIFS D
  FULL JOIN SRC_EFFECTIFS S ON S.source_id = D.source_id AND S.source_code = D.source_code AND S.ANNEE_ID = d.ANNEE_ID
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL)
  OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.FA <> S.FA OR (D.FA IS NULL AND S.FA IS NOT NULL) OR (D.FA IS NOT NULL AND S.FA IS NULL)
  OR D.FC <> S.FC OR (D.FC IS NULL AND S.FC IS NOT NULL) OR (D.FC IS NOT NULL AND S.FC IS NULL)
  OR D.FI <> S.FI OR (D.FI IS NULL AND S.FI IS NOT NULL) OR (D.FI IS NOT NULL AND S.FI IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_ELEMENT_PEDAGOGIQUE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_ELEMENT_PEDAGOGIQUE" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ANNEE_ID", "CODE", "DISCIPLINE_ID", "ETAPE_ID", "FA", "FC", "FI", "LIBELLE", "PERIODE_ID", "STRUCTURE_ID", "TAUX_FA", "TAUX_FC", "TAUX_FI", "TAUX_FOAD", "U_ANNEE_ID", "U_CODE", "U_DISCIPLINE_ID", "U_ETAPE_ID", "U_FA", "U_FC", "U_FI", "U_LIBELLE", "U_PERIODE_ID", "U_STRUCTURE_ID", "U_TAUX_FA", "U_TAUX_FC", "U_TAUX_FI", "U_TAUX_FOAD") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_ID",diff."CODE",diff."DISCIPLINE_ID",diff."ETAPE_ID",diff."FA",diff."FC",diff."FI",diff."LIBELLE",diff."PERIODE_ID",diff."STRUCTURE_ID",diff."TAUX_FA",diff."TAUX_FC",diff."TAUX_FI",diff."TAUX_FOAD",diff."U_ANNEE_ID",diff."U_CODE",diff."U_DISCIPLINE_ID",diff."U_ETAPE_ID",diff."U_FA",diff."U_FC",diff."U_FI",diff."U_LIBELLE",diff."U_PERIODE_ID",diff."U_STRUCTURE_ID",diff."U_TAUX_FA",diff."U_TAUX_FC",diff."U_TAUX_FI",diff."U_TAUX_FOAD" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND d.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_ID ELSE S.ANNEE_ID END ANNEE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DISCIPLINE_ID ELSE S.DISCIPLINE_ID END DISCIPLINE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETAPE_ID ELSE S.ETAPE_ID END ETAPE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FA ELSE S.FA END FA,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FC ELSE S.FC END FC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.FI ELSE S.FI END FI,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE ELSE S.LIBELLE END LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PERIODE_ID ELSE S.PERIODE_ID END PERIODE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FA ELSE S.TAUX_FA END TAUX_FA,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FC ELSE S.TAUX_FC END TAUX_FC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FI ELSE S.TAUX_FI END TAUX_FI,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FOAD ELSE S.TAUX_FOAD END TAUX_FOAD,
    CASE WHEN D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL) THEN 1 ELSE 0 END U_ANNEE_ID,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.DISCIPLINE_ID <> S.DISCIPLINE_ID OR (D.DISCIPLINE_ID IS NULL AND S.DISCIPLINE_ID IS NOT NULL) OR (D.DISCIPLINE_ID IS NOT NULL AND S.DISCIPLINE_ID IS NULL) THEN 1 ELSE 0 END U_DISCIPLINE_ID,
    CASE WHEN D.ETAPE_ID <> S.ETAPE_ID OR (D.ETAPE_ID IS NULL AND S.ETAPE_ID IS NOT NULL) OR (D.ETAPE_ID IS NOT NULL AND S.ETAPE_ID IS NULL) THEN 1 ELSE 0 END U_ETAPE_ID,
    CASE WHEN D.FA <> S.FA OR (D.FA IS NULL AND S.FA IS NOT NULL) OR (D.FA IS NOT NULL AND S.FA IS NULL) THEN 1 ELSE 0 END U_FA,
    CASE WHEN D.FC <> S.FC OR (D.FC IS NULL AND S.FC IS NOT NULL) OR (D.FC IS NOT NULL AND S.FC IS NULL) THEN 1 ELSE 0 END U_FC,
    CASE WHEN D.FI <> S.FI OR (D.FI IS NULL AND S.FI IS NOT NULL) OR (D.FI IS NOT NULL AND S.FI IS NULL) THEN 1 ELSE 0 END U_FI,
    CASE WHEN D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL) THEN 1 ELSE 0 END U_LIBELLE,
    CASE WHEN D.PERIODE_ID <> S.PERIODE_ID OR (D.PERIODE_ID IS NULL AND S.PERIODE_ID IS NOT NULL) OR (D.PERIODE_ID IS NOT NULL AND S.PERIODE_ID IS NULL) THEN 1 ELSE 0 END U_PERIODE_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID,
    CASE WHEN D.TAUX_FA <> S.TAUX_FA OR (D.TAUX_FA IS NULL AND S.TAUX_FA IS NOT NULL) OR (D.TAUX_FA IS NOT NULL AND S.TAUX_FA IS NULL) THEN 1 ELSE 0 END U_TAUX_FA,
    CASE WHEN D.TAUX_FC <> S.TAUX_FC OR (D.TAUX_FC IS NULL AND S.TAUX_FC IS NOT NULL) OR (D.TAUX_FC IS NOT NULL AND S.TAUX_FC IS NULL) THEN 1 ELSE 0 END U_TAUX_FC,
    CASE WHEN D.TAUX_FI <> S.TAUX_FI OR (D.TAUX_FI IS NULL AND S.TAUX_FI IS NOT NULL) OR (D.TAUX_FI IS NOT NULL AND S.TAUX_FI IS NULL) THEN 1 ELSE 0 END U_TAUX_FI,
    CASE WHEN D.TAUX_FOAD <> S.TAUX_FOAD OR (D.TAUX_FOAD IS NULL AND S.TAUX_FOAD IS NOT NULL) OR (D.TAUX_FOAD IS NOT NULL AND S.TAUX_FOAD IS NULL) THEN 1 ELSE 0 END U_TAUX_FOAD
FROM
  ELEMENT_PEDAGOGIQUE D
  FULL JOIN SRC_ELEMENT_PEDAGOGIQUE S ON S.source_id = D.source_id AND S.source_code = D.source_code AND S.ANNEE_ID = d.ANNEE_ID
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL)
  OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.DISCIPLINE_ID <> S.DISCIPLINE_ID OR (D.DISCIPLINE_ID IS NULL AND S.DISCIPLINE_ID IS NOT NULL) OR (D.DISCIPLINE_ID IS NOT NULL AND S.DISCIPLINE_ID IS NULL)
  OR D.ETAPE_ID <> S.ETAPE_ID OR (D.ETAPE_ID IS NULL AND S.ETAPE_ID IS NOT NULL) OR (D.ETAPE_ID IS NOT NULL AND S.ETAPE_ID IS NULL)
  OR D.FA <> S.FA OR (D.FA IS NULL AND S.FA IS NOT NULL) OR (D.FA IS NOT NULL AND S.FA IS NULL)
  OR D.FC <> S.FC OR (D.FC IS NULL AND S.FC IS NOT NULL) OR (D.FC IS NOT NULL AND S.FC IS NULL)
  OR D.FI <> S.FI OR (D.FI IS NULL AND S.FI IS NOT NULL) OR (D.FI IS NOT NULL AND S.FI IS NULL)
  OR D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL)
  OR D.PERIODE_ID <> S.PERIODE_ID OR (D.PERIODE_ID IS NULL AND S.PERIODE_ID IS NOT NULL) OR (D.PERIODE_ID IS NOT NULL AND S.PERIODE_ID IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
  OR D.TAUX_FA <> S.TAUX_FA OR (D.TAUX_FA IS NULL AND S.TAUX_FA IS NOT NULL) OR (D.TAUX_FA IS NOT NULL AND S.TAUX_FA IS NULL)
  OR D.TAUX_FC <> S.TAUX_FC OR (D.TAUX_FC IS NULL AND S.TAUX_FC IS NOT NULL) OR (D.TAUX_FC IS NOT NULL AND S.TAUX_FC IS NULL)
  OR D.TAUX_FI <> S.TAUX_FI OR (D.TAUX_FI IS NULL AND S.TAUX_FI IS NOT NULL) OR (D.TAUX_FI IS NOT NULL AND S.TAUX_FI IS NULL)
  OR D.TAUX_FOAD <> S.TAUX_FOAD OR (D.TAUX_FOAD IS NULL AND S.TAUX_FOAD IS NOT NULL) OR (D.TAUX_FOAD IS NOT NULL AND S.TAUX_FOAD IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_ELEMENT_TAUX_REGIMES
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_ELEMENT_TAUX_REGIMES" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ELEMENT_PEDAGOGIQUE_ID", "TAUX_FA", "TAUX_FC", "TAUX_FI", "U_ELEMENT_PEDAGOGIQUE_ID", "U_TAUX_FA", "U_TAUX_FC", "U_TAUX_FI") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ELEMENT_PEDAGOGIQUE_ID",diff."TAUX_FA",diff."TAUX_FC",diff."TAUX_FI",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_TAUX_FA",diff."U_TAUX_FC",diff."U_TAUX_FI" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND rt.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FA ELSE S.TAUX_FA END TAUX_FA,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FC ELSE S.TAUX_FC END TAUX_FC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TAUX_FI ELSE S.TAUX_FI END TAUX_FI,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.TAUX_FA <> S.TAUX_FA OR (D.TAUX_FA IS NULL AND S.TAUX_FA IS NOT NULL) OR (D.TAUX_FA IS NOT NULL AND S.TAUX_FA IS NULL) THEN 1 ELSE 0 END U_TAUX_FA,
    CASE WHEN D.TAUX_FC <> S.TAUX_FC OR (D.TAUX_FC IS NULL AND S.TAUX_FC IS NOT NULL) OR (D.TAUX_FC IS NOT NULL AND S.TAUX_FC IS NULL) THEN 1 ELSE 0 END U_TAUX_FC,
    CASE WHEN D.TAUX_FI <> S.TAUX_FI OR (D.TAUX_FI IS NULL AND S.TAUX_FI IS NOT NULL) OR (D.TAUX_FI IS NOT NULL AND S.TAUX_FI IS NULL) THEN 1 ELSE 0 END U_TAUX_FI
FROM
  ELEMENT_TAUX_REGIMES D
  LEFT JOIN ELEMENT_PEDAGOGIQUE rt ON rt.ID = d.ELEMENT_PEDAGOGIQUE_ID
  FULL JOIN SRC_ELEMENT_TAUX_REGIMES S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.TAUX_FA <> S.TAUX_FA OR (D.TAUX_FA IS NULL AND S.TAUX_FA IS NOT NULL) OR (D.TAUX_FA IS NOT NULL AND S.TAUX_FA IS NULL)
  OR D.TAUX_FC <> S.TAUX_FC OR (D.TAUX_FC IS NULL AND S.TAUX_FC IS NOT NULL) OR (D.TAUX_FC IS NOT NULL AND S.TAUX_FC IS NULL)
  OR D.TAUX_FI <> S.TAUX_FI OR (D.TAUX_FI IS NULL AND S.TAUX_FI IS NOT NULL) OR (D.TAUX_FI IS NOT NULL AND S.TAUX_FI IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_ETABLISSEMENT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_ETABLISSEMENT" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "DEPARTEMENT", "LIBELLE", "LOCALISATION", "U_DEPARTEMENT", "U_LIBELLE", "U_LOCALISATION") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."DEPARTEMENT",diff."LIBELLE",diff."LOCALISATION",diff."U_DEPARTEMENT",diff."U_LIBELLE",diff."U_LOCALISATION" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DEPARTEMENT ELSE S.DEPARTEMENT END DEPARTEMENT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE ELSE S.LIBELLE END LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LOCALISATION ELSE S.LOCALISATION END LOCALISATION,
    CASE WHEN D.DEPARTEMENT <> S.DEPARTEMENT OR (D.DEPARTEMENT IS NULL AND S.DEPARTEMENT IS NOT NULL) OR (D.DEPARTEMENT IS NOT NULL AND S.DEPARTEMENT IS NULL) THEN 1 ELSE 0 END U_DEPARTEMENT,
    CASE WHEN D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL) THEN 1 ELSE 0 END U_LIBELLE,
    CASE WHEN D.LOCALISATION <> S.LOCALISATION OR (D.LOCALISATION IS NULL AND S.LOCALISATION IS NOT NULL) OR (D.LOCALISATION IS NOT NULL AND S.LOCALISATION IS NULL) THEN 1 ELSE 0 END U_LOCALISATION
FROM
  ETABLISSEMENT D
  FULL JOIN SRC_ETABLISSEMENT S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.DEPARTEMENT <> S.DEPARTEMENT OR (D.DEPARTEMENT IS NULL AND S.DEPARTEMENT IS NOT NULL) OR (D.DEPARTEMENT IS NOT NULL AND S.DEPARTEMENT IS NULL)
  OR D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL)
  OR D.LOCALISATION <> S.LOCALISATION OR (D.LOCALISATION IS NULL AND S.LOCALISATION IS NOT NULL) OR (D.LOCALISATION IS NOT NULL AND S.LOCALISATION IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_ETAPE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_ETAPE" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ANNEE_ID", "CODE", "DOMAINE_FONCTIONNEL_ID", "LIBELLE", "NIVEAU", "SPECIFIQUE_ECHANGES", "STRUCTURE_ID", "TYPE_FORMATION_ID", "U_ANNEE_ID", "U_CODE", "U_DOMAINE_FONCTIONNEL_ID", "U_LIBELLE", "U_NIVEAU", "U_SPECIFIQUE_ECHANGES", "U_STRUCTURE_ID", "U_TYPE_FORMATION_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_ID",diff."CODE",diff."DOMAINE_FONCTIONNEL_ID",diff."LIBELLE",diff."NIVEAU",diff."SPECIFIQUE_ECHANGES",diff."STRUCTURE_ID",diff."TYPE_FORMATION_ID",diff."U_ANNEE_ID",diff."U_CODE",diff."U_DOMAINE_FONCTIONNEL_ID",diff."U_LIBELLE",diff."U_NIVEAU",diff."U_SPECIFIQUE_ECHANGES",diff."U_STRUCTURE_ID",diff."U_TYPE_FORMATION_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND d.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_ID ELSE S.ANNEE_ID END ANNEE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DOMAINE_FONCTIONNEL_ID ELSE S.DOMAINE_FONCTIONNEL_ID END DOMAINE_FONCTIONNEL_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE ELSE S.LIBELLE END LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NIVEAU ELSE S.NIVEAU END NIVEAU,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.SPECIFIQUE_ECHANGES ELSE S.SPECIFIQUE_ECHANGES END SPECIFIQUE_ECHANGES,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_FORMATION_ID ELSE S.TYPE_FORMATION_ID END TYPE_FORMATION_ID,
    CASE WHEN D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL) THEN 1 ELSE 0 END U_ANNEE_ID,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.DOMAINE_FONCTIONNEL_ID <> S.DOMAINE_FONCTIONNEL_ID OR (D.DOMAINE_FONCTIONNEL_ID IS NULL AND S.DOMAINE_FONCTIONNEL_ID IS NOT NULL) OR (D.DOMAINE_FONCTIONNEL_ID IS NOT NULL AND S.DOMAINE_FONCTIONNEL_ID IS NULL) THEN 1 ELSE 0 END U_DOMAINE_FONCTIONNEL_ID,
    CASE WHEN D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL) THEN 1 ELSE 0 END U_LIBELLE,
    CASE WHEN D.NIVEAU <> S.NIVEAU OR (D.NIVEAU IS NULL AND S.NIVEAU IS NOT NULL) OR (D.NIVEAU IS NOT NULL AND S.NIVEAU IS NULL) THEN 1 ELSE 0 END U_NIVEAU,
    CASE WHEN D.SPECIFIQUE_ECHANGES <> S.SPECIFIQUE_ECHANGES OR (D.SPECIFIQUE_ECHANGES IS NULL AND S.SPECIFIQUE_ECHANGES IS NOT NULL) OR (D.SPECIFIQUE_ECHANGES IS NOT NULL AND S.SPECIFIQUE_ECHANGES IS NULL) THEN 1 ELSE 0 END U_SPECIFIQUE_ECHANGES,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID,
    CASE WHEN D.TYPE_FORMATION_ID <> S.TYPE_FORMATION_ID OR (D.TYPE_FORMATION_ID IS NULL AND S.TYPE_FORMATION_ID IS NOT NULL) OR (D.TYPE_FORMATION_ID IS NOT NULL AND S.TYPE_FORMATION_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_FORMATION_ID
FROM
  ETAPE D
  FULL JOIN SRC_ETAPE S ON S.source_id = D.source_id AND S.source_code = D.source_code AND S.ANNEE_ID = d.ANNEE_ID
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL)
  OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.DOMAINE_FONCTIONNEL_ID <> S.DOMAINE_FONCTIONNEL_ID OR (D.DOMAINE_FONCTIONNEL_ID IS NULL AND S.DOMAINE_FONCTIONNEL_ID IS NOT NULL) OR (D.DOMAINE_FONCTIONNEL_ID IS NOT NULL AND S.DOMAINE_FONCTIONNEL_ID IS NULL)
  OR D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL)
  OR D.NIVEAU <> S.NIVEAU OR (D.NIVEAU IS NULL AND S.NIVEAU IS NOT NULL) OR (D.NIVEAU IS NOT NULL AND S.NIVEAU IS NULL)
  OR D.SPECIFIQUE_ECHANGES <> S.SPECIFIQUE_ECHANGES OR (D.SPECIFIQUE_ECHANGES IS NULL AND S.SPECIFIQUE_ECHANGES IS NOT NULL) OR (D.SPECIFIQUE_ECHANGES IS NOT NULL AND S.SPECIFIQUE_ECHANGES IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
  OR D.TYPE_FORMATION_ID <> S.TYPE_FORMATION_ID OR (D.TYPE_FORMATION_ID IS NULL AND S.TYPE_FORMATION_ID IS NOT NULL) OR (D.TYPE_FORMATION_ID IS NOT NULL AND S.TYPE_FORMATION_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_GRADE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_GRADE" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "CORPS_ID", "ECHELLE", "LIBELLE_COURT", "LIBELLE_LONG", "U_CORPS_ID", "U_ECHELLE", "U_LIBELLE_COURT", "U_LIBELLE_LONG") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CORPS_ID",diff."ECHELLE",diff."LIBELLE_COURT",diff."LIBELLE_LONG",diff."U_CORPS_ID",diff."U_ECHELLE",diff."U_LIBELLE_COURT",diff."U_LIBELLE_LONG" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CORPS_ID ELSE S.CORPS_ID END CORPS_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ECHELLE ELSE S.ECHELLE END ECHELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_COURT ELSE S.LIBELLE_COURT END LIBELLE_COURT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_LONG ELSE S.LIBELLE_LONG END LIBELLE_LONG,
    CASE WHEN D.CORPS_ID <> S.CORPS_ID OR (D.CORPS_ID IS NULL AND S.CORPS_ID IS NOT NULL) OR (D.CORPS_ID IS NOT NULL AND S.CORPS_ID IS NULL) THEN 1 ELSE 0 END U_CORPS_ID,
    CASE WHEN D.ECHELLE <> S.ECHELLE OR (D.ECHELLE IS NULL AND S.ECHELLE IS NOT NULL) OR (D.ECHELLE IS NOT NULL AND S.ECHELLE IS NULL) THEN 1 ELSE 0 END U_ECHELLE,
    CASE WHEN D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL) THEN 1 ELSE 0 END U_LIBELLE_COURT,
    CASE WHEN D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL) THEN 1 ELSE 0 END U_LIBELLE_LONG
FROM
  GRADE D
  FULL JOIN SRC_GRADE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CORPS_ID <> S.CORPS_ID OR (D.CORPS_ID IS NULL AND S.CORPS_ID IS NOT NULL) OR (D.CORPS_ID IS NOT NULL AND S.CORPS_ID IS NULL)
  OR D.ECHELLE <> S.ECHELLE OR (D.ECHELLE IS NULL AND S.ECHELLE IS NOT NULL) OR (D.ECHELLE IS NOT NULL AND S.ECHELLE IS NULL)
  OR D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL)
  OR D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_GROUPE_TYPE_FORMATION
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_GROUPE_TYPE_FORMATION" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "LIBELLE_COURT", "LIBELLE_LONG", "ORDRE", "PERTINENCE_NIVEAU", "U_LIBELLE_COURT", "U_LIBELLE_LONG", "U_ORDRE", "U_PERTINENCE_NIVEAU") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."LIBELLE_COURT",diff."LIBELLE_LONG",diff."ORDRE",diff."PERTINENCE_NIVEAU",diff."U_LIBELLE_COURT",diff."U_LIBELLE_LONG",diff."U_ORDRE",diff."U_PERTINENCE_NIVEAU" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_COURT ELSE S.LIBELLE_COURT END LIBELLE_COURT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_LONG ELSE S.LIBELLE_LONG END LIBELLE_LONG,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ORDRE ELSE S.ORDRE END ORDRE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PERTINENCE_NIVEAU ELSE S.PERTINENCE_NIVEAU END PERTINENCE_NIVEAU,
    CASE WHEN D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL) THEN 1 ELSE 0 END U_LIBELLE_COURT,
    CASE WHEN D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL) THEN 1 ELSE 0 END U_LIBELLE_LONG,
    CASE WHEN D.ORDRE <> S.ORDRE OR (D.ORDRE IS NULL AND S.ORDRE IS NOT NULL) OR (D.ORDRE IS NOT NULL AND S.ORDRE IS NULL) THEN 1 ELSE 0 END U_ORDRE,
    CASE WHEN D.PERTINENCE_NIVEAU <> S.PERTINENCE_NIVEAU OR (D.PERTINENCE_NIVEAU IS NULL AND S.PERTINENCE_NIVEAU IS NOT NULL) OR (D.PERTINENCE_NIVEAU IS NOT NULL AND S.PERTINENCE_NIVEAU IS NULL) THEN 1 ELSE 0 END U_PERTINENCE_NIVEAU
FROM
  GROUPE_TYPE_FORMATION D
  FULL JOIN SRC_GROUPE_TYPE_FORMATION S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL)
  OR D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL)
  OR D.ORDRE <> S.ORDRE OR (D.ORDRE IS NULL AND S.ORDRE IS NOT NULL) OR (D.ORDRE IS NOT NULL AND S.ORDRE IS NULL)
  OR D.PERTINENCE_NIVEAU <> S.PERTINENCE_NIVEAU OR (D.PERTINENCE_NIVEAU IS NULL AND S.PERTINENCE_NIVEAU IS NOT NULL) OR (D.PERTINENCE_NIVEAU IS NOT NULL AND S.PERTINENCE_NIVEAU IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_INTERVENANT" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ANNEE_ID", "BIC", "CIVILITE_ID", "CODE", "CRITERE_RECHERCHE", "DATE_NAISSANCE", "DEP_NAISSANCE_ID", "DISCIPLINE_ID", "EMAIL", "GRADE_ID", "IBAN", "NOM_PATRONYMIQUE", "NOM_USUEL", "NUMERO_INSEE", "NUMERO_INSEE_CLE", "NUMERO_INSEE_PROVISOIRE", "PAYS_NAISSANCE_ID", "PAYS_NATIONALITE_ID", "PRENOM", "STATUT_ID", "STRUCTURE_ID", "SUPANN_EMP_ID", "TEL_MOBILE", "TEL_PRO", "VILLE_NAISSANCE_CODE_INSEE", "VILLE_NAISSANCE_LIBELLE", "U_ANNEE_ID", "U_BIC", "U_CIVILITE_ID", "U_CODE", "U_CRITERE_RECHERCHE", "U_DATE_NAISSANCE", "U_DEP_NAISSANCE_ID", "U_DISCIPLINE_ID", "U_EMAIL", "U_GRADE_ID", "U_IBAN", "U_NOM_PATRONYMIQUE", "U_NOM_USUEL", "U_NUMERO_INSEE", "U_NUMERO_INSEE_CLE", "U_NUMERO_INSEE_PROVISOIRE", "U_PAYS_NAISSANCE_ID", "U_PAYS_NATIONALITE_ID", "U_PRENOM", "U_STATUT_ID", "U_STRUCTURE_ID", "U_SUPANN_EMP_ID", "U_TEL_MOBILE", "U_TEL_PRO", "U_VILLE_NAISSANCE_CODE_INSEE", "U_VILLE_NAISSANCE_LIBELLE") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_ID",diff."BIC",diff."CIVILITE_ID",diff."CODE",diff."CRITERE_RECHERCHE",diff."DATE_NAISSANCE",diff."DEP_NAISSANCE_ID",diff."DISCIPLINE_ID",diff."EMAIL",diff."GRADE_ID",diff."IBAN",diff."NOM_PATRONYMIQUE",diff."NOM_USUEL",diff."NUMERO_INSEE",diff."NUMERO_INSEE_CLE",diff."NUMERO_INSEE_PROVISOIRE",diff."PAYS_NAISSANCE_ID",diff."PAYS_NATIONALITE_ID",diff."PRENOM",diff."STATUT_ID",diff."STRUCTURE_ID",diff."SUPANN_EMP_ID",diff."TEL_MOBILE",diff."TEL_PRO",diff."VILLE_NAISSANCE_CODE_INSEE",diff."VILLE_NAISSANCE_LIBELLE",diff."U_ANNEE_ID",diff."U_BIC",diff."U_CIVILITE_ID",diff."U_CODE",diff."U_CRITERE_RECHERCHE",diff."U_DATE_NAISSANCE",diff."U_DEP_NAISSANCE_ID",diff."U_DISCIPLINE_ID",diff."U_EMAIL",diff."U_GRADE_ID",diff."U_IBAN",diff."U_NOM_PATRONYMIQUE",diff."U_NOM_USUEL",diff."U_NUMERO_INSEE",diff."U_NUMERO_INSEE_CLE",diff."U_NUMERO_INSEE_PROVISOIRE",diff."U_PAYS_NAISSANCE_ID",diff."U_PAYS_NATIONALITE_ID",diff."U_PRENOM",diff."U_STATUT_ID",diff."U_STRUCTURE_ID",diff."U_SUPANN_EMP_ID",diff."U_TEL_MOBILE",diff."U_TEL_PRO",diff."U_VILLE_NAISSANCE_CODE_INSEE",diff."U_VILLE_NAISSANCE_LIBELLE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND d.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_ID ELSE S.ANNEE_ID END ANNEE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.BIC ELSE S.BIC END BIC,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CIVILITE_ID ELSE S.CIVILITE_ID END CIVILITE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CRITERE_RECHERCHE ELSE S.CRITERE_RECHERCHE END CRITERE_RECHERCHE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DATE_NAISSANCE ELSE S.DATE_NAISSANCE END DATE_NAISSANCE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DEP_NAISSANCE_ID ELSE S.DEP_NAISSANCE_ID END DEP_NAISSANCE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.DISCIPLINE_ID ELSE S.DISCIPLINE_ID END DISCIPLINE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.EMAIL ELSE S.EMAIL END EMAIL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.GRADE_ID ELSE S.GRADE_ID END GRADE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.IBAN ELSE S.IBAN END IBAN,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_PATRONYMIQUE ELSE S.NOM_PATRONYMIQUE END NOM_PATRONYMIQUE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_USUEL ELSE S.NOM_USUEL END NOM_USUEL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NUMERO_INSEE ELSE S.NUMERO_INSEE END NUMERO_INSEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NUMERO_INSEE_CLE ELSE S.NUMERO_INSEE_CLE END NUMERO_INSEE_CLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NUMERO_INSEE_PROVISOIRE ELSE S.NUMERO_INSEE_PROVISOIRE END NUMERO_INSEE_PROVISOIRE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PAYS_NAISSANCE_ID ELSE S.PAYS_NAISSANCE_ID END PAYS_NAISSANCE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PAYS_NATIONALITE_ID ELSE S.PAYS_NATIONALITE_ID END PAYS_NATIONALITE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PRENOM ELSE S.PRENOM END PRENOM,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STATUT_ID ELSE S.STATUT_ID END STATUT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.SUPANN_EMP_ID ELSE S.SUPANN_EMP_ID END SUPANN_EMP_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TEL_MOBILE ELSE S.TEL_MOBILE END TEL_MOBILE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TEL_PRO ELSE S.TEL_PRO END TEL_PRO,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VILLE_NAISSANCE_CODE_INSEE ELSE S.VILLE_NAISSANCE_CODE_INSEE END VILLE_NAISSANCE_CODE_INSEE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VILLE_NAISSANCE_LIBELLE ELSE S.VILLE_NAISSANCE_LIBELLE END VILLE_NAISSANCE_LIBELLE,
    CASE WHEN D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL) THEN 1 ELSE 0 END U_ANNEE_ID,
    CASE WHEN D.BIC <> S.BIC OR (D.BIC IS NULL AND S.BIC IS NOT NULL) OR (D.BIC IS NOT NULL AND S.BIC IS NULL) THEN 1 ELSE 0 END U_BIC,
    CASE WHEN D.CIVILITE_ID <> S.CIVILITE_ID OR (D.CIVILITE_ID IS NULL AND S.CIVILITE_ID IS NOT NULL) OR (D.CIVILITE_ID IS NOT NULL AND S.CIVILITE_ID IS NULL) THEN 1 ELSE 0 END U_CIVILITE_ID,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.CRITERE_RECHERCHE <> S.CRITERE_RECHERCHE OR (D.CRITERE_RECHERCHE IS NULL AND S.CRITERE_RECHERCHE IS NOT NULL) OR (D.CRITERE_RECHERCHE IS NOT NULL AND S.CRITERE_RECHERCHE IS NULL) THEN 1 ELSE 0 END U_CRITERE_RECHERCHE,
    CASE WHEN D.DATE_NAISSANCE <> S.DATE_NAISSANCE OR (D.DATE_NAISSANCE IS NULL AND S.DATE_NAISSANCE IS NOT NULL) OR (D.DATE_NAISSANCE IS NOT NULL AND S.DATE_NAISSANCE IS NULL) THEN 1 ELSE 0 END U_DATE_NAISSANCE,
    CASE WHEN D.DEP_NAISSANCE_ID <> S.DEP_NAISSANCE_ID OR (D.DEP_NAISSANCE_ID IS NULL AND S.DEP_NAISSANCE_ID IS NOT NULL) OR (D.DEP_NAISSANCE_ID IS NOT NULL AND S.DEP_NAISSANCE_ID IS NULL) THEN 1 ELSE 0 END U_DEP_NAISSANCE_ID,
    CASE WHEN D.DISCIPLINE_ID <> S.DISCIPLINE_ID OR (D.DISCIPLINE_ID IS NULL AND S.DISCIPLINE_ID IS NOT NULL) OR (D.DISCIPLINE_ID IS NOT NULL AND S.DISCIPLINE_ID IS NULL) THEN 1 ELSE 0 END U_DISCIPLINE_ID,
    CASE WHEN D.EMAIL <> S.EMAIL OR (D.EMAIL IS NULL AND S.EMAIL IS NOT NULL) OR (D.EMAIL IS NOT NULL AND S.EMAIL IS NULL) THEN 1 ELSE 0 END U_EMAIL,
    CASE WHEN D.GRADE_ID <> S.GRADE_ID OR (D.GRADE_ID IS NULL AND S.GRADE_ID IS NOT NULL) OR (D.GRADE_ID IS NOT NULL AND S.GRADE_ID IS NULL) THEN 1 ELSE 0 END U_GRADE_ID,
    CASE WHEN D.IBAN <> S.IBAN OR (D.IBAN IS NULL AND S.IBAN IS NOT NULL) OR (D.IBAN IS NOT NULL AND S.IBAN IS NULL) THEN 1 ELSE 0 END U_IBAN,
    CASE WHEN D.NOM_PATRONYMIQUE <> S.NOM_PATRONYMIQUE OR (D.NOM_PATRONYMIQUE IS NULL AND S.NOM_PATRONYMIQUE IS NOT NULL) OR (D.NOM_PATRONYMIQUE IS NOT NULL AND S.NOM_PATRONYMIQUE IS NULL) THEN 1 ELSE 0 END U_NOM_PATRONYMIQUE,
    CASE WHEN D.NOM_USUEL <> S.NOM_USUEL OR (D.NOM_USUEL IS NULL AND S.NOM_USUEL IS NOT NULL) OR (D.NOM_USUEL IS NOT NULL AND S.NOM_USUEL IS NULL) THEN 1 ELSE 0 END U_NOM_USUEL,
    CASE WHEN D.NUMERO_INSEE <> S.NUMERO_INSEE OR (D.NUMERO_INSEE IS NULL AND S.NUMERO_INSEE IS NOT NULL) OR (D.NUMERO_INSEE IS NOT NULL AND S.NUMERO_INSEE IS NULL) THEN 1 ELSE 0 END U_NUMERO_INSEE,
    CASE WHEN D.NUMERO_INSEE_CLE <> S.NUMERO_INSEE_CLE OR (D.NUMERO_INSEE_CLE IS NULL AND S.NUMERO_INSEE_CLE IS NOT NULL) OR (D.NUMERO_INSEE_CLE IS NOT NULL AND S.NUMERO_INSEE_CLE IS NULL) THEN 1 ELSE 0 END U_NUMERO_INSEE_CLE,
    CASE WHEN D.NUMERO_INSEE_PROVISOIRE <> S.NUMERO_INSEE_PROVISOIRE OR (D.NUMERO_INSEE_PROVISOIRE IS NULL AND S.NUMERO_INSEE_PROVISOIRE IS NOT NULL) OR (D.NUMERO_INSEE_PROVISOIRE IS NOT NULL AND S.NUMERO_INSEE_PROVISOIRE IS NULL) THEN 1 ELSE 0 END U_NUMERO_INSEE_PROVISOIRE,
    CASE WHEN D.PAYS_NAISSANCE_ID <> S.PAYS_NAISSANCE_ID OR (D.PAYS_NAISSANCE_ID IS NULL AND S.PAYS_NAISSANCE_ID IS NOT NULL) OR (D.PAYS_NAISSANCE_ID IS NOT NULL AND S.PAYS_NAISSANCE_ID IS NULL) THEN 1 ELSE 0 END U_PAYS_NAISSANCE_ID,
    CASE WHEN D.PAYS_NATIONALITE_ID <> S.PAYS_NATIONALITE_ID OR (D.PAYS_NATIONALITE_ID IS NULL AND S.PAYS_NATIONALITE_ID IS NOT NULL) OR (D.PAYS_NATIONALITE_ID IS NOT NULL AND S.PAYS_NATIONALITE_ID IS NULL) THEN 1 ELSE 0 END U_PAYS_NATIONALITE_ID,
    CASE WHEN D.PRENOM <> S.PRENOM OR (D.PRENOM IS NULL AND S.PRENOM IS NOT NULL) OR (D.PRENOM IS NOT NULL AND S.PRENOM IS NULL) THEN 1 ELSE 0 END U_PRENOM,
    CASE WHEN D.STATUT_ID <> S.STATUT_ID OR (D.STATUT_ID IS NULL AND S.STATUT_ID IS NOT NULL) OR (D.STATUT_ID IS NOT NULL AND S.STATUT_ID IS NULL) THEN 1 ELSE 0 END U_STATUT_ID,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID,
    CASE WHEN D.SUPANN_EMP_ID <> S.SUPANN_EMP_ID OR (D.SUPANN_EMP_ID IS NULL AND S.SUPANN_EMP_ID IS NOT NULL) OR (D.SUPANN_EMP_ID IS NOT NULL AND S.SUPANN_EMP_ID IS NULL) THEN 1 ELSE 0 END U_SUPANN_EMP_ID,
    CASE WHEN D.TEL_MOBILE <> S.TEL_MOBILE OR (D.TEL_MOBILE IS NULL AND S.TEL_MOBILE IS NOT NULL) OR (D.TEL_MOBILE IS NOT NULL AND S.TEL_MOBILE IS NULL) THEN 1 ELSE 0 END U_TEL_MOBILE,
    CASE WHEN D.TEL_PRO <> S.TEL_PRO OR (D.TEL_PRO IS NULL AND S.TEL_PRO IS NOT NULL) OR (D.TEL_PRO IS NOT NULL AND S.TEL_PRO IS NULL) THEN 1 ELSE 0 END U_TEL_PRO,
    CASE WHEN D.VILLE_NAISSANCE_CODE_INSEE <> S.VILLE_NAISSANCE_CODE_INSEE OR (D.VILLE_NAISSANCE_CODE_INSEE IS NULL AND S.VILLE_NAISSANCE_CODE_INSEE IS NOT NULL) OR (D.VILLE_NAISSANCE_CODE_INSEE IS NOT NULL AND S.VILLE_NAISSANCE_CODE_INSEE IS NULL) THEN 1 ELSE 0 END U_VILLE_NAISSANCE_CODE_INSEE,
    CASE WHEN D.VILLE_NAISSANCE_LIBELLE <> S.VILLE_NAISSANCE_LIBELLE OR (D.VILLE_NAISSANCE_LIBELLE IS NULL AND S.VILLE_NAISSANCE_LIBELLE IS NOT NULL) OR (D.VILLE_NAISSANCE_LIBELLE IS NOT NULL AND S.VILLE_NAISSANCE_LIBELLE IS NULL) THEN 1 ELSE 0 END U_VILLE_NAISSANCE_LIBELLE
FROM
  INTERVENANT D
  FULL JOIN SRC_INTERVENANT S ON S.source_id = D.source_id AND S.source_code = D.source_code AND S.ANNEE_ID = d.ANNEE_ID
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL)
  OR D.BIC <> S.BIC OR (D.BIC IS NULL AND S.BIC IS NOT NULL) OR (D.BIC IS NOT NULL AND S.BIC IS NULL)
  OR D.CIVILITE_ID <> S.CIVILITE_ID OR (D.CIVILITE_ID IS NULL AND S.CIVILITE_ID IS NOT NULL) OR (D.CIVILITE_ID IS NOT NULL AND S.CIVILITE_ID IS NULL)
  OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.CRITERE_RECHERCHE <> S.CRITERE_RECHERCHE OR (D.CRITERE_RECHERCHE IS NULL AND S.CRITERE_RECHERCHE IS NOT NULL) OR (D.CRITERE_RECHERCHE IS NOT NULL AND S.CRITERE_RECHERCHE IS NULL)
  OR D.DATE_NAISSANCE <> S.DATE_NAISSANCE OR (D.DATE_NAISSANCE IS NULL AND S.DATE_NAISSANCE IS NOT NULL) OR (D.DATE_NAISSANCE IS NOT NULL AND S.DATE_NAISSANCE IS NULL)
  OR D.DEP_NAISSANCE_ID <> S.DEP_NAISSANCE_ID OR (D.DEP_NAISSANCE_ID IS NULL AND S.DEP_NAISSANCE_ID IS NOT NULL) OR (D.DEP_NAISSANCE_ID IS NOT NULL AND S.DEP_NAISSANCE_ID IS NULL)
  OR D.DISCIPLINE_ID <> S.DISCIPLINE_ID OR (D.DISCIPLINE_ID IS NULL AND S.DISCIPLINE_ID IS NOT NULL) OR (D.DISCIPLINE_ID IS NOT NULL AND S.DISCIPLINE_ID IS NULL)
  OR D.EMAIL <> S.EMAIL OR (D.EMAIL IS NULL AND S.EMAIL IS NOT NULL) OR (D.EMAIL IS NOT NULL AND S.EMAIL IS NULL)
  OR D.GRADE_ID <> S.GRADE_ID OR (D.GRADE_ID IS NULL AND S.GRADE_ID IS NOT NULL) OR (D.GRADE_ID IS NOT NULL AND S.GRADE_ID IS NULL)
  OR D.IBAN <> S.IBAN OR (D.IBAN IS NULL AND S.IBAN IS NOT NULL) OR (D.IBAN IS NOT NULL AND S.IBAN IS NULL)
  OR D.NOM_PATRONYMIQUE <> S.NOM_PATRONYMIQUE OR (D.NOM_PATRONYMIQUE IS NULL AND S.NOM_PATRONYMIQUE IS NOT NULL) OR (D.NOM_PATRONYMIQUE IS NOT NULL AND S.NOM_PATRONYMIQUE IS NULL)
  OR D.NOM_USUEL <> S.NOM_USUEL OR (D.NOM_USUEL IS NULL AND S.NOM_USUEL IS NOT NULL) OR (D.NOM_USUEL IS NOT NULL AND S.NOM_USUEL IS NULL)
  OR D.NUMERO_INSEE <> S.NUMERO_INSEE OR (D.NUMERO_INSEE IS NULL AND S.NUMERO_INSEE IS NOT NULL) OR (D.NUMERO_INSEE IS NOT NULL AND S.NUMERO_INSEE IS NULL)
  OR D.NUMERO_INSEE_CLE <> S.NUMERO_INSEE_CLE OR (D.NUMERO_INSEE_CLE IS NULL AND S.NUMERO_INSEE_CLE IS NOT NULL) OR (D.NUMERO_INSEE_CLE IS NOT NULL AND S.NUMERO_INSEE_CLE IS NULL)
  OR D.NUMERO_INSEE_PROVISOIRE <> S.NUMERO_INSEE_PROVISOIRE OR (D.NUMERO_INSEE_PROVISOIRE IS NULL AND S.NUMERO_INSEE_PROVISOIRE IS NOT NULL) OR (D.NUMERO_INSEE_PROVISOIRE IS NOT NULL AND S.NUMERO_INSEE_PROVISOIRE IS NULL)
  OR D.PAYS_NAISSANCE_ID <> S.PAYS_NAISSANCE_ID OR (D.PAYS_NAISSANCE_ID IS NULL AND S.PAYS_NAISSANCE_ID IS NOT NULL) OR (D.PAYS_NAISSANCE_ID IS NOT NULL AND S.PAYS_NAISSANCE_ID IS NULL)
  OR D.PAYS_NATIONALITE_ID <> S.PAYS_NATIONALITE_ID OR (D.PAYS_NATIONALITE_ID IS NULL AND S.PAYS_NATIONALITE_ID IS NOT NULL) OR (D.PAYS_NATIONALITE_ID IS NOT NULL AND S.PAYS_NATIONALITE_ID IS NULL)
  OR D.PRENOM <> S.PRENOM OR (D.PRENOM IS NULL AND S.PRENOM IS NOT NULL) OR (D.PRENOM IS NOT NULL AND S.PRENOM IS NULL)
  OR D.STATUT_ID <> S.STATUT_ID OR (D.STATUT_ID IS NULL AND S.STATUT_ID IS NOT NULL) OR (D.STATUT_ID IS NOT NULL AND S.STATUT_ID IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
  OR D.SUPANN_EMP_ID <> S.SUPANN_EMP_ID OR (D.SUPANN_EMP_ID IS NULL AND S.SUPANN_EMP_ID IS NOT NULL) OR (D.SUPANN_EMP_ID IS NOT NULL AND S.SUPANN_EMP_ID IS NULL)
  OR D.TEL_MOBILE <> S.TEL_MOBILE OR (D.TEL_MOBILE IS NULL AND S.TEL_MOBILE IS NOT NULL) OR (D.TEL_MOBILE IS NOT NULL AND S.TEL_MOBILE IS NULL)
  OR D.TEL_PRO <> S.TEL_PRO OR (D.TEL_PRO IS NULL AND S.TEL_PRO IS NOT NULL) OR (D.TEL_PRO IS NOT NULL AND S.TEL_PRO IS NULL)
  OR D.VILLE_NAISSANCE_CODE_INSEE <> S.VILLE_NAISSANCE_CODE_INSEE OR (D.VILLE_NAISSANCE_CODE_INSEE IS NULL AND S.VILLE_NAISSANCE_CODE_INSEE IS NOT NULL) OR (D.VILLE_NAISSANCE_CODE_INSEE IS NOT NULL AND S.VILLE_NAISSANCE_CODE_INSEE IS NULL)
  OR D.VILLE_NAISSANCE_LIBELLE <> S.VILLE_NAISSANCE_LIBELLE OR (D.VILLE_NAISSANCE_LIBELLE IS NULL AND S.VILLE_NAISSANCE_LIBELLE IS NOT NULL) OR (D.VILLE_NAISSANCE_LIBELLE IS NOT NULL AND S.VILLE_NAISSANCE_LIBELLE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_LIEN
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_LIEN" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "NOEUD_INF_ID", "NOEUD_SUP_ID", "U_NOEUD_INF_ID", "U_NOEUD_SUP_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."NOEUD_INF_ID",diff."NOEUD_SUP_ID",diff."U_NOEUD_INF_ID",diff."U_NOEUD_SUP_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND rt.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOEUD_INF_ID ELSE S.NOEUD_INF_ID END NOEUD_INF_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOEUD_SUP_ID ELSE S.NOEUD_SUP_ID END NOEUD_SUP_ID,
    CASE WHEN D.NOEUD_INF_ID <> S.NOEUD_INF_ID OR (D.NOEUD_INF_ID IS NULL AND S.NOEUD_INF_ID IS NOT NULL) OR (D.NOEUD_INF_ID IS NOT NULL AND S.NOEUD_INF_ID IS NULL) THEN 1 ELSE 0 END U_NOEUD_INF_ID,
    CASE WHEN D.NOEUD_SUP_ID <> S.NOEUD_SUP_ID OR (D.NOEUD_SUP_ID IS NULL AND S.NOEUD_SUP_ID IS NOT NULL) OR (D.NOEUD_SUP_ID IS NOT NULL AND S.NOEUD_SUP_ID IS NULL) THEN 1 ELSE 0 END U_NOEUD_SUP_ID
FROM
  LIEN D
  LEFT JOIN NOEUD rt ON rt.ID = d.NOEUD_SUP_ID
  FULL JOIN SRC_LIEN S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.NOEUD_INF_ID <> S.NOEUD_INF_ID OR (D.NOEUD_INF_ID IS NULL AND S.NOEUD_INF_ID IS NOT NULL) OR (D.NOEUD_INF_ID IS NOT NULL AND S.NOEUD_INF_ID IS NULL)
  OR D.NOEUD_SUP_ID <> S.NOEUD_SUP_ID OR (D.NOEUD_SUP_ID IS NULL AND S.NOEUD_SUP_ID IS NOT NULL) OR (D.NOEUD_SUP_ID IS NOT NULL AND S.NOEUD_SUP_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_NOEUD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_NOEUD" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ANNEE_ID", "CODE", "ELEMENT_PEDAGOGIQUE_ID", "ETAPE_ID", "LIBELLE", "LISTE", "U_ANNEE_ID", "U_CODE", "U_ELEMENT_PEDAGOGIQUE_ID", "U_ETAPE_ID", "U_LIBELLE", "U_LISTE") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ANNEE_ID",diff."CODE",diff."ELEMENT_PEDAGOGIQUE_ID",diff."ETAPE_ID",diff."LIBELLE",diff."LISTE",diff."U_ANNEE_ID",diff."U_CODE",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_ETAPE_ID",diff."U_LIBELLE",diff."U_LISTE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND d.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ANNEE_ID ELSE S.ANNEE_ID END ANNEE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETAPE_ID ELSE S.ETAPE_ID END ETAPE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE ELSE S.LIBELLE END LIBELLE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LISTE ELSE S.LISTE END LISTE,
    CASE WHEN D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL) THEN 1 ELSE 0 END U_ANNEE_ID,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.ETAPE_ID <> S.ETAPE_ID OR (D.ETAPE_ID IS NULL AND S.ETAPE_ID IS NOT NULL) OR (D.ETAPE_ID IS NOT NULL AND S.ETAPE_ID IS NULL) THEN 1 ELSE 0 END U_ETAPE_ID,
    CASE WHEN D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL) THEN 1 ELSE 0 END U_LIBELLE,
    CASE WHEN D.LISTE <> S.LISTE OR (D.LISTE IS NULL AND S.LISTE IS NOT NULL) OR (D.LISTE IS NOT NULL AND S.LISTE IS NULL) THEN 1 ELSE 0 END U_LISTE
FROM
  NOEUD D
  FULL JOIN SRC_NOEUD S ON S.source_id = D.source_id AND S.source_code = D.source_code AND S.ANNEE_ID = d.ANNEE_ID
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ANNEE_ID <> S.ANNEE_ID OR (D.ANNEE_ID IS NULL AND S.ANNEE_ID IS NOT NULL) OR (D.ANNEE_ID IS NOT NULL AND S.ANNEE_ID IS NULL)
  OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.ETAPE_ID <> S.ETAPE_ID OR (D.ETAPE_ID IS NULL AND S.ETAPE_ID IS NOT NULL) OR (D.ETAPE_ID IS NOT NULL AND S.ETAPE_ID IS NULL)
  OR D.LIBELLE <> S.LIBELLE OR (D.LIBELLE IS NULL AND S.LIBELLE IS NOT NULL) OR (D.LIBELLE IS NOT NULL AND S.LIBELLE IS NULL)
  OR D.LISTE <> S.LISTE OR (D.LISTE IS NULL AND S.LISTE IS NOT NULL) OR (D.LISTE IS NOT NULL AND S.LISTE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_PAYS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_PAYS" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "LIBELLE_COURT", "LIBELLE_LONG", "TEMOIN_UE", "VALIDITE_DEBUT", "VALIDITE_FIN", "U_LIBELLE_COURT", "U_LIBELLE_LONG", "U_TEMOIN_UE", "U_VALIDITE_DEBUT", "U_VALIDITE_FIN") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."LIBELLE_COURT",diff."LIBELLE_LONG",diff."TEMOIN_UE",diff."VALIDITE_DEBUT",diff."VALIDITE_FIN",diff."U_LIBELLE_COURT",diff."U_LIBELLE_LONG",diff."U_TEMOIN_UE",diff."U_VALIDITE_DEBUT",diff."U_VALIDITE_FIN" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_COURT ELSE S.LIBELLE_COURT END LIBELLE_COURT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_LONG ELSE S.LIBELLE_LONG END LIBELLE_LONG,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TEMOIN_UE ELSE S.TEMOIN_UE END TEMOIN_UE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VALIDITE_DEBUT ELSE S.VALIDITE_DEBUT END VALIDITE_DEBUT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VALIDITE_FIN ELSE S.VALIDITE_FIN END VALIDITE_FIN,
    CASE WHEN D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL) THEN 1 ELSE 0 END U_LIBELLE_COURT,
    CASE WHEN D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL) THEN 1 ELSE 0 END U_LIBELLE_LONG,
    CASE WHEN D.TEMOIN_UE <> S.TEMOIN_UE OR (D.TEMOIN_UE IS NULL AND S.TEMOIN_UE IS NOT NULL) OR (D.TEMOIN_UE IS NOT NULL AND S.TEMOIN_UE IS NULL) THEN 1 ELSE 0 END U_TEMOIN_UE,
    CASE WHEN D.VALIDITE_DEBUT <> S.VALIDITE_DEBUT OR (D.VALIDITE_DEBUT IS NULL AND S.VALIDITE_DEBUT IS NOT NULL) OR (D.VALIDITE_DEBUT IS NOT NULL AND S.VALIDITE_DEBUT IS NULL) THEN 1 ELSE 0 END U_VALIDITE_DEBUT,
    CASE WHEN D.VALIDITE_FIN <> S.VALIDITE_FIN OR (D.VALIDITE_FIN IS NULL AND S.VALIDITE_FIN IS NOT NULL) OR (D.VALIDITE_FIN IS NOT NULL AND S.VALIDITE_FIN IS NULL) THEN 1 ELSE 0 END U_VALIDITE_FIN
FROM
  PAYS D
  FULL JOIN SRC_PAYS S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL)
  OR D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL)
  OR D.TEMOIN_UE <> S.TEMOIN_UE OR (D.TEMOIN_UE IS NULL AND S.TEMOIN_UE IS NOT NULL) OR (D.TEMOIN_UE IS NOT NULL AND S.TEMOIN_UE IS NULL)
  OR D.VALIDITE_DEBUT <> S.VALIDITE_DEBUT OR (D.VALIDITE_DEBUT IS NULL AND S.VALIDITE_DEBUT IS NOT NULL) OR (D.VALIDITE_DEBUT IS NOT NULL AND S.VALIDITE_DEBUT IS NULL)
  OR D.VALIDITE_FIN <> S.VALIDITE_FIN OR (D.VALIDITE_FIN IS NULL AND S.VALIDITE_FIN IS NOT NULL) OR (D.VALIDITE_FIN IS NOT NULL AND S.VALIDITE_FIN IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_PERSONNEL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_PERSONNEL" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "CIVILITE_ID", "CODE", "EMAIL", "NOM_PATRONYMIQUE", "NOM_USUEL", "PRENOM", "STRUCTURE_ID", "SUPANN_EMP_ID", "U_CIVILITE_ID", "U_CODE", "U_EMAIL", "U_NOM_PATRONYMIQUE", "U_NOM_USUEL", "U_PRENOM", "U_STRUCTURE_ID", "U_SUPANN_EMP_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."CIVILITE_ID",diff."CODE",diff."EMAIL",diff."NOM_PATRONYMIQUE",diff."NOM_USUEL",diff."PRENOM",diff."STRUCTURE_ID",diff."SUPANN_EMP_ID",diff."U_CIVILITE_ID",diff."U_CODE",diff."U_EMAIL",diff."U_NOM_PATRONYMIQUE",diff."U_NOM_USUEL",diff."U_PRENOM",diff."U_STRUCTURE_ID",diff."U_SUPANN_EMP_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CIVILITE_ID ELSE S.CIVILITE_ID END CIVILITE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.CODE ELSE S.CODE END CODE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.EMAIL ELSE S.EMAIL END EMAIL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_PATRONYMIQUE ELSE S.NOM_PATRONYMIQUE END NOM_PATRONYMIQUE,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NOM_USUEL ELSE S.NOM_USUEL END NOM_USUEL,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PRENOM ELSE S.PRENOM END PRENOM,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_ID ELSE S.STRUCTURE_ID END STRUCTURE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.SUPANN_EMP_ID ELSE S.SUPANN_EMP_ID END SUPANN_EMP_ID,
    CASE WHEN D.CIVILITE_ID <> S.CIVILITE_ID OR (D.CIVILITE_ID IS NULL AND S.CIVILITE_ID IS NOT NULL) OR (D.CIVILITE_ID IS NOT NULL AND S.CIVILITE_ID IS NULL) THEN 1 ELSE 0 END U_CIVILITE_ID,
    CASE WHEN D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL) THEN 1 ELSE 0 END U_CODE,
    CASE WHEN D.EMAIL <> S.EMAIL OR (D.EMAIL IS NULL AND S.EMAIL IS NOT NULL) OR (D.EMAIL IS NOT NULL AND S.EMAIL IS NULL) THEN 1 ELSE 0 END U_EMAIL,
    CASE WHEN D.NOM_PATRONYMIQUE <> S.NOM_PATRONYMIQUE OR (D.NOM_PATRONYMIQUE IS NULL AND S.NOM_PATRONYMIQUE IS NOT NULL) OR (D.NOM_PATRONYMIQUE IS NOT NULL AND S.NOM_PATRONYMIQUE IS NULL) THEN 1 ELSE 0 END U_NOM_PATRONYMIQUE,
    CASE WHEN D.NOM_USUEL <> S.NOM_USUEL OR (D.NOM_USUEL IS NULL AND S.NOM_USUEL IS NOT NULL) OR (D.NOM_USUEL IS NOT NULL AND S.NOM_USUEL IS NULL) THEN 1 ELSE 0 END U_NOM_USUEL,
    CASE WHEN D.PRENOM <> S.PRENOM OR (D.PRENOM IS NULL AND S.PRENOM IS NOT NULL) OR (D.PRENOM IS NOT NULL AND S.PRENOM IS NULL) THEN 1 ELSE 0 END U_PRENOM,
    CASE WHEN D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_ID,
    CASE WHEN D.SUPANN_EMP_ID <> S.SUPANN_EMP_ID OR (D.SUPANN_EMP_ID IS NULL AND S.SUPANN_EMP_ID IS NOT NULL) OR (D.SUPANN_EMP_ID IS NOT NULL AND S.SUPANN_EMP_ID IS NULL) THEN 1 ELSE 0 END U_SUPANN_EMP_ID
FROM
  PERSONNEL D
  FULL JOIN SRC_PERSONNEL S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.CIVILITE_ID <> S.CIVILITE_ID OR (D.CIVILITE_ID IS NULL AND S.CIVILITE_ID IS NOT NULL) OR (D.CIVILITE_ID IS NOT NULL AND S.CIVILITE_ID IS NULL)
  OR D.CODE <> S.CODE OR (D.CODE IS NULL AND S.CODE IS NOT NULL) OR (D.CODE IS NOT NULL AND S.CODE IS NULL)
  OR D.EMAIL <> S.EMAIL OR (D.EMAIL IS NULL AND S.EMAIL IS NOT NULL) OR (D.EMAIL IS NOT NULL AND S.EMAIL IS NULL)
  OR D.NOM_PATRONYMIQUE <> S.NOM_PATRONYMIQUE OR (D.NOM_PATRONYMIQUE IS NULL AND S.NOM_PATRONYMIQUE IS NOT NULL) OR (D.NOM_PATRONYMIQUE IS NOT NULL AND S.NOM_PATRONYMIQUE IS NULL)
  OR D.NOM_USUEL <> S.NOM_USUEL OR (D.NOM_USUEL IS NULL AND S.NOM_USUEL IS NOT NULL) OR (D.NOM_USUEL IS NOT NULL AND S.NOM_USUEL IS NULL)
  OR D.PRENOM <> S.PRENOM OR (D.PRENOM IS NULL AND S.PRENOM IS NOT NULL) OR (D.PRENOM IS NOT NULL AND S.PRENOM IS NULL)
  OR D.STRUCTURE_ID <> S.STRUCTURE_ID OR (D.STRUCTURE_ID IS NULL AND S.STRUCTURE_ID IS NOT NULL) OR (D.STRUCTURE_ID IS NOT NULL AND S.STRUCTURE_ID IS NULL)
  OR D.SUPANN_EMP_ID <> S.SUPANN_EMP_ID OR (D.SUPANN_EMP_ID IS NULL AND S.SUPANN_EMP_ID IS NOT NULL) OR (D.SUPANN_EMP_ID IS NOT NULL AND S.SUPANN_EMP_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_STRUCTURE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_STRUCTURE" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ETABLISSEMENT_ID", "LIBELLE_COURT", "LIBELLE_LONG", "NIVEAU", "PARENTE_ID", "STRUCTURE_NIV2_ID", "TYPE_ID", "U_ETABLISSEMENT_ID", "U_LIBELLE_COURT", "U_LIBELLE_LONG", "U_NIVEAU", "U_PARENTE_ID", "U_STRUCTURE_NIV2_ID", "U_TYPE_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ETABLISSEMENT_ID",diff."LIBELLE_COURT",diff."LIBELLE_LONG",diff."NIVEAU",diff."PARENTE_ID",diff."STRUCTURE_NIV2_ID",diff."TYPE_ID",diff."U_ETABLISSEMENT_ID",diff."U_LIBELLE_COURT",diff."U_LIBELLE_LONG",diff."U_NIVEAU",diff."U_PARENTE_ID",diff."U_STRUCTURE_NIV2_ID",diff."U_TYPE_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ETABLISSEMENT_ID ELSE S.ETABLISSEMENT_ID END ETABLISSEMENT_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_COURT ELSE S.LIBELLE_COURT END LIBELLE_COURT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_LONG ELSE S.LIBELLE_LONG END LIBELLE_LONG,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.NIVEAU ELSE S.NIVEAU END NIVEAU,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.PARENTE_ID ELSE S.PARENTE_ID END PARENTE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.STRUCTURE_NIV2_ID ELSE S.STRUCTURE_NIV2_ID END STRUCTURE_NIV2_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_ID ELSE S.TYPE_ID END TYPE_ID,
    CASE WHEN D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL) THEN 1 ELSE 0 END U_ETABLISSEMENT_ID,
    CASE WHEN D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL) THEN 1 ELSE 0 END U_LIBELLE_COURT,
    CASE WHEN D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL) THEN 1 ELSE 0 END U_LIBELLE_LONG,
    CASE WHEN D.NIVEAU <> S.NIVEAU OR (D.NIVEAU IS NULL AND S.NIVEAU IS NOT NULL) OR (D.NIVEAU IS NOT NULL AND S.NIVEAU IS NULL) THEN 1 ELSE 0 END U_NIVEAU,
    CASE WHEN D.PARENTE_ID <> S.PARENTE_ID OR (D.PARENTE_ID IS NULL AND S.PARENTE_ID IS NOT NULL) OR (D.PARENTE_ID IS NOT NULL AND S.PARENTE_ID IS NULL) THEN 1 ELSE 0 END U_PARENTE_ID,
    CASE WHEN D.STRUCTURE_NIV2_ID <> S.STRUCTURE_NIV2_ID OR (D.STRUCTURE_NIV2_ID IS NULL AND S.STRUCTURE_NIV2_ID IS NOT NULL) OR (D.STRUCTURE_NIV2_ID IS NOT NULL AND S.STRUCTURE_NIV2_ID IS NULL) THEN 1 ELSE 0 END U_STRUCTURE_NIV2_ID,
    CASE WHEN D.TYPE_ID <> S.TYPE_ID OR (D.TYPE_ID IS NULL AND S.TYPE_ID IS NOT NULL) OR (D.TYPE_ID IS NOT NULL AND S.TYPE_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_ID
FROM
  STRUCTURE D
  FULL JOIN SRC_STRUCTURE S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ETABLISSEMENT_ID <> S.ETABLISSEMENT_ID OR (D.ETABLISSEMENT_ID IS NULL AND S.ETABLISSEMENT_ID IS NOT NULL) OR (D.ETABLISSEMENT_ID IS NOT NULL AND S.ETABLISSEMENT_ID IS NULL)
  OR D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL)
  OR D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL)
  OR D.NIVEAU <> S.NIVEAU OR (D.NIVEAU IS NULL AND S.NIVEAU IS NOT NULL) OR (D.NIVEAU IS NOT NULL AND S.NIVEAU IS NULL)
  OR D.PARENTE_ID <> S.PARENTE_ID OR (D.PARENTE_ID IS NULL AND S.PARENTE_ID IS NOT NULL) OR (D.PARENTE_ID IS NOT NULL AND S.PARENTE_ID IS NULL)
  OR D.STRUCTURE_NIV2_ID <> S.STRUCTURE_NIV2_ID OR (D.STRUCTURE_NIV2_ID IS NULL AND S.STRUCTURE_NIV2_ID IS NOT NULL) OR (D.STRUCTURE_NIV2_ID IS NOT NULL AND S.STRUCTURE_NIV2_ID IS NULL)
  OR D.TYPE_ID <> S.TYPE_ID OR (D.TYPE_ID IS NULL AND S.TYPE_ID IS NOT NULL) OR (D.TYPE_ID IS NOT NULL AND S.TYPE_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_TYPE_FORMATION
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_TYPE_FORMATION" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "GROUPE_ID", "LIBELLE_COURT", "LIBELLE_LONG", "U_GROUPE_ID", "U_LIBELLE_COURT", "U_LIBELLE_LONG") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."GROUPE_ID",diff."LIBELLE_COURT",diff."LIBELLE_LONG",diff."U_GROUPE_ID",diff."U_LIBELLE_COURT",diff."U_LIBELLE_LONG" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.GROUPE_ID ELSE S.GROUPE_ID END GROUPE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_COURT ELSE S.LIBELLE_COURT END LIBELLE_COURT,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.LIBELLE_LONG ELSE S.LIBELLE_LONG END LIBELLE_LONG,
    CASE WHEN D.GROUPE_ID <> S.GROUPE_ID OR (D.GROUPE_ID IS NULL AND S.GROUPE_ID IS NOT NULL) OR (D.GROUPE_ID IS NOT NULL AND S.GROUPE_ID IS NULL) THEN 1 ELSE 0 END U_GROUPE_ID,
    CASE WHEN D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL) THEN 1 ELSE 0 END U_LIBELLE_COURT,
    CASE WHEN D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL) THEN 1 ELSE 0 END U_LIBELLE_LONG
FROM
  TYPE_FORMATION D
  FULL JOIN SRC_TYPE_FORMATION S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.GROUPE_ID <> S.GROUPE_ID OR (D.GROUPE_ID IS NULL AND S.GROUPE_ID IS NOT NULL) OR (D.GROUPE_ID IS NOT NULL AND S.GROUPE_ID IS NULL)
  OR D.LIBELLE_COURT <> S.LIBELLE_COURT OR (D.LIBELLE_COURT IS NULL AND S.LIBELLE_COURT IS NOT NULL) OR (D.LIBELLE_COURT IS NOT NULL AND S.LIBELLE_COURT IS NULL)
  OR D.LIBELLE_LONG <> S.LIBELLE_LONG OR (D.LIBELLE_LONG IS NULL AND S.LIBELLE_LONG IS NOT NULL) OR (D.LIBELLE_LONG IS NOT NULL AND S.LIBELLE_LONG IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_TYPE_INTERVENTION_EP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_TYPE_INTERVENTION_EP" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ELEMENT_PEDAGOGIQUE_ID", "TYPE_INTERVENTION_ID", "VISIBLE", "U_ELEMENT_PEDAGOGIQUE_ID", "U_TYPE_INTERVENTION_ID", "U_VISIBLE") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ELEMENT_PEDAGOGIQUE_ID",diff."TYPE_INTERVENTION_ID",diff."VISIBLE",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_TYPE_INTERVENTION_ID",diff."U_VISIBLE" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND rt.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_INTERVENTION_ID ELSE S.TYPE_INTERVENTION_ID END TYPE_INTERVENTION_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.VISIBLE ELSE S.VISIBLE END VISIBLE,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.TYPE_INTERVENTION_ID <> S.TYPE_INTERVENTION_ID OR (D.TYPE_INTERVENTION_ID IS NULL AND S.TYPE_INTERVENTION_ID IS NOT NULL) OR (D.TYPE_INTERVENTION_ID IS NOT NULL AND S.TYPE_INTERVENTION_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_INTERVENTION_ID,
    CASE WHEN D.VISIBLE <> S.VISIBLE OR (D.VISIBLE IS NULL AND S.VISIBLE IS NOT NULL) OR (D.VISIBLE IS NOT NULL AND S.VISIBLE IS NULL) THEN 1 ELSE 0 END U_VISIBLE
FROM
  TYPE_INTERVENTION_EP D
  LEFT JOIN ELEMENT_PEDAGOGIQUE rt ON rt.ID = d.ELEMENT_PEDAGOGIQUE_ID
  FULL JOIN SRC_TYPE_INTERVENTION_EP S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.TYPE_INTERVENTION_ID <> S.TYPE_INTERVENTION_ID OR (D.TYPE_INTERVENTION_ID IS NULL AND S.TYPE_INTERVENTION_ID IS NOT NULL) OR (D.TYPE_INTERVENTION_ID IS NOT NULL AND S.TYPE_INTERVENTION_ID IS NULL)
  OR D.VISIBLE <> S.VISIBLE OR (D.VISIBLE IS NULL AND S.VISIBLE IS NOT NULL) OR (D.VISIBLE IS NOT NULL AND S.VISIBLE IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_DIFF_TYPE_MODULATEUR_EP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_DIFF_TYPE_MODULATEUR_EP" ("ID", "SOURCE_ID", "SOURCE_CODE", "IMPORT_ACTION", "ELEMENT_PEDAGOGIQUE_ID", "TYPE_MODULATEUR_ID", "U_ELEMENT_PEDAGOGIQUE_ID", "U_TYPE_MODULATEUR_ID") AS 
  select diff."ID",diff."SOURCE_ID",diff."SOURCE_CODE",diff."IMPORT_ACTION",diff."ELEMENT_PEDAGOGIQUE_ID",diff."TYPE_MODULATEUR_ID",diff."U_ELEMENT_PEDAGOGIQUE_ID",diff."U_TYPE_MODULATEUR_ID" from (SELECT
  COALESCE( D.id, S.id ) id,
  COALESCE( S.source_id, D.source_id ) source_id,
  COALESCE( S.source_code, D.source_code ) source_code,
CASE
    WHEN S.source_code IS NOT NULL AND D.source_code IS NULL THEN 'insert'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) THEN 'update'
    WHEN S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE) AND rt.ANNEE_ID = UNICAEN_IMPORT.get_current_annee THEN 'delete'
    WHEN S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE THEN 'undelete' END import_action,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.ELEMENT_PEDAGOGIQUE_ID ELSE S.ELEMENT_PEDAGOGIQUE_ID END ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN S.source_code IS NULL AND D.source_code IS NOT NULL THEN D.TYPE_MODULATEUR_ID ELSE S.TYPE_MODULATEUR_ID END TYPE_MODULATEUR_ID,
    CASE WHEN D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL) THEN 1 ELSE 0 END U_ELEMENT_PEDAGOGIQUE_ID,
    CASE WHEN D.TYPE_MODULATEUR_ID <> S.TYPE_MODULATEUR_ID OR (D.TYPE_MODULATEUR_ID IS NULL AND S.TYPE_MODULATEUR_ID IS NOT NULL) OR (D.TYPE_MODULATEUR_ID IS NOT NULL AND S.TYPE_MODULATEUR_ID IS NULL) THEN 1 ELSE 0 END U_TYPE_MODULATEUR_ID
FROM
  TYPE_MODULATEUR_EP D
  LEFT JOIN ELEMENT_PEDAGOGIQUE rt ON rt.ID = d.ELEMENT_PEDAGOGIQUE_ID
  FULL JOIN SRC_TYPE_MODULATEUR_EP S ON S.source_id = D.source_id AND S.source_code = D.source_code
WHERE
       (S.source_code IS NOT NULL AND D.source_code IS NOT NULL AND D.histo_destruction IS NOT NULL AND D.histo_destruction <= SYSDATE)
    OR (S.source_code IS NULL AND D.source_code IS NOT NULL AND (D.histo_destruction IS NULL OR D.histo_destruction > SYSDATE))
    OR (S.source_code IS NOT NULL AND D.source_code IS NULL)
    OR D.ELEMENT_PEDAGOGIQUE_ID <> S.ELEMENT_PEDAGOGIQUE_ID OR (D.ELEMENT_PEDAGOGIQUE_ID IS NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL) OR (D.ELEMENT_PEDAGOGIQUE_ID IS NOT NULL AND S.ELEMENT_PEDAGOGIQUE_ID IS NULL)
  OR D.TYPE_MODULATEUR_ID <> S.TYPE_MODULATEUR_ID OR (D.TYPE_MODULATEUR_ID IS NULL AND S.TYPE_MODULATEUR_ID IS NOT NULL) OR (D.TYPE_MODULATEUR_ID IS NOT NULL AND S.TYPE_MODULATEUR_ID IS NULL)
) diff JOIN source on source.id = diff.source_id WHERE import_action IS NOT NULL AND source.importable = 1;
--------------------------------------------------------
--  DDL for View V_ELEMENT_TYPE_HEURES
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_ELEMENT_TYPE_HEURES" ("ELEMENT_PEDAGOGIQUE_ID", "TYPE_HEURES_ID") AS 
  select ep.id element_pedagogique_id, th.id type_heures_id
  from element_pedagogique ep
  join type_heures th on th.code = decode(ep.fi, 1, 'fi', null)
union all
  select ep.id element_pedagogique_id, th.id type_heures_id
  from element_pedagogique ep
  join type_heures th on th.code = decode(ep.fc, 1, 'fc', null)
union all
  select ep.id element_pedagogique_id, th.id type_heures_id
  from element_pedagogique ep
  join type_heures th on th.code = decode(ep.fa, 1, 'fa', null);
--------------------------------------------------------
--  DDL for View V_ELEMENT_TYPE_INTERVENTION
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_ELEMENT_TYPE_INTERVENTION" ("ELEMENT_PEDAGOGIQUE_ID", "TYPE_INTERVENTION_ID") AS 
  SELECT
  ep.id element_pedagogique_id,
  ti.id type_intervention_id
FROM
            element_pedagogique            ep
  JOIN      structure                    s_ep ON s_ep.id = ep.structure_id
  JOIN      type_intervention              ti ON 1=1
  
  LEFT JOIN type_intervention_ep        ti_ep ON ti_ep.element_pedagogique_id = ep.id 
                                             AND ti_ep.type_intervention_id = ti.id
                                             AND 1 = ose_divers.comprise_entre( ti_ep.histo_creation, ti_ep.histo_destruction )
  
  LEFT JOIN type_intervention_structure  ti_s ON s_ep.structure_niv2_id = ti_s.structure_id 
                                             AND ti_s.type_intervention_id = ti.id
                                             AND 1 = ose_divers.comprise_entre( ti_s.histo_creation, ti_s.histo_destruction )
                                             AND ep.annee_id BETWEEN GREATEST(NVL(ti_s.annee_debut_id,0),ep.annee_id) AND LEAST(NVL(ti_s.annee_fin_id,9999),ep.annee_id)
WHERE
  CASE
    WHEN TI_EP.VISIBLE IS NULL THEN
      CASE
        WHEN TI_S.VISIBLE IS NULL THEN TI.VISIBLE
        ELSE TI_S.VISIBLE
      END
    ELSE TI_EP.VISIBLE
  END = 1
ORDER BY
  TI.ORDRE;
--------------------------------------------------------
--  DDL for View V_ELEMENT_TYPE_MODULATEUR
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_ELEMENT_TYPE_MODULATEUR" ("ELEMENT_PEDAGOGIQUE_ID", "TYPE_MODULATEUR_ID") AS 
  SELECT
  ep.id element_pedagogique_id,
  tms.type_modulateur_id type_modulateur_id
FROM
       element_pedagogique        ep
  JOIN structure                   s ON s.id = ep.structure_id                    
                                    AND ose_divers.comprise_entre( s.histo_creation, s.histo_destruction ) = 1
                                    
  JOIN type_modulateur_structure tms ON tms.structure_id = s.id 
                                    AND ose_divers.comprise_entre( tms.histo_creation, tms.histo_destruction ) = 1
                                    AND ep.annee_id BETWEEN GREATEST(NVL(tms.annee_debut_id,0),ep.annee_id) AND LEAST(NVL(tms.annee_fin_id,9999),ep.annee_id)

UNION

SELECT
  tm_ep.element_pedagogique_id element_pedagogique_id,
  tm_ep.type_modulateur_id type_modulateur_id
FROM
  type_modulateur_ep tm_ep 
WHERE
  ose_divers.comprise_entre( tm_ep.histo_creation, tm_ep.histo_destruction ) = 1;
--------------------------------------------------------
--  DDL for View V_ETAPE_NIVEAU_FORMATION
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_ETAPE_NIVEAU_FORMATION" ("ETAPE_ID", "NIVEAU_FORMATION_ID") AS 
  SELECT
  e.id etape_id,
  nf.id niveau_formation_id
FROM
  etape e
  JOIN type_formation tf ON tf.id = e.type_formation_id AND ose_divers.comprise_entre( tf.histo_creation, tf.histo_destruction ) = 1
  JOIN groupe_type_formation gtf ON gtf.id = tf.groupe_id AND ose_divers.comprise_entre( gtf.histo_creation, gtf.histo_destruction ) = 1
  JOIN v_niveau_formation nf ON nf.code = gtf.libelle_court || e.niveau
WHERE
  ose_divers.comprise_entre( e.histo_creation, e.histo_destruction ) = 1
  AND gtf.pertinence_niveau = 1
  AND e.niveau IS NOT NULL;
--------------------------------------------------------
--  DDL for View V_ETAPE_TYPE_MODULATEUR
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_ETAPE_TYPE_MODULATEUR" ("TYPE_MODULATEUR_ID", "ETAPE_ID") AS 
  SELECT DISTINCT
  etm.type_modulateur_id type_modulateur_id,
  ep.etape_id etape_id
FROM
  v_element_type_modulateur etm
  JOIN element_pedagogique ep ON ep.id = etm.element_pedagogique_id AND ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction ) = 1;
--------------------------------------------------------
--  DDL for View V_ETAT_PAIEMENT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_ETAT_PAIEMENT" ("PERIODE_PAIEMENT_ID", "STRUCTURE_ID", "INTERVENANT_TYPE_ID", "INTERVENANT_ID", "ANNEE_ID", "CENTRE_COUT_ID", "DOMAINE_FONCTIONNEL_ID", "ETAT", "STRUCTURE_LIBELLE", "DATE_MISE_EN_PAIEMENT", "PERIODE_PAIEMENT_LIBELLE", "INTERVENANT_TYPE", "INTERVENANT_CODE", "INTERVENANT_NOM", "INTERVENANT_NUMERO_INSEE", "CENTRE_COUT_CODE", "CENTRE_COUT_LIBELLE", "DOMAINE_FONCTIONNEL_CODE", "DOMAINE_FONCTIONNEL_LIBELLE", "HETD", "HETD_POURC", "HETD_MONTANT", "REM_FC_D714", "EXERCICE_AA", "EXERCICE_AA_MONTANT", "EXERCICE_AC", "EXERCICE_AC_MONTANT") AS 
  SELECT
  periode_paiement_id,
  structure_id,
  intervenant_type_id,
  intervenant_id, 
  annee_id, 
  centre_cout_id, 
  domaine_fonctionnel_id,
  etat,
  structure_libelle,
  date_mise_en_paiement,
  periode_paiement_libelle,
  intervenant_type,
  intervenant_code,
  intervenant_nom,
  intervenant_numero_insee,
  centre_cout_code,
  centre_cout_libelle,
  domaine_fonctionnel_code,
  domaine_fonctionnel_libelle,
  hetd,
  CASE WHEN pourc_ecart >= 0 THEN
    CASE WHEN RANK() OVER (PARTITION BY periode_paiement_id, intervenant_id, etat, structure_id ORDER BY CASE WHEN (pourc_ecart >= 0 AND pourc_diff >= 0) OR (pourc_ecart < 0 AND pourc_diff < 0) THEN pourc_diff ELSE -1 END DESC) <= (ABS(pourc_ecart) / 0.001) THEN hetd_pourc + (pourc_ecart / ABS(pourc_ecart) * 0.001) ELSE hetd_pourc END
  ELSE
    CASE WHEN RANK() OVER (PARTITION BY periode_paiement_id, intervenant_id, etat, structure_id ORDER BY CASE WHEN (pourc_ecart >= 0 AND pourc_diff >= 0) OR (pourc_ecart < 0 AND pourc_diff < 0) THEN pourc_diff ELSE -1 END) <= (ABS(pourc_ecart) / 0.001) THEN hetd_pourc + (pourc_ecart / ABS(pourc_ecart) * 0.001) ELSE hetd_pourc END
  END hetd_pourc,
  hetd_montant,
  rem_fc_d714,
  exercice_aa,
  exercice_aa_montant,
  exercice_ac,
  exercice_ac_montant 
FROM
(
SELECT
  dep3.*,
  
  1-CASE WHEN hetd > 0 THEN SUM( hetd_pourc ) OVER ( PARTITION BY periode_paiement_id, intervenant_id, etat, structure_id) ELSE 0 END pourc_ecart
  
  
FROM (

SELECT 
  periode_paiement_id,
  structure_id,
  intervenant_type_id,
  intervenant_id, 
  annee_id, 
  centre_cout_id, 
  domaine_fonctionnel_id,
  etat,
  structure_libelle,
  date_mise_en_paiement,
  periode_paiement_libelle,
  intervenant_type,
  intervenant_code,
  intervenant_nom,
  intervenant_numero_insee,
  centre_cout_code,
  centre_cout_libelle,
  domaine_fonctionnel_code,
  domaine_fonctionnel_libelle,
  hetd,
  ROUND( CASE WHEN hetd > 0 THEN hetd / SUM( hetd ) OVER( PARTITION BY periode_paiement_id, intervenant_id, etat, structure_id) ELSE 0 END, 3 ) hetd_pourc,
  ROUND( hetd * taux_horaire, 2 ) hetd_montant,
  ROUND( fc_majorees * taux_horaire, 2 ) rem_fc_d714,
  exercice_aa,
  ROUND( exercice_aa * taux_horaire, 2 ) exercice_aa_montant,
  exercice_ac,
  ROUND( exercice_ac * taux_horaire, 2 ) exercice_ac_montant,
  
  
  (CASE WHEN hetd > 0 THEN hetd / SUM( hetd ) OVER( PARTITION BY periode_paiement_id, intervenant_id, etat, structure_id) ELSE 0 END)
  -
  ROUND( CASE WHEN hetd > 0 THEN hetd / SUM( hetd ) OVER( PARTITION BY periode_paiement_id, intervenant_id, etat, structure_id) ELSE 0 END, 3 ) pourc_diff

FROM (
  WITH dep AS ( -- d√©tails par √©tat de paiement
  SELECT
    CASE WHEN th.code = 'fc_majorees' THEN 1 ELSE 0 END                 is_fc_majoree,
    p.id                                                                periode_paiement_id,
    s.id                                                                structure_id,
    i.id                                                                intervenant_id,
    i.annee_id                                                          annee_id,
    cc.id                                                               centre_cout_id,
    df.id                                                               domaine_fonctionnel_id,
    ti.id                                                               intervenant_type_id,
    CASE
        WHEN mep.date_mise_en_paiement IS NULL THEN 'a-mettre-en-paiement'
        ELSE 'mis-en-paiement'
    END                                                                 etat,

    p.libelle_long || ' ' || to_char( add_months( a.date_debut, p.ecart_mois ), 'yyyy' ) periode_paiement_libelle,
    mep.date_mise_en_paiement                                           date_mise_en_paiement,
    s.libelle_court                                                     structure_libelle,
    ti.libelle                                                          intervenant_type,
    i.source_code                                                       intervenant_code,
    i.nom_usuel || ' ' || i.prenom                                      intervenant_nom,
    TRIM( NVL(i.numero_insee,'') || NVL(TO_CHAR(i.numero_insee_cle,'00'),'') ) intervenant_numero_insee,
    cc.source_code                                                      centre_cout_code,
    cc.libelle                                                          centre_cout_libelle,
    df.source_code                                                      domaine_fonctionnel_code,
    df.libelle                                                          domaine_fonctionnel_libelle,
    CASE WHEN th.code = 'fc_majorees' THEN 0 ELSE mep.heures END        hetd,
    CASE WHEN th.code = 'fc_majorees' THEN mep.heures ELSE 0 END        fc_majorees,
    mep.heures * 4 / 10                                                 exercice_aa,
    mep.heures * 6 / 10                                                 exercice_ac,
    --CASE WHEN th.code = 'fc_majorees' THEN 0 ELSE mep.heures END * 4 / 10                                                 exercice_aa,
    --CASE WHEN th.code = 'fc_majorees' THEN 0 ELSE mep.heures END * 6 / 10                                                 exercice_ac,
    OSE_FORMULE.GET_TAUX_HORAIRE_HETD( NVL(mep.date_mise_en_paiement,SYSDATE) )      taux_horaire
  FROM
    v_mep_intervenant_structure  mis
    JOIN mise_en_paiement        mep ON mep.id = mis.mise_en_paiement_id AND 1 = ose_divers.comprise_entre( mep.histo_creation, mep.histo_destruction )
    JOIN type_heures              th ON  th.id = mep.type_heures_id
    JOIN centre_cout              cc ON  cc.id = mep.centre_cout_id      -- pas d'historique pour les centres de co√ªt, qui devront tout de m√™me apparaitre mais en erreur
    JOIN intervenant               i ON   i.id = mis.intervenant_id      AND 1 = ose_divers.comprise_entre(   i.histo_creation,   i.histo_destruction )
    JOIN annee                     a ON   a.id = i.annee_id
    JOIN statut_intervenant       si ON  si.id = i.statut_id
    JOIN type_intervenant         ti ON  ti.id = si.type_intervenant_id
    JOIN structure                 s ON   s.id = mis.structure_id
    LEFT JOIN validation           v ON   v.id = mep.validation_id       AND 1 = ose_divers.comprise_entre(   v.histo_creation,   v.histo_destruction )
    LEFT JOIN domaine_fonctionnel df ON  df.id = mis.domaine_fonctionnel_id
    LEFT JOIN periode              p ON   p.id = mep.periode_paiement_id
  )
  SELECT
    periode_paiement_id,
    structure_id, 
    intervenant_type_id,
    intervenant_id, 
    annee_id, 
    centre_cout_id, 
    domaine_fonctionnel_id, 
    etat,
    periode_paiement_libelle,
    structure_libelle,
    date_mise_en_paiement,
    intervenant_type,
    intervenant_code,
    intervenant_nom,
    intervenant_numero_insee,
    centre_cout_code,
    centre_cout_libelle,
    domaine_fonctionnel_code,
    domaine_fonctionnel_libelle,
    SUM( hetd ) hetd,
    SUM( fc_majorees ) fc_majorees,
    SUM( exercice_aa ) exercice_aa,
    SUM( exercice_ac ) exercice_ac,
    taux_horaire
  FROM
    dep
  GROUP BY
    periode_paiement_id,
    structure_id, 
    intervenant_type_id,
    intervenant_id, 
    annee_id, 
    centre_cout_id, 
    domaine_fonctionnel_id, 
    etat,
    periode_paiement_libelle,
    structure_libelle,
    date_mise_en_paiement,
    intervenant_type,
    intervenant_code,
    intervenant_nom,
    intervenant_numero_insee,
    centre_cout_code,
    centre_cout_libelle,
    domaine_fonctionnel_code,
    domaine_fonctionnel_libelle,
    taux_horaire,
    is_fc_majoree
) 
dep2
)
dep3
)
dep4;
--------------------------------------------------------
--  DDL for View V_EXPORT_DMEP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_EXPORT_DMEP" ("INTERVENANT_ID", "TYPE_INTERVENANT_ID", "ANNEE_ID", "STRUCTURE_AFF_ID", "STRUCTURE_ENS_ID", "STRUCTURE_ID", "CENTRE_COUT_ID", "ELEMENT_PEDAGOGIQUE_ID", "ETAPE_ID", "TYPE_FORMATION_ID", "GROUPE_TYPE_FORMATION_ID", "STATUT_INTERVENANT_ID", "PERIODE_ID", "INTERVENANT_CODE", "INTERVENANT_NOM", "INTERVENANT_DATE_NAISSANCE", "INTERVENANT_STATUT_LIBELLE", "INTERVENANT_TYPE_CODE", "INTERVENANT_TYPE_LIBELLE", "INTERVENANT_GRADE_CODE", "INTERVENANT_GRADE_LIBELLE", "INTERVENANT_DISCIPLINE_CODE", "INTERVENANT_DISCIPLINE_LIBELLE", "SERVICE_STRUCTURE_AFF_LIBELLE", "SERVICE_STRUCTURE_ENS_LIBELLE", "ETABLISSEMENT_LIBELLE", "GROUPE_TYPE_FORMATION_LIBELLE", "TYPE_FORMATION_LIBELLE", "ETAPE_NIVEAU", "ETAPE_CODE", "ETAPE_LIBELLE", "ELEMENT_CODE", "ELEMENT_LIBELLE", "ELEMENT_DISCIPLINE_CODE", "ELEMENT_DISCIPLINE_LIBELLE", "FONCTION_REFERENTIEL_LIBELLE", "ELEMENT_TAUX_FI", "ELEMENT_TAUX_FC", "ELEMENT_TAUX_FA", "ELEMENT_SOURCE_LIBELLE", "COMMENTAIRES", "ETAT", "TYPE_RESSOURCE_LIBELLE", "CENTRE_COUTS_CODE", "CENTRE_COUTS_LIBELLE", "DOMAINE_FONCTIONNEL_CODE", "DOMAINE_FONCTIONNEL_LIBELLE", "PERIODE_LIBELLE", "DATE_MISE_EN_PAIEMENT", "HEURES_FI", "HEURES_FA", "HEURES_FC", "HEURES_FC_MAJOREES", "HEURES_REFERENTIEL") AS 
  WITH mep AS (
  SELECT
    frs.service_id,
    frsr.service_referentiel_id,
    mep.date_mise_en_paiement,
    mep.periode_paiement_id,
    mep.centre_cout_id,
    mep.domaine_fonctionnel_id,
  
    sum(case when th.code = 'fi' then mep.heures else 0 end) heures_fi,
    sum(case when th.code = 'fa' then mep.heures else 0 end) heures_fa,
    sum(case when th.code = 'fc' then mep.heures else 0 end) heures_fc,
    sum(case when th.code = 'fc_majorees' then mep.heures else 0 end) heures_fc_majorees,
    sum(case when th.code = 'referentiel' then mep.heures else 0 end) heures_referentiel
  FROM
              mise_en_paiement              mep
         JOIN type_heures                    th ON th.id   = mep.type_heures_id
    LEFT JOIN formule_resultat_service      frs ON frs.id  = mep.formule_res_service_id
    LEFT JOIN formule_resultat_service_ref frsr ON frsr.id = mep.formule_res_service_ref_id
  WHERE
    1 = ose_divers.comprise_entre( mep.histo_creation, mep.histo_destruction )
  GROUP BY
    frs.service_id,
    frsr.service_referentiel_id,
    mep.date_mise_en_paiement,
    mep.periode_paiement_id,
    mep.centre_cout_id,
    mep.domaine_fonctionnel_id
)
SELECT 
  i.id                            intervenant_id,
  ti.id                           type_intervenant_id,
  i.annee_id                      annee_id,
  saff.id                         structure_aff_id,
  sens.id                         structure_ens_id,
  NVL(sens.id,saff.id)            structure_id,
  cc.id                           centre_cout_id,
  ep.id                           element_pedagogique_id,
  etp.id                          etape_id,
  tf.id                           type_formation_id,
  gtf.id                          groupe_type_formation_id,
  si.id                           statut_intervenant_id,
  p.id                            periode_id,
    
  i.source_code                   intervenant_code,
  i.nom_usuel || ' ' || i.prenom  intervenant_nom,
  i.date_naissance                intervenant_date_naissance,
  si.libelle                      intervenant_statut_libelle,
  ti.code                         intervenant_type_code,
  ti.libelle                      intervenant_type_libelle,
  g.source_code                   intervenant_grade_code,
  g.libelle_court                 intervenant_grade_libelle,
  di.source_code                  intervenant_discipline_code,
  di.libelle_court                intervenant_discipline_libelle,
  saff.libelle_court              service_structure_aff_libelle,
  
  sens.libelle_court              service_structure_ens_libelle,
  etab.libelle                    etablissement_libelle,
  gtf.libelle_court               groupe_type_formation_libelle,
  tf.libelle_court                type_formation_libelle,
  etp.niveau                      etape_niveau,
  etp.source_code                 etape_code,
  etp.libelle                     etape_libelle,
  ep.source_code                  element_code,
  ep.libelle                      element_libelle,
  de.source_code                  element_discipline_code,
  de.libelle_court                element_discipline_libelle,
  fr.libelle_long                 fonction_referentiel_libelle,
  ep.taux_fi                      element_taux_fi,
  ep.taux_fc                      element_taux_fc,
  ep.taux_fa                      element_taux_fa,
  src.libelle                     element_source_libelle,
  COALESCE(to_char(s.description),to_char(sr.commentaires)) commentaires,
  
  CASE
    WHEN mep.date_mise_en_paiement IS NULL THEN 'a-mettre-en-paiement'
    ELSE 'mis-en-paiement'
  END                             etat,
  tr.libelle                      type_ressource_libelle,
  cc.source_code                  centre_couts_code,
  cc.libelle                      centre_couts_libelle,
  df.source_code                  domaine_fonctionnel_code,
  df.libelle                      domaine_fonctionnel_libelle,
  p.libelle_long                  periode_libelle,
  mep.date_mise_en_paiement       date_mise_en_paiement,
  mep.heures_fi                   heures_fi,
  mep.heures_fa                   heures_fa,
  mep.heures_fc                   heures_fc,
  mep.heures_fc_majorees          heures_fc_majorees,
  mep.heures_referentiel          heures_referentiel
FROM
              mep
         JOIN centre_cout               cc ON cc.id   = mep.centre_cout_id
         JOIN type_ressource            tr ON tr.id   = cc.type_ressource_id
    LEFT JOIN service                    s ON s.id    = mep.service_id
    LEFT JOIN element_pedagogique       ep ON ep.id   = s.element_pedagogique_id
    LEFT JOIN source                   src ON src.id  = ep.source_id OR (ep.source_id IS NULL AND src.code = 'OSE')
    LEFT JOIN discipline                de ON de.id   = ep.discipline_id
    LEFT JOIN etape                    etp ON etp.id  = ep.etape_id
    LEFT JOIN type_formation            tf ON tf.id   = etp.type_formation_id
    LEFT JOIN groupe_type_formation    gtf ON gtf.id  = tf.groupe_id
    LEFT JOIN service_referentiel       sr ON sr.id   = mep.service_referentiel_id
    LEFT JOIN fonction_referentiel      fr ON fr.id   = sr.fonction_id
         JOIN intervenant                i ON i.id    = NVL( s.intervenant_id, sr.intervenant_id )
         JOIN statut_intervenant        si ON si.id   = i.statut_id
         JOIN type_intervenant          ti ON ti.id   = si.type_intervenant_id
    LEFT JOIN grade                      g ON g.id    = i.grade_id
    LEFT JOIN discipline                di ON di.id   = i.discipline_id
    LEFT JOIN structure               saff ON saff.id = i.structure_id AND ti.code = 'P'
    LEFT JOIN structure               sens ON sens.id = NVL( ep.structure_id, sr.structure_id )
         JOIN etablissement           etab ON etab.id = NVL( s.etablissement_id, sens.etablissement_id )
    LEFT JOIN periode                    p ON p.id    = mep.periode_paiement_id
    LEFT JOIN domaine_fonctionnel       df ON df.id   = mep.domaine_fonctionnel_id
ORDER BY
  intervenant_nom,
  service_structure_aff_libelle, 
  service_structure_ens_libelle, 
  etape_libelle, 
  element_libelle;
--------------------------------------------------------
--  DDL for View V_EXPORT_PAIEMENT_WINPAIE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_EXPORT_PAIEMENT_WINPAIE" ("TYPE_INTERVENANT_ID", "ANNEE_ID", "STRUCTURE_ID", "PERIODE_PAIEMENT_ID", "INTERVENANT_ID", "INSEE", "NOM", "CARTE", "CODE_ORIGINE", "RETENUE", "SENS", "MC", "NBU", "MONTANT", "LIBELLE") AS 
  SELECT
  si.type_intervenant_id type_intervenant_id,
  i.annee_id,
  t2.structure_id,
  t2.periode_paiement_id,
  i.id intervenant_id,
  
  NVL(i.numero_insee,'') || TRIM(NVL(TO_CHAR(i.numero_insee_cle,'00'),'')) insee,
  i.nom_usuel || ',' || i.prenom nom,
  to_char((SELECT valeur FROM parametre WHERE nom = 'winpaie_carte' AND 1=ose_divers.comprise_entre(histo_creation,histo_destruction))) carte,
  t2.code_origine,
  to_char((SELECT valeur FROM parametre WHERE nom = 'winpaie_retenue' AND 1=ose_divers.comprise_entre(histo_creation,histo_destruction))) retenue,
  to_char((SELECT valeur FROM parametre WHERE nom = 'winpaie_sens' AND 1=ose_divers.comprise_entre(histo_creation,histo_destruction))) sens,
  to_char((SELECT valeur FROM parametre WHERE nom = 'winpaie_mc' AND 1=ose_divers.comprise_entre(histo_creation,histo_destruction))) mc,
  t2.nbu,
  OSE_FORMULE.GET_TAUX_HORAIRE_HETD( NVL(t2.date_mise_en_paiement,SYSDATE) ) montant,
  COALESCE(t2.unite_budgetaire,'') || ' ' || to_char(i.annee_id) || ' ' || to_char(i.annee_id+1) 
  /*  || ' ' || to_char(FLOOR(t2.nbu)) || ' H' || CASE
      WHEN to_char(ROUND( t2.nbu-FLOOR(t2.nbu), 2 )*100,'00') = ' 00' THEN '' 
      ELSE to_char(ROUND( t2.nbu-FLOOR(t2.nbu), 2 )*100,'00') END*/ libelle
FROM (
  SELECT
    structure_id,
    periode_paiement_id,
    intervenant_id,
    code_origine,
    ROUND( SUM(nbu), 2) nbu,
    unite_budgetaire,
    date_mise_en_paiement
  FROM (
    WITH mep AS (
    SELECT
      -- pour les filtres
      mep.id,
      mis.structure_id,
      mep.periode_paiement_id,
      mis.intervenant_id,
      mep.heures,
      cc.unite_budgetaire,
      mep.date_mise_en_paiement
    FROM
      v_mep_intervenant_structure  mis
      JOIN mise_en_paiement        mep ON mep.id = mis.mise_en_paiement_id AND 1 = ose_divers.comprise_entre( mep.histo_creation, mep.histo_destruction )
      JOIN centre_cout              cc ON cc.id = mep.centre_cout_id
      JOIN type_heures              th ON th.id = mep.type_heures_id
    WHERE
      mep.date_mise_en_paiement IS NOT NULL
      AND mep.periode_paiement_id IS NOT NULL
      AND th.eligible_extraction_paie = 1
    )
    SELECT
      mep.id,
      mep.structure_id,
      mep.periode_paiement_id,
      mep.intervenant_id,
      2 code_origine,
      mep.heures * 4 / 10 nbu,
      mep.unite_budgetaire,
      mep.date_mise_en_paiement
    FROM
      mep
    WHERE
      mep.heures * 4 / 10 > 0
      
    UNION
    
    SELECT 
      mep.id,
      mep.structure_id,
      mep.periode_paiement_id,
      mep.intervenant_id,
      1 code_origine,
      mep.heures * 6 / 10 nbu,
      mep.unite_budgetaire,
      mep.date_mise_en_paiement
    FROM
      mep
    WHERE
      mep.heures * 6 / 10 > 0
  ) t1
  GROUP BY
    structure_id,
    periode_paiement_id,
    intervenant_id,
    code_origine,
    unite_budgetaire,
    date_mise_en_paiement
) t2
JOIN intervenant i ON i.id = t2.intervenant_id
JOIN statut_intervenant si ON si.id = i.statut_id
JOIN structure s ON s.id = t2.structure_id;
--------------------------------------------------------
--  DDL for View V_EXPORT_PILOTAGE_ECARTS_ETATS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_EXPORT_PILOTAGE_ECARTS_ETATS" ("ANNEE_ID", "ANNEE", "ETAT", "TYPE_HEURES_ID", "TYPE_HEURES", "STRUCTURE_ID", "STRUCTURE", "INTERVENANT_ID", "INTERVENANT_TYPE", "INTERVENANT_CODE", "INTERVENANT", "HETD_PAYABLES") AS 
  SELECT 
  t3.annee_id annee_id,
  t3.annee_id || '-' || (t3.annee_id+1) annee,
  t3.etat,
  t3.type_heures_id,
  t3.type_heures,
  s.id structure_id,
  s.libelle_court structure,
  i.id intervenant_id,
  ti.libelle intervenant_type,
  i.source_code intervenant_code,
  i.prenom || ' ' || i.nom_usuel intervenant,
  t3.hetd_payables
FROM

(
SELECT
  annee_id,
  etat,
  type_heures_id,
  type_heures,
  structure_id,
  intervenant_id,
  sum(hetd) hetd_payables
FROM (
  SELECT
    annee_id,
    LOWER(tvh.code) || '-' || evh.code etat,
    10*tvh.ordre + evh.ordre ordre,
    type_heures_id,
    type_heures,
    structure_id,
    intervenant_id,
    SUM(hetd) hetd
  FROM (
    SELECT
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id type_heures_id,
      th.code type_heures,
      COALESCE(ep.structure_id,i.structure_id) structure_id,
      fr.intervenant_id,
      SUM(frs.heures_compl_fi) hetd
    FROM
           formule_resultat_service  frs
      JOIN formule_resultat           fr ON fr.id = frs.formule_resultat_id
      JOIN service                     s ON s.id = frs.service_id
      JOIN intervenant                 i ON i.id = fr.intervenant_id
      JOIN type_heures                th ON th.code = 'fi'
      LEFT JOIN element_pedagogique   ep ON ep.id = s.element_pedagogique_id
    GROUP BY
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id, th.code,
      fr.intervenant_id,
      ep.structure_id,
      i.structure_id
    
    UNION ALL
    
    SELECT
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id type_heures_id,
      th.code type_heures,
      COALESCE(ep.structure_id,i.structure_id) structure_id,
      fr.intervenant_id,
      SUM(frs.heures_compl_fa) hetd
    FROM
           formule_resultat_service  frs
      JOIN formule_resultat           fr ON fr.id = frs.formule_resultat_id
      JOIN service                     s ON s.id = frs.service_id
      JOIN intervenant                 i ON i.id = fr.intervenant_id
      JOIN type_heures                th ON th.code = 'fa'
      LEFT JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
    GROUP BY
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id, th.code,
      fr.intervenant_id,
      ep.structure_id,
      i.structure_id
      
    UNION ALL
      
    SELECT
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id type_heures_id,
      th.code type_heures,
      COALESCE(ep.structure_id,i.structure_id) structure_id,
      fr.intervenant_id,
      SUM(frs.heures_compl_fc) hetd
    FROM
           formule_resultat_service  frs
      JOIN formule_resultat           fr ON fr.id = frs.formule_resultat_id
      JOIN service                     s ON s.id = frs.service_id
      JOIN intervenant                 i ON i.id = fr.intervenant_id
      JOIN type_heures                th ON th.code = 'fc'
      LEFT JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
    GROUP BY
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id, th.code,
      fr.intervenant_id,
      ep.structure_id,
      i.structure_id
    
    UNION ALL
    
    SELECT
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id type_heures_id,
      th.code type_heures,
      sr.structure_id,
      fr.intervenant_id,
      sum( frsr.heures_compl_referentiel ) hetd
    FROM
           formule_resultat_service_ref  frsr
      JOIN formule_resultat                fr ON fr.id = frsr.formule_resultat_id
      JOIN service_referentiel             sr ON sr.id = frsr.service_referentiel_id
      JOIN intervenant                      i ON i.id = fr.intervenant_id
      JOIN type_heures                th ON th.code = 'referentiel'
    GROUP BY
      i.annee_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      th.id, th.code,
      fr.intervenant_id,
      sr.structure_id
  ) t1
    JOIN type_volume_horaire            tvh ON tvh.id = t1.type_volume_horaire_id
    JOIN etat_volume_horaire            evh ON evh.id = t1.etat_volume_horaire_id
  GROUP BY
    annee_id, tvh.code, evh.code, tvh.ordre, evh.ordre, type_heures_id, type_heures, structure_id, intervenant_id
  
  UNION ALL
  
  SELECT
    annee_id,
    etat,
    ordre,
    type_heures_id,
    type_heures,
    structure_id,
    intervenant_id,
    SUM(hetd) hetd
  FROM (
    SELECT
      i.annee_id,
      'demande-mise-en-paiement' etat,
      90 ordre, 
      th.id   type_heures_id,
      th.code type_heures,
      COALESCE( sr.structure_id, ep.structure_id, i.structure_id ) structure_id,
      i.id intervenant_id,
      mep.heures hetd
    FROM
                mise_en_paiement              mep 
           JOIN type_heures                    th ON th.id = mep.type_heures_id
           JOIN centre_cout                    cc ON cc.id = mep.centre_cout_id
      LEFT JOIN formule_resultat_service      frs ON frs.id = mep.formule_res_service_id
      LEFT JOIN formule_resultat_service_ref frsr ON frsr.id = mep.formule_res_service_ref_id
      LEFT JOIN formule_resultat               fr ON fr.id = COALESCE(frs.formule_resultat_id, frsr.formule_resultat_id)
      LEFT JOIN service                         s ON s.id = frs.service_id
      LEFT JOIN element_pedagogique            ep ON ep.id = s.element_pedagogique_id
      LEFT JOIN service_referentiel            sr ON sr.id = frsr.service_referentiel_id
      LEFT JOIN intervenant                     i ON i.id = fr.intervenant_id
    WHERE
      1 = ose_divers.comprise_entre(mep.histo_creation,mep.histo_destruction) 
      AND th.eligible_extraction_paie = 1

    UNION ALL

    SELECT
      i.annee_id,
      'mise-en-paiement' etat,
      91 ordre,
      th.id type_heures_id,
      th.code type_heures,
      COALESCE( sr.structure_id, ep.structure_id, i.structure_id ) structure_id,
      i.id intervenant_id,
      mep.heures hetd     
    FROM
                mise_en_paiement              mep 
           JOIN type_heures                    th ON th.id = mep.type_heures_id
           JOIN centre_cout                    cc ON cc.id = mep.centre_cout_id
      LEFT JOIN formule_resultat_service      frs ON frs.id = mep.formule_res_service_id
      LEFT JOIN formule_resultat_service_ref frsr ON frsr.id = mep.formule_res_service_ref_id
      LEFT JOIN formule_resultat               fr ON fr.id = COALESCE(frs.formule_resultat_id, frsr.formule_resultat_id)
      LEFT JOIN service                         s ON s.id = frs.service_id
      LEFT JOIN element_pedagogique            ep ON ep.id = s.element_pedagogique_id
      LEFT JOIN service_referentiel            sr ON sr.id = frsr.service_referentiel_id
      LEFT JOIN intervenant                     i ON i.id = fr.intervenant_id
    WHERE
      1 = ose_divers.comprise_entre(mep.histo_creation,mep.histo_destruction) 
      AND th.eligible_extraction_paie = 1
      AND mep.PERIODE_PAIEMENT_ID IS NOT NULL
  ) t1
  GROUP BY
    annee_id, etat, ordre, type_heures_id, type_heures, structure_id, intervenant_id
) t2
GROUP BY
  annee_id, 
  etat, ordre
  ,type_heures_id, type_heures
  ,structure_id
  ,intervenant_id
ORDER BY
  annee_id, ordre
  
) t3
  JOIN intervenant i ON i.id = t3.intervenant_id
  JOIN statut_intervenant si ON si.id = i.statut_id
  JOIN type_intervenant ti ON ti.id = si.type_intervenant_id
  JOIN structure s ON s.id = t3.structure_id;
--------------------------------------------------------
--  DDL for View V_EXPORT_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_EXPORT_SERVICE" ("ID", "SERVICE_ID", "INTERVENANT_ID", "TYPE_INTERVENANT_ID", "ANNEE_ID", "SERVICE_DATE_MODIFICATION", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID", "ETABLISSEMENT_ID", "STRUCTURE_AFF_ID", "STRUCTURE_ENS_ID", "NIVEAU_FORMATION_ID", "ETAPE_ID", "ELEMENT_PEDAGOGIQUE_ID", "PERIODE_ID", "TYPE_INTERVENTION_ID", "FONCTION_REFERENTIEL_ID", "TYPE_ETAT", "INTERVENANT_CODE", "INTERVENANT_NOM", "INTERVENANT_DATE_NAISSANCE", "INTERVENANT_STATUT_LIBELLE", "INTERVENANT_TYPE_CODE", "INTERVENANT_TYPE_LIBELLE", "INTERVENANT_GRADE_CODE", "INTERVENANT_GRADE_LIBELLE", "INTERVENANT_DISCIPLINE_CODE", "INTERVENANT_DISCIPLINE_LIBELLE", "SERVICE_STRUCTURE_AFF_LIBELLE", "SERVICE_STRUCTURE_ENS_LIBELLE", "ETABLISSEMENT_LIBELLE", "GROUPE_TYPE_FORMATION_LIBELLE", "TYPE_FORMATION_LIBELLE", "ETAPE_NIVEAU", "ETAPE_CODE", "ETAPE_LIBELLE", "ELEMENT_CODE", "ELEMENT_LIBELLE", "ELEMENT_DISCIPLINE_CODE", "ELEMENT_DISCIPLINE_LIBELLE", "FONCTION_REFERENTIEL_LIBELLE", "ELEMENT_TAUX_FI", "ELEMENT_TAUX_FC", "ELEMENT_TAUX_FA", "COMMENTAIRES", "PERIODE_LIBELLE", "ELEMENT_PONDERATION_COMPL", "ELEMENT_SOURCE_LIBELLE", "HEURES", "HEURES_REF", "HEURES_NON_PAYEES", "SERVICE_STATUTAIRE", "SERVICE_DU_MODIFIE", "SERVICE_FI", "SERVICE_FA", "SERVICE_FC", "SERVICE_REFERENTIEL", "HEURES_COMPL_FI", "HEURES_COMPL_FA", "HEURES_COMPL_FC", "HEURES_COMPL_FC_MAJOREES", "HEURES_COMPL_REFERENTIEL", "TOTAL", "SOLDE", "DATE_CLOTURE_REALISE") AS 
  WITH t AS ( SELECT
  'vh_' || vh.id                    id,
  s.id                              service_id,
  s.intervenant_id                  intervenant_id,
  vh.type_volume_horaire_id         type_volume_horaire_id,
  fr.etat_volume_horaire_id         etat_volume_horaire_id,
  s.element_pedagogique_id          element_pedagogique_id,
  s.etablissement_id                etablissement_id,
  null                              structure_aff_id,
  null                              structure_ens_id,
  vh.periode_id                     periode_id,
  vh.type_intervention_id           type_intervention_id,
  null                              fonction_referentiel_id,

  s.description                     service_description,

  vh.heures                         heures,
  0                                 heures_ref,
  0                                 heures_non_payees,
  frvh.service_fi                   service_fi,
  frvh.service_fa                   service_fa,
  frvh.service_fc                   service_fc,
  0                                 service_referentiel,
  frvh.heures_compl_fi              heures_compl_fi,
  frvh.heures_compl_fa              heures_compl_fa,
  frvh.heures_compl_fc              heures_compl_fc,
  frvh.heures_compl_fc_majorees     heures_compl_fc_majorees,
  0                                 heures_compl_referentiel,
  frvh.total                        total,
  fr.solde                          solde,
  null                              commentaires
FROM
  formule_resultat_vh                frvh
  JOIN formule_resultat                fr ON fr.id = frvh.formule_resultat_id
  JOIN volume_horaire                  vh ON vh.id = frvh.volume_horaire_id AND vh.motif_non_paiement_id IS NULL AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  JOIN service                          s ON s.id = vh.service_id AND s.intervenant_id = fr.intervenant_id AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )

UNION ALL

SELECT
  'vh_' || vh.id                    id,
  s.id                              service_id,
  s.intervenant_id                  intervenant_id,
  vh.type_volume_horaire_id         type_volume_horaire_id,
  vhe.etat_volume_horaire_id        etat_volume_horaire_id,
  s.element_pedagogique_id          element_pedagogique_id,
  s.etablissement_id                etablissement_id,
  null                              structure_aff_id,
  null                              structure_ens_id,
  vh.periode_id                     periode_id,
  vh.type_intervention_id           type_intervention_id,
  null                              fonction_referentiel_id,

  s.description                     service_description,

  vh.heures                         heures,
  0                                 heures_ref,
  1                                 heures_non_payees,
  0                                 service_fi,
  0                                 service_fa,
  0                                 service_fc,
  0                                 service_referentiel,
  0                                 heures_compl_fi,
  0                                 heures_compl_fa,
  0                                 heures_compl_fc,
  0                                 heures_compl_fc_majorees,
  0                                 heures_compl_referentiel,
  0                                 total,
  fr.solde                          solde,
  null                              commentaires 
FROM
  volume_horaire                  vh
  JOIN service                     s ON s.id = vh.service_id
  JOIN v_volume_horaire_etat     vhe ON vhe.volume_horaire_id = vh.id
  JOIN formule_resultat           fr ON fr.intervenant_id = s.intervenant_id AND fr.type_volume_horaire_id = vh.type_volume_horaire_id AND fr.etat_volume_horaire_id = vhe.etat_volume_horaire_id
WHERE
  vh.motif_non_paiement_id IS NOT NULL
  AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )

UNION ALL

SELECT
  'vh_ref_' || vhr.id               id,
  sr.id                             service_id,
  sr.intervenant_id                 intervenant_id,
  fr.type_volume_horaire_id         type_volume_horaire_id,
  fr.etat_volume_horaire_id         etat_volume_horaire_id,
  NULL                              element_pedagogique_id,
  OSE_PARAMETRE.GET_ETABLISSEMENT   etablissement_id,
  NULL                              structure_aff_id,
  sr.structure_id                   structure_ens_id,
  NULL                              periode_id,
  NULL                              type_intervention_id,
  sr.fonction_id                    fonction_referentiel_id,
  
  NULL                              service_description,
  
  0                                 heures,
  vhr.heures                        heures_ref,
  0                                 heures_non_payees,
  0                                 service_fi,
  0                                 service_fa,
  0                                 service_fc,
  frvr.service_referentiel          service_referentiel,
  0                                 heures_compl_fi,
  0                                 heures_compl_fa,
  0                                 heures_compl_fc,
  0                                 heures_compl_fc_majorees,
  frvr.heures_compl_referentiel     heures_compl_referentiel,
  frvr.total                        total,
  fr.solde                          solde,
  sr.commentaires                   commentaires
FROM
  formule_resultat_vh_ref       frvr
  JOIN formule_resultat           fr ON fr.id = frvr.formule_resultat_id
  JOIN volume_horaire_ref        vhr ON vhr.id =  frvr.volume_horaire_ref_id
  JOIN service_referentiel        sr ON sr.id = vhr.service_referentiel_id AND sr.intervenant_id = fr.intervenant_id AND 1 = ose_divers.comprise_entre( sr.histo_creation, sr.histo_destruction )
  
UNION ALL

SELECT
  'vh_0_' || i.id                   id,
  NULL                              service_id,
  i.id                              intervenant_id,
  tvh.id                            type_volume_horaire_id,
  evh.id                            etat_volume_horaire_id,
  NULL                              element_pedagogique_id,
  OSE_PARAMETRE.GET_ETABLISSEMENT   etablissement_id,
  NULL                              structure_aff_id,
  NULL                              structure_ens_id,
  NULL                              periode_id,
  NULL                              type_intervention_id,
  NULL                              fonction_referentiel_id,
  
  NULL                              service_description,
  
  0                                 heures,
  0                                 heures_ref,
  0                                 heures_non_payees,
  0                                 service_fi,
  0                                 service_fa,
  0                                 service_fc,
  0                                 service_referentiel,
  0                                 heures_compl_fi,
  0                                 heures_compl_fa,
  0                                 heures_compl_fc,
  0                                 heures_compl_fc_majorees,
  NULL                              heures_compl_referentiel,
  0                                 total,
  0                                 solde,
  NULL                              commentaires
FROM
  intervenant i
  JOIN statut_intervenant si ON si.id = i.statut_id
  JOIN etat_volume_horaire evh ON evh.code IN ('saisi','valide')
  JOIN type_volume_horaire tvh ON tvh.code IN ('PREVU','REALISE')
  LEFT JOIN modification_service_du msd ON msd.intervenant_id = i.id AND 1 = ose_divers.comprise_entre( msd.histo_creation, msd.histo_destruction )
  LEFT JOIN motif_modification_service mms ON mms.id = msd.motif_id
WHERE
  1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  AND si.service_statutaire > 0
GROUP BY
  i.id, si.service_statutaire, evh.id, tvh.id
HAVING 
  si.service_statutaire + SUM(msd.heures * mms.multiplicateur) = 0


)
SELECT
  t.id                            id,
  t.service_id                    service_id,
  i.id                            intervenant_id,
  ti.id                           type_intervenant_id,  
  i.annee_id                      annee_id,
  his.histo_modification          service_date_modification,
  t.type_volume_horaire_id        type_volume_horaire_id,
  t.etat_volume_horaire_id        etat_volume_horaire_id,
  etab.id                         etablissement_id,
  saff.id                         structure_aff_id,
  sens.id                         structure_ens_id,
  ose_divers.niveau_formation_id_calc( gtf.id, gtf.pertinence_niveau, etp.niveau ) niveau_formation_id,
  etp.id                          etape_id,
  ep.id                           element_pedagogique_id,
  t.periode_id                    periode_id,
  t.type_intervention_id          type_intervention_id,
  t.fonction_referentiel_id       fonction_referentiel_id,
  
  tvh.libelle || ' ' || evh.libelle type_etat,
  i.source_code                   intervenant_code,
  i.nom_usuel || ' ' || i.prenom  intervenant_nom,
  i.date_naissance                intervenant_date_naissance,
  si.libelle                      intervenant_statut_libelle,
  ti.code                         intervenant_type_code,
  ti.libelle                      intervenant_type_libelle,
  g.source_code                   intervenant_grade_code,
  g.libelle_court                 intervenant_grade_libelle,
  di.source_code                  intervenant_discipline_code,
  di.libelle_court                intervenant_discipline_libelle,
  saff.libelle_court              service_structure_aff_libelle,

  sens.libelle_court              service_structure_ens_libelle,
  etab.libelle                    etablissement_libelle,
  gtf.libelle_court               groupe_type_formation_libelle,
  tf.libelle_court                type_formation_libelle,
  etp.niveau                      etape_niveau,
  etp.source_code                 etape_code,
  etp.libelle                     etape_libelle,
  ep.source_code                  element_code,
  COALESCE(ep.libelle,to_char(t.service_description)) element_libelle,
  de.source_code                  element_discipline_code,
  de.libelle_court                element_discipline_libelle,
  fr.libelle_long                 fonction_referentiel_libelle,
  ep.taux_fi                      element_taux_fi,
  ep.taux_fc                      element_taux_fc,
  ep.taux_fa                      element_taux_fa,
  null                            commentaires,
  p.libelle_court                 periode_libelle,
  CASE WHEN fs.ponderation_service_compl = 1 THEN NULL ELSE fs.ponderation_service_compl END element_ponderation_compl,
  src.libelle                     element_source_libelle,
  
  t.heures                        heures,
  t.heures_ref                    heures_ref,
  t.heures_non_payees             heures_non_payees,
  si.service_statutaire           service_statutaire,
  fsm.heures                      service_du_modifie,
  t.service_fi                    service_fi,
  t.service_fa                    service_fa,
  t.service_fc                    service_fc,
  t.service_referentiel           service_referentiel,
  t.heures_compl_fi               heures_compl_fi,
  t.heures_compl_fa               heures_compl_fa,
  t.heures_compl_fc               heures_compl_fc,
  t.heures_compl_fc_majorees      heures_compl_fc_majorees,
  t.heures_compl_referentiel      heures_compl_referentiel,
  t.total                         total,
  t.solde                         solde,
  v.histo_modification            date_cloture_realise

FROM
  t
  JOIN intervenant                        i ON i.id     = t.intervenant_id AND ose_divers.comprise_entre(  i.histo_creation,  i.histo_destruction ) = 1
  JOIN statut_intervenant                si ON si.id    = i.statut_id            
  JOIN type_intervenant                  ti ON ti.id    = si.type_intervenant_id 
  JOIN etablissement                   etab ON etab.id  = t.etablissement_id
  JOIN type_volume_horaire              tvh ON tvh.id   = t.type_volume_horaire_id
  JOIN etat_volume_horaire              evh ON evh.id   = t.etat_volume_horaire_id
  LEFT JOIN histo_intervenant_service   his ON his.intervenant_id = i.id AND his.type_volume_horaire_id = tvh.id AND his.referentiel = 0
  LEFT JOIN grade                         g ON g.id     = i.grade_id
  LEFT JOIN discipline                   di ON di.id    = i.discipline_id
  LEFT JOIN structure                  saff ON saff.id  = i.structure_id AND ti.code = 'P'
  LEFT JOIN element_pedagogique          ep ON ep.id    = t.element_pedagogique_id
  LEFT JOIN discipline                   de ON de.id    = ep.discipline_id
  LEFT JOIN structure                  sens ON sens.id  = NVL(t.structure_ens_id, ep.structure_id)
  LEFT JOIN periode                       p ON p.id     = t.periode_id
  LEFT JOIN source                      src ON src.id   = ep.source_id OR (ep.source_id IS NULL AND src.code = 'OSE')
  LEFT JOIN etape                       etp ON etp.id   = ep.etape_id
  LEFT JOIN type_formation               tf ON tf.id    = etp.type_formation_id AND ose_divers.comprise_entre( tf.histo_creation, tf.histo_destruction ) = 1
  LEFT JOIN groupe_type_formation       gtf ON gtf.id   = tf.groupe_id AND ose_divers.comprise_entre( gtf.histo_creation, gtf.histo_destruction ) = 1
  LEFT JOIN v_formule_service_modifie   fsm ON fsm.intervenant_id = i.id
  LEFT JOIN v_formule_service            fs ON fs.id    = t.service_id
  LEFT JOIN fonction_referentiel         fr ON fr.id    = t.fonction_referentiel_id
  LEFT JOIN type_validation              tv ON tvh.code = 'REALISE' AND tv.code = 'CLOTURE_REALISE'
  LEFT JOIN validation                    v ON v.intervenant_id = i.id AND v.type_validation_id = tv.id AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction );
--------------------------------------------------------
--  DDL for View V_FORMULE_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_FORMULE_INTERVENANT" ("ID", "ANNEE_ID", "STRUCTURE_ID", "HEURES_SERVICE_STATUTAIRE", "DEPASSEMENT_SERVICE_DU_SANS_HC") AS 
  SELECT
  i.id,
  i.annee_id,
  i.structure_id,
  si.service_statutaire heures_service_statutaire,
  si.depassement_service_du_sans_hc
FROM
  intervenant i
  JOIN statut_intervenant si ON si.id = i.statut_id
WHERE
  1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction, ose_formule.get_date_obs );
--------------------------------------------------------
--  DDL for View V_FORMULE_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_FORMULE_SERVICE" ("ID", "INTERVENANT_ID", "TAUX_FI", "TAUX_FA", "TAUX_FC", "STRUCTURE_AFF_ID", "STRUCTURE_ENS_ID", "PONDERATION_SERVICE_DU", "PONDERATION_SERVICE_COMPL") AS 
  SELECT
  s.id              id,
  s.intervenant_id  intervenant_id,
  CASE WHEN ep.id IS NOT NULL THEN ep.taux_fi ELSE 1 END taux_fi,
  CASE WHEN ep.id IS NOT NULL THEN ep.taux_fa ELSE 0 END taux_fa,
  CASE WHEN ep.id IS NOT NULL THEN ep.taux_fc ELSE 0 END taux_fc,
  i.structure_id,
  ep.structure_id,
  NVL( EXP (SUM (LN (m.ponderation_service_du))), 1) ponderation_service_du,
  NVL( EXP (SUM (LN (m.ponderation_service_compl))), 1) ponderation_service_compl
FROM
  service s
  JOIN intervenant i ON i.id = s.intervenant_id
  LEFT JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
  LEFT JOIN element_modulateur em ON em.element_id = s.element_pedagogique_id
        AND 1 = ose_divers.comprise_entre( em.histo_creation, em.histo_destruction, ose_formule.get_date_obs )
  LEFT JOIN modulateur         m ON m.id = em.modulateur_id
WHERE
  1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction, ose_formule.get_date_obs )
GROUP BY
  s.id,
  s.intervenant_id,
  ep.id,
  ep.taux_fi, ep.taux_fa, ep.taux_fc,
  i.structure_id, ep.structure_id;
--------------------------------------------------------
--  DDL for View V_FORMULE_SERVICE_MODIFIE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_FORMULE_SERVICE_MODIFIE" ("ID", "INTERVENANT_ID", "HEURES", "HEURES_DECHARGE") AS 
  SELECT
  msd.intervenant_id id,
  msd.intervenant_id,
  NVL( SUM( msd.heures * mms.multiplicateur ), 0 ) heures,
  NVL( SUM( msd.heures * mms.multiplicateur * mms.decharge ), 0 ) heures_decharge
FROM
  modification_service_du msd
  JOIN MOTIF_MODIFICATION_SERVICE mms ON 
    mms.id = msd.motif_id
    AND 1 = ose_divers.comprise_entre( mms.histo_creation, mms.histo_destruction, ose_formule.get_date_obs )
  JOIN intervenant i ON i.id = msd.intervenant_id
WHERE
  1 = ose_divers.comprise_entre( msd.histo_creation, msd.histo_destruction, ose_formule.get_date_obs)
  AND 1 = ose_divers.intervenant_has_privilege(msd.intervenant_id, 'modif-service-du-association')
GROUP BY
  msd.intervenant_id;
--------------------------------------------------------
--  DDL for View V_FORMULE_SERVICE_REF
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_FORMULE_SERVICE_REF" ("ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT
  sr.id             id,
  sr.intervenant_id intervenant_id,
  sr.structure_id   structure_id
FROM
  service_referentiel sr
  JOIN intervenant i ON i.id = sr.intervenant_id
WHERE
  1 = ose_divers.comprise_entre( sr.histo_creation, sr.histo_destruction, ose_formule.get_date_obs );
--------------------------------------------------------
--  DDL for View V_FORMULE_VOLUME_HORAIRE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_FORMULE_VOLUME_HORAIRE" ("ID", "SERVICE_ID", "INTERVENANT_ID", "TYPE_INTERVENTION_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ORDRE", "HEURES", "TAUX_SERVICE_DU", "TAUX_SERVICE_COMPL") AS 
  SELECT
  vh.id                       id,
  s.id                        service_id,
  s.intervenant_id            intervenant_id,
  ti.id                       type_intervention_id,
  vh.type_volume_horaire_id   type_volume_horaire_id,
  evh.id                      etat_volume_horaire_id,
  evh.ordre                   etat_volume_horaire_ordre,
  vh.heures                   heures,
  ti.taux_hetd_service        taux_service_du,
  ti.taux_hetd_complementaire taux_service_compl
FROM
  volume_horaire               vh
  JOIN service                  s ON s.id     = vh.service_id
  JOIN type_intervention       ti ON ti.id    = vh.type_intervention_id
  JOIN v_volume_horaire_etat  vhe ON vhe.volume_horaire_id = vh.id
  JOIN etat_volume_horaire    evh ON evh.id = vhe.etat_volume_horaire_id
WHERE
  1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction, ose_formule.get_date_obs )
  AND 1 = ose_divers.comprise_entre( s.histo_creation,   s.histo_destruction,   ose_formule.get_date_obs )
  AND vh.heures <> 0
  AND vh.motif_non_paiement_id IS NULL;
--------------------------------------------------------
--  DDL for View V_FORMULE_VOLUME_HORAIRE_REF
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_FORMULE_VOLUME_HORAIRE_REF" ("ID", "SERVICE_REFERENTIEL_ID", "INTERVENANT_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ORDRE", "HEURES") AS 
  SELECT
  vhr.id                      id,
  sr.id                       service_referentiel_id,
  sr.intervenant_id           intervenant_id,
  vhr.type_volume_horaire_id  type_volume_horaire_id,
  evh.id                      etat_volume_horaire_id,
  evh.ordre                   etat_volume_horaire_ordre,
  vhr.heures                  heures
FROM
  volume_horaire_ref               vhr
  JOIN service_referentiel          sr ON sr.id     = vhr.service_referentiel_id
  JOIN v_volume_horaire_ref_etat  vher ON vher.volume_horaire_ref_id = vhr.id
  JOIN etat_volume_horaire         evh ON evh.id = vher.etat_volume_horaire_id
WHERE
  1 = ose_divers.comprise_entre( vhr.histo_creation, vhr.histo_destruction, ose_formule.get_date_obs )
  AND 1 = ose_divers.comprise_entre( sr.histo_creation,   sr.histo_destruction,   ose_formule.get_date_obs )
  AND vhr.heures <> 0;
--------------------------------------------------------
--  DDL for View V_FR_SERVICE_CENTRE_COUT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_FR_SERVICE_CENTRE_COUT" ("FORMULE_RESULTAT_SERVICE_ID", "CENTRE_COUT_ID") AS 
  SELECT
  frs.id formule_resultat_service_id, cc.id centre_cout_id
FROM
  formule_resultat_service   frs
  JOIN service                 s ON s.id = frs.service_id
  JOIN element_pedagogique    ep ON ep.id = s.element_pedagogique_id
  JOIN centre_cout            cc ON 1 = ose_divers.comprise_entre( cc.histo_creation, cc.histo_destruction )
                                
  JOIN centre_cout_structure ccs ON ccs.centre_cout_id = cc.id 
                                AND ccs.structure_id = ep.structure_id 
                                AND 1 = ose_divers.comprise_entre( ccs.histo_creation, ccs.histo_destruction )
                                
  JOIN cc_activite             a ON a.id = cc.activite_id 
                                AND 1 = ose_divers.comprise_entre( a.histo_creation, a.histo_destruction )
                                
  JOIN type_ressource         tr ON tr.id = cc.type_ressource_id 
                                AND 1 = ose_divers.comprise_entre( tr.histo_creation, tr.histo_destruction )
WHERE
  (
    (frs.heures_compl_fi > 0 AND tr.fi = 1 AND a.fi = 1 )
    OR (frs.heures_compl_fa > 0 AND tr.fa = 1 AND a.fa = 1 )
    OR (frs.heures_compl_fc > 0 AND tr.fc = 1 AND a.fc = 1 )
    OR (frs.heures_compl_fc_majorees > 0 AND tr.fc_majorees = 1 AND a.fc_majorees = 1 )
  )

UNION

SELECT
  frs.id formule_resultat_service_id, cc.id
FROM
  formule_resultat_service   frs
  JOIN service                 s ON s.id = frs.service_id 
                                AND s.element_pedagogique_id IS NULL
                                
  JOIN intervenant             i ON i.id = s.intervenant_id
  JOIN centre_cout            cc ON 1 = ose_divers.comprise_entre( cc.histo_creation, cc.histo_destruction )
  
  JOIN centre_cout_structure ccs ON ccs.centre_cout_id = cc.id 
                                AND ccs.structure_id = i.structure_id 
                                AND 1 = ose_divers.comprise_entre( ccs.histo_creation, ccs.histo_destruction )
                                
  JOIN cc_activite             a ON a.id = cc.activite_id 
                                AND 1 = ose_divers.comprise_entre( a.histo_creation, a.histo_destruction )
                                
  JOIN type_ressource         tr ON tr.id = cc.type_ressource_id 
                                AND 1 = ose_divers.comprise_entre( tr.histo_creation, tr.histo_destruction )
WHERE
  (
    (frs.heures_compl_fi > 0 AND tr.fi = 1 AND a.fi = 1 )
    OR (frs.heures_compl_fa > 0 AND tr.fa = 1 AND a.fa = 1 )
    OR (frs.heures_compl_fc > 0 AND tr.fc = 1 AND a.fc = 1 )
    OR (frs.heures_compl_fc_majorees > 0 AND tr.fc_majorees = 1 AND a.fc_majorees = 1 )
  );
--------------------------------------------------------
--  DDL for View V_FR_SERVICE_REF_CENTRE_COUT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_FR_SERVICE_REF_CENTRE_COUT" ("FORMULE_RESULTAT_SERV_REF_ID", "CENTRE_COUT_ID") AS 
  SELECT
  frsr.id formule_resultat_serv_ref_id, cc.id
FROM
  formule_resultat_service_ref   frsr
  JOIN service_referentiel    sr ON sr.id = frsr.service_referentiel_id
  JOIN centre_cout            cc ON 1 = ose_divers.comprise_entre( cc.histo_creation, cc.histo_destruction )
                                
  JOIN centre_cout_structure ccs ON ccs.centre_cout_id = cc.id 
                                AND ccs.structure_id = sr.structure_id 
                                AND 1 = ose_divers.comprise_entre( ccs.histo_creation, ccs.histo_destruction )
                                
  JOIN cc_activite             a ON a.id = cc.activite_id 
                                AND 1 = ose_divers.comprise_entre( a.histo_creation, a.histo_destruction )
                                
  JOIN type_ressource         tr ON tr.id = cc.type_ressource_id 
                                AND 1 = ose_divers.comprise_entre( tr.histo_creation, tr.histo_destruction )
WHERE
  frsr.heures_compl_referentiel > 0 AND tr.referentiel = 1;
--------------------------------------------------------
--  DDL for View V_HAS_DMEP_A_FAIRE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_HAS_DMEP_A_FAIRE" ("INTERVENANT_ID", "STRUCTURE_ID", "HAS_DMEP_A_FAIRE") AS 
  SELECT 
  intervenant_id,
  structure_id,
  CASE WHEN
    SUM(CASE WHEN heures_dmep > heures_compl THEN heures_compl ELSE heures_dmep END) < SUM(heures_compl)
  THEN 1 ELSE 0 END has_dmep_a_faire
FROM
  (
  SELECT
    fr.intervenant_id intervenant_id,
    NVL( ep.structure_id, i.structure_id ) structure_id,
    frs.heures_compl_fi + frs.heures_compl_fa + frs.heures_compl_fc + frs.heures_compl_fc_majorees heures_compl,
    SUM( NVL(mep.heures,0) ) OVER (PARTITION BY frs.id) heures_dmep,
    SUM( NVL(CASE WHEN mep.periode_paiement_id IS NOT NULL THEN mep.heures ELSE 0 END,0) ) OVER (PARTITION BY frs.id) heures_mep,
    ROW_NUMBER() OVER (PARTITION BY frs.id ORDER BY 1) index__
  FROM
    formule_resultat_service frs
    JOIN formule_resultat fr ON fr.id = frs.formule_resultat_id
    JOIN type_volume_horaire tvh ON tvh.id = fr.type_volume_horaire_id AND tvh.code = 'REALISE'
    JOIN etat_volume_horaire evh ON evh.id = fr.etat_volume_horaire_id AND evh.code = 'valide'
    JOIN intervenant i on i.id = fr.intervenant_id
    JOIN service s ON s.id = frs.service_id
    LEFT JOIN element_pedagogique ep on ep.id = s.element_pedagogique_id
    LEFT JOIN mise_en_paiement mep ON mep.formule_res_service_id = frs.id AND 1 = ose_divers.comprise_entre(mep.histo_creation, mep.histo_destruction)

  UNION 

    SELECT
    fr.intervenant_id intervenant_id,
    NVL( s.structure_id, i.structure_id ) structure_id,
    frs.heures_compl_referentiel heures_compl,
    SUM( NVL(mep.heures,0) ) OVER (PARTITION BY frs.id) heures_dmep,
    SUM( NVL(CASE WHEN mep.periode_paiement_id IS NOT NULL THEN mep.heures ELSE 0 END,0) ) OVER (PARTITION BY frs.id) heures_mep,
    ROW_NUMBER() OVER (PARTITION BY frs.id ORDER BY 1) index__
  FROM
    formule_resultat_service_ref frs
    JOIN formule_resultat fr ON fr.id = frs.formule_resultat_id
    JOIN type_volume_horaire tvh ON tvh.id = fr.type_volume_horaire_id AND tvh.code = 'REALISE'
    JOIN etat_volume_horaire evh ON evh.id = fr.etat_volume_horaire_id AND evh.code = 'valide'
    JOIN intervenant i on i.id = fr.intervenant_id
    JOIN service_referentiel s ON s.id = frs.service_referentiel_id
    LEFT JOIN mise_en_paiement mep ON mep.formule_res_service_ref_id = frs.id AND 1 = ose_divers.comprise_entre(mep.histo_creation, mep.histo_destruction)
  )mep
WHERE
  index__ = 1
GROUP BY
  intervenant_id,
  structure_id;
--------------------------------------------------------
--  DDL for View V_HETD_PREV_VAL_STRUCT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_HETD_PREV_VAL_STRUCT" ("ANNEE_ID", "STRUCTURE_ID", "HEURES") AS 
  SELECT
  annee_id,
  structure_id,
  sum(heures) heures

FROM 
(
SELECT
  i.annee_id,
  NVL( ep.structure_id, i.structure_id ) structure_id,
  frs.total heures
FROM
  formule_resultat_service frs
  JOIN formule_resultat fr ON fr.id = frs.formule_resultat_id
  JOIN type_volume_horaire tvh ON tvh.id = fr.type_volume_horaire_id
  JOIN etat_volume_horaire evh ON evh.id = fr.etat_volume_horaire_id
  JOIN intervenant i ON i.id = fr.intervenant_id
  JOIN service s ON s.id = frs.service_id
  LEFT JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id

WHERE
  tvh.code = 'PREVU'
  AND evh.code = 'valide'
) t1

GROUP BY
  annee_id, structure_id;
--------------------------------------------------------
--  DDL for View V_IMPORT_TAB_COLS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_IMPORT_TAB_COLS" ("TABLE_NAME", "COLUMN_NAME", "DATA_TYPE", "LENGTH", "NULLABLE", "HAS_DEFAULT", "C_TABLE_NAME", "C_COLUMN_NAME", "IMPORT_ACTIF") AS 
  WITH importable_tables (table_name )AS (
  SELECT
  t.table_name
FROM
  user_tab_cols c
  join user_tables t on t.table_name = c.table_name
WHERE
  c.column_name = 'SOURCE_CODE'

MINUS

SELECT
  mview_name table_name
FROM
  USER_MVIEWS
), c_values (table_name, column_name, c_table_name, c_column_name) AS (
SELECT
  tc.table_name,
  tc.column_name,
  pcc.table_name c_table_name,
  pcc.column_name c_column_name
FROM
  user_tab_cols tc  
  JOIN USER_CONS_COLUMNS cc ON cc.table_name = tc.table_name AND cc.column_name = tc.column_name
  JOIN USER_CONSTRAINTS c ON c.constraint_name = cc.constraint_name
  JOIN USER_CONSTRAINTS pc ON pc.constraint_name = c.r_constraint_name
  JOIN USER_CONS_COLUMNS pcc ON pcc.constraint_name = pc.constraint_name
WHERE
  c.constraint_type = 'R' AND pc.constraint_type = 'P'
)
SELECT
  tc.table_name,
  tc.column_name,
  tc.data_type,
  CASE WHEN tc.char_length = 0 THEN NULL ELSE tc.char_length END length,
  CASE WHEN tc.nullable = 'Y' THEN 1 ELSE 0 END nullable,
  CASE WHEN tc.data_default IS NOT NULL THEN 1 ELSE 0 END has_default,
  cv.c_table_name,
  cv.c_column_name,
  CASE WHEN stc.table_name IS NULL THEN 0 ELSE 1 END AS import_actif
FROM
  user_tab_cols tc
  JOIN importable_tables t ON t.table_name = tc.table_name
  LEFT JOIN c_values cv ON cv.table_name = tc.table_name AND cv.column_name = tc.column_name
  LEFT JOIN user_tab_cols stc ON stc.table_name = 'SRC_' || tc.table_name AND stc.column_name = tc.column_name
WHERE
  tc.column_name not like 'HISTO_%'
ORDER BY
  tc.table_name, tc.column_id;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_1010
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_1010" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  i.structure_id
FROM
  tbl_workflow w
  JOIN tbl_workflow wc ON wc.intervenant_id = w.intervenant_id
  JOIN intervenant i ON i.id = w.intervenant_id
WHERE
  w.etape_code = 'PJ_SAISIE'
  AND wc.etape_code = 'SERVICE_SAISIE'
  AND wc.realisation > 0
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_1020
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_1020" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  i.structure_id
FROM
  tbl_workflow w
  JOIN tbl_workflow wc ON wc.intervenant_id = w.intervenant_id
  JOIN intervenant i ON i.id = w.intervenant_id
WHERE
  w.etape_code = 'PJ_VALIDATION'
  AND wc.etape_code = 'PJ_SAISIE'
  AND wc.objectif = wc.realisation
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_110
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_110" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT 
  rownum id, 
  t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM (

SELECT DISTINCT
  s.annee_id       annee_id,
  s.intervenant_id intervenant_id,
  s.structure_id   structure_id
FROM
  tbl_service s
WHERE
  s.type_intervenant_code = 'P'
  AND s.type_volume_horaire_code = 'PREVU'
  AND s.intervenant_structure_id <> s.structure_id
  AND s.valide > 0
  AND s.structure_id IS NOT NULL

) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_120
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_120" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT 
  rownum id, 
  t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM (

SELECT DISTINCT
  s.annee_id annee_id,
  s.intervenant_id intervenant_id,
  s.structure_id structure_id
FROM
  tbl_service s
WHERE
  s.type_intervenant_code = 'P'
  AND s.type_volume_horaire_code = 'PREVU'
  AND s.intervenant_structure_id <> s.structure_id
  AND s.valide > 0
  AND s.structure_id IS NOT NULL

) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_130
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_130" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT 
  rownum id, 
  t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM (

SELECT DISTINCT
  s.annee_id annee_id,
  s.intervenant_id intervenant_id,
  i.structure_id structure_id
FROM
  tbl_service s
  JOIN intervenant i ON i.id = s.intervenant_id
  JOIN statut_intervenant si ON si.id = i.statut_id
WHERE
  si.tem_biatss = 1
  AND s.type_volume_horaire_code = 'PREVU'
  AND s.intervenant_structure_id <> s.structure_id
  AND s.valide > 0
  AND s.structure_id IS NOT NULL

) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_210
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_210" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT
  rownum id,
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM 
  tbl_workflow w
WHERE
  w.atteignable = 1
  AND w.etape_code = 'CONSEIL_RESTREINT'
  AND w.objectif > 0
  AND w.realisation < 1;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_220
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_220" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT
  rownum id,
  w.annee_id,
  w.intervenant_id,
  i.structure_id
FROM 
  tbl_workflow w
  JOIN intervenant i ON i.id = w.intervenant_id
WHERE
  w.atteignable = 1
  AND w.etape_code = 'CONSEIL_ACADEMIQUE'
  AND w.objectif > 0
  AND w.realisation < 1;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_310
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_310" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  WITH caok AS (
  SELECT
    w.intervenant_id
  FROM 
    tbl_workflow w
  WHERE
    w.objectif > 0
    AND w.etape_code = 'CONSEIL_ACADEMIQUE'
    AND w.realisation = w.objectif
)
SELECT
  rownum id,
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM 
  tbl_workflow w
  JOIN caok ON caok.intervenant_id = w.intervenant_id
WHERE
  w.atteignable = 1
  AND w.etape_code = 'CONTRAT'
  AND w.objectif > 0
  AND w.realisation < 1;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_320
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_320" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT
  rownum id,
  t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID"
FROM (
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM 
  tbl_workflow w
  LEFT JOIN tbl_contrat c ON c.INTERVENANT_ID = w.intervenant_id AND w.structure_id = c.structure_id
WHERE
  w.atteignable = 1
  AND w.etape_code = 'CONTRAT'
  AND w.objectif > 0
  AND w.realisation = 0
  AND NVL(c.EDITE,0) <> 1
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_330
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_330" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  WITH has_contrat AS (
  SELECT DISTINCT
    intervenant_id
  FROM
    tbl_contrat
  WHERE
    edite > 0
)
SELECT
  rownum id,
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM 
  tbl_workflow w
  JOIN has_contrat hc ON hc.intervenant_id = w.intervenant_id
WHERE
  w.atteignable = 1
  AND w.etape_code = 'CONTRAT'
  AND w.objectif > 0
  AND w.realisation < w.objectif;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_340
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_340" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT
  rownum id,
  s.annee_id,
  s.intervenant_id,
  s.structure_id
FROM
  tbl_service s
  JOIN tbl_workflow w ON w.intervenant_id = s.intervenant_id AND w.structure_id = s.structure_id
WHERE
  s.type_intervenant_code = 'V'
  AND s.type_volume_horaire_code = 'PREVU'
  AND nbvh <> valide
  AND w.etape_code = 'CONTRAT'
  AND w.atteignable = 1
  AND w.objectif > 0
  AND w.realisation = w.objectif;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_350
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_350" ("ID", "INTERVENANT_ID", "ANNEE_ID", "STRUCTURE_ID", "CONTRAT_ID") AS 
  SELECT
  rownum id,
  t."INTERVENANT_ID",t."ANNEE_ID",t."STRUCTURE_ID",t."CONTRAT_ID"
FROM (
SELECT DISTINCT
  i.id intervenant_id,
  i.annee_id annee_id,
  c.structure_id structure_id,
  c.id contrat_id
FROM
  contrat                c
  JOIN contrat_fichier  cf ON cf.contrat_id = c.id
  JOIN fichier           f ON f.id = cf.fichier_id
                          AND 1 = ose_divers.comprise_entre( f.histo_creation, f.histo_destruction )
  JOIN intervenant i ON i.id = c.intervenant_id
WHERE
  1 = ose_divers.comprise_entre( c.histo_creation, c.histo_destruction )
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_360
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_360" ("ID", "INTERVENANT_ID", "ANNEE_ID", "STRUCTURE_ID", "CONTRAT_ID") AS 
  SELECT
  rownum id,
  t."INTERVENANT_ID",t."ANNEE_ID",t."STRUCTURE_ID",t."CONTRAT_ID"
FROM (
SELECT DISTINCT
  i.id intervenant_id,
  i.annee_id annee_id,
  c.structure_id structure_id,
  c.id contrat_id
FROM
  contrat                c
  JOIN intervenant i ON i.id = c.intervenant_id
WHERE
  1 = ose_divers.comprise_entre( c.histo_creation, c.histo_destruction )
  AND c.date_retour_signe IS NULL
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_410
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_410" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT
  rownum id,
  d.annee_id,
  d.intervenant_id,
  i.structure_id
FROM
  tbl_dossier d
  JOIN intervenant i ON i.id = d.intervenant_id
WHERE
  d.dossier_id IS NOT NULL
  AND d.validation_id IS NULL
  AND d.peut_saisir_dossier = 1;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_420
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_420" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM (
  SELECT DISTINCT
    i.annee_id annee_id,
    i.id intervenant_id,
    i.structure_id
  FROM
    indic_modif_dossier d
    JOIN intervenant i ON i.id = d.intervenant_id
  WHERE
    1 = ose_divers.comprise_entre( d.histo_creation, d.histo_destruction )
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_510
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_510" ("ID", "INTERVENANT_ID", "ANNEE_ID", "STRUCTURE_ID", "ELEMENTS") AS 
  WITH t AS (
SELECT
  s.intervenant_id,
  s.annee_id,
  s.structure_id,
  listagg( ep.source_code || ' - ' || ep.libelle, '||') WITHIN GROUP (ORDER BY ep.libelle) elements
FROM
  tbl_service s
  LEFT JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
WHERE
  (
    s.has_heures_mauvaise_periode = 1
    OR s.etape_histo = 0
    OR s.element_pedagogique_histo = 0
  )
  AND s.heures > 0
GROUP BY
  s.intervenant_id,
  s.annee_id,
  s.structure_id
)
SELECT
  rownum id, t."INTERVENANT_ID",t."ANNEE_ID",t."STRUCTURE_ID", t.elements
FROM t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_520
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_520" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "PLAFOND", "HEURES") AS 
  SELECT
  fr.id id,
  i.annee_id annee_id,
  i.id intervenant_id,
  i.structure_id structure_id,
  si.plafond_hc_hors_remu_fc plafond,
  fr.heures_compl_fa + fr.heures_compl_fc + fr.heures_compl_fi + fr.heures_compl_referentiel heures
FROM
  formule_resultat fr
  JOIN type_volume_horaire tvh ON tvh.id = fr.type_volume_horaire_id
  JOIN etat_volume_horaire evh ON evh.id = fr.etat_volume_horaire_id
  JOIN intervenant i ON i.id = fr.intervenant_id
  JOIN statut_intervenant si ON si.id = i.statut_id
WHERE
  tvh.code = 'PREVU'
  AND evh.code = 'saisi'
  AND si.plafond_hc_hors_remu_fc < fr.heures_compl_fa + fr.heures_compl_fc + fr.heures_compl_fi + fr.heures_compl_referentiel;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_530
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_530" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "PLAFOND", "HEURES") AS 
  SELECT
  fr.id id,
  i.annee_id annee_id,
  i.id intervenant_id,
  i.structure_id structure_id,
  si.plafond_hc_hors_remu_fc plafond,
  fr.heures_compl_fa + fr.heures_compl_fc + fr.heures_compl_fi + fr.heures_compl_referentiel heures
FROM
  formule_resultat fr
  JOIN type_volume_horaire tvh ON tvh.id = fr.type_volume_horaire_id
  JOIN etat_volume_horaire evh ON evh.id = fr.etat_volume_horaire_id
  JOIN intervenant i ON i.id = fr.intervenant_id
  JOIN statut_intervenant si ON si.id = i.statut_id
WHERE
  tvh.code = 'REALISE'
  AND evh.code = 'saisi'
  AND si.plafond_hc_hors_remu_fc < fr.heures_compl_fa + fr.heures_compl_fc + fr.heures_compl_fi + fr.heures_compl_referentiel;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_540
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_540" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "PLAFOND", "HEURES") AS 
  SELECT
  rownum id,
  p.annee_id annee_id,
  p.intervenant_id intervenant_id,
  p.structure_id structure_id,
  p.plafond plafond,
  p.heures heures
FROM
  v_plafond_fc_maj p
  JOIN type_volume_horaire tvh ON tvh.id = p.type_volume_horaire_id
  JOIN etat_volume_horaire evh ON evh.id = p.etat_volume_horaire_id
WHERE
  tvh.code = 'PREVU'
  AND evh.code = 'saisi'
  AND heures > plafond;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_550
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_550" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "PLAFOND", "HEURES") AS 
  SELECT
  rownum id,
  p.annee_id annee_id,
  p.intervenant_id intervenant_id,
  p.structure_id structure_id,
  p.plafond plafond,
  p.heures heures
FROM
  v_plafond_fc_maj p
  JOIN type_volume_horaire tvh ON tvh.id = p.type_volume_horaire_id
  JOIN etat_volume_horaire evh ON evh.id = p.etat_volume_horaire_id
WHERE
  tvh.code = 'REALISE'
  AND evh.code = 'saisi'
  AND heures > plafond;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_610
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_610" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'SERVICE_VALIDATION'
  AND w.type_intervenant_code = 'P'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_620
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_620" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'REFERENTIEL_VALIDATION'
  AND w.type_intervenant_code = 'P'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_630
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_630" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  i.structure_id
FROM
  tbl_workflow w
  JOIN intervenant i ON i.id = w.intervenant_id
WHERE
  w.etape_code = 'CLOTURE_REALISE'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_640
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_640" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
  JOIN tbl_workflow wc ON wc.intervenant_id = w.intervenant_id
WHERE
  w.etape_code = 'SERVICE_VALIDATION_REALISE'
  AND w.objectif > w.realisation
  AND w.atteignable = 1
  
  AND wc.etape_code = 'CLOTURE_REALISE'
  AND wc.objectif = wc.realisation
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_650
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_650" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "STRUCTURES_CONCERNEES") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID",t."STRUCTURES_CONCERNEES" FROM
(
SELECT
  w.annee_id,
  w.intervenant_id,
  i.structure_id,
  LISTAGG(s.libelle_court, '||') WITHIN GROUP (ORDER BY s.libelle_court) structures_concernees
FROM
  tbl_workflow w
  JOIN tbl_workflow wc ON wc.intervenant_id = w.intervenant_id
  JOIN intervenant i ON i.id = wc.intervenant_id
  JOIN structure s ON s.id = w.structure_id
WHERE
  w.etape_code = 'SERVICE_VALIDATION_REALISE'
  AND w.objectif > w.realisation
  AND w.atteignable = 1
  
  AND wc.etape_code = 'CLOTURE_REALISE'
  AND wc.objectif = wc.realisation
  AND w.structure_id <> i.structure_id
GROUP BY
  w.annee_id,
  w.intervenant_id,
  i.structure_id
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_660
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_660" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT
  w.annee_id,
  w.intervenant_id,
  i.structure_id
FROM
  tbl_workflow w
  JOIN tbl_workflow wc ON wc.intervenant_id = w.intervenant_id
  JOIN intervenant i ON i.id = wc.intervenant_id
  JOIN structure s ON s.id = w.structure_id
WHERE
  w.etape_code = 'REFERENTIEL_VALIDATION_REALISE'
  AND w.objectif > w.realisation
  AND w.atteignable = 1
  
  AND wc.etape_code = 'CLOTURE_REALISE'
  AND wc.objectif = wc.realisation
  AND w.structure_id = i.structure_id
GROUP BY
  w.annee_id,
  w.intervenant_id,
  i.structure_id
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_670
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_670" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "STRUCTURES_CONCERNEES") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID",t."STRUCTURES_CONCERNEES" FROM
(
SELECT
  w.annee_id,
  w.intervenant_id,
  i.structure_id,
  LISTAGG(s.libelle_court, '||') WITHIN GROUP (ORDER BY s.libelle_court) structures_concernees
FROM
  tbl_workflow w
  JOIN tbl_workflow wc ON wc.intervenant_id = w.intervenant_id
  JOIN intervenant i ON i.id = wc.intervenant_id
  JOIN structure s ON s.id = w.structure_id
WHERE
  w.etape_code = 'REFERENTIEL_VALIDATION_REALISE'
  AND w.objectif > w.realisation
  AND w.atteignable = 1
  
  AND wc.etape_code = 'CLOTURE_REALISE'
  AND wc.objectif = wc.realisation
  AND w.structure_id <> i.structure_id
GROUP BY
  w.annee_id,
  w.intervenant_id,
  i.structure_id
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_680
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_680" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "PLAFOND", "HEURES") AS 
  SELECT
  fr.id id,
  i.annee_id annee_id,
  i.id intervenant_id,
  i.structure_id structure_id,
  si.plafond_referentiel plafond,
  fr.heures_compl_referentiel heures
FROM
  formule_resultat fr
  JOIN type_volume_horaire tvh ON tvh.id = fr.type_volume_horaire_id
  JOIN etat_volume_horaire evh ON evh.id = fr.etat_volume_horaire_id
  JOIN intervenant i ON i.id = fr.intervenant_id
  JOIN statut_intervenant si ON si.id = i.statut_id
WHERE
  tvh.code = 'PREVU'
  AND evh.code = 'saisi'
  AND si.plafond_referentiel < fr.heures_compl_referentiel;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_690
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_690" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "PLAFOND", "HEURES") AS 
  SELECT
  fr.id id,
  i.annee_id annee_id,
  i.id intervenant_id,
  i.structure_id structure_id,
  si.plafond_referentiel plafond,
  fr.heures_compl_referentiel heures
FROM
  formule_resultat fr
  JOIN type_volume_horaire tvh ON tvh.id = fr.type_volume_horaire_id
  JOIN etat_volume_horaire evh ON evh.id = fr.etat_volume_horaire_id
  JOIN intervenant i ON i.id = fr.intervenant_id
  JOIN statut_intervenant si ON si.id = i.statut_id
WHERE
  tvh.code = 'REALISE'
  AND evh.code = 'saisi'
  AND si.plafond_referentiel < fr.heures_compl_referentiel;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_710
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_710" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'SERVICE_VALIDATION'
  AND w.type_intervenant_code = 'E'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_720
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_720" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'SERVICE_VALIDATION_REALISE'
  AND w.type_intervenant_code = 'E'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_810
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_810" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'DEMANDE_MEP'
  AND w.type_intervenant_code = 'P'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_820
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_820" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'SAISIE_MEP'
  AND w.type_intervenant_code = 'P'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_910
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_910" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'DEMANDE_MEP'
  AND w.type_intervenant_code = 'E'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
--------------------------------------------------------
--  DDL for View V_INDICATEUR_920
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDICATEUR_920" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT rownum id, t."ANNEE_ID",t."INTERVENANT_ID",t."STRUCTURE_ID" FROM
(
SELECT DISTINCT
  w.annee_id,
  w.intervenant_id,
  w.structure_id
FROM
  tbl_workflow w
WHERE
  w.etape_code = 'SAISIE_MEP'
  AND w.type_intervenant_code = 'E'
  AND w.atteignable = 1
  AND w.objectif > w.realisation
) t;
--------------------------------------------------------
--  DDL for View V_INDIC_ATTENTE_DEMANDE_MEP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDIC_ATTENTE_DEMANDE_MEP" ("ID", "INTERVENANT_ID", "SOURCE_CODE", "CODE", "ANNEE_ID", "STRUCTURE_ID", "TOTAL_HEURES_MEP", "TOTAL_HEURES_COMPL") AS 
  select to_number(i.id||dmep.structure_id) id, i.id intervenant_id, i.source_code, ti.code, i.annee_id, dmep.structure_id, 0 TOTAL_HEURES_MEP, 0 TOTAL_HEURES_COMPL
  from intervenant i
  join statut_intervenant si on si.id = i.statut_id
  join type_intervenant ti on ti.id = si.type_intervenant_id
  -- l'intervenant doit avoir des heures disponibles pour une demande de MEP
  join V_HAS_DMEP_A_FAIRE dmep on dmep.intervenant_id = i.id and dmep.has_dmep_a_faire <> 0
  where (
    -- un vacataire n'a pas d'autre contrainte
    ti.code = 'E' 
    or 
    -- mais un permanent doit...
    (
      -- avoir sa saisie de service r√©alis√© cl√¥tur√©e
      exists (
        select * from validation v
        join type_validation tv on v.type_validation_id = tv.id and tv.code = 'CLOTURE_REALISE' 
        where v.intervenant_id = i.id and 1 = ose_divers.comprise_entre(v.histo_creation, v.histo_destruction)
      )
      -- et tous ses enseignements r√©alis√©s valid√©s (toutes composantes d'intervention confondues)
      and not exists (
        select * from volume_horaire vh
        join service s on vh.service_id = s.id and 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
        join type_volume_horaire tvh on vh.type_volume_horaire_id = tvh.id and tvh.code = 'REALISE'
        left join validation_vol_horaire vvh on vvh.volume_horaire_id = vh.id
        left join validation v on vvh.validation_id = v.id and 1 = ose_divers.comprise_entre(v.histo_creation, v.histo_destruction)
        left join type_validation tv on v.type_validation_id = tv.id and tv.code = 'SERVICES_PAR_COMP' 
        where s.intervenant_id = i.id and v.id is null and 1 = ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction)
      )
      -- et tout son r√©f√©rentiel r√©alis√© valid√© (toutes composantes d'intervention confondues)
      and not exists (
        select * from volume_horaire_ref vh
        join service_referentiel s on vh.service_referentiel_id = s.id and 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
        join type_volume_horaire tvh on vh.type_volume_horaire_id = tvh.id and tvh.code = 'REALISE'
        left join validation_vol_horaire_ref vvh on vvh.volume_horaire_ref_id = vh.id
        left join validation v on vvh.validation_id = v.id and 1 = ose_divers.comprise_entre(v.histo_creation, v.histo_destruction)
        left join type_validation tv on v.type_validation_id = tv.id and tv.code = 'SERVICES_PAR_COMP' 
        where s.intervenant_id = i.id and v.id is null and 1 = ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction)
      )
    )
  );
--------------------------------------------------------
--  DDL for View V_INDIC_ATTENTE_MEP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDIC_ATTENTE_MEP" ("ID", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "TOTAL_HEURES_MEP") AS 
  with 
  -- total des heures comp ayant fait l'objet d'une *demande* de mise en paiement
  mep as (
    select intervenant_id, structure_id, sum(nvl(mep_heures, 0)) total_heures_mep
    from (
      -- enseignements
      select 
        fr.intervenant_id, 
        nvl(ep.structure_id, i.structure_id) structure_id, 
        nvl(mep.heures, 0) mep_heures
      from mise_en_paiement mep
      join formule_resultat_service frs on mep.formule_res_service_id = frs.id
      join formule_resultat fr on frs.formule_resultat_id = fr.id
      join intervenant i on fr.intervenant_id = i.id
      join type_volume_horaire tvh on fr.type_volume_horaire_id = tvh.id and tvh.code = 'REALISE'
      join etat_volume_horaire evh on fr.etat_volume_horaire_id = evh.id and evh.code = 'valide'
      join service s on frs.service_id = s.id
      left join element_pedagogique ep on s.element_pedagogique_id = ep.id
      where 1 = ose_divers.comprise_entre(mep.histo_creation, mep.histo_destruction) and mep.date_mise_en_paiement is null -- si date_mise_en_paiement = null, c'est une demande
      union all
      -- referentiel
      select 
        fr.intervenant_id, 
        s.structure_id,
        nvl(mep.heures, 0) mep_heures
      from mise_en_paiement mep
      join formule_resultat_service_ref frs on mep.formule_res_service_ref_id = frs.id
      join formule_resultat fr on frs.formule_resultat_id = fr.id
      join intervenant i on fr.intervenant_id = i.id
      join type_volume_horaire tvh on fr.type_volume_horaire_id = tvh.id and tvh.code = 'REALISE'
      join etat_volume_horaire evh on fr.etat_volume_horaire_id = evh.id and evh.code = 'valide'
      join service_referentiel s on frs.service_referentiel_id = s.id
      where 1 = ose_divers.comprise_entre(mep.histo_creation, mep.histo_destruction) and mep.date_mise_en_paiement is null -- si date_mise_en_paiement = null, c'est une demande
    )
    group by intervenant_id, structure_id
  )
select to_number(intervenant_id||structure_id) id, 2014 annee_id, intervenant_id, structure_id, total_heures_mep from mep;
--------------------------------------------------------
--  DDL for View V_INDIC_ATT_VALID_ENS_AUTRE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDIC_ATT_VALID_ENS_AUTRE" ("ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT distinct 
    to_char(v.intervenant_id)||to_char(v.structure_id) as id,
    v.intervenant_id,
    v.structure_id
FROM v_indic_tous_services_valides v
INNER JOIN intervenant i                    ON V.INTERVENANT_ID = i.id              AND 1 = OSE_DIVERS.COMPRISE_ENTRE(i.HISTO_CREATION, i.HISTO_DESTRUCTION)
INNER JOIN TYPE_VOLUME_HORAIRE tvh          ON v.type_volume_horaire_id = tvh.id    AND tvh.code = 'REALISE'
INNER JOIN VALIDATION clot                  ON clot.intervenant_id = i.id           AND 1 = OSE_DIVERS.COMPRISE_ENTRE(clot.HISTO_CREATION, clot.HISTO_DESTRUCTION)
INNER JOIN TYPE_VALIDATION tv               ON tv.id = clot.type_validation_id      AND tv.code = 'CLOTURE_REALISE'
WHERE EXISTS
    (
        SELECT s2.ID 
        FROM SERVICE s2
        INNER JOIN ELEMENT_PEDAGOGIQUE ep2      ON s2.ELEMENT_PEDAGOGIQUE_ID  = ep2.ID  AND 1 = OSE_DIVERS.COMPRISE_ENTRE(ep2.HISTO_CREATION, ep2.HISTO_DESTRUCTION)
        INNER JOIN VOLUME_HORAIRE vh2           ON s2.ID = vh2.SERVICE_ID               AND 1 = OSE_DIVERS.COMPRISE_ENTRE(vh2.HISTO_CREATION, vh2.HISTO_DESTRUCTION)
        LEFT JOIN VALIDATION_VOL_HORAIRE vvh2   ON vh2.ID = vvh2.VOLUME_HORAIRE_ID
        LEFT JOIN VALIDATION val2               ON val2.ID = vvh2.VALIDATION_ID         AND 1 = OSE_DIVERS.COMPRISE_ENTRE(val2.HISTO_CREATION, val2.HISTO_DESTRUCTION)
        WHERE 
            s2.INTERVENANT_ID = v.intervenant_id
            AND 1 = OSE_DIVERS.COMPRISE_ENTRE(s2.HISTO_CREATION, s2.HISTO_DESTRUCTION)
            AND VH2.TYPE_VOLUME_HORAIRE_ID = V.TYPE_VOLUME_HORAIRE_ID
            AND ep2.structure_id <> v.structure_id -- autre composante d'intervention que celle qui a tout valid√©
            AND val2.ID IS NULL -- au moins un VH non valid√©
    );
--------------------------------------------------------
--  DDL for View V_INDIC_ATT_VALID_REF_AUTRE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDIC_ATT_VALID_REF_AUTRE" ("ID", "INTERVENANT_ID", "STRUCTURE_ID") AS 
  SELECT distinct 
    to_char(v.intervenant_id)||to_char(v.structure_id) as id,
    v.intervenant_id,
    v.structure_id
FROM v_indic_tous_services_valides v
INNER JOIN intervenant i                    ON V.INTERVENANT_ID = i.id              AND 1 = OSE_DIVERS.COMPRISE_ENTRE(i.HISTO_CREATION, i.HISTO_DESTRUCTION)
INNER JOIN TYPE_VOLUME_HORAIRE tvh          ON v.type_volume_horaire_id = tvh.id    AND tvh.code = 'REALISE'
INNER JOIN VALIDATION clot                  ON clot.intervenant_id = i.id           AND 1 = OSE_DIVERS.COMPRISE_ENTRE(clot.HISTO_CREATION, clot.HISTO_DESTRUCTION)
INNER JOIN TYPE_VALIDATION tv               ON tv.id = clot.type_validation_id      AND tv.code = 'CLOTURE_REALISE'
WHERE EXISTS
    (
        SELECT s.ID 
        FROM SERVICE_REFERENTIEL s
        INNER JOIN FONCTION_REFERENTIEL f       ON S.FONCTION_ID = f.ID                 AND 1 = OSE_DIVERS.COMPRISE_ENTRE(f.HISTO_CREATION, f.HISTO_DESTRUCTION)
        INNER JOIN VOLUME_HORAIRE_REF vh        ON s.ID = VH.SERVICE_REFERENTIEL_ID     AND 1 = OSE_DIVERS.COMPRISE_ENTRE(vh.HISTO_CREATION, vh.HISTO_DESTRUCTION)
        LEFT JOIN VALIDATION_VOL_HORAIRE vvh    ON vh.ID = vvh.VOLUME_HORAIRE_ID
        LEFT JOIN VALIDATION val                ON val.ID = vvh.VALIDATION_ID           AND 1 = OSE_DIVERS.COMPRISE_ENTRE(val.HISTO_CREATION, val.HISTO_DESTRUCTION)
        WHERE 
            s.INTERVENANT_ID = v.intervenant_id
            AND 1 = OSE_DIVERS.COMPRISE_ENTRE(s.HISTO_CREATION, s.HISTO_DESTRUCTION)
            AND VH.TYPE_VOLUME_HORAIRE_ID = V.TYPE_VOLUME_HORAIRE_ID
            AND s.structure_id <> v.structure_id -- autre composante d'intervention que celle qui a tout valid√©
            AND val.ID IS NULL -- au moins un VH non valid√©
    );
--------------------------------------------------------
--  DDL for View V_INDIC_ATT_VALID_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDIC_ATT_VALID_SERVICE" ("ID", "INTERVENANT_ID", "STRUCTURE_ID", "TYPE_VOLUME_HORAIRE_ID") AS 
  select distinct rownum id, i.id intervenant_id, nvl(ep.structure_id, i.structure_id) structure_id, vh.type_volume_horaire_id
from service s 
join intervenant i on i.id = s.intervenant_id and 1 = ose_divers.comprise_entre(i.histo_creation, i.histo_destruction)
join volume_horaire vh on vh.service_id = s.id and 1 = ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction)
join element_pedagogique ep on s.element_pedagogique_id = ep.id and 1 = ose_divers.comprise_entre(ep.histo_creation, ep.histo_destruction)
--join type_volume_horaire tvh on vh.type_volume_horaire_id = tvh.id and tvh.code = 'REALISE'
left join validation_vol_horaire vvh on vvh.volume_horaire_id = vh.id
left join validation v on vvh.validation_id = v.id and 1 = ose_divers.comprise_entre(v.histo_creation, v.histo_destruction)
where v.id is null and 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction);
--------------------------------------------------------
--  DDL for View V_INDIC_ATT_VALID_SERVICE_REF
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDIC_ATT_VALID_SERVICE_REF" ("ID", "INTERVENANT_ID", "STRUCTURE_ID", "TYPE_VOLUME_HORAIRE_ID") AS 
  select distinct rownum id, i.id intervenant_id, s.structure_id, vh.type_volume_horaire_id
from service_referentiel s 
join intervenant i on i.id = s.intervenant_id and 1 = ose_divers.comprise_entre(i.histo_creation, i.histo_destruction)
join volume_horaire_ref vh on vh.service_referentiel_id = s.id and 1 = ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction)
join fonction_referentiel f on s.fonction_id = f.id and 1 = ose_divers.comprise_entre(f.histo_creation, f.histo_destruction)
--join type_volume_horaire tvh on vh.type_volume_horaire_id = tvh.id and tvh.code = 'REALISE'
left join validation_vol_horaire_ref vvh on vvh.volume_horaire_ref_id = vh.id
left join validation v on vvh.validation_id = v.id and 1 = ose_divers.comprise_entre(v.histo_creation, v.histo_destruction)
where v.id is null and 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction);
--------------------------------------------------------
--  DDL for View V_INDIC_DEPASS_HC_HORS_REMU_FC
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDIC_DEPASS_HC_HORS_REMU_FC" ("ID", "ANNEE_ID", "INTERVENANT_ID", "TYPE_VOLUME_HORAIRE_ID", "STRUCTURE_ID", "TOTAL", "PLAFOND") AS 
  with totaux as (
  -- totaux HC FI+FA+FC+Ref par intervenant et type de VH
  select fr.intervenant_id, fr.type_volume_horaire_id, sum(fr.heures_compl_fi + fr.heures_compl_fa + fr.heures_compl_fc + fr.heures_compl_referentiel) total
  from formule_resultat fr
  join etat_volume_horaire evh on evh.id = fr.etat_volume_horaire_id and evh.code = 'saisi'
  group by fr.intervenant_id, fr.type_volume_horaire_id
),
depass as (
  -- totaux HC FI+FA+FC+Ref d√©passant le plafond HC par intervenant et type de VH
  select i.id intervenant_id, t.type_volume_horaire_id, t.total, si.plafond_hc_hors_remu_fc plafond
  from intervenant i
  join statut_intervenant si on i.statut_id = si.id and si.plafond_hc_hors_remu_fc is not null
  join totaux t on t.intervenant_id = i.id
  where t.total > si.plafond_hc_hors_remu_fc
),
str_interv as (
  -- structures d'intervention distinctes par intervenant et type de VH
  select distinct s.intervenant_id, vh.type_volume_horaire_id, coalesce(ep.structure_id, i.structure_id) structure_id
  from service s
  left join element_pedagogique ep on s.element_pedagogique_id = ep.id and 1 = ose_divers.comprise_entre(ep.histo_creation, ep.histo_destruction)
  join intervenant i on s.intervenant_id = i.id and 1 = ose_divers.comprise_entre(i.histo_creation, i.histo_destruction)
  join volume_horaire vh on vh.service_id = s.id and 1 = ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction)
  join v_vol_horaire_etat_multi vhe on vhe.volume_horaire_id = vh.id
  join etat_volume_horaire evh on vhe.etat_volume_horaire_id = evh.id and evh.code = 'saisi'
  where 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
)
select to_number(d.intervenant_id||d.type_volume_horaire_id||str.structure_id) id, 2014 annee_id, d.intervenant_id, d.type_volume_horaire_id, str.structure_id, d.total, d.plafond
from depass d
join str_interv str on str.intervenant_id = d.intervenant_id and str.type_volume_horaire_id = d.type_volume_horaire_id;
--------------------------------------------------------
--  DDL for View V_INDIC_DEPASS_REF
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDIC_DEPASS_REF" ("ID", "ANNEE_ID", "INTERVENANT_ID", "TYPE_VOLUME_HORAIRE_ID", "STRUCTURE_ID", "TOTAL", "PLAFOND") AS 
  with totaux as (
  select fr.intervenant_id, fr.type_volume_horaire_id, sum(fr.service_referentiel) total
  from formule_resultat fr
  join etat_volume_horaire evh on evh.id = fr.etat_volume_horaire_id and evh.code = 'saisi'
  group by fr.intervenant_id, fr.type_volume_horaire_id
  having sum(fr.service_referentiel) > 0
),
depass as (
  select i.id intervenant_id, t.type_volume_horaire_id, t.total, si.plafond_referentiel plafond
  from intervenant i
  join statut_intervenant si on i.statut_id = si.id and si.plafond_referentiel is not null and si.plafond_referentiel <> 0
  join totaux t on t.intervenant_id = i.id
  where t.total > si.plafond_referentiel
),
str_interv as (
  -- structures d'intervention distinctes par intervenant et type de VH
  select distinct s.intervenant_id, vh.type_volume_horaire_id, s.structure_id
  from service_referentiel s
  join volume_horaire_ref vh on vh.service_referentiel_id = s.id and 1 = ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction)
  join v_vol_horaire_ref_etat_multi vhe on vhe.volume_horaire_ref_id = vh.id
  join etat_volume_horaire evh on vhe.etat_volume_horaire_id = evh.id and evh.code = 'saisi'
  where 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
)
select to_number(d.intervenant_id||d.type_volume_horaire_id||str.structure_id) id, 2014 annee_id, d.intervenant_id, d.type_volume_horaire_id, str.structure_id, d.total, d.plafond
from depass d
join str_interv str on str.intervenant_id = d.intervenant_id and str.type_volume_horaire_id = d.type_volume_horaire_id;
--------------------------------------------------------
--  DDL for View V_INDIC_DIFF_DOSSIER
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDIC_DIFF_DOSSIER" ("ID", "NOM_USUEL", "ADRESSE_DOSSIER", "ADRESSE_IMPORT", "RIB_DOSSIER", "RIB_IMPORT", "NOM_USUEL_DOSSIER", "NOM_USUEL_IMPORT", "PRENOM_DOSSIER", "PRENOM_IMPORT") AS 
  WITH aa AS (
  SELECT a.*, ose_divers.formatted_adresse(
      a.NO_VOIE,
      a.NOM_VOIE,
      a.BATIMENT,
      a.MENTION_COMPLEMENTAIRE,
      a.LOCALITE,
      a.CODE_POSTAL,
      a.VILLE,
      a.PAYS_LIBELLE) to_string FROM adresse_intervenant a
)
select 
    i.id,
    i.nom_usuel,
    case when d.adresse <> a.to_string                                              then d.adresse                            else null end adresse_dossier,
    case when d.adresse <> a.to_string                                              then a.to_string                          else null end adresse_import,
    case when d.rib <> REPLACE(i.BIC || '-' || i.IBAN, ' ')                         then d.rib                                else null end rib_dossier,
    case when d.rib <> REPLACE(i.BIC || '-' || i.IBAN, ' ')                         then REPLACE(i.BIC || '-' || i.IBAN, ' ') else null end rib_import,
    case when UPPER(REPLACE(d.nom_usuel, ' ')) <> UPPER(REPLACE(i.nom_usuel, ' '))  then REPLACE(d.nom_usuel, ' ')            else null end nom_usuel_dossier,
    case when UPPER(REPLACE(d.nom_usuel, ' ')) <> UPPER(REPLACE(i.nom_usuel, ' '))  then REPLACE(i.nom_usuel, ' ')            else null end nom_usuel_import,
    case when UPPER(REPLACE(d.prenom, ' ')) <> UPPER(REPLACE(i.prenom, ' '))        then REPLACE(d.prenom, ' ')               else null end prenom_dossier,
    case when UPPER(REPLACE(d.prenom, ' ')) <> UPPER(REPLACE(i.prenom, ' '))        then REPLACE(i.prenom, ' ')               else null end prenom_import
  from intervenant i
  join dossier d on d.intervenant_id = i.id
  left join aa a on a.intervenant_id = i.id;
--------------------------------------------------------
--  DDL for View V_INDIC_TOUS_SERVICES_VALIDES
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INDIC_TOUS_SERVICES_VALIDES" ("INTERVENANT_ID", "STRUCTURE_ID", "TYPE_VOLUME_HORAIRE_ID") AS 
  with struct_ens_non_valides as (
    -- intervenants et structures d'intervention pour lesquelles des VH d'enseignement NE SONT PAS valid√©s
    SELECT distinct s.intervenant_id, ep.structure_id, vh.type_volume_horaire_id
    FROM SERVICE s
    INNER JOIN ELEMENT_PEDAGOGIQUE ep    ON s.ELEMENT_PEDAGOGIQUE_ID = ep.ID   AND 1 = OSE_DIVERS.COMPRISE_ENTRE(ep.HISTO_CREATION, ep.HISTO_DESTRUCTION)
    INNER JOIN VOLUME_HORAIRE vh         ON s.ID = vh.SERVICE_ID               AND 1 = OSE_DIVERS.COMPRISE_ENTRE(vh.HISTO_CREATION, vh.HISTO_DESTRUCTION)
    LEFT JOIN VALIDATION_VOL_HORAIRE vvh ON vvh.volume_horaire_id = vh.id 
    LEFT JOIN VALIDATION val             ON val.ID = vvh.validation_id         AND 1 = OSE_DIVERS.COMPRISE_ENTRE(val.HISTO_CREATION, val.HISTO_DESTRUCTION)
    WHERE 1 = OSE_DIVERS.COMPRISE_ENTRE(s.HISTO_CREATION, s.HISTO_DESTRUCTION)
    AND val.id is null
),
struct_ref_non_valides as (
    -- intervenants et structures d'intervention pour lesquelles des VH de r√©f√©rentiel NE SONT PAS valid√©s
    SELECT distinct s.intervenant_id, s.structure_id, vh.type_volume_horaire_id
    FROM SERVICE_REFERENTIEL s
    INNER JOIN FONCTION_REFERENTIEL f        ON s.FONCTION_ID = f.ID               AND 1 = OSE_DIVERS.COMPRISE_ENTRE(f.HISTO_CREATION, f.HISTO_DESTRUCTION)
    INNER JOIN VOLUME_HORAIRE_REF vh         ON s.ID = VH.SERVICE_REFERENTIEL_ID   AND 1 = OSE_DIVERS.COMPRISE_ENTRE(vh.HISTO_CREATION, vh.HISTO_DESTRUCTION)
    LEFT JOIN VALIDATION_VOL_HORAIRE_REF vvh ON VVH.VOLUME_HORAIRE_REF_ID = vh.id 
    LEFT JOIN VALIDATION val                 ON val.ID = vvh.validation_id         AND 1 = OSE_DIVERS.COMPRISE_ENTRE(val.HISTO_CREATION, val.HISTO_DESTRUCTION)
    WHERE 1 = OSE_DIVERS.COMPRISE_ENTRE(s.HISTO_CREATION, s.HISTO_DESTRUCTION)
    AND val.id is null
)
-- intervenants et structures d'intervention pour lesquelles tous les VH de r√©f√©rentiel et tous les VH d'enseignement SONT valid√©s
SELECT distinct s.intervenant_id, ep.structure_id, vh.type_volume_horaire_id
FROM SERVICE s
INNER JOIN ELEMENT_PEDAGOGIQUE ep     ON s.ELEMENT_PEDAGOGIQUE_ID = ep.ID   AND 1 = OSE_DIVERS.COMPRISE_ENTRE(ep.HISTO_CREATION, ep.HISTO_DESTRUCTION)
INNER JOIN VOLUME_HORAIRE vh          ON s.ID = vh.SERVICE_ID               AND 1 = OSE_DIVERS.COMPRISE_ENTRE(vh.HISTO_CREATION, vh.HISTO_DESTRUCTION)
WHERE not exists (
    SELECT * from struct_ens_non_valides ens_nv 
    where ens_nv.INTERVENANT_ID = s.intervenant_id and ens_nv.structure_id = ep.structure_id and ens_nv.type_volume_horaire_id = vh.type_volume_horaire_id
)
-----
UNION
-----
SELECT distinct s.intervenant_id, s.structure_id, vh.type_volume_horaire_id
FROM SERVICE_REFERENTIEL s
INNER JOIN FONCTION_REFERENTIEL f     ON s.FONCTION_ID = f.ID               AND 1 = OSE_DIVERS.COMPRISE_ENTRE(f.HISTO_CREATION, f.HISTO_DESTRUCTION)
INNER JOIN VOLUME_HORAIRE_REF vh      ON s.ID = VH.SERVICE_REFERENTIEL_ID   AND 1 = OSE_DIVERS.COMPRISE_ENTRE(vh.HISTO_CREATION, vh.HISTO_DESTRUCTION)
WHERE 1 = OSE_DIVERS.COMPRISE_ENTRE(s.HISTO_CREATION, s.HISTO_DESTRUCTION)
and not exists (
    SELECT * from struct_ref_non_valides ref_nv 
    where ref_nv.INTERVENANT_ID = s.intervenant_id and ref_nv.structure_id = s.structure_id and ref_nv.type_volume_horaire_id = vh.type_volume_horaire_id
);
--------------------------------------------------------
--  DDL for View V_INTERVENANT_RECHERCHE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_INTERVENANT_RECHERCHE" ("ID", "SOURCE_CODE", "NOM_USUEL", "NOM_PATRONYMIQUE", "PRENOM", "DATE_NAISSANCE", "STRUCTURE", "CIVILITE", "CRITERE", "ANNEE_ID") AS 
  SELECT
  i.id,
  i.source_code,
  i.nom_usuel,
  i.nom_patronymique,
  i.prenom,
  i.date_naissance,
  s.libelle_court structure,
  c.libelle_long civilite,
  i.critere_recherche critere,
  i.annee_id
FROM
  intervenant i
  JOIN structure s ON s.id = i.structure_id
  JOIN civilite c ON c.id = i.civilite_id
WHERE
  1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  
UNION ALL

SELECT
  null id,
  mir.source_code,
  mir.nom_usuel,
  mir.nom_patronymique,
  mir.prenom,
  mir.date_naissance,
  mir.structure,
  mir.civilite,
  mir.critere,
  mir.annee_id
FROM
  mv_intervenant_recherche mir;
--------------------------------------------------------
--  DDL for View V_MEP_INTERVENANT_STRUCTURE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_MEP_INTERVENANT_STRUCTURE" ("ID", "MISE_EN_PAIEMENT_ID", "INTERVENANT_ID", "STRUCTURE_ID", "PERIODE_PAIEMENT_ID", "DOMAINE_FONCTIONNEL_ID") AS 
  SELECT
  rownum id, 
  t1."MISE_EN_PAIEMENT_ID",
  t1."INTERVENANT_ID",
  t1."STRUCTURE_ID", 
  t1.periode_paiement_id, 
  t1.domaine_fonctionnel_id
FROM (

SELECT
  mep.id                   mise_en_paiement_id,
  fr.intervenant_id        intervenant_id,
  sr.structure_id          structure_id,
  mep.periode_paiement_id  periode_paiement_id,
  COALESCE(mep.domaine_fonctionnel_id, fr.domaine_fonctionnel_id) domaine_fonctionnel_id
FROM
  formule_resultat fr
  JOIN formule_resultat_service_ref frsr ON frsr.formule_resultat_id = fr.id
  JOIN mise_en_paiement              mep ON mep.formule_res_service_ref_id = frsr.id
  JOIN centre_cout                    cc ON cc.id = mep.centre_cout_id
  JOIN service_referentiel            sr ON sr.id = frsr.service_referentiel_id
  JOIN fonction_referentiel           fr ON fr.id = sr.fonction_id
UNION

SELECT
  mep.id                                      mise_en_paiement_id,
  fr.intervenant_id                           intervenant_id,
  COALESCE( ep.structure_id, i.structure_id ) structure_id,
  mep.periode_paiement_id                     periode_paiement_id,
  COALESCE(
    mep.domaine_fonctionnel_id, 
    e.domaine_fonctionnel_id, 
    to_number((SELECT valeur FROM parametre WHERE nom = 'domaine_fonctionnel_ens_ext'))
  ) domaine_fonctionnel_id
FROM
  formule_resultat fr
  JOIN intervenant                       i ON i.id = fr.intervenant_id
  JOIN formule_resultat_service        frs ON frs.formule_resultat_id = fr.id
  JOIN mise_en_paiement                mep ON mep.formule_res_service_id = frs.id
  JOIN centre_cout                      cc ON cc.id = mep.centre_cout_id
  JOIN service                           s ON s.id = frs.service_id
  LEFT JOIN element_pedagogique         ep ON ep.id = s.element_pedagogique_id
  LEFT JOIN etape                        e ON e.id = ep.etape_id
) t1;
--------------------------------------------------------
--  DDL for View V_NIVEAU_FORMATION
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_NIVEAU_FORMATION" ("ID", "CODE", "LIBELLE_LONG", "NIVEAU", "GROUPE_TYPE_FORMATION_ID") AS 
  SELECT DISTINCT
  ose_divers.niveau_formation_id_calc( gtf.id, gtf.pertinence_niveau, e.niveau ) id,
  gtf.libelle_court || e.niveau code,
  gtf.libelle_long,
  e.niveau,
  gtf.id groupe_type_formation_id
FROM
  etape e
  JOIN type_formation tf ON tf.id = e.type_formation_id AND ose_divers.comprise_entre( tf.histo_creation, tf.histo_destruction ) = 1
  JOIN groupe_type_formation gtf ON gtf.id = tf.groupe_id AND ose_divers.comprise_entre( gtf.histo_creation, gtf.histo_destruction ) = 1
WHERE
  ose_divers.comprise_entre( e.histo_creation, e.histo_destruction ) = 1
  AND ose_divers.niveau_formation_id_calc( gtf.id, gtf.pertinence_niveau, e.niveau ) IS NOT NULL
ORDER BY
  gtf.libelle_long, e.niveau;
--------------------------------------------------------
--  DDL for View V_PJ_HEURES
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_PJ_HEURES" ("NOM_USUEL", "PRENOM", "INTERVENANT_ID", "SOURCE_CODE", "ANNEE_ID", "CATEG", "TOTAL_HEURES") AS 
  SELECT
  i.NOM_USUEL,
  i.PRENOM,
  i.id intervenant_id,
  i.SOURCE_CODE,
  i.annee_id, 'service' categ,
  sum(vh.HEURES) as total_heures
from INTERVENANT i 
  join SERVICE s on s.INTERVENANT_ID = i.id      and ose_divers.comprise_entre(s.histo_creation, s.histo_destruction) = 1
  join VOLUME_HORAIRE vh on vh.SERVICE_ID = s.id and ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction) = 1
  join type_volume_horaire tvh ON TVH.ID = VH.TYPE_VOLUME_HORAIRE_ID AND (tvh.code = 'PREVU')
  join ELEMENT_PEDAGOGIQUE ep on s.ELEMENT_PEDAGOGIQUE_ID = ep.id        and ose_divers.comprise_entre(ep.histo_creation, ep.histo_destruction) = 1
  join ETAPE e on ep.ETAPE_ID = e.id and ose_divers.comprise_entre(e.histo_creation, e.histo_destruction) = 1
where ose_divers.comprise_entre(i.histo_creation, i.histo_destruction) = 1
  group by i.NOM_USUEL, i.PRENOM, i.id, i.SOURCE_CODE, i.annee_id, 'service'
UNION
  SELECT i.NOM_USUEL, i.PRENOM, i.id intervenant_id, i.SOURCE_CODE, i.annee_id, 'referentiel' categ, sum(vh.HEURES) as total_heures
  from INTERVENANT i 
  join service_referentiel s on s.INTERVENANT_ID = i.id                  and ose_divers.comprise_entre(s.histo_creation, s.histo_destruction) = 1
  join volume_horaire_ref vh on vh.service_referentiel_id = s.id         and ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction) = 1
  join type_volume_horaire tvh ON TVH.ID = VH.TYPE_VOLUME_HORAIRE_ID     AND (tvh.code = 'PREVU')
  join fonction_referentiel ep on s.fonction_id = ep.id                  and ose_divers.comprise_entre(ep.histo_creation, ep.histo_destruction) = 1
  where ose_divers.comprise_entre(i.histo_creation, i.histo_destruction) = 1
  group by i.NOM_USUEL, i.PRENOM, i.id, i.SOURCE_CODE, i.annee_id, 'referentiel';
--------------------------------------------------------
--  DDL for View V_PLAFOND_FC_MAJ
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_PLAFOND_FC_MAJ" ("ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID", "PLAFOND", "HEURES") AS 
  SELECT
  i.annee_id annee_id,
  fr.intervenant_id intervenant_id,
  i.structure_id structure_id,
  fr.type_volume_horaire_id,
  fr.etat_volume_horaire_id,
  ROUND( (NVL(si.plafond_hc_remu_fc,0) - NVL(montant_indemnite_fc,0)) / NVL(thh.valeur,1), 2 ) plafond,
  fr.heures_compl_fc_majorees heures
FROM
       intervenant                i 
  JOIN statut_intervenant        si ON si.id = i.statut_id
  JOIN taux_horaire_hetd        thh ON 1 = ose_divers.comprise_entre( thh.histo_creation, thh.histo_destruction )
  JOIN formule_resultat          fr ON fr.intervenant_id = i.id;
--------------------------------------------------------
--  DDL for View V_PRIVILEGES_ROLES
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_PRIVILEGES_ROLES" ("PRIVILEGE", "ROLE") AS 
  WITH statuts_roles AS (
SELECT
  rp.privilege_id,
  r.code role
FROM
  role_privilege rp
  JOIN role r ON r.id = rp.role_id AND r.histo_destruction IS NULL

UNION ALL

SELECT
  sp.privilege_id,
  'statut/' || s.source_code role
FROM
  statut_privilege sp
  JOIN statut_intervenant s ON s.id = sp.statut_id AND s.histo_destruction IS NULL
)
SELECT
  cp.code || '-' || p.code privilege,
  sr.role
FROM
  privilege p
  JOIN categorie_privilege cp ON cp.id = p.categorie_id
  LEFT JOIN statuts_roles sr ON sr.privilege_id = p.id;
--------------------------------------------------------
--  DDL for View V_REF_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_REF_INTERVENANT" ("C_INTERVENANT") AS 
  SELECT DISTINCT
  i.source_code C_INTERVENANT
FROM
  tbl_service s
  JOIN intervenant i ON i.id = s.intervenant_id
  JOIN annee a ON a.id = s.annee_id
WHERE
  s.nbvh > 0
  AND SYSDATE BETWEEN a.date_debut AND a.date_fin;
--------------------------------------------------------
--  DDL for View V_SERVICE_NON_VALIDE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_SERVICE_NON_VALIDE" ("ID", "INTERVENANT_ID", "SERVICE_ID", "VOLUME_HORAIRE_ID", "ELEMENT_PEDAGOGIQUE_ID", "LIBELLE", "HEURES") AS 
  select vh.ID, i.ID as intervenant_id, s.ID as service_id, vh.ID as volume_horaire_id, ep.id as element_pedagogique_id, ep.LIBELLE, vh.HEURES
  from service s
  inner join INTERVENANT i on s.INTERVENANT_ID = i.id
  inner join ELEMENT_PEDAGOGIQUE ep on s.ELEMENT_PEDAGOGIQUE_ID = ep.id and ose_divers.comprise_entre(ep.histo_creation, ep.histo_destruction) = 1
  inner join VOLUME_HORAIRE vh on vh.SERVICE_ID = s.ID and vh.HISTO_DESTRUCTION is null
  left join VALIDATION_VOL_HORAIRE vvh on vvh.VOLUME_HORAIRE_ID = vh.ID
  left join VALIDATION v on vvh.VALIDATION_ID = v.ID
  left join TYPE_VALIDATION tv on v.TYPE_VALIDATION_ID = tv.ID
  where (v.ID is null or v.HISTO_DESTRUCTION is not null) and
  not exists (
    select * from VALIDATION_VOL_HORAIRE vvh2
    inner join VALIDATION v2 on vvh2.VALIDATION_ID = v2.ID and ose_divers.comprise_entre(v2.histo_creation, v2.histo_destruction) = 1
    where vvh2.VOLUME_HORAIRE_ID = vvh.VOLUME_HORAIRE_ID
  );
--------------------------------------------------------
--  DDL for View V_SERVICE_VALIDE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_SERVICE_VALIDE" ("ID", "INTERVENANT_ID", "SERVICE_ID", "VOLUME_HORAIRE_ID", "ELEMENT_PEDAGOGIQUE_ID", "LIBELLE", "HEURES", "VALIDATION_ID", "CODE") AS 
  select vh.ID, i.ID as intervenant_id, s.ID as service_id, vh.ID as volume_horaire_id, ep.id as element_pedagogique_id, ep.LIBELLE, vh.HEURES, v.ID as validation_id, tv.CODE
  from service s
  inner join INTERVENANT i on s.INTERVENANT_ID = i.id
  left join ELEMENT_PEDAGOGIQUE ep on s.ELEMENT_PEDAGOGIQUE_ID = ep.id and 1 = ose_divers.comprise_entre(ep.histo_creation, ep.histo_destruction) -- pas d'EP si intervention hors-UCBN
  inner join VOLUME_HORAIRE vh on vh.SERVICE_ID = s.ID and 1 = ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction)
  inner join VALIDATION_VOL_HORAIRE vvh on vvh.VOLUME_HORAIRE_ID = vh.ID
  inner join VALIDATION v on vvh.VALIDATION_ID = v.ID and 1 = ose_divers.comprise_entre(v.histo_creation, v.histo_destruction)
  inner join TYPE_VALIDATION tv on v.TYPE_VALIDATION_ID = tv.ID;
--------------------------------------------------------
--  DDL for View V_STRUCTURE_TYPE_MODULATEUR
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_STRUCTURE_TYPE_MODULATEUR" ("TYPE_MODULATEUR_ID", "STRUCTURE_ID") AS 
  SELECT DISTINCT
  etm.type_modulateur_id type_modulateur_id,
  ep.structure_id structure_id
FROM
  v_element_type_modulateur etm
  JOIN element_pedagogique ep ON ep.id = etm.element_pedagogique_id AND ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction ) = 1;
--------------------------------------------------------
--  DDL for View V_SYMPA_INT_PERMANENTS_2014
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_SYMPA_INT_PERMANENTS_2014" ("EMAIL") AS 
  SELECT DISTINCT
  email
FROM
  intervenant i
  JOIN statut_intervenant si ON si.id = i.statut_id
  JOIN type_intervenant ti ON ti.id = si.type_intervenant_id
  JOIN service s ON s.intervenant_id = i.id AND 1 = ose_divers.comprise_entre(s.histo_creation,s.histo_destruction)
  JOIN volume_horaire vh ON vh.service_id = s.id AND 1 = ose_divers.comprise_entre(vh.histo_creation,vh.histo_destruction)
WHERE
  ti.code = 'P'
  AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  AND i.annee_id = 2014
GROUP BY
  email
HAVING
  sum(vh.heures) > 0;
--------------------------------------------------------
--  DDL for View V_SYMPA_INT_PERMANENTS_2015
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_SYMPA_INT_PERMANENTS_2015" ("EMAIL") AS 
  SELECT DISTINCT
  email
FROM
  intervenant i
  JOIN statut_intervenant si ON si.id = i.statut_id
  JOIN type_intervenant ti ON ti.id = si.type_intervenant_id
  JOIN service s ON s.intervenant_id = i.id AND 1 = ose_divers.comprise_entre(s.histo_creation,s.histo_destruction)
  JOIN volume_horaire vh ON vh.service_id = s.id AND 1 = ose_divers.comprise_entre(vh.histo_creation,vh.histo_destruction)
WHERE
  ti.code = 'P'
  AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  AND i.annee_id = 2015
GROUP BY
  email
HAVING
  sum(vh.heures) > 0;
--------------------------------------------------------
--  DDL for View V_SYMPA_INT_VACATAIRES_2014
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_SYMPA_INT_VACATAIRES_2014" ("EMAIL") AS 
  SELECT DISTINCT
  email
FROM
  intervenant i
  JOIN statut_intervenant si ON si.id = i.statut_id
  JOIN type_intervenant ti ON ti.id = si.type_intervenant_id
  JOIN service s ON s.intervenant_id = i.id AND 1 = ose_divers.comprise_entre(s.histo_creation,s.histo_destruction)
  JOIN volume_horaire vh ON vh.service_id = s.id AND 1 = ose_divers.comprise_entre(vh.histo_creation,vh.histo_destruction)
WHERE
  ti.code = 'E'
  AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  AND i.annee_id = 2014
GROUP BY
  email
HAVING
  sum(vh.heures) > 0;
--------------------------------------------------------
--  DDL for View V_SYMPA_INT_VACATAIRES_2015
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_SYMPA_INT_VACATAIRES_2015" ("EMAIL") AS 
  SELECT DISTINCT
  email
FROM
  intervenant i
  JOIN statut_intervenant si ON si.id = i.statut_id
  JOIN type_intervenant ti ON ti.id = si.type_intervenant_id
  JOIN service s ON s.intervenant_id = i.id AND 1 = ose_divers.comprise_entre(s.histo_creation,s.histo_destruction)
  JOIN volume_horaire vh ON vh.service_id = s.id AND 1 = ose_divers.comprise_entre(vh.histo_creation,vh.histo_destruction)
WHERE
  ti.code = 'E'
  AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  AND i.annee_id = 2015
GROUP BY
  email
HAVING
  sum(vh.heures) > 0;
--------------------------------------------------------
--  DDL for View V_SYMPA_LISTE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_SYMPA_LISTE" ("EMAIL") AS 
  select distinct p.email
  from affectation a
  inner join role r on a.role_id = r.id and 1 = ose_divers.comprise_entre( r.histo_creation, r.histo_destruction)
  inner join personnel p on a.personnel_id = p.id and 1 = ose_divers.comprise_entre( p.histo_creation, p.histo_destruction)
  where r.code in (
     'gestionnaire-composante'
    ,'responsable-composante'
    ,'responsable-drh'
    ,'gestionnaire-drh'
    ,'administrateur'
  )
  and 1 = ose_divers.comprise_entre( a.histo_creation, a.histo_destruction)
  order by p.email;
--------------------------------------------------------
--  DDL for View V_TBL_AGREMENT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_AGREMENT" ("ANNEE_ID", "TYPE_AGREMENT_ID", "INTERVENANT_ID", "STRUCTURE_ID", "OBLIGATOIRE", "AGREMENT_ID") AS 
  WITH i_s AS (
  SELECT DISTINCT
    fr.intervenant_id,
    ep.structure_id
  FROM
    formule_resultat fr
    JOIN type_volume_horaire  tvh ON tvh.code = 'PREVU' AND tvh.id = fr.type_volume_horaire_id
    JOIN etat_volume_horaire  evh ON evh.code = 'valide' AND evh.id = fr.etat_volume_horaire_id

    JOIN formule_resultat_service frs ON frs.formule_resultat_id = fr.id
    JOIN service s ON s.id = frs.service_id
    JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
  WHERE
    1 = OSE_AGREMENT.match_intervenant(fr.intervenant_id)
    AND frs.total > 0
)
SELECT
  i.annee_id              annee_id,
  tas.type_agrement_id    type_agrement_id,
  i.id                    intervenant_id,
  null                    structure_id,
  tas.obligatoire         obligatoire,
  a.id                    agrement_id
FROM
  type_agrement                  ta
  JOIN type_agrement_statut      tas ON tas.type_agrement_id = ta.id
                                    AND 1 = ose_divers.comprise_entre( tas.histo_creation, tas.histo_destruction )
                               
  JOIN intervenant                 i ON 1 = ose_divers.comprise_entre(i.histo_creation, i.histo_destruction )
                                    AND (tas.premier_recrutement IS NULL OR NVL(i.premier_recrutement,0) = tas.premier_recrutement)
                                    AND i.statut_id = tas.statut_intervenant_id
                            
  LEFT JOIN agrement               a ON a.type_agrement_id = ta.id 
                                    AND a.intervenant_id = i.id
                                    AND 1 = ose_divers.comprise_entre( a.histo_creation, a.histo_destruction )
WHERE
  1 = OSE_AGREMENT.match_intervenant(i.id)
  AND ta.code = 'CONSEIL_ACADEMIQUE'

UNION ALL

SELECT
  i.annee_id              annee_id,
  tas.type_agrement_id    type_agrement_id,
  i.id                    intervenant_id,
  i_s.structure_id        structure_id,
  tas.obligatoire         obligatoire,
  a.id                    agrement_id
FROM
  type_agrement                   ta
  JOIN type_agrement_statut      tas ON tas.type_agrement_id = ta.id
                                    AND 1 = ose_divers.comprise_entre( tas.histo_creation, tas.histo_destruction )

  JOIN intervenant                 i ON 1 = ose_divers.comprise_entre(i.histo_creation, i.histo_destruction )
                                    AND (tas.premier_recrutement IS NULL OR NVL(i.premier_recrutement,0) = tas.premier_recrutement)
                                    AND i.statut_id = tas.statut_intervenant_id

  JOIN                           i_s ON i_s.intervenant_id = i.id

  LEFT JOIN agrement               a ON a.type_agrement_id = ta.id 
                                    AND a.intervenant_id = i.id
                                    AND a.structure_id = i_s.structure_id
                                    AND 1 = ose_divers.comprise_entre( a.histo_creation, a.histo_destruction )
WHERE
  1 = OSE_AGREMENT.match_intervenant(i.id)
  AND ta.code = 'CONSEIL_RESTREINT';
--------------------------------------------------------
--  DDL for View V_TBL_CLOTURE_REALISE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_CLOTURE_REALISE" ("ANNEE_ID", "INTERVENANT_ID", "PEUT_CLOTURER_SAISIE", "CLOTURE") AS 
  WITH t AS (
  SELECT
    i.annee_id              annee_id,
    i.id                    intervenant_id,
    si.peut_cloturer_saisie peut_cloturer_saisie,
    CASE WHEN v.id IS NULL THEN 0 ELSE 1 END cloture
  FROM
              intervenant         i
         JOIN statut_intervenant si ON si.id = i.statut_id
         JOIN type_validation    tv ON tv.code = 'CLOTURE_REALISE'
         
    LEFT JOIN validation          v ON v.intervenant_id = i.id
                                   AND v.type_validation_id = tv.id
                                   AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )

  WHERE
    1 = OSE_CLOTURE_REALISE.match_intervenant(i.id)
    AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
)
SELECT
  annee_id,
  intervenant_id,
  peut_cloturer_saisie,
  CASE WHEN sum(cloture) = 0 THEN 0 ELSE 1 END cloture
FROM 
  t
GROUP BY
  annee_id,
  intervenant_id,
  peut_cloturer_saisie;
--------------------------------------------------------
--  DDL for View V_TBL_CONTRAT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_CONTRAT" ("ANNEE_ID", "INTERVENANT_ID", "PEUT_AVOIR_CONTRAT", "STRUCTURE_ID", "NBVH", "EDITE", "SIGNE") AS 
  WITH t AS (
  SELECT 
    i.annee_id                                                                annee_id,
    i.id                                                                      intervenant_id,
    si.peut_avoir_contrat                                                     peut_avoir_contrat,
    NVL(ep.structure_id, i.structure_id)                                      structure_id,
    CASE WHEN evh.code IN ('contrat-edite','contrat-signe') THEN 1 ELSE 0 END edite,
    CASE WHEN evh.code IN ('contrat-signe')                 THEN 1 ELSE 0 END signe
  FROM
              intervenant                 i
              
         JOIN statut_intervenant         si ON si.id = i.statut_id
         
         JOIN service                     s ON s.intervenant_id = i.id
                                           AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
         
         JOIN type_volume_horaire       tvh ON tvh.code = 'PREVU'
         
         JOIN volume_horaire             vh ON vh.service_id = s.id
                                           AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
                                           AND vh.heures <> 0
                                           AND vh.type_volume_horaire_id = tvh.id
    
         JOIN v_volume_horaire_etat     vhe ON vhe.volume_horaire_id = vh.id
         
         JOIN etat_volume_horaire       evh ON evh.id = vhe.etat_volume_horaire_id
                                           AND evh.code IN ('valide', 'contrat-edite', 'contrat-signe')
  
         JOIN element_pedagogique        ep ON ep.id = s.element_pedagogique_id
    
  WHERE
    1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
    AND NOT (si.peut_avoir_contrat = 0 AND evh.code = 'valide')
    AND 1 = OSE_CONTRAT.match_intervenant(i.id)
    
  UNION ALL
  
  SELECT 
    i.annee_id                                                                annee_id,
    i.id                                                                      intervenant_id,
    si.peut_avoir_contrat                                                     peut_avoir_contrat,
    s.structure_id                                                            structure_id,
    CASE WHEN evh.code IN ('contrat-edite','contrat-signe') THEN 1 ELSE 0 END edite,
    CASE WHEN evh.code IN ('contrat-signe')                 THEN 1 ELSE 0 END signe
  FROM
              intervenant                 i
              
         JOIN statut_intervenant         si ON si.id = i.statut_id
         
         JOIN service_referentiel         s ON s.intervenant_id = i.id
                                           AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
         
         JOIN type_volume_horaire       tvh ON tvh.code = 'PREVU'
         
         JOIN volume_horaire_ref         vh ON vh.service_referentiel_id = s.id
                                           AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
                                           AND vh.heures <> 0
                                           AND vh.type_volume_horaire_id = tvh.id
    
         JOIN v_volume_horaire_ref_etat vhe ON vhe.volume_horaire_ref_id = vh.id
         
         JOIN etat_volume_horaire       evh ON evh.id = vhe.etat_volume_horaire_id
                                           AND evh.code IN ('valide', 'contrat-edite', 'contrat-signe')
  
  WHERE
    1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
    AND NOT (si.peut_avoir_contrat = 0 AND evh.code = 'valide')
    AND 1 = OSE_CONTRAT.match_intervenant(i.id)
)
SELECT
  annee_id,
  intervenant_id,
  peut_avoir_contrat,
  structure_id,
  count(*) as nbvh,
  sum(edite) as edite,
  sum(signe) as signe
FROM
  t
GROUP BY
  annee_id,
  intervenant_id,
  peut_avoir_contrat,
  structure_id;
--------------------------------------------------------
--  DDL for View V_TBL_DMEP_LIQUIDATION
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_DMEP_LIQUIDATION" ("ANNEE_ID", "TYPE_RESSOURCE_ID", "STRUCTURE_ID", "HEURES") AS 
  SELECT
  annee_id,
  type_ressource_id,
  structure_id,
  SUM(heures) heures
FROM
(
  SELECT
    i.annee_id,
    cc.type_ressource_id,
    NVL( ep.structure_id, i.structure_id ) structure_id,
    mep.heures
  FROM
              mise_en_paiement         mep
         JOIN centre_cout               cc ON cc.id = mep.centre_cout_id
         JOIN formule_resultat_service frs ON frs.id = mep.formule_res_service_id
         JOIN service                    s ON s.id = frs.service_id
         JOIN intervenant                i ON i.id = s.intervenant_id
    LEFT JOIN element_pedagogique       ep ON ep.id = s.element_pedagogique_id
  WHERE
    1 = ose_divers.comprise_entre( mep.histo_creation, mep.histo_destruction )
    
  UNION ALL
  
  SELECT
    i.annee_id,
    cc.type_ressource_id,
    sr.structure_id structure_id,
    heures
  FROM
              mise_en_paiement              mep
         JOIN centre_cout                    cc ON cc.id = mep.centre_cout_id
         JOIN formule_resultat_service_ref frsr ON frsr.id = mep.formule_res_service_ref_id
         JOIN service_referentiel            sr ON sr.id = frsr.service_referentiel_id
         JOIN intervenant                     i ON i.id = sr.intervenant_id
    
  WHERE
    1 = ose_divers.comprise_entre( mep.histo_creation, mep.histo_destruction )

) t1
GROUP BY
  annee_id, type_ressource_id, structure_id;
--------------------------------------------------------
--  DDL for View V_TBL_DOSSIER
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_DOSSIER" ("ANNEE_ID", "INTERVENANT_ID", "PEUT_SAISIR_DOSSIER", "DOSSIER_ID", "VALIDATION_ID") AS 
  SELECT
  i.annee_id,
  i.id intervenant_id,
  si.peut_saisir_dossier,
  d.id dossier_id,
  v.id validation_id
FROM
            intervenant         i
       JOIN statut_intervenant si ON si.id = i.statut_id
  LEFT JOIN dossier             d ON d.intervenant_id = i.id
                              AND 1 = ose_divers.comprise_entre( d.histo_creation, d.histo_destruction )
  
       JOIN type_validation tv ON tv.code = 'DONNEES_PERSO_PAR_COMP'
  LEFT JOIN validation       v ON v.intervenant_id = i.id
                              AND v.type_validation_id = tv.id
                              AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
WHERE
  1 = OSE_DOSSIER.match_intervenant(i.id)
  AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction );
--------------------------------------------------------
--  DDL for View V_TBL_LIEN
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_LIEN" ("LIEN_ID", "SCENARIO_ID", "SCENARIO_LIEN_ID", "NOEUD_SUP_ID", "NOEUD_INF_ID", "STRUCTURE_ID", "ACTIF", "POIDS", "MAX_POIDS", "CHOIX_MAXIMUM", "CHOIX_MINIMUM", "NB_CHOIX", "TOTAL_POIDS") AS 
  SELECT
  l.id             lien_id,
  s.id             scenario_id,
  sl.id            scenario_lien_id,
  l.noeud_sup_id   noeud_sup_id,
  l.noeud_inf_id   noeud_inf_id,
  l.structure_id   structure_id,
  NVL(sl.actif,1)  actif,
  NVL(sl.poids,1)  poids,
  MAX(CASE WHEN 1 = NVL(sl.actif,1) THEN NVL(sl.poids,1) ELSE 0 END) OVER (PARTITION BY l.noeud_sup_id, s.id) max_poids,
  sl.choix_maximum choix_maximum,
  sl.choix_minimum choix_minimum,

  SUM(NVL(sl.actif,1)) OVER (PARTITION BY l.noeud_sup_id, s.id) nb_choix,
  SUM(CASE WHEN 1 = NVL(sl.actif,1) THEN NVL(sl.poids,1) ELSE 0 END) OVER (PARTITION BY l.noeud_sup_id, s.id) total_poids

FROM
  lien l
  JOIN scenario s ON s.histo_destruction IS NULL --1 = OSE_DIVERS.COMPRISE_ENTRE( s.histo_creation, s.histo_destruction )
  LEFT JOIN scenario_lien sl ON 
    sl.lien_id = l.id 
    AND sl.scenario_id = s.id
    AND s.histo_destruction IS NULL
    --AND 1 = OSE_DIVERS.COMPRISE_ENTRE( sl.histo_creation, sl.histo_destruction )
WHERE
  l.histo_destruction IS NULL
  --1 = OSE_DIVERS.COMPRISE_ENTRE( l.histo_creation, l.histo_destruction );
--------------------------------------------------------
--  DDL for View V_TBL_NOEUD
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_NOEUD" ("NOEUD_ID", "SCENARIO_ID", "SCENARIO_NOEUD_ID", "LISTE", "ANNEE_ID", "ETAPE_ID", "ELEMENT_PEDAGOGIQUE_ID", "STRUCTURE_ID", "ASSIDUITE") AS 
  SELECT
  n.id                     noeud_id,
  s.id                     scenario_id,
  sn.id                    scenario_noeud_id,
  n.liste                  liste,
  n.annee_id               annee_id,
  n.etape_id               etape_id,
  n.element_pedagogique_id element_pedagogique_id,
  n.structure_id           structure_id,
  NVL(sn.assiduite,1)      assiduite
FROM
  noeud n
  JOIN scenario s ON 1 = OSE_DIVERS.COMPRISE_ENTRE( s.histo_creation, s.histo_destruction )
  LEFT JOIN scenario_noeud sn ON 
    sn.noeud_id = n.id
    AND sn.scenario_id = s.id
    AND 1 = OSE_DIVERS.COMPRISE_ENTRE( sn.histo_creation, sn.histo_destruction )
WHERE
  1 = OSE_DIVERS.COMPRISE_ENTRE( n.histo_creation, n.histo_destruction );
--------------------------------------------------------
--  DDL for View V_TBL_PAIEMENT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_PAIEMENT" ("ANNEE_ID", "FORMULE_RES_SERVICE_ID", "FORMULE_RES_SERVICE_REF_ID", "INTERVENANT_ID", "STRUCTURE_ID", "MISE_EN_PAIEMENT_ID", "PERIODE_PAIEMENT_ID", "HEURES_A_PAYER", "HEURES_A_PAYER_POND", "HEURES_DEMANDEES", "HEURES_PAYEES") AS 
  SELECT
  i.annee_id                                  annee_id,
  frs.id                                      formule_res_service_id,
  null                                        formule_res_service_ref_id,
  i.id                                        intervenant_id,
  COALESCE( ep.structure_id, i.structure_id ) structure_id,
  mep.id                                      mise_en_paiement_id,
  mep.periode_paiement_id                     periode_paiement_id,
  frs.heures_compl_fi + frs.heures_compl_fc + frs.heures_compl_fa + frs.heures_compl_fc_majorees heures_a_payer,
  count(*) OVER(PARTITION BY frs.id)          heures_a_payer_pond,
  NVL(mep.heures,0)                           heures_demandees,
  CASE WHEN mep.periode_paiement_id IS NULL THEN 0 ELSE mep.heures END heures_payees
FROM
            formule_resultat_service        frs
       JOIN type_volume_horaire             tvh ON tvh.code = 'REALISE'
       JOIN etat_volume_horaire             evh ON evh.code = 'valide'
       JOIN formule_resultat                 fr ON fr.id = frs.formule_resultat_id
                                               AND fr.type_volume_horaire_id = tvh.id
                                               AND fr.etat_volume_horaire_id = evh.id

       JOIN intervenant                       i ON i.id = fr.intervenant_id  
       JOIN service                           s ON s.id = frs.service_id
  LEFT JOIN element_pedagogique              ep ON ep.id = s.element_pedagogique_id
  LEFT JOIN mise_en_paiement                mep ON mep.formule_res_service_id = frs.id
                                               AND 1 = ose_divers.comprise_entre( mep.histo_creation, mep.histo_destruction )
WHERE
  1 = OSE_PAIEMENT.match_intervenant(fr.intervenant_id)

UNION ALL

SELECT
  i.annee_id                                  annee_id,
  null                                        formule_res_service_id,
  frs.id                                      formule_res_service_ref_id,
  i.id                                        intervenant_id,
  s.structure_id                              structure_id,
  mep.id                                      mise_en_paiement_id,
  mep.periode_paiement_id                     periode_paiement_id,
  frs.heures_compl_referentiel                heures_a_payer,
  count(*) OVER(PARTITION BY frs.id)          heures_a_payer_pond,
  NVL(mep.heures,0)                           heures_demandees,
  CASE WHEN mep.periode_paiement_id IS NULL THEN 0 ELSE mep.heures END heures_payees
FROM
            formule_resultat_service_ref    frs
       JOIN type_volume_horaire             tvh ON tvh.code = 'REALISE'
       JOIN etat_volume_horaire             evh ON evh.code = 'valide'
       JOIN formule_resultat                 fr ON fr.id = frs.formule_resultat_id
                                               AND fr.type_volume_horaire_id = tvh.id
                                               AND fr.etat_volume_horaire_id = evh.id

       JOIN intervenant                       i ON i.id = fr.intervenant_id  
       JOIN service_referentiel               s ON s.id = frs.service_referentiel_id
  LEFT JOIN mise_en_paiement                mep ON mep.formule_res_service_ref_id = frs.id
                                               AND 1 = ose_divers.comprise_entre( mep.histo_creation, mep.histo_destruction )
WHERE
  1 = OSE_PAIEMENT.match_intervenant(fr.intervenant_id);
--------------------------------------------------------
--  DDL for View V_TBL_PIECE_JOINTE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_PIECE_JOINTE" ("ANNEE_ID", "TYPE_PIECE_JOINTE_ID", "INTERVENANT_ID", "DEMANDEE", "FOURNIE", "VALIDEE", "HEURES_POUR_SEUIL") AS 
  WITH pjf AS (
  SELECT
    pjf.annee_id,
    pjf.type_piece_jointe_id,
    pjf.intervenant_id,
    COUNT(*) count,
    SUM(CASE WHEN validation_id IS NULL THEN 0 ELSE 1 END) validation,
    SUM(CASE WHEN fichier_id IS NULL THEN 0 ELSE 1 END) fichier
  FROM
    tbl_piece_jointe_fournie pjf
  WHERE
    1 = OSE_PIECE_JOINTE.match_intervenant(pjf.intervenant_id)
  GROUP BY
    pjf.annee_id,
    pjf.type_piece_jointe_id,
    pjf.intervenant_id
)
SELECT
  NVL( pjd.annee_id, pjf.annee_id ) annee_id,
  NVL( pjd.type_piece_jointe_id, pjf.type_piece_jointe_id ) type_piece_jointe_id,
  NVL( pjd.intervenant_id, pjf.intervenant_id ) intervenant_id,
  CASE WHEN pjd.intervenant_id IS NULL THEN 0 ELSE 1 END demandee,
  CASE WHEN pjf.fichier = pjf.count THEN 1 ELSE 0 END fournie,
  CASE WHEN pjf.validation = pjf.count THEN 1 ELSE 0 END validee,
  NVL(pjd.heures_pour_seuil,0) heures_pour_seuil
FROM
  tbl_piece_jointe_demande pjd
  FULL JOIN pjf ON pjf.type_piece_jointe_id = pjd.type_piece_jointe_id AND pjf.intervenant_id = pjd.intervenant_id;
--------------------------------------------------------
--  DDL for View V_TBL_PIECE_JOINTE_DEMANDE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_PIECE_JOINTE_DEMANDE" ("ANNEE_ID", "INTERVENANT_ID", "TYPE_PIECE_JOINTE_ID", "HEURES_POUR_SEUIL") AS 
  WITH i_h AS (
  SELECT
    s.intervenant_id,
    sum(vh.heures) heures
  FROM
         service               s
    JOIN type_volume_horaire tvh ON tvh.code = 'PREVU'
    JOIN volume_horaire       vh ON vh.service_id = s.id 
                                AND vh.type_volume_horaire_id = tvh.id
                                AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  WHERE
    1 = OSE_PIECE_JOINTE_DEMANDE.match_intervenant(s.intervenant_id)
    AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
    AND s.element_pedagogique_id IS NOT NULL -- Service sur l'√©tablissement
    AND vh.motif_non_paiement_id IS NULL -- pas de motif de non paiement
  GROUP BY
    s.intervenant_id
)
SELECT DISTINCT
  i.annee_id                      annee_id,
  i.id                            intervenant_id,
  tpj.id                          type_piece_jointe_id,
  NVL(i_h.heures, 0)              heures_pour_seuil   
FROM
            intervenant                 i

  LEFT JOIN dossier                     d ON d.intervenant_id = i.id
                                         AND 1 = ose_divers.comprise_entre( d.histo_creation, d.histo_destruction )
                                        
       JOIN type_piece_jointe_statut tpjs ON tpjs.statut_intervenant_id = i.statut_id
                                         AND 1 = ose_divers.comprise_entre( tpjs.histo_creation, tpjs.histo_destruction )
                                         
       JOIN type_piece_jointe         tpj ON (tpj.id = tpjs.type_piece_jointe_id OR tpj.code='RIB')
                                         AND 1 = ose_divers.comprise_entre( tpj.histo_creation, tpj.histo_destruction )
                                         
  LEFT JOIN                           i_h ON i_h.intervenant_id = i.id
WHERE
  1 = OSE_PIECE_JOINTE_DEMANDE.match_intervenant(i.id)
  
  -- Gestion de l'historique
  AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  
  -- le nb d'heures doit √™tre au moins √©gal au seuil
  AND 1 = CASE WHEN tpj.code = 'RIB' THEN 1 WHEN tpjs.seuil_hetd IS NOT NULL THEN

    CASE WHEN i_h.heures > tpjs.seuil_hetd THEN 1 ELSE 0 END
    
  ELSE 1 END
  
  -- En fonction du premier recrutement ou non
  AND (tpjs.premier_recrutement IS NULL OR NVL(i.premier_recrutement,0) = tpjs.premier_recrutement)

  -- Le RIB n'est demand√© QUE s'il est diff√©rent!!  
  AND (
    tpj.code <> 'RIB' OR
    replace(i.bic, ' ', '') || '-' || replace(i.iban, ' ', '') <> d.rib
  );
--------------------------------------------------------
--  DDL for View V_TBL_PIECE_JOINTE_FOURNIE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_PIECE_JOINTE_FOURNIE" ("ANNEE_ID", "TYPE_PIECE_JOINTE_ID", "INTERVENANT_ID", "PIECE_JOINTE_ID", "VALIDATION_ID", "FICHIER_ID") AS 
  SELECT 
  i.annee_id,
  pj.type_piece_jointe_id,
  pj.intervenant_id,
  pj.id piece_jointe_id,
  v.id validation_id,
  f.id fichier_id
FROM
            piece_jointe          pj
       JOIN intervenant            i ON i.id = pj.intervenant_id
                                    AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
       
       JOIN piece_jointe_fichier pjf ON pjf.piece_jointe_id = pj.id
       JOIN fichier                f ON f.id = pjf.fichier_id
                                    AND 1 = ose_divers.comprise_entre( f.histo_creation, f.histo_destruction )
                                    
  LEFT JOIN validation             v ON v.id = pj.validation_id
                                    AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
WHERE
  1 = OSE_PIECE_JOINTE_FOURNIE.match_intervenant(pj.intervenant_id)
  AND 1 = ose_divers.comprise_entre( pj.histo_creation, pj.histo_destruction );
--------------------------------------------------------
--  DDL for View V_TBL_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_SERVICE" ("ANNEE_ID", "INTERVENANT_ID", "INTERVENANT_STRUCTURE_ID", "STRUCTURE_ID", "TYPE_INTERVENANT_ID", "TYPE_INTERVENANT_CODE", "PEUT_SAISIR_SERVICE", "ELEMENT_PEDAGOGIQUE_ID", "SERVICE_ID", "ELEMENT_PEDAGOGIQUE_PERIODE_ID", "ETAPE_ID", "TYPE_VOLUME_HORAIRE_ID", "TYPE_VOLUME_HORAIRE_CODE", "ELEMENT_PEDAGOGIQUE_HISTO", "ETAPE_HISTO", "HAS_HEURES_MAUVAISE_PERIODE", "NBVH", "HEURES", "VALIDE") AS 
  WITH t AS (
SELECT
  s.id                                                                                      service_id,
  s.intervenant_id                                                                          intervenant_id,
  ep.structure_id                                                                           structure_id,
  ep.id                                                                                     element_pedagogique_id,
  ep.periode_id                                                                             element_pedagogique_periode_id,
  etp.id                                                                                    etape_id,

  vh.type_volume_horaire_id                                                                 type_volume_horaire_id,
  vh.heures                                                                                 heures,
  tvh.code                                                                                  type_volume_horaire_code,

  ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction )                      element_pedagogique_histo,
  CASE WHEN 1 = ose_divers.comprise_entre( etp.histo_creation, etp.histo_destruction ) OR cp.id IS NOT NULL THEN 1 ELSE 0 END etape_histo,

  CASE WHEN ep.periode_id IS NOT NULL THEN
    SUM( CASE WHEN vh.periode_id <> ep.periode_id THEN 1 ELSE 0 END ) OVER( PARTITION BY vh.service_id, vh.periode_id, vh.type_volume_horaire_id, vh.type_intervention_id )
  ELSE 0 END has_heures_mauvaise_periode,

  CASE WHEN v.id IS NULL THEN 0 ELSE 1 END valide
FROM
  service                                       s
  LEFT JOIN element_pedagogique                ep ON ep.id = s.element_pedagogique_id
  LEFT JOIN etape                             etp ON etp.id = ep.etape_id
  LEFT JOIN chemin_pedagogique                 cp ON cp.etape_id = etp.id
                                                 AND cp.element_pedagogique_id = ep.id
                                                 AND 1 = ose_divers.comprise_entre( cp.histo_creation, cp.histo_destruction )

  LEFT JOIN volume_horaire                     vh ON vh.service_id = s.id
                                                 AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )

  LEFT JOIN type_volume_horaire               tvh ON tvh.id = vh.type_volume_horaire_id

  LEFT JOIN validation_vol_horaire            vvh ON vvh.volume_horaire_id = vh.id

  LEFT JOIN validation                          v ON v.id = vvh.validation_id
                                                 AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
WHERE
  1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
  AND 1 = OSE_SERVICE.match_intervenant(s.intervenant_id)
)
SELECT
  i.annee_id                                                                                annee_id,
  i.id                                                                                      intervenant_id,
  i.structure_id                                                                            intervenant_structure_id,
  NVL( t.structure_id, i.structure_id )                                                     structure_id,
  ti.id                                                                                     type_intervenant_id,
  ti.code                                                                                   type_intervenant_code,  
  si.peut_saisir_service                                                                    peut_saisir_service,  

  t.element_pedagogique_id,
  t.service_id,
  t.element_pedagogique_periode_id,
  t.etape_id,
  t.type_volume_horaire_id,
  t.type_volume_horaire_code,
  t.element_pedagogique_histo,
  t.etape_histo,

  CASE WHEN SUM(t.has_heures_mauvaise_periode) > 0 THEN 1 ELSE 0 END has_heures_mauvaise_periode,

  CASE WHEN type_volume_horaire_id IS NULL THEN 0 ELSE count(*) END nbvh,
  CASE WHEN type_volume_horaire_id IS NULL THEN 0 ELSE sum(t.heures) END heures,
  sum(valide) valide
FROM
  t
  JOIN intervenant                              i ON i.id = t.intervenant_id
  JOIN statut_intervenant                      si ON si.id = i.statut_id
  JOIN type_intervenant                        ti ON ti.id = si.type_intervenant_id
WHERE
  1 = OSE_SERVICE.match_intervenant(i.id)
GROUP BY
  i.annee_id,
  i.id,
  i.structure_id,
  t.structure_id,
  i.structure_id,
  ti.id,
  ti.code,
  si.peut_saisir_service,
  t.element_pedagogique_id,
  t.service_id,
  t.element_pedagogique_periode_id,
  t.etape_id,
  t.type_volume_horaire_id,
  t.type_volume_horaire_code,
  t.element_pedagogique_histo,
  t.etape_histo;
--------------------------------------------------------
--  DDL for View V_TBL_SERVICE_REFERENTIEL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_SERVICE_REFERENTIEL" ("ANNEE_ID", "INTERVENANT_ID", "PEUT_SAISIR_SERVICE", "TYPE_VOLUME_HORAIRE_ID", "STRUCTURE_ID", "NBVH", "VALIDE") AS 
  WITH t AS (

  SELECT
    i.annee_id,
    i.id intervenant_id,
    si.peut_saisir_referentiel peut_saisir_service,
    vh.type_volume_horaire_id,
    s.structure_id,
    CASE WHEN v.id IS NULL THEN 0 ELSE 1 END valide
  FROM
              intervenant                     i
              
         JOIN statut_intervenant          si ON si.id = i.statut_id
              
    LEFT JOIN service_referentiel          s ON s.intervenant_id = i.id
                                            AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
                                        
    LEFT JOIN volume_horaire_ref          vh ON vh.service_referentiel_id = s.id 
                                            AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
                                        
    LEFT JOIN validation_vol_horaire_ref vvh ON vvh.volume_horaire_ref_id = vh.id
    
    LEFT JOIN validation                   v ON v.id = vvh.validation_id
                                            AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
  WHERE
    1 = OSE_SERVICE_REFERENTIEL.match_intervenant(i.id)
    AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )

)  
SELECT
  annee_id,
  intervenant_id,
  peut_saisir_service,
  type_volume_horaire_id,
  structure_id,
  CASE WHEN type_volume_horaire_id IS NULL THEN 0 ELSE count(*) END nbvh,
  sum(valide) valide
FROM
  t
WHERE 
  NOT (structure_id IS NOT NULL AND type_volume_horaire_id IS NULL)
GROUP BY
  annee_id,
  intervenant_id,
  peut_saisir_service,
  type_volume_horaire_id,
  structure_id;
--------------------------------------------------------
--  DDL for View V_TBL_SERVICE_SAISIE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_SERVICE_SAISIE" ("ANNEE_ID", "INTERVENANT_ID", "PEUT_SAISIR_SERVICE", "PEUT_SAISIR_REFERENTIEL", "HEURES_SERVICE_PREV", "HEURES_REFERENTIEL_PREV", "HEURES_SERVICE_REAL", "HEURES_REFERENTIEL_REAL") AS 
  SELECT
  i.annee_id,
  i.id intervenant_id,
  si.peut_saisir_service,
  si.peut_saisir_referentiel,
  SUM( CASE WHEN tvhs.code = 'PREVU'   THEN NVL(vh .heures,0) ELSE 0 END ) heures_service_prev,
  SUM( CASE WHEN tvhs.code = 'PREVU'   THEN NVL(vhr.heures,0) ELSE 0 END ) heures_referentiel_prev,
  SUM( CASE WHEN tvhs.code = 'REALISE' THEN NVL(vh .heures,0) ELSE 0 END ) heures_service_real,
  SUM( CASE WHEN tvhs.code = 'REALISE' THEN NVL(vhr.heures,0) ELSE 0 END ) heures_referentiel_real
FROM
  intervenant i
  JOIN statut_intervenant si ON si.id = i.statut_id
  LEFT JOIN service s ON s.intervenant_id = i.id AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
  LEFT JOIN volume_horaire vh ON vh.service_id = s.id AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  LEFT JOIN type_volume_horaire tvhs ON tvhs.id = vh.type_volume_horaire_id

  LEFT JOIN service_referentiel sr ON sr.intervenant_id = i.id AND 1 = ose_divers.comprise_entre( sr.histo_creation, sr.histo_destruction )
  LEFT JOIN volume_horaire_ref vhr ON vhr.service_referentiel_id = sr.id AND 1 = ose_divers.comprise_entre( vhr.histo_creation, vhr.histo_destruction )
  LEFT JOIN type_volume_horaire tvhrs ON tvhrs.id = vhr.type_volume_horaire_id
WHERE
  1 = OSE_SERVICE_SAISIE.match_intervenant(i.id)
  AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
GROUP BY
  i.annee_id,
  i.id,
  si.peut_saisir_service,
  si.peut_saisir_referentiel;
--------------------------------------------------------
--  DDL for View V_TBL_VALIDATION_ENSEIGNEMENT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_VALIDATION_ENSEIGNEMENT" ("ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "TYPE_VOLUME_HORAIRE_ID", "SERVICE_ID", "VOLUME_HORAIRE_ID", "VALIDATION_ID") AS 
  SELECT DISTINCT
  i.annee_id,
  i.id intervenant_id,
  CASE WHEN rsv.priorite = 'affectation' THEN
    COALESCE( i.structure_id, ep.structure_id, str.id )
  ELSE
    COALESCE( ep.structure_id, i.structure_id, str.id )
  END structure_id,
  vh.type_volume_horaire_id,
  s.id service_id,
  vh.id volume_horaire_id,
  v.id validation_id
FROM
  service s
  JOIN volume_horaire vh ON vh.service_id = s.id AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  JOIN intervenant i ON i.id = s.intervenant_id AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  JOIN statut_intervenant si ON si.id = i.statut_id
  JOIN regle_structure_validation rsv ON rsv.type_intervenant_id = si.type_intervenant_id AND rsv.type_volume_horaire_id = vh.type_volume_horaire_id
  LEFT JOIN structure str ON str.niveau = 1 AND 1 = ose_divers.comprise_entre( str.histo_creation, str.histo_destruction )
  LEFT JOIN element_pedagogique ep ON ep.id = s.element_pedagogique_id
  LEFT JOIN validation_vol_horaire vvh ON vvh.volume_horaire_id = vh.id
  LEFT JOIN validation v ON v.id = vvh.validation_id AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
WHERE
  1 = OSE_VALIDATION_ENSEIGNEMENT.match_intervenant(s.intervenant_id)
  AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction );
--------------------------------------------------------
--  DDL for View V_TBL_VALIDATION_REFERENTIEL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_VALIDATION_REFERENTIEL" ("ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "TYPE_VOLUME_HORAIRE_ID", "SERVICE_REFERENTIEL_ID", "VOLUME_HORAIRE_REF_ID", "VALIDATION_ID") AS 
  SELECT DISTINCT
  i.annee_id,
  i.id intervenant_id,
  CASE WHEN rsv.priorite = 'affectation' THEN
    COALESCE( i.structure_id, s.structure_id, str.id )
  ELSE
    COALESCE( s.structure_id, i.structure_id, str.id )
  END structure_id,
  vh.type_volume_horaire_id,
  s.id service_referentiel_id,
  vh.id volume_horaire_ref_id,
  v.id validation_id
FROM
  service_referentiel s
  JOIN volume_horaire_ref vh ON vh.service_referentiel_id = s.id AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  JOIN intervenant i ON i.id = s.intervenant_id AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  JOIN statut_intervenant si ON si.id = i.statut_id
  JOIN regle_structure_validation rsv ON rsv.type_intervenant_id = si.type_intervenant_id AND rsv.type_volume_horaire_id = vh.type_volume_horaire_id
  LEFT JOIN structure str ON str.niveau = 1 AND 1 = ose_divers.comprise_entre( str.histo_creation, str.histo_destruction )
  LEFT JOIN validation_vol_horaire_ref vvh ON vvh.volume_horaire_ref_id = vh.id
  LEFT JOIN validation v ON v.id = vvh.validation_id AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
WHERE
  1 = OSE_VALIDATION_REFERENTIEL.match_intervenant(s.intervenant_id)
  AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction );
--------------------------------------------------------
--  DDL for View V_TBL_VOLUME_HORAIRE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_VOLUME_HORAIRE" ("ANNEE_ID", "INTERVENANT_ID", "INTERVENANT_STRUCTURE_ID", "STRUCTURE_ID", "TYPE_INTERVENANT_ID", "SERVICE_ID", "VOLUME_HORAIRE_ID", "TYPE_INTERVENTION_ID", "MOTIF_NON_PAIEMENT_ID", "VOLUME_HORAIRE_PERIODE_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID", "ELEMENT_PEDAGOGIQUE_ID", "ELEMENT_PEDAGOGIQUE_PERIODE_ID", "ETAPE_ID", "TYPE_INTERVENANT_CODE", "TYPE_VOLUME_HORAIRE_CODE", "ETAT_VOLUME_HORAIRE_CODE", "PEUT_SAISIR_SERVICE", "HEURES", "ELEMENT_PEDAGOGIQUE_HISTO", "ETAPE_HISTO", "PERIODE_CORRESP") AS 
  WITH has_cp AS (
SELECT
  etape_id
FROM
  chemin_pedagogique cp
WHERE
  1 = ose_divers.comprise_entre( cp.histo_creation, cp.histo_destruction )
GROUP BY
  etape_id
)
SELECT
  i.annee_id                                                                                annee_id,
  i.id                                                                                      intervenant_id,
  i.structure_id                                                                            intervenant_structure_id,
  NVL(ep.structure_id, i.structure_id)                                                      structure_id,
  ti.id                                                                                     type_intervenant_id,
  s.id                                                                                      service_id,
  vh.id                                                                                     volume_horaire_id,
  vh.type_intervention_id                                                                   type_intervention_id,
  vh.motif_non_paiement_id                                                                  motif_non_paiement_id,
  vh.periode_id                                                                             volume_horaire_periode_id,
  tvh.id                                                                                    type_volume_horaire_id,
  evh.id                                                                                    etat_volume_horaire_id,
  ep.id                                                                                     element_pedagogique_id,
  ep.periode_id                                                                             element_pedagogique_periode_id,
  etp.id                                                                                    etape_id,

  ti.code                                                                                   type_intervenant_code,  
  tvh.code                                                                                  type_volume_horaire_code,
  evh.code                                                                                  etat_volume_horaire_code,
  si.peut_saisir_service                                                                    peut_saisir_service,
  vh.heures                                                                                 heures,

  ose_divers.comprise_entre( ep.histo_creation, ep.histo_destruction )                      element_pedagogique_histo,
  CASE WHEN 1 = ose_divers.comprise_entre( etp.histo_creation, etp.histo_destruction ) OR has_cp.etape_id IS NOT NULL THEN 1 ELSE 0 END etape_histo,
  CASE WHEN ep.periode_id IS NOT NULL AND vh.periode_id <> ep.periode_id THEN 0 ELSE 1 END  periode_corresp

FROM
  intervenant                                   i
  JOIN statut_intervenant                      si ON si.id = i.statut_id
  JOIN type_intervenant                        ti ON ti.id = si.type_intervenant_id
  JOIN service                                  s ON s.intervenant_id = i.id 
                                                 AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
  JOIN element_pedagogique                     ep ON ep.id = s.element_pedagogique_id
  JOIN etape                                  etp ON etp.id = ep.etape_id
  JOIN volume_horaire                          vh ON vh.service_id = s.id 
                                                 AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
  JOIN type_volume_horaire                    tvh ON tvh.id = vh.type_volume_horaire_id
  JOIN v_volume_horaire_etat                  vhe ON vhe.volume_horaire_id = vh.id
  JOIN etat_volume_horaire                    evh ON evh.id = vhe.etat_volume_horaire_id
  LEFT JOIN has_cp                                ON has_cp.etape_id = etp.id
WHERE
  1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  AND i.id = 548;
--------------------------------------------------------
--  DDL for View V_TBL_WORKFLOW
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TBL_WORKFLOW" ("ETAPE_CODE", "ANNEE_ID", "INTERVENANT_ID", "STRUCTURE_ID", "OBJECTIF", "REALISATION") AS 
  WITH pj AS (
  SELECT 
    annee_id,
    intervenant_id,
    SUM(demandee) demandees,
    SUM(fournie)  fournies,
    SUM(validee)  validees
  FROM 
    tbl_piece_jointe
  WHERE 
    1 = OSE_WORKFLOW.match_intervenant(intervenant_id)
    AND demandee > 0
  GROUP BY
    annee_id,
    intervenant_id
),
mep AS (
  SELECT
    annee_id,
    intervenant_id,
    structure_id,
    SUM(heures_a_payer / heures_a_payer_pond) sap,
    SUM(heures_demandees) dmep,
    SUM(heures_payees) mep
    --COUNT(*)  sap,
    --SUM(CASE WHEN mise_en_paiement_id IS NULL THEN 0 ELSE 1 END) dmep,
    --SUM(CASE WHEN periode_paiement_id IS NULL THEN 0 ELSE 1 END) mep
  FROM
    tbl_paiement
  WHERE
    1 = OSE_WORKFLOW.match_intervenant(intervenant_id)
  GROUP BY
    annee_id,
    intervenant_id,
    structure_id
)
SELECT
  e.code                                                    etape_code,
  d.annee_id                                                annee_id,
  d.intervenant_id                                          intervenant_id,
  null                                                      structure_id,
  1                                                         objectif,
  CASE
    WHEN e.code = 'DONNEES_PERSO_SAISIE' THEN
      CASE WHEN d.dossier_id IS NULL THEN 0 ELSE 1 END
      
    WHEN e.code = 'DONNEES_PERSO_VALIDATION' THEN
      CASE WHEN d.validation_id IS NULL THEN 0 ELSE 1 END
      
  END                                                       realisation
FROM
  tbl_dossier d
  JOIN (       
          SELECT 'DONNEES_PERSO_SAISIE'     code FROM dual 
    UNION SELECT 'DONNEES_PERSO_VALIDATION' code FROM dual
  ) e ON 1=1
WHERE
  d. peut_saisir_dossier = 1
  AND 1 = OSE_WORKFLOW.match_intervenant(d.intervenant_id)

UNION ALL  

SELECT
  e.code                                                    etape_code,
  tss.annee_id                                              annee_id,
  tss.intervenant_id                                        intervenant_id,
  NULL                                                      structure_id,
  1                                                         objectif,
  CASE
    WHEN e.code = 'SERVICE_SAISIE' THEN
      CASE WHEN tss.heures_service_prev + tss.heures_referentiel_prev > 0 THEN 1 ELSE 0 END

    WHEN e.code = 'SERVICE_SAISIE_REALISE' THEN
      CASE WHEN tss.heures_service_real + tss.heures_referentiel_real > 0 THEN 1 ELSE 0 END

  END                                                       realisation
FROM
  TBL_SERVICE_SAISIE tss
  JOIN (       
          SELECT 'SERVICE_SAISIE'                 code FROM dual
    UNION SELECT 'SERVICE_SAISIE_REALISE'         code FROM dual
  ) e ON 1=1
WHERE
  (tss.peut_saisir_service = 1 OR tss.peut_saisir_referentiel = 1)
  AND 1 = OSE_WORKFLOW.match_intervenant(tss.intervenant_id)
  
UNION ALL

SELECT
  CASE 
    WHEN tvh.code = 'PREVU'   THEN 'SERVICE_VALIDATION' 
    WHEN tvh.code = 'REALISE' THEN 'SERVICE_VALIDATION_REALISE'
  END                                                        etape_code,
  tve.annee_id                                               annee_id,
  tve.intervenant_id                                         intervenant_id,
  tve.structure_id                                           structure_id,
  COUNT(*)                                                   objectif,
  SUM(CASE WHEN tve.validation_id IS NOT NULL THEN 1 ELSE 0 END) realisation
FROM
  tbl_validation_enseignement tve
  JOIN type_volume_horaire tvh ON tvh.id = tve.type_volume_horaire_id
WHERE
  1 = OSE_WORKFLOW.match_intervenant(tve.intervenant_id)
GROUP BY
  tve.annee_id,
  tve.intervenant_id,
  tve.structure_id,
  tvh.code

UNION ALL

SELECT
  CASE 
    WHEN tvh.code = 'PREVU'   THEN 'REFERENTIEL_VALIDATION' 
    WHEN tvh.code = 'REALISE' THEN 'REFERENTIEL_VALIDATION_REALISE'
  END                                                        etape_code,
  tvr.annee_id                                               annee_id,
  tvr.intervenant_id                                         intervenant_id,
  tvr.structure_id                                           structure_id,
  count(*)                                                   objectif,
  SUM(CASE WHEN tvr.validation_id IS NOT NULL THEN 1 ELSE 0 END) realisation
FROM
  tbl_validation_referentiel tvr
  JOIN type_volume_horaire tvh ON tvh.id = tvr.type_volume_horaire_id
WHERE
  1 = OSE_WORKFLOW.match_intervenant(tvr.intervenant_id)
GROUP BY
  tvr.annee_id,
  tvr.intervenant_id,
  tvr.structure_id,
  tvh.code

UNION ALL

SELECT
  e.code                                                    etape_code,
  pj.annee_id                                               annee_id,
  pj.intervenant_id                                         intervenant_id,
  null                                                      structure_id,
  CASE
    WHEN e.code = 'PJ_SAISIE' THEN pj.demandees
    WHEN e.code = 'PJ_VALIDATION' THEN pj.demandees
  END                                                       objectif,
  CASE
    WHEN e.code = 'PJ_SAISIE' THEN pj.fournies
    WHEN e.code = 'PJ_VALIDATION' THEN pj.validees
  END                                                       realisation
FROM
  pj
  JOIN (       
          SELECT 'PJ_SAISIE'      code FROM dual 
    UNION SELECT 'PJ_VALIDATION'  code FROM dual
  ) e ON (
       (e.code = 'PJ_SAISIE'     AND pj.demandees > 0)
    OR (e.code = 'PJ_VALIDATION' AND pj.fournies  > 0)
  )
  
UNION ALL

SELECT
  ta.code                                                   etape_code,
  a.annee_id                                                annee_id,
  a.intervenant_id                                          intervenant_id,
  a.structure_id                                            structure_id,
  1                                                         objectif,
  CASE WHEN a.agrement_id IS NULL THEN 0 ELSE 1 END         realisation
FROM 
  tbl_agrement a
  JOIN type_agrement ta ON ta.id = a.type_agrement_id
WHERE
  1 = OSE_WORKFLOW.match_intervenant(a.intervenant_id)
  
UNION ALL

SELECT 
  'CLOTURE_REALISE'                                         etape_code,
  c.annee_id                                                annee_id,
  c.intervenant_id                                          intervenant_id,
  null                                                      structure_id,
  1                                                         objectif,
  c.cloture                                                 realisation
FROM
  tbl_cloture_realise c
WHERE 
  c.peut_cloturer_saisie = 1
  AND 1 = OSE_WORKFLOW.match_intervenant(c.intervenant_id)

UNION ALL

SELECT
  e.code                                                    etape_code,
  mep.annee_id                                              annee_id,
  mep.intervenant_id                                        intervenant_id,
  mep.structure_id                                          structure_id,
  CASE
    WHEN e.code = 'DEMANDE_MEP' THEN mep.sap
    WHEN e.code = 'SAISIE_MEP' THEN mep.dmep
  END                                                       objectif,
  CASE
    WHEN e.code = 'DEMANDE_MEP' THEN mep.dmep
    WHEN e.code = 'SAISIE_MEP' THEN mep.mep
  END                                                       realisation
FROM
  mep
  JOIN (       
          SELECT 'DEMANDE_MEP'  code FROM dual 
    UNION SELECT 'SAISIE_MEP'   code FROM dual
  ) e ON (
       (e.code = 'DEMANDE_MEP' AND mep.sap > 0)
    OR (e.code = 'SAISIE_MEP'  AND mep.dmep > 0)
  )
  
  
UNION ALL

SELECT
  'CONTRAT'                                                 etape_code,
  annee_id                                                  annee_id,
  intervenant_id                                            intervenant_id,
  structure_id                                              structure_id,
  nbvh                                                      objectif,
  edite                                                     realisation
FROM 
  tbl_contrat c
WHERE
  peut_avoir_contrat = 1
  AND nbvh > 0
  AND 1 = OSE_WORKFLOW.match_intervenant(c.intervenant_id);
--------------------------------------------------------
--  DDL for View V_TOTAL_DEMANDE_MEP_STRUCTURE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_TOTAL_DEMANDE_MEP_STRUCTURE" ("INTERVENANT_ID", "STRUCTURE_ID", "TOTAL_HEURES_MEP") AS 
  with mep as (
  -- enseignements
  select 
    fr.intervenant_id, 
    nvl(ep.structure_id, i.structure_id) structure_id, 
    nvl(mep.heures, 0) mep_heures
  from mise_en_paiement mep
  join formule_resultat_service frs on mep.formule_res_service_id = frs.id --and mep.date_mise_en_paiement is null -- date_mise_en_paiement is null <=> demande
  join formule_resultat fr on frs.formule_resultat_id = fr.id
  join intervenant i on fr.intervenant_id = i.id
  join service s on frs.service_id = s.id
  left join element_pedagogique ep on s.element_pedagogique_id = ep.id and 1 = ose_divers.comprise_entre(ep.histo_creation, ep.histo_destruction)
  where 1 = ose_divers.comprise_entre(mep.histo_creation, mep.histo_destruction)
  union all
  -- referentiel
  select 
    fr.intervenant_id, 
    s.structure_id,
    nvl(mep.heures, 0) mep_heures
  from mise_en_paiement mep
  join formule_resultat_service_ref frs on mep.formule_res_service_ref_id = frs.id --and mep.date_mise_en_paiement is null -- date_mise_en_paiement is null <=> demande
  join formule_resultat fr on frs.formule_resultat_id = fr.id
  join intervenant i on fr.intervenant_id = i.id
  join service_referentiel s on frs.service_referentiel_id = s.id
  where 1 = ose_divers.comprise_entre(mep.histo_creation, mep.histo_destruction)
)
select intervenant_id, structure_id, sum(nvl(mep_heures, 0)) total_heures_mep from mep
group by intervenant_id, structure_id;
--------------------------------------------------------
--  DDL for View V_VALIDATION_MISE_EN_PAIEMENT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_VALIDATION_MISE_EN_PAIEMENT" ("VALIDATION_ID", "MISE_EN_PAIEMENT_ID") AS 
  SELECT
  vvh.validation_id,
  mep.id mise_en_paiement_id
FROM
  validation_vol_horaire vvh
  JOIN volume_horaire vh ON vh.id = vvh.volume_horaire_id
  JOIN formule_resultat_service frs ON frs.service_id = vh.service_id
  JOIN mise_en_paiement mep ON mep.formule_res_service_id = frs.id
  
UNION

SELECT
  vvh.validation_id,
  mep.id mise_en_paiement_id
FROM
  validation_vol_horaire_ref vvh
  JOIN volume_horaire_ref vh ON vh.id = vvh.volume_horaire_ref_id
  JOIN formule_resultat_service_ref frs ON frs.service_referentiel_id = vh.service_referentiel_id
  JOIN mise_en_paiement mep ON mep.formule_res_service_ref_id = frs.id;
--------------------------------------------------------
--  DDL for View V_VOL_HORAIRE_ETAT_MULTI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_VOL_HORAIRE_ETAT_MULTI" ("VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID") AS 
  select vh.id, evh.id
  from volume_horaire vh 
  join service s on s.id = vh.service_id and 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction) 
  join etat_volume_horaire evh on evh.code = 'saisi' 
  where 1 = ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction) 
union all
  select vh.id, evh.id
  from volume_horaire vh 
  join service s on s.id = vh.service_id and 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction) 
  join etat_volume_horaire evh on evh.code = 'valide' 
  where 1 = ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction) 
  and EXISTS(
    SELECT * FROM validation v JOIN validation_vol_horaire vvh ON vvh.validation_id = v.id
    WHERE vvh.volume_horaire_id = vh.id AND 1 = ose_divers.comprise_entre(v.histo_creation, v.histo_destruction)
  )
union all
  select vh.id, evh.id
  from volume_horaire vh 
  join service s on s.id = vh.service_id and 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction) 
  join contrat c on vh.contrat_id = c.id and 1 = ose_divers.comprise_entre(c.histo_creation, c.histo_destruction)
  join etat_volume_horaire evh on evh.code = 'contrat-edite' 
  where 1 = ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction) 
union all
  select vh.id, evh.id
  from volume_horaire vh 
  join service s on s.id = vh.service_id and 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction) 
  join contrat c on vh.contrat_id = c.id and 1 = ose_divers.comprise_entre(c.histo_creation, c.histo_destruction) and c.date_retour_signe is not null
  join etat_volume_horaire evh on evh.code = 'contrat-signe' 
  where 1 = ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction);
--------------------------------------------------------
--  DDL for View V_VOL_HORAIRE_REF_ETAT_MULTI
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_VOL_HORAIRE_REF_ETAT_MULTI" ("VOLUME_HORAIRE_REF_ID", "ETAT_VOLUME_HORAIRE_ID") AS 
  select vh.id, evh.id
  from volume_horaire_ref vh 
  join service_referentiel s on s.id = vh.service_referentiel_id and 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction) 
  join etat_volume_horaire evh on evh.code = 'saisi' 
  where 1 = ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction) 
union all
  select vh.id, evh.id
  from volume_horaire_ref vh 
  join service_referentiel s on s.id = vh.service_referentiel_id and 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction) 
  join etat_volume_horaire evh on evh.code = 'valide' 
  where 1 = ose_divers.comprise_entre(vh.histo_creation, vh.histo_destruction) 
  and EXISTS(
    SELECT * FROM validation v JOIN validation_vol_horaire_ref vvh ON vvh.validation_id = v.id
    WHERE vvh.volume_horaire_ref_id = vh.id AND 1 = ose_divers.comprise_entre(v.histo_creation, v.histo_destruction)
  );
--------------------------------------------------------
--  DDL for View V_VOLUME_HORAIRE_ETAT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_VOLUME_HORAIRE_ETAT" ("VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID") AS 
  SELECT 
  vh.id volume_horaire_id,
  evh.id etat_volume_horaire_id
FROM
  volume_horaire vh
  LEFT JOIN contrat c ON c.id = vh.contrat_id AND 1 = ose_divers.comprise_entre( c.histo_creation, c.histo_destruction )
  LEFT JOIN validation cv ON cv.id = c.validation_id AND 1 = ose_divers.comprise_entre( cv.histo_creation, cv.histo_destruction )
  JOIN etat_volume_horaire evh ON evh.code = CASE
    WHEN c.date_retour_signe IS NOT NULL THEN 'contrat-signe'
    WHEN cv.id IS NOT NULL THEN 'contrat-edite'
    WHEN EXISTS(
      SELECT * FROM validation v JOIN validation_vol_horaire vvh ON vvh.validation_id = v.id
      WHERE vvh.volume_horaire_id = vh.id AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
    ) THEN 'valide'
    ELSE 'saisi'
    END;
--------------------------------------------------------
--  DDL for View V_VOLUME_HORAIRE_REF_ETAT
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_VOLUME_HORAIRE_REF_ETAT" ("VOLUME_HORAIRE_REF_ID", "ETAT_VOLUME_HORAIRE_ID") AS 
  SELECT 
  vhr.id volume_horaire_ref_id,
  evh.id etat_volume_horaire_id
FROM
  volume_horaire_ref vhr
  JOIN etat_volume_horaire evh ON evh.code = CASE
    WHEN EXISTS(
      SELECT * FROM validation v JOIN validation_vol_horaire_ref vvhr ON vvhr.validation_id = v.id
      WHERE vvhr.volume_horaire_ref_id = vhr.id AND 1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction )
    ) THEN 'valide'
    ELSE 'saisi'
  END;
--------------------------------------------------------
--  DDL for View V_WORKFLOW_ETAPE_PERTINENTE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "OSE"."V_WORKFLOW_ETAPE_PERTINENTE" ("ANNEE_ID", "INTERVENANT_ID", "ETAPE_CODE") AS 
  WITH peut_pj AS (
  SELECT DISTINCT 
    statut_intervenant_id,
    1 tem
  FROM
    type_piece_jointe_statut tpjs
  WHERE
    1 = ose_divers.comprise_entre( tpjs.histo_creation, tpjs.histo_destruction )
),
peut_agr AS (
  SELECT
    tas.statut_intervenant_id,
    ta.code,
    tas.premier_recrutement
  FROM
    type_agrement_statut tas
    JOIN type_agrement ta ON ta.id = tas.type_agrement_id
  WHERE
    1 = ose_divers.comprise_entre( tas.histo_creation, tas.histo_destruction )
)
SELECT
  i.annee_id annee_id,
  i.id intervenant_id,
  e.code etape_code
FROM
            intervenant i
       JOIN statut_intervenant si ON si.id = i.statut_id
  LEFT JOIN peut_pj ON peut_pj.statut_intervenant_id = si.id
  LEFT JOIN peut_agr peut_cr ON peut_cr.code = 'CONSEIL_RESTREINT'  AND peut_cr.statut_intervenant_id = si.id AND (peut_cr.premier_recrutement IS NULL OR NVL(i.premier_recrutement,0) = peut_cr.premier_recrutement)
  LEFT JOIN peut_agr peut_ca ON peut_ca.code = 'CONSEIL_ACADEMIQUE' AND peut_ca.statut_intervenant_id = si.id AND (peut_ca.premier_recrutement IS NULL OR NVL(i.premier_recrutement,0) = peut_ca.premier_recrutement)
       JOIN wf_etape e ON 1 = CASE e.code

    WHEN 'DONNEES_PERSO_SAISIE' THEN
      si.peut_saisir_dossier

    WHEN 'SERVICE_SAISIE' THEN
      CASE WHEN si.peut_saisir_service + si.peut_saisir_referentiel = 0 THEN 0 ELSE 1 END

    WHEN 'PJ_SAISIE' THEN
      peut_pj.tem

    WHEN 'PJ_VALIDATION' THEN
      peut_pj.tem

    WHEN 'DONNEES_PERSO_VALIDATION' THEN
      si.peut_saisir_dossier

    WHEN 'SERVICE_VALIDATION' THEN
      si.peut_saisir_service

    WHEN 'REFERENTIEL_VALIDATION' THEN
      si.peut_saisir_referentiel

    WHEN 'CONSEIL_RESTREINT' THEN
      CASE WHEN peut_cr.code IS NULL THEN 0 ELSE 1 END

    WHEN 'CONSEIL_ACADEMIQUE' THEN
      CASE WHEN peut_ca.code IS NULL THEN 0 ELSE 1 END

    WHEN 'CONTRAT' THEN
      si.peut_avoir_contrat

    WHEN 'SERVICE_SAISIE_REALISE' THEN
      CASE WHEN si.peut_saisir_service + si.peut_saisir_referentiel = 0 THEN 0 ELSE 1 END

    WHEN 'CLOTURE_REALISE' THEN
      si.peut_cloturer_saisie

    WHEN 'SERVICE_VALIDATION_REALISE' THEN
      si.peut_saisir_service

    WHEN 'REFERENTIEL_VALIDATION_REALISE' THEN
      si.peut_saisir_referentiel

    WHEN 'DEMANDE_MEP' THEN
      CASE WHEN si.peut_saisir_service + si.peut_saisir_referentiel = 0 THEN 0 ELSE 1 END

    WHEN 'SAISIE_MEP' THEN
      CASE WHEN si.peut_saisir_service + si.peut_saisir_referentiel = 0 THEN 0 ELSE 1 END

  END
WHERE
  1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction );
--------------------------------------------------------
--  DDL for DB Link APOPROD
--------------------------------------------------------

  CREATE DATABASE LINK "APOPROD"
   CONNECT TO "OSE" IDENTIFIED BY VALUES '06A283DD0F7F9DBAC2A712B6E301979601C0FF9C006D600476D5B6AB44BFD288813F8900E65461370E0C4F3DC6431958D7824CF8A9848151CB3B7EEFBCD169CAB93F070B1D92AA9231C9E314E103EC5E7BFE6B5D608588EE4CF768A73C5DFE900F3510C6B681B3448B8EC28371A391E33704D8B3D91B59B0199B9E8BC3706EB7'
   USING 'apoprod';
--------------------------------------------------------
--  DDL for DB Link HARPPROD
--------------------------------------------------------

  CREATE DATABASE LINK "HARPPROD"
   CONNECT TO "OSE" IDENTIFIED BY VALUES '06E94E3EB631217A2C91E744DCE1D1A8AF8AD59C2316F6A2877C1AE4DAEEA4AF4F0D011DE8851A26475FC2F2DEFCD26A48D7B500504E4A33FA0296517692F22901812AE3688335FD78FB308E8646B6DFBEB72BE456EB7690267AD8E88EE4F49358D95C83C13B16775471E5B62D067FCC3549411945B4A27DD584CADF203AAC1B'
   USING 'harpprod';
--------------------------------------------------------
--  DDL for DB Link MASTER
--------------------------------------------------------

  CREATE DATABASE LINK "MASTER"
   CONNECT TO "ANTHONY" IDENTIFIED BY VALUES '0626D86786A456DAE265F637AD2ABCB6CDA0991406281FB73269CB49C30FFE841EFC4884D44132A4502E6B78B39F9C5D5A16198B3BE542A25C2FBBA52158D20BD4EBE0F5D91F4A6F39921F6EE9D8A29991DC6CA65007D9D93FA49336668B5E346BA1B3E44723DDF38FE64138BFF03EF433E9FE009027E28936149BB7D8BB011E'
   USING 'master';
--------------------------------------------------------
--  DDL for DB Link SIFACP
--------------------------------------------------------

  CREATE DATABASE LINK "SIFACP"
   CONNECT TO "UCBN_OSE" IDENTIFIED BY VALUES '0614AC473A94CE43EE3B6B5E05B37F9E20758D15E0501197339187321EE9AD255AB922E463466D6B4ECFDE31E76ED4F6717C14CAE29CBF7B8FEBBA203BF9A8F4D22582576C57AAF35D6C595414DDECDFCFAD351D90980C62F8B5009C4235235C26946757B8A3A43A53266CD188A0B8DDB9F390CAB13A460F20423FF4576F1963'
   USING 'sifacp';
--------------------------------------------------------
--  DDL for Table ADRESSE_INTERVENANT
--------------------------------------------------------

  CREATE TABLE "OSE"."ADRESSE_INTERVENANT" 
   (	"ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"TEL_DOMICILE" VARCHAR2(25 CHAR), 
	"MENTION_COMPLEMENTAIRE" VARCHAR2(50 CHAR), 
	"BATIMENT" VARCHAR2(60 CHAR), 
	"NO_VOIE" VARCHAR2(20 CHAR), 
	"NOM_VOIE" VARCHAR2(120 CHAR), 
	"LOCALITE" VARCHAR2(120 CHAR), 
	"CODE_POSTAL" VARCHAR2(15 CHAR), 
	"VILLE" VARCHAR2(120 CHAR), 
	"PAYS_CODE_INSEE" VARCHAR2(3 CHAR), 
	"PAYS_LIBELLE" VARCHAR2(50 CHAR), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table ADRESSE_STRUCTURE
--------------------------------------------------------

  CREATE TABLE "OSE"."ADRESSE_STRUCTURE" 
   (	"ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"PRINCIPALE" NUMBER(1,0), 
	"TELEPHONE" VARCHAR2(20 CHAR), 
	"NO_VOIE" VARCHAR2(10 CHAR), 
	"NOM_VOIE" VARCHAR2(60 CHAR), 
	"LOCALITE" VARCHAR2(26 CHAR), 
	"CODE_POSTAL" VARCHAR2(15 CHAR), 
	"VILLE" VARCHAR2(26 CHAR), 
	"PAYS_CODE_INSEE" VARCHAR2(3 CHAR), 
	"PAYS_LIBELLE" VARCHAR2(30 CHAR), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table AFFECTATION
--------------------------------------------------------

  CREATE TABLE "OSE"."AFFECTATION" 
   (	"ID" NUMBER(*,0), 
	"PERSONNEL_ID" NUMBER(*,0), 
	"ROLE_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table AFFECTATION_RECHERCHE
--------------------------------------------------------

  CREATE TABLE "OSE"."AFFECTATION_RECHERCHE" 
   (	"ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;

   COMMENT ON TABLE "OSE"."AFFECTATION_RECHERCHE"  IS 'Un chercheur peut avoir plusieurs affectations de recherche';
--------------------------------------------------------
--  DDL for Table AGREMENT
--------------------------------------------------------

  CREATE TABLE "OSE"."AGREMENT" 
   (	"ID" NUMBER(*,0), 
	"TYPE_AGREMENT_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"DATE_DECISION" DATE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table ANNEE
--------------------------------------------------------

  CREATE TABLE "OSE"."ANNEE" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE" VARCHAR2(9 CHAR), 
	"DATE_DEBUT" DATE, 
	"DATE_FIN" DATE, 
	"ACTIVE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table CAMPAGNE_SAISIE
--------------------------------------------------------

  CREATE TABLE "OSE"."CAMPAGNE_SAISIE" 
   (	"ID" NUMBER(*,0), 
	"TYPE_INTERVENANT_ID" NUMBER(*,0), 
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0), 
	"DATE_DEBUT" DATE, 
	"DATE_FIN" DATE, 
	"MESSAGE_INTERVENANT" VARCHAR2(300 CHAR), 
	"MESSAGE_AUTRES" VARCHAR2(300 CHAR), 
	"ANNEE_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table CATEGORIE_PRIVILEGE
--------------------------------------------------------

  CREATE TABLE "OSE"."CATEGORIE_PRIVILEGE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(150 CHAR), 
	"LIBELLE" VARCHAR2(200 CHAR), 
	"ORDRE" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table CC_ACTIVITE
--------------------------------------------------------

  CREATE TABLE "OSE"."CC_ACTIVITE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(50 CHAR), 
	"LIBELLE" VARCHAR2(200 CHAR), 
	"FI" NUMBER(1,0), 
	"FA" NUMBER(1,0), 
	"FC" NUMBER(1,0), 
	"FC_MAJOREES" NUMBER(1,0), 
	"REFERENTIEL" NUMBER(1,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table CENTRE_COUT
--------------------------------------------------------

  CREATE TABLE "OSE"."CENTRE_COUT" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE" VARCHAR2(200 CHAR), 
	"ACTIVITE_ID" NUMBER(*,0), 
	"TYPE_RESSOURCE_ID" NUMBER(*,0), 
	"PARENT_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"UNITE_BUDGETAIRE" VARCHAR2(15 CHAR)
   ) ;
--------------------------------------------------------
--  DDL for Table CENTRE_COUT_EP
--------------------------------------------------------

  CREATE TABLE "OSE"."CENTRE_COUT_EP" 
   (	"ID" NUMBER(*,0), 
	"CENTRE_COUT_ID" NUMBER(*,0), 
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0), 
	"TYPE_HEURES_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table CENTRE_COUT_STRUCTURE
--------------------------------------------------------

  CREATE TABLE "OSE"."CENTRE_COUT_STRUCTURE" 
   (	"ID" NUMBER(*,0), 
	"CENTRE_COUT_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"UNITE_BUDGETAIRE" VARCHAR2(15 CHAR)
   ) ;
--------------------------------------------------------
--  DDL for Table CHEMIN_PEDAGOGIQUE
--------------------------------------------------------

  CREATE TABLE "OSE"."CHEMIN_PEDAGOGIQUE" 
   (	"ID" NUMBER(*,0), 
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0), 
	"ETAPE_ID" NUMBER(*,0), 
	"ORDRE" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table CIVILITE
--------------------------------------------------------

  CREATE TABLE "OSE"."CIVILITE" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE_COURT" VARCHAR2(5 CHAR), 
	"LIBELLE_LONG" VARCHAR2(15 CHAR), 
	"SEXE" VARCHAR2(1 CHAR)
   ) ;
--------------------------------------------------------
--  DDL for Table CONTRAT
--------------------------------------------------------

  CREATE TABLE "OSE"."CONTRAT" 
   (	"ID" NUMBER(*,0), 
	"TYPE_CONTRAT_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"VALIDATION_ID" NUMBER(*,0), 
	"NUMERO_AVENANT" NUMBER DEFAULT 0, 
	"DATE_RETOUR_SIGNE" DATE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"CONTRAT_ID" NUMBER, 
	"TOTAL_HETD" FLOAT(126)
   ) ;

   COMMENT ON COLUMN "OSE"."CONTRAT"."TOTAL_HETD" IS 'Total HETD au moment de la cr√©ation du contrat/avenant.';
--------------------------------------------------------
--  DDL for Table CONTRAT_FICHIER
--------------------------------------------------------

  CREATE TABLE "OSE"."CONTRAT_FICHIER" 
   (	"CONTRAT_ID" NUMBER(*,0), 
	"FICHIER_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table CORPS
--------------------------------------------------------

  CREATE TABLE "OSE"."CORPS" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE_LONG" VARCHAR2(40 CHAR), 
	"LIBELLE_COURT" VARCHAR2(20 CHAR), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table DEPARTEMENT
--------------------------------------------------------

  CREATE TABLE "OSE"."DEPARTEMENT" 
   (	"ID" NUMBER, 
	"LIBELLE_LONG" VARCHAR2(120 CHAR), 
	"LIBELLE_COURT" VARCHAR2(60 CHAR), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"CODE" VARCHAR2(5 CHAR)
   ) ;
--------------------------------------------------------
--  DDL for Table DISCIPLINE
--------------------------------------------------------

  CREATE TABLE "OSE"."DISCIPLINE" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE_COURT" VARCHAR2(20 CHAR), 
	"LIBELLE_LONG" VARCHAR2(200 CHAR), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"CODES_CORRESP_1" VARCHAR2(1000 CHAR), 
	"CODES_CORRESP_2" VARCHAR2(1000 CHAR), 
	"CODES_CORRESP_3" VARCHAR2(1000 CHAR), 
	"CODES_CORRESP_4" VARCHAR2(1000 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table DOMAINE_FONCTIONNEL
--------------------------------------------------------

  CREATE TABLE "OSE"."DOMAINE_FONCTIONNEL" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE" VARCHAR2(200 CHAR), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table DOSSIER
--------------------------------------------------------

  CREATE TABLE "OSE"."DOSSIER" 
   (	"ID" NUMBER(*,0), 
	"NOM_USUEL" VARCHAR2(128 CHAR), 
	"NOM_PATRONYMIQUE" VARCHAR2(128 CHAR), 
	"PRENOM" VARCHAR2(128 CHAR), 
	"CIVILITE_ID" NUMBER, 
	"NUMERO_INSEE" VARCHAR2(20 CHAR), 
	"STATUT_ID" NUMBER, 
	"ADRESSE" VARCHAR2(1024 CHAR), 
	"EMAIL" VARCHAR2(128 CHAR), 
	"TELEPHONE" VARCHAR2(20 CHAR), 
	"PREMIER_RECRUTEMENT" NUMBER(1,0) DEFAULT 0, 
	"PERTE_EMPLOI" NUMBER(1,0) DEFAULT NULL, 
	"RIB" VARCHAR2(50 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"NUMERO_INSEE_EST_PROVISOIRE" NUMBER(1,0) DEFAULT 0, 
	"EMAIL_PERSO" VARCHAR2(128 CHAR), 
	"DATE_NAISSANCE" DATE, 
	"PAYS_NAISSANCE_ID" NUMBER(*,0), 
	"DEPT_NAISSANCE_ID" NUMBER(*,0), 
	"VILLE_NAISSANCE" VARCHAR2(128 CHAR), 
	"INTERVENANT_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table DOTATION
--------------------------------------------------------

  CREATE TABLE "OSE"."DOTATION" 
   (	"ID" NUMBER(*,0), 
	"TYPE_RESSOURCE_ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"HEURES" FLOAT(126) DEFAULT 0, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"ANNEE_CIVILE" NUMBER(*,0), 
	"LIBELLE" VARCHAR2(100 CHAR)
   ) ;
--------------------------------------------------------
--  DDL for Table EFFECTIFS
--------------------------------------------------------

  CREATE TABLE "OSE"."EFFECTIFS" 
   (	"ID" NUMBER(*,0), 
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0), 
	"FI" NUMBER(*,0) DEFAULT 0, 
	"FC" NUMBER(*,0) DEFAULT 0, 
	"FA" NUMBER(*,0) DEFAULT 0, 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER DEFAULT NULL
   ) ;
--------------------------------------------------------
--  DDL for Table ELEMENT_MODULATEUR
--------------------------------------------------------

  CREATE TABLE "OSE"."ELEMENT_MODULATEUR" 
   (	"ID" NUMBER, 
	"ELEMENT_ID" NUMBER(*,0), 
	"MODULATEUR_ID" NUMBER(*,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table ELEMENT_PEDAGOGIQUE
--------------------------------------------------------

  CREATE TABLE "OSE"."ELEMENT_PEDAGOGIQUE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(50 CHAR), 
	"LIBELLE" VARCHAR2(120 CHAR), 
	"ETAPE_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"PERIODE_ID" NUMBER(*,0), 
	"TAUX_FI" FLOAT(126) DEFAULT 1, 
	"TAUX_FC" FLOAT(126) DEFAULT 0, 
	"TAUX_FA" FLOAT(126) DEFAULT 0, 
	"TAUX_FOAD" FLOAT(126) DEFAULT 0, 
	"FI" NUMBER(1,0) DEFAULT 1, 
	"FC" NUMBER(1,0) DEFAULT 0, 
	"FA" NUMBER(1,0) DEFAULT 0, 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0) DEFAULT NULL, 
	"DISCIPLINE_ID" NUMBER(*,0)
   ) ;

   COMMENT ON COLUMN "OSE"."ELEMENT_PEDAGOGIQUE"."PERIODE_ID" IS 'Un √©l√©ment p√©dagogique ne peut avoir qu''une et une seule p√©riode.';
--------------------------------------------------------
--  DDL for Table ELEMENT_TAUX_REGIMES
--------------------------------------------------------

  CREATE TABLE "OSE"."ELEMENT_TAUX_REGIMES" 
   (	"ID" NUMBER(*,0), 
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0), 
	"TAUX_FI" FLOAT(126), 
	"TAUX_FC" FLOAT(126), 
	"TAUX_FA" FLOAT(126), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table ETABLISSEMENT
--------------------------------------------------------

  CREATE TABLE "OSE"."ETABLISSEMENT" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE" VARCHAR2(100 CHAR), 
	"LOCALISATION" VARCHAR2(60 CHAR), 
	"DEPARTEMENT" VARCHAR2(3 CHAR), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table ETAPE
--------------------------------------------------------

  CREATE TABLE "OSE"."ETAPE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(50 CHAR), 
	"LIBELLE" VARCHAR2(120 CHAR), 
	"ANNEE_ID" NUMBER(*,0), 
	"TYPE_FORMATION_ID" NUMBER(*,0), 
	"NIVEAU" NUMBER(*,0), 
	"SPECIFIQUE_ECHANGES" NUMBER(1,0) DEFAULT 0, 
	"STRUCTURE_ID" NUMBER(*,0), 
	"DOMAINE_FONCTIONNEL_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table ETAT_VOLUME_HORAIRE
--------------------------------------------------------

  CREATE TABLE "OSE"."ETAT_VOLUME_HORAIRE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(30 CHAR), 
	"LIBELLE" VARCHAR2(80 CHAR), 
	"ORDRE" NUMBER(*,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table FICHIER
--------------------------------------------------------

  CREATE TABLE "OSE"."FICHIER" 
   (	"ID" NUMBER(*,0), 
	"NOM" VARCHAR2(128 CHAR), 
	"TYPE" VARCHAR2(128 CHAR), 
	"TAILLE" NUMBER(*,0), 
	"CONTENU" BLOB, 
	"DESCRIPTION" VARCHAR2(256 CHAR), 
	"VALIDATION_ID" NUMBER, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table FONCTION_REFERENTIEL
--------------------------------------------------------

  CREATE TABLE "OSE"."FONCTION_REFERENTIEL" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(32 CHAR), 
	"LIBELLE_LONG" VARCHAR2(100 CHAR), 
	"LIBELLE_COURT" VARCHAR2(40 CHAR), 
	"DOMAINE_FONCTIONNEL_ID" NUMBER, 
	"PLAFOND" FLOAT(126), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0) DEFAULT NULL
   ) ;

   COMMENT ON COLUMN "OSE"."FONCTION_REFERENTIEL"."STRUCTURE_ID" IS 'Structure associ√©e √©ventuelle';
--------------------------------------------------------
--  DDL for Table FORMULE_RESULTAT
--------------------------------------------------------

  CREATE TABLE "OSE"."FORMULE_RESULTAT" 
   (	"ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0), 
	"ETAT_VOLUME_HORAIRE_ID" NUMBER(*,0), 
	"SERVICE_DU" FLOAT(126) DEFAULT 0, 
	"SERVICE_FI" FLOAT(126) DEFAULT 0, 
	"SERVICE_FA" FLOAT(126) DEFAULT 0, 
	"SERVICE_FC" FLOAT(126) DEFAULT 0, 
	"SERVICE_REFERENTIEL" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_FI" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_FA" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_FC" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_FC_MAJOREES" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_REFERENTIEL" FLOAT(126) DEFAULT 0, 
	"TOTAL" FLOAT(126) DEFAULT 0, 
	"SOLDE" FLOAT(126) DEFAULT 0, 
	"SOUS_SERVICE" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL" FLOAT(126) DEFAULT 0, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0, 
	"TYPE_INTERVENANT_CODE" VARCHAR2(5 CHAR)
   ) ;
--------------------------------------------------------
--  DDL for Table FORMULE_RESULTAT_SERVICE
--------------------------------------------------------

  CREATE TABLE "OSE"."FORMULE_RESULTAT_SERVICE" 
   (	"ID" NUMBER(*,0), 
	"FORMULE_RESULTAT_ID" NUMBER(*,0), 
	"SERVICE_ID" NUMBER(*,0), 
	"SERVICE_FI" FLOAT(126) DEFAULT 0, 
	"SERVICE_FA" FLOAT(126) DEFAULT 0, 
	"SERVICE_FC" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_FI" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_FA" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_FC" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_FC_MAJOREES" FLOAT(126) DEFAULT 0, 
	"TOTAL" FLOAT(126) DEFAULT 0, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table FORMULE_RESULTAT_SERVICE_REF
--------------------------------------------------------

  CREATE TABLE "OSE"."FORMULE_RESULTAT_SERVICE_REF" 
   (	"ID" NUMBER(*,0), 
	"FORMULE_RESULTAT_ID" NUMBER(*,0), 
	"SERVICE_REFERENTIEL_ID" NUMBER(*,0), 
	"SERVICE_REFERENTIEL" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_REFERENTIEL" FLOAT(126) DEFAULT 0, 
	"TOTAL" FLOAT(126) DEFAULT 0, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table FORMULE_RESULTAT_VH
--------------------------------------------------------

  CREATE TABLE "OSE"."FORMULE_RESULTAT_VH" 
   (	"ID" NUMBER(*,0), 
	"FORMULE_RESULTAT_ID" NUMBER(*,0), 
	"VOLUME_HORAIRE_ID" NUMBER(*,0), 
	"SERVICE_FI" FLOAT(126) DEFAULT 0, 
	"SERVICE_FA" FLOAT(126) DEFAULT 0, 
	"SERVICE_FC" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_FI" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_FA" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_FC" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_FC_MAJOREES" FLOAT(126) DEFAULT 0, 
	"TOTAL" FLOAT(126) DEFAULT 0, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table FORMULE_RESULTAT_VH_REF
--------------------------------------------------------

  CREATE TABLE "OSE"."FORMULE_RESULTAT_VH_REF" 
   (	"ID" NUMBER(*,0), 
	"FORMULE_RESULTAT_ID" NUMBER(*,0), 
	"VOLUME_HORAIRE_REF_ID" NUMBER(*,0), 
	"SERVICE_REFERENTIEL" FLOAT(126) DEFAULT 0, 
	"HEURES_COMPL_REFERENTIEL" FLOAT(126) DEFAULT 0, 
	"TOTAL" FLOAT(126) DEFAULT 0, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table GRADE
--------------------------------------------------------

  CREATE TABLE "OSE"."GRADE" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE_LONG" VARCHAR2(40 CHAR), 
	"LIBELLE_COURT" VARCHAR2(20 CHAR), 
	"ECHELLE" VARCHAR2(10 CHAR), 
	"CORPS_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table GROUPE
--------------------------------------------------------

  CREATE TABLE "OSE"."GROUPE" 
   (	"ID" NUMBER(*,0), 
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0), 
	"TYPE_INTERVENTION_ID" NUMBER(*,0), 
	"NOMBRE" NUMBER(*,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table GROUPE_TYPE_FORMATION
--------------------------------------------------------

  CREATE TABLE "OSE"."GROUPE_TYPE_FORMATION" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE_COURT" VARCHAR2(20 CHAR), 
	"LIBELLE_LONG" VARCHAR2(50 CHAR), 
	"ORDRE" NUMBER(*,0), 
	"PERTINENCE_NIVEAU" NUMBER(1,0) DEFAULT 1, 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table HISTO_INTERVENANT_SERVICE
--------------------------------------------------------

  CREATE TABLE "OSE"."HISTO_INTERVENANT_SERVICE" 
   (	"ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0), 
	"REFERENTIEL" NUMBER(1,0) DEFAULT 0, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE
   ) ;
--------------------------------------------------------
--  DDL for Table INDICATEUR
--------------------------------------------------------

  CREATE TABLE "OSE"."INDICATEUR" 
   (	"ID" NUMBER(*,0), 
	"TYPE" VARCHAR2(64 CHAR), 
	"ORDRE" NUMBER(*,0) DEFAULT 100, 
	"ENABLED" NUMBER(1,0) DEFAULT 1, 
	"NUMERO" NUMBER DEFAULT 0, 
	"LIBELLE_SINGULIER" VARCHAR2(255 CHAR), 
	"LIBELLE_PLURIEL" VARCHAR2(255 CHAR), 
	"ROUTE" VARCHAR2(250 CHAR), 
	"TEM_DISTINCT" NUMBER(1,0) DEFAULT 1, 
	"TEM_NOT_STRUCTURE" NUMBER(1,0) DEFAULT 0, 
	"MESSAGE" VARCHAR2(800 CHAR)
   ) ;

   COMMENT ON COLUMN "OSE"."INDICATEUR"."TYPE" IS 'Type de l''indicateur (alerte, info, etc.)';
   COMMENT ON COLUMN "OSE"."INDICATEUR"."ENABLED" IS 'T√©moin indiquant si l''indicateur est actif ou non';
   COMMENT ON COLUMN "OSE"."INDICATEUR"."NUMERO" IS 'Numero unique p√©renne user-friendly';
--------------------------------------------------------
--  DDL for Table INDIC_MODIF_DOSSIER
--------------------------------------------------------

  CREATE TABLE "OSE"."INDIC_MODIF_DOSSIER" 
   (	"ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"ATTR_NAME" VARCHAR2(128 CHAR), 
	"ATTR_OLD_SOURCE_NAME" VARCHAR2(128 CHAR), 
	"ATTR_OLD_VALUE" VARCHAR2(1024 CHAR), 
	"ATTR_NEW_SOURCE_NAME" VARCHAR2(128 CHAR), 
	"ATTR_NEW_VALUE" VARCHAR2(1024 CHAR), 
	"EST_CREATION_DOSSIER" NUMBER(*,0) DEFAULT 0, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table INTERVENANT
--------------------------------------------------------

  CREATE TABLE "OSE"."INTERVENANT" 
   (	"ID" NUMBER(*,0), 
	"CIVILITE_ID" NUMBER(*,0), 
	"NOM_USUEL" VARCHAR2(60 CHAR), 
	"PRENOM" VARCHAR2(60 CHAR), 
	"NOM_PATRONYMIQUE" VARCHAR2(60 CHAR), 
	"DATE_NAISSANCE" DATE, 
	"VILLE_NAISSANCE_CODE_INSEE" VARCHAR2(5 CHAR), 
	"VILLE_NAISSANCE_LIBELLE" VARCHAR2(60 CHAR), 
	"TEL_PRO" VARCHAR2(20 CHAR), 
	"TEL_MOBILE" VARCHAR2(20 CHAR), 
	"EMAIL" VARCHAR2(255 CHAR), 
	"STATUT_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"DISCIPLINE_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"NUMERO_INSEE" VARCHAR2(13 CHAR), 
	"NUMERO_INSEE_CLE" VARCHAR2(2 CHAR), 
	"NUMERO_INSEE_PROVISOIRE" NUMBER(1,0), 
	"IBAN" VARCHAR2(50 CHAR), 
	"BIC" VARCHAR2(20 CHAR), 
	"MONTANT_INDEMNITE_FC" FLOAT(126), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"PREMIER_RECRUTEMENT" NUMBER(1,0) DEFAULT NULL, 
	"ANNEE_ID" NUMBER(*,0) DEFAULT NULL, 
	"GRADE_ID" NUMBER(*,0), 
	"CRITERE_RECHERCHE" VARCHAR2(255 CHAR), 
	"CODE" VARCHAR2(60 CHAR), 
	"SUPANN_EMP_ID" VARCHAR2(60 CHAR), 
	"PAYS_NAISSANCE_ID" NUMBER(*,0), 
	"DEP_NAISSANCE_ID" NUMBER(*,0), 
	"PAYS_NATIONALITE_ID" NUMBER(*,0)
   ) ;

   COMMENT ON COLUMN "OSE"."INTERVENANT"."STRUCTURE_ID" IS 'Structure principale d''affectation';
--------------------------------------------------------
--  DDL for Table INTERVENANT_SAISIE
--------------------------------------------------------

  CREATE TABLE "OSE"."INTERVENANT_SAISIE" 
   (	"ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"STATUT_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table LIEN
--------------------------------------------------------

  CREATE TABLE "OSE"."LIEN" 
   (	"ID" NUMBER(*,0), 
	"NOEUD_SUP_ID" NUMBER(*,0), 
	"NOEUD_INF_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table MESSAGE
--------------------------------------------------------

  CREATE TABLE "OSE"."MESSAGE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(150 CHAR), 
	"TEXTE" CLOB
   ) ;
--------------------------------------------------------
--  DDL for Table MISE_EN_PAIEMENT
--------------------------------------------------------

  CREATE TABLE "OSE"."MISE_EN_PAIEMENT" 
   (	"ID" NUMBER(*,0), 
	"FORMULE_RES_SERVICE_ID" NUMBER(*,0), 
	"FORMULE_RES_SERVICE_REF_ID" NUMBER(*,0), 
	"DATE_MISE_EN_PAIEMENT" DATE, 
	"PERIODE_PAIEMENT_ID" NUMBER(*,0), 
	"CENTRE_COUT_ID" NUMBER(*,0), 
	"DOMAINE_FONCTIONNEL_ID" NUMBER(*,0), 
	"TYPE_HEURES_ID" NUMBER(*,0), 
	"HEURES" FLOAT(126) DEFAULT 0, 
	"VALIDATION_ID" NUMBER(*,0), 
	"DATE_VALIDATION" DATE, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table MLOG$_LIEN
--------------------------------------------------------

  CREATE TABLE "OSE"."MLOG$_LIEN" 
   (	"ID" NUMBER, 
	"SNAPTIME$$" DATE, 
	"DMLTYPE$$" VARCHAR2(1 CHAR), 
	"OLD_NEW$$" VARCHAR2(1 CHAR), 
	"CHANGE_VECTOR$$" RAW(255), 
	"XID$$" NUMBER
   ) ;

   COMMENT ON TABLE "OSE"."MLOG$_LIEN"  IS 'snapshot log for master table OSE.LIEN';
--------------------------------------------------------
--  DDL for Table MLOG$_SCENARIO
--------------------------------------------------------

  CREATE TABLE "OSE"."MLOG$_SCENARIO" 
   (	"ID" NUMBER, 
	"SNAPTIME$$" DATE, 
	"DMLTYPE$$" VARCHAR2(1 CHAR), 
	"OLD_NEW$$" VARCHAR2(1 CHAR), 
	"CHANGE_VECTOR$$" RAW(255), 
	"XID$$" NUMBER
   ) ;

   COMMENT ON TABLE "OSE"."MLOG$_SCENARIO"  IS 'snapshot log for master table OSE.SCENARIO';
--------------------------------------------------------
--  DDL for Table MLOG$_SCENARIO_LIEN
--------------------------------------------------------

  CREATE TABLE "OSE"."MLOG$_SCENARIO_LIEN" 
   (	"ID" NUMBER, 
	"SNAPTIME$$" DATE, 
	"DMLTYPE$$" VARCHAR2(1 CHAR), 
	"OLD_NEW$$" VARCHAR2(1 CHAR), 
	"CHANGE_VECTOR$$" RAW(255), 
	"XID$$" NUMBER
   ) ;

   COMMENT ON TABLE "OSE"."MLOG$_SCENARIO_LIEN"  IS 'snapshot log for master table OSE.SCENARIO_LIEN';
--------------------------------------------------------
--  DDL for Table MODIFICATION_SERVICE_DU
--------------------------------------------------------

  CREATE TABLE "OSE"."MODIFICATION_SERVICE_DU" 
   (	"ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"HEURES" FLOAT(126), 
	"MOTIF_ID" NUMBER(*,0), 
	"COMMENTAIRES" CLOB, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table MODULATEUR
--------------------------------------------------------

  CREATE TABLE "OSE"."MODULATEUR" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(30 CHAR), 
	"LIBELLE" VARCHAR2(40 CHAR), 
	"TYPE_MODULATEUR_ID" NUMBER(*,0), 
	"PONDERATION_SERVICE_DU" FLOAT(126), 
	"PONDERATION_SERVICE_COMPL" FLOAT(126), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table MOTIF_MODIFICATION_SERVICE
--------------------------------------------------------

  CREATE TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(64 CHAR), 
	"LIBELLE" VARCHAR2(50 CHAR), 
	"MULTIPLICATEUR" NUMBER(*,0), 
	"DECHARGE" NUMBER(1,0) DEFAULT 0, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table MOTIF_NON_PAIEMENT
--------------------------------------------------------

  CREATE TABLE "OSE"."MOTIF_NON_PAIEMENT" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(3 CHAR), 
	"LIBELLE_COURT" VARCHAR2(50 CHAR), 
	"LIBELLE_LONG" VARCHAR2(200 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table NOEUD
--------------------------------------------------------

  CREATE TABLE "OSE"."NOEUD" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(50 CHAR), 
	"LIBELLE" VARCHAR2(255 CHAR), 
	"LISTE" NUMBER(1,0) DEFAULT 0, 
	"ANNEE_ID" NUMBER(*,0), 
	"ETAPE_ID" NUMBER(*,0), 
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table NOTIFICATION_INDICATEUR
--------------------------------------------------------

  CREATE TABLE "OSE"."NOTIFICATION_INDICATEUR" 
   (	"ID" NUMBER(*,0), 
	"INDICATEUR_ID" NUMBER(*,0), 
	"AFFECTATION_ID" NUMBER(*,0), 
	"FREQUENCE" NUMBER(*,0), 
	"DATE_ABONNEMENT" DATE, 
	"DATE_DERN_NOTIF" DATE, 
	"IN_HOME" NUMBER(1,0) DEFAULT 0
   ) ;

   COMMENT ON COLUMN "OSE"."NOTIFICATION_INDICATEUR"."INDICATEUR_ID" IS 'Identifiant de l''indicateur';
   COMMENT ON COLUMN "OSE"."NOTIFICATION_INDICATEUR"."AFFECTATION_ID" IS 'Identifiant du personnel';
   COMMENT ON COLUMN "OSE"."NOTIFICATION_INDICATEUR"."FREQUENCE" IS 'Fr√©quence de notification en secondes (60*60*24=jour, 60*60*24*7=semaine, etc.)';
   COMMENT ON COLUMN "OSE"."NOTIFICATION_INDICATEUR"."DATE_ABONNEMENT" IS 'Date d''abonnement √† cette notification';
   COMMENT ON COLUMN "OSE"."NOTIFICATION_INDICATEUR"."DATE_DERN_NOTIF" IS 'Eventuelle date de derni√®re notification';
--------------------------------------------------------
--  DDL for Table PACKAGE_DEPS
--------------------------------------------------------

  CREATE TABLE "OSE"."PACKAGE_DEPS" 
   (	"ID" NUMBER(*,0), 
	"P1" VARCHAR2(80 CHAR), 
	"P2" VARCHAR2(80 CHAR)
   ) ;
--------------------------------------------------------
--  DDL for Table PARAMETRE
--------------------------------------------------------

  CREATE TABLE "OSE"."PARAMETRE" 
   (	"ID" NUMBER(*,0), 
	"NOM" VARCHAR2(50 CHAR), 
	"VALEUR" CLOB, 
	"DESCRIPTION" CLOB, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table PAYS
--------------------------------------------------------

  CREATE TABLE "OSE"."PAYS" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE_LONG" VARCHAR2(120 CHAR), 
	"LIBELLE_COURT" VARCHAR2(60 CHAR), 
	"TEMOIN_UE" NUMBER(1,0), 
	"VALIDITE_DEBUT" DATE DEFAULT SYSDATE, 
	"VALIDITE_FIN" DATE, 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table PERIMETRE
--------------------------------------------------------

  CREATE TABLE "OSE"."PERIMETRE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(30 CHAR), 
	"LIBELLE" VARCHAR2(150 CHAR)
   ) ;
--------------------------------------------------------
--  DDL for Table PERIODE
--------------------------------------------------------

  CREATE TABLE "OSE"."PERIODE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(3 CHAR), 
	"LIBELLE_LONG" VARCHAR2(40 CHAR), 
	"LIBELLE_COURT" VARCHAR2(15 CHAR), 
	"ECART_MOIS" NUMBER, 
	"ECART_MOIS_PAIEMENT" NUMBER, 
	"ORDRE" NUMBER(*,0), 
	"ENSEIGNEMENT" NUMBER(1,0), 
	"PAIEMENT" NUMBER(1,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table PERSONNEL
--------------------------------------------------------

  CREATE TABLE "OSE"."PERSONNEL" 
   (	"ID" NUMBER(*,0), 
	"CIVILITE_ID" NUMBER(*,0), 
	"NOM_USUEL" VARCHAR2(100 CHAR), 
	"PRENOM" VARCHAR2(60 CHAR), 
	"NOM_PATRONYMIQUE" VARCHAR2(100 CHAR), 
	"EMAIL" VARCHAR2(255 CHAR), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"CODE" VARCHAR2(60 CHAR), 
	"SUPANN_EMP_ID" VARCHAR2(60 CHAR)
   ) ;

   COMMENT ON COLUMN "OSE"."PERSONNEL"."EMAIL" IS 'Email pro.';
   COMMENT ON COLUMN "OSE"."PERSONNEL"."STRUCTURE_ID" IS 'Structure principale du personnel';
--------------------------------------------------------
--  DDL for Table PIECE_JOINTE
--------------------------------------------------------

  CREATE TABLE "OSE"."PIECE_JOINTE" 
   (	"ID" NUMBER(*,0), 
	"TYPE_PIECE_JOINTE_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"VALIDATION_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table PIECE_JOINTE_FICHIER
--------------------------------------------------------

  CREATE TABLE "OSE"."PIECE_JOINTE_FICHIER" 
   (	"PIECE_JOINTE_ID" NUMBER, 
	"FICHIER_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table PRIVILEGE
--------------------------------------------------------

  CREATE TABLE "OSE"."PRIVILEGE" 
   (	"ID" NUMBER(*,0), 
	"CATEGORIE_ID" NUMBER(*,0), 
	"CODE" VARCHAR2(150 CHAR), 
	"LIBELLE" VARCHAR2(200 CHAR), 
	"ORDRE" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table RECUP_ANTHONY
--------------------------------------------------------

  CREATE TABLE "OSE"."RECUP_ANTHONY" 
   (	"NAME" VARCHAR2(30 BYTE), 
	"LINE" NUMBER, 
	"TEXT" VARCHAR2(4000 BYTE)
   ) ;
--------------------------------------------------------
--  DDL for Table REGLE_STRUCTURE_VALIDATION
--------------------------------------------------------

  CREATE TABLE "OSE"."REGLE_STRUCTURE_VALIDATION" 
   (	"ID" NUMBER, 
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0), 
	"TYPE_INTERVENANT_ID" NUMBER(*,0), 
	"PRIORITE" VARCHAR2(20 CHAR), 
	"MESSAGE" VARCHAR2(500 CHAR)
   ) ;
--------------------------------------------------------
--  DDL for Table ROLE
--------------------------------------------------------

  CREATE TABLE "OSE"."ROLE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(64 CHAR), 
	"LIBELLE" VARCHAR2(50 CHAR), 
	"PERIMETRE_ID" NUMBER(*,0), 
	"PEUT_CHANGER_STRUCTURE" NUMBER(1,0) DEFAULT 0, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table ROLE_PRIVILEGE
--------------------------------------------------------

  CREATE TABLE "OSE"."ROLE_PRIVILEGE" 
   (	"ROLE_ID" NUMBER(*,0), 
	"PRIVILEGE_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table RUPD$_LIEN
--------------------------------------------------------

  CREATE GLOBAL TEMPORARY TABLE "OSE"."RUPD$_LIEN" 
   (	"ID" NUMBER, 
	"DMLTYPE$$" VARCHAR2(1 CHAR), 
	"SNAPID" NUMBER(*,0), 
	"CHANGE_VECTOR$$" RAW(255)
   ) ON COMMIT PRESERVE ROWS ;

   COMMENT ON TABLE "OSE"."RUPD$_LIEN"  IS 'temporary updatable snapshot log';
--------------------------------------------------------
--  DDL for Table RUPD$_SCENARIO
--------------------------------------------------------

  CREATE GLOBAL TEMPORARY TABLE "OSE"."RUPD$_SCENARIO" 
   (	"ID" NUMBER, 
	"DMLTYPE$$" VARCHAR2(1 CHAR), 
	"SNAPID" NUMBER(*,0), 
	"CHANGE_VECTOR$$" RAW(255)
   ) ON COMMIT PRESERVE ROWS ;

   COMMENT ON TABLE "OSE"."RUPD$_SCENARIO"  IS 'temporary updatable snapshot log';
--------------------------------------------------------
--  DDL for Table RUPD$_SCENARIO_LIEN
--------------------------------------------------------

  CREATE GLOBAL TEMPORARY TABLE "OSE"."RUPD$_SCENARIO_LIEN" 
   (	"ID" NUMBER, 
	"DMLTYPE$$" VARCHAR2(1 CHAR), 
	"SNAPID" NUMBER(*,0), 
	"CHANGE_VECTOR$$" RAW(255)
   ) ON COMMIT PRESERVE ROWS ;

   COMMENT ON TABLE "OSE"."RUPD$_SCENARIO_LIEN"  IS 'temporary updatable snapshot log';
--------------------------------------------------------
--  DDL for Table SCENARIO
--------------------------------------------------------

  CREATE TABLE "OSE"."SCENARIO" 
   (	"ID" NUMBER, 
	"LIBELLE" VARCHAR2(200 CHAR), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"TYPE" NUMBER(2,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table SCENARIO_LIEN
--------------------------------------------------------

  CREATE TABLE "OSE"."SCENARIO_LIEN" 
   (	"ID" NUMBER(*,0), 
	"SCENARIO_ID" NUMBER(*,0), 
	"LIEN_ID" NUMBER(*,0), 
	"ACTIF" NUMBER(1,0) DEFAULT 1, 
	"POIDS" FLOAT(126) DEFAULT 1, 
	"CHOIX_MINIMUM" NUMBER DEFAULT 0, 
	"CHOIX_MAXIMUM" NUMBER DEFAULT 0, 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table SCENARIO_NOEUD
--------------------------------------------------------

  CREATE TABLE "OSE"."SCENARIO_NOEUD" 
   (	"ID" NUMBER, 
	"SCENARIO_ID" NUMBER, 
	"NOEUD_ID" NUMBER(*,0), 
	"ASSIDUITE" FLOAT(126) DEFAULT 0, 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"HEURES" FLOAT(126)
   ) ;
--------------------------------------------------------
--  DDL for Table SCENARIO_NOEUD_EFFECTIF
--------------------------------------------------------

  CREATE TABLE "OSE"."SCENARIO_NOEUD_EFFECTIF" 
   (	"ID" NUMBER(*,0), 
	"SCENARIO_NOEUD_ID" NUMBER, 
	"TYPE_HEURES_ID" NUMBER(*,0), 
	"EFFECTIF" FLOAT(126) DEFAULT 0, 
	"ETAPE_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table SCENARIO_NOEUD_SEUIL
--------------------------------------------------------

  CREATE TABLE "OSE"."SCENARIO_NOEUD_SEUIL" 
   (	"ID" NUMBER, 
	"SCENARIO_NOEUD_ID" NUMBER, 
	"TYPE_INTERVENTION_ID" NUMBER(*,0), 
	"OUVERTURE" NUMBER DEFAULT 0, 
	"DEDOUBLEMENT" NUMBER DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table SERVICE
--------------------------------------------------------

  CREATE TABLE "OSE"."SERVICE" 
   (	"ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0), 
	"ETABLISSEMENT_ID" NUMBER(*,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"DESCRIPTION" CLOB
   ) ;
--------------------------------------------------------
--  DDL for Table SERVICE_REFERENTIEL
--------------------------------------------------------

  CREATE TABLE "OSE"."SERVICE_REFERENTIEL" 
   (	"ID" NUMBER(*,0), 
	"FONCTION_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"COMMENTAIRES" VARCHAR2(256 CHAR)
   ) ;
--------------------------------------------------------
--  DDL for Table SEUIL_CHARGE
--------------------------------------------------------

  CREATE TABLE "OSE"."SEUIL_CHARGE" 
   (	"ID" NUMBER(*,0), 
	"SCENARIO_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"GROUPE_TYPE_FORMATION_ID" NUMBER(*,0), 
	"TYPE_INTERVENTION_ID" NUMBER(*,0), 
	"DEDOUBLEMENT" NUMBER, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER, 
	"HISTO_MODIFICATEUR_ID" NUMBER, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table SOURCE
--------------------------------------------------------

  CREATE TABLE "OSE"."SOURCE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(15 CHAR), 
	"LIBELLE" VARCHAR2(30 CHAR), 
	"IMPORTABLE" NUMBER(1,0)
   ) ;
--------------------------------------------------------
--  DDL for Table STATUT_INTERVENANT
--------------------------------------------------------

  CREATE TABLE "OSE"."STATUT_INTERVENANT" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE" VARCHAR2(128 CHAR), 
	"SERVICE_STATUTAIRE" FLOAT(126), 
	"DEPASSEMENT" NUMBER(1,0), 
	"PLAFOND_REFERENTIEL" FLOAT(126) DEFAULT 0, 
	"MAXIMUM_HETD" FLOAT(126) DEFAULT 0, 
	"FONCTION_E_C" NUMBER(1,0), 
	"TYPE_INTERVENANT_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"ORDRE" NUMBER(*,0), 
	"NON_AUTORISE" NUMBER(1,0), 
	"PEUT_SAISIR_SERVICE" NUMBER(1,0), 
	"PEUT_CHOISIR_DANS_DOSSIER" NUMBER(1,0), 
	"PEUT_SAISIR_DOSSIER" NUMBER(1,0), 
	"PEUT_SAISIR_REFERENTIEL" NUMBER(1,0) DEFAULT 0, 
	"PEUT_SAISIR_MOTIF_NON_PAIEMENT" NUMBER(1,0) DEFAULT 0, 
	"PEUT_AVOIR_CONTRAT" NUMBER(1,0) DEFAULT 0, 
	"PLAFOND_HC_HORS_REMU_FC" FLOAT(126) DEFAULT 9999, 
	"PLAFOND_HC_REMU_FC" FLOAT(126) DEFAULT 13502, 
	"DEPASSEMENT_SERVICE_DU_SANS_HC" NUMBER(1,0) DEFAULT 0, 
	"PEUT_CLOTURER_SAISIE" NUMBER(1,0) DEFAULT 0, 
	"PEUT_SAISIR_SERVICE_EXT" NUMBER(1,0) DEFAULT 0, 
	"TEM_ATV" NUMBER(1,0) DEFAULT 0, 
	"TEM_BIATSS" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table STATUT_PRIVILEGE
--------------------------------------------------------

  CREATE TABLE "OSE"."STATUT_PRIVILEGE" 
   (	"STATUT_ID" NUMBER(*,0), 
	"PRIVILEGE_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table STRUCTURE
--------------------------------------------------------

  CREATE TABLE "OSE"."STRUCTURE" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE_LONG" VARCHAR2(60 CHAR), 
	"LIBELLE_COURT" VARCHAR2(25 CHAR), 
	"PARENTE_ID" NUMBER(*,0), 
	"STRUCTURE_NIV2_ID" NUMBER(*,0), 
	"TYPE_ID" NUMBER(*,0), 
	"ETABLISSEMENT_ID" NUMBER(*,0), 
	"NIVEAU" NUMBER(*,0), 
	"CONTACT_PJ" VARCHAR2(255 CHAR), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"AFF_ADRESSE_CONTRAT" NUMBER(1,0) DEFAULT 1
   ) ;
--------------------------------------------------------
--  DDL for Table SYNC_LOG
--------------------------------------------------------

  CREATE TABLE "OSE"."SYNC_LOG" 
   (	"ID" NUMBER(*,0), 
	"DATE_SYNC" TIMESTAMP (6), 
	"MESSAGE" CLOB, 
	"TABLE_NAME" VARCHAR2(30 CHAR), 
	"SOURCE_CODE" VARCHAR2(200 CHAR)
   ) ;
--------------------------------------------------------
--  DDL for Table TAUX_HORAIRE_HETD
--------------------------------------------------------

  CREATE TABLE "OSE"."TAUX_HORAIRE_HETD" 
   (	"ID" NUMBER(*,0), 
	"VALEUR" FLOAT(126), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_AGREMENT
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_AGREMENT" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"TYPE_AGREMENT_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"OBLIGATOIRE" NUMBER(1,0), 
	"AGREMENT_ID" NUMBER(*,0), 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_CLOTURE_REALISE
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_CLOTURE_REALISE" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"PEUT_CLOTURER_SAISIE" NUMBER(1,0) DEFAULT 0, 
	"CLOTURE" NUMBER(1,0) DEFAULT 0, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_CONTRAT
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_CONTRAT" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"PEUT_AVOIR_CONTRAT" NUMBER(1,0) DEFAULT 0, 
	"STRUCTURE_ID" NUMBER(*,0), 
	"NBVH" FLOAT(126) DEFAULT 0, 
	"EDITE" FLOAT(126) DEFAULT 0, 
	"SIGNE" FLOAT(126) DEFAULT 0, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_DMEP_LIQUIDATION
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_DMEP_LIQUIDATION" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"TYPE_RESSOURCE_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"HEURES" FLOAT(126) DEFAULT 0, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_DOSSIER
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_DOSSIER" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"PEUT_SAISIR_DOSSIER" NUMBER(1,0) DEFAULT 0, 
	"DOSSIER_ID" NUMBER(*,0), 
	"VALIDATION_ID" NUMBER(*,0), 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_LIEN
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_LIEN" 
   (	"ID" NUMBER(*,0), 
	"LIEN_ID" NUMBER(*,0), 
	"SCENARIO_ID" NUMBER, 
	"SCENARIO_LIEN_ID" NUMBER(*,0), 
	"NOEUD_SUP_ID" NUMBER(*,0), 
	"NOEUD_INF_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"ACTIF" NUMBER(1,0) DEFAULT 1, 
	"POIDS" NUMBER DEFAULT 1, 
	"CHOIX_MINIMUM" NUMBER, 
	"CHOIX_MAXIMUM" NUMBER, 
	"NB_CHOIX" NUMBER DEFAULT 1, 
	"TOTAL_POIDS" FLOAT(126) DEFAULT 1, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0, 
	"MAX_POIDS" NUMBER DEFAULT 1
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_PAIEMENT
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_PAIEMENT" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"MISE_EN_PAIEMENT_ID" NUMBER(*,0), 
	"PERIODE_PAIEMENT_ID" NUMBER(*,0), 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0, 
	"HEURES_A_PAYER" FLOAT(126) DEFAULT 0, 
	"HEURES_A_PAYER_POND" FLOAT(126) DEFAULT 0, 
	"HEURES_DEMANDEES" FLOAT(126) DEFAULT 0, 
	"HEURES_PAYEES" FLOAT(126) DEFAULT 0, 
	"FORMULE_RES_SERVICE_ID" NUMBER(*,0), 
	"FORMULE_RES_SERVICE_REF_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_PIECE_JOINTE
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_PIECE_JOINTE" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"TYPE_PIECE_JOINTE_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"DEMANDEE" NUMBER(1,0) DEFAULT 0, 
	"FOURNIE" NUMBER(1,0) DEFAULT 0, 
	"VALIDEE" NUMBER(1,0) DEFAULT 0, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0, 
	"HEURES_POUR_SEUIL" FLOAT(126) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_PIECE_JOINTE_DEMANDE
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_PIECE_JOINTE_DEMANDE" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"TYPE_PIECE_JOINTE_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0, 
	"HEURES_POUR_SEUIL" FLOAT(126) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_PIECE_JOINTE_FOURNIE
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"TYPE_PIECE_JOINTE_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"VALIDATION_ID" NUMBER(*,0), 
	"FICHIER_ID" NUMBER(*,0), 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0, 
	"PIECE_JOINTE_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_SERVICE
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_SERVICE" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"PEUT_SAISIR_SERVICE" NUMBER(1,0) DEFAULT 0, 
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"NBVH" FLOAT(126) DEFAULT 0, 
	"VALIDE" FLOAT(126) DEFAULT 0, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0, 
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0), 
	"ELEMENT_PEDAGOGIQUE_PERIODE_ID" NUMBER(*,0), 
	"ETAPE_ID" NUMBER(*,0), 
	"ELEMENT_PEDAGOGIQUE_HISTO" NUMBER(1,0) DEFAULT 1, 
	"ETAPE_HISTO" NUMBER(1,0) DEFAULT 1, 
	"HAS_HEURES_MAUVAISE_PERIODE" NUMBER(1,0) DEFAULT 0, 
	"SERVICE_ID" NUMBER(*,0), 
	"INTERVENANT_STRUCTURE_ID" NUMBER(*,0), 
	"TYPE_INTERVENANT_ID" NUMBER(*,0), 
	"TYPE_INTERVENANT_CODE" VARCHAR2(5 CHAR), 
	"TYPE_VOLUME_HORAIRE_CODE" VARCHAR2(15 CHAR), 
	"HEURES" FLOAT(126) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_SERVICE_REFERENTIEL
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_SERVICE_REFERENTIEL" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"PEUT_SAISIR_SERVICE" NUMBER(1,0) DEFAULT 0, 
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"NBVH" FLOAT(126) DEFAULT 0, 
	"VALIDE" FLOAT(126) DEFAULT 0, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_SERVICE_SAISIE
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_SERVICE_SAISIE" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"PEUT_SAISIR_SERVICE" NUMBER(1,0) DEFAULT 0, 
	"PEUT_SAISIR_REFERENTIEL" NUMBER(1,0) DEFAULT 0, 
	"HEURES_SERVICE_PREV" FLOAT(126) DEFAULT 0, 
	"HEURES_REFERENTIEL_PREV" FLOAT(126) DEFAULT 0, 
	"HEURES_SERVICE_REAL" FLOAT(126) DEFAULT 0, 
	"HEURES_REFERENTIEL_REAL" FLOAT(126) DEFAULT 0, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_VALIDATION_ENSEIGNEMENT
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0), 
	"SERVICE_ID" NUMBER(*,0), 
	"VALIDATION_ID" NUMBER(*,0), 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0, 
	"VOLUME_HORAIRE_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_VALIDATION_REFERENTIEL
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" 
   (	"ID" NUMBER(*,0), 
	"ANNEE_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0), 
	"SERVICE_REFERENTIEL_ID" NUMBER(*,0), 
	"VALIDATION_ID" NUMBER(*,0), 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0, 
	"VOLUME_HORAIRE_REF_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TBL_WORKFLOW
--------------------------------------------------------

  CREATE TABLE "OSE"."TBL_WORKFLOW" 
   (	"ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"ETAPE_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0) DEFAULT null, 
	"ATTEIGNABLE" NUMBER(1,0) DEFAULT 1, 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0, 
	"REALISATION" FLOAT(126) DEFAULT 0, 
	"OBJECTIF" FLOAT(126) DEFAULT 1, 
	"ANNEE_ID" NUMBER(*,0), 
	"TYPE_INTERVENANT_ID" NUMBER(*,0), 
	"TYPE_INTERVENANT_CODE" VARCHAR2(5 CHAR), 
	"ETAPE_CODE" VARCHAR2(50 CHAR)
   ) ;

   COMMENT ON COLUMN "OSE"."TBL_WORKFLOW"."INTERVENANT_ID" IS 'Identifiant de l''intervenant concern√©';
   COMMENT ON COLUMN "OSE"."TBL_WORKFLOW"."ETAPE_ID" IS 'Identifiant de l''√©tape concern√©e';
   COMMENT ON COLUMN "OSE"."TBL_WORKFLOW"."STRUCTURE_ID" IS 'Eventuelle structure concern√©e';
   COMMENT ON COLUMN "OSE"."TBL_WORKFLOW"."ATTEIGNABLE" IS 'T√©moin indiquant si l''√©tape est atteignable ou non';
--------------------------------------------------------
--  DDL for Table TEST_BUFFER
--------------------------------------------------------

  CREATE TABLE "OSE"."TEST_BUFFER" 
   (	"ID" NUMBER(*,0), 
	"TABLE_NAME" VARCHAR2(30 CHAR), 
	"DATA_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TMP_CALCUL
--------------------------------------------------------

  CREATE GLOBAL TEMPORARY TABLE "OSE"."TMP_CALCUL" 
   (	"INTERVENANT_ID" NUMBER(*,0), 
	"SUJET" VARCHAR2(80 CHAR), 
	"ID" NUMBER
   ) ON COMMIT DELETE ROWS ;
--------------------------------------------------------
--  DDL for Table TMP_SCENARIO_NOEUD_EFFECTIF
--------------------------------------------------------

  CREATE GLOBAL TEMPORARY TABLE "OSE"."TMP_SCENARIO_NOEUD_EFFECTIF" 
   (	"SCENARIO_NOEUD_ID" NUMBER(*,0), 
	"TYPE_HEURES_ID" NUMBER(*,0), 
	"ETAPE_ID" NUMBER(*,0), 
	"EFFECTIF" FLOAT(126)
   ) ON COMMIT DELETE ROWS ;
--------------------------------------------------------
--  DDL for Table TYPE_AGREMENT
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_AGREMENT" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(60 CHAR), 
	"LIBELLE" VARCHAR2(256 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_AGREMENT_STATUT
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_AGREMENT_STATUT" 
   (	"ID" NUMBER(*,0), 
	"TYPE_AGREMENT_ID" NUMBER(*,0), 
	"STATUT_INTERVENANT_ID" NUMBER(*,0), 
	"OBLIGATOIRE" NUMBER(*,0), 
	"PREMIER_RECRUTEMENT" NUMBER(1,0) DEFAULT NULL, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_CONTRAT
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_CONTRAT" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(15 CHAR), 
	"LIBELLE" VARCHAR2(60 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_DOTATION
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_DOTATION" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE" VARCHAR2(200 CHAR), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"SOURCE_ID" NUMBER(*,0), 
	"TYPE_RESSOURCE_ID" NUMBER(*,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_FORMATION
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_FORMATION" 
   (	"ID" NUMBER(*,0), 
	"LIBELLE_LONG" VARCHAR2(80 CHAR), 
	"LIBELLE_COURT" VARCHAR2(15 CHAR), 
	"GROUPE_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_HEURES
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_HEURES" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(20 CHAR), 
	"LIBELLE_COURT" VARCHAR2(15 CHAR), 
	"LIBELLE_LONG" VARCHAR2(100 CHAR), 
	"ORDRE" NUMBER(*,0), 
	"TYPE_HEURES_ELEMENT_ID" NUMBER(*,0), 
	"ELIGIBLE_CENTRE_COUT_EP" NUMBER(1,0) DEFAULT 1, 
	"ELIGIBLE_EXTRACTION_PAIE" NUMBER(1,0) DEFAULT 1, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"ENSEIGNEMENT" NUMBER(1,0) DEFAULT 1
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_INTERVENANT
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_INTERVENANT" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(1 CHAR), 
	"LIBELLE" VARCHAR2(50 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_INTERVENTION
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_INTERVENTION" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(10 CHAR), 
	"LIBELLE" VARCHAR2(60 CHAR), 
	"ORDRE" NUMBER(*,0), 
	"TAUX_HETD_SERVICE" FLOAT(126) DEFAULT 1, 
	"TAUX_HETD_COMPLEMENTAIRE" FLOAT(126) DEFAULT 1, 
	"INTERVENTION_INDIVIDUALISEE" NUMBER(1,0), 
	"VISIBLE" NUMBER(1,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"ENSEIGNEMENT" NUMBER(1,0) DEFAULT 1
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_INTERVENTION_EP
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_INTERVENTION_EP" 
   (	"ID" NUMBER(*,0), 
	"TYPE_INTERVENTION_ID" NUMBER(*,0), 
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0), 
	"VISIBLE" NUMBER(1,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_INTERVENTION_STRUCTURE
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" 
   (	"ID" NUMBER(*,0), 
	"TYPE_INTERVENTION_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"VISIBLE" NUMBER(1,0), 
	"ANNEE_DEBUT_ID" NUMBER(*,0), 
	"ANNEE_FIN_ID" NUMBER(*,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_MODULATEUR
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_MODULATEUR" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(10 CHAR), 
	"LIBELLE" VARCHAR2(50 CHAR), 
	"PUBLIQUE" NUMBER(1,0), 
	"OBLIGATOIRE" NUMBER(1,0), 
	"SAISIE_PAR_ENSEIGNANT" NUMBER(1,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_MODULATEUR_EP
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_MODULATEUR_EP" 
   (	"ID" NUMBER(*,0), 
	"TYPE_MODULATEUR_ID" NUMBER(*,0), 
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_MODULATEUR_STRUCTURE
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" 
   (	"ID" NUMBER(*,0), 
	"TYPE_MODULATEUR_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"ANNEE_DEBUT_ID" NUMBER(*,0), 
	"ANNEE_FIN_ID" NUMBER(*,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_PIECE_JOINTE
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_PIECE_JOINTE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(64 CHAR), 
	"LIBELLE" VARCHAR2(150 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"URL_MODELE_DOC" VARCHAR2(256 CHAR), 
	"ORDRE" NUMBER DEFAULT 1
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_PIECE_JOINTE_STATUT
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" 
   (	"ID" NUMBER(*,0), 
	"TYPE_PIECE_JOINTE_ID" NUMBER(*,0), 
	"STATUT_INTERVENANT_ID" NUMBER(*,0), 
	"OBLIGATOIRE" NUMBER(*,0), 
	"SEUIL_HETD" NUMBER(*,0), 
	"PREMIER_RECRUTEMENT" NUMBER(1,0) DEFAULT 0, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_RESSOURCE
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_RESSOURCE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(50 CHAR), 
	"LIBELLE" VARCHAR2(200 CHAR), 
	"FI" NUMBER(1,0), 
	"FA" NUMBER(1,0), 
	"FC" NUMBER(1,0), 
	"FC_MAJOREES" NUMBER(1,0), 
	"REFERENTIEL" NUMBER(1,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"ETABLISSEMENT" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_STRUCTURE
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_STRUCTURE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(3 CHAR), 
	"LIBELLE" VARCHAR2(60 CHAR), 
	"ENSEIGNEMENT" NUMBER(1,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_VALIDATION
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_VALIDATION" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(25 CHAR), 
	"LIBELLE" VARCHAR2(60 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table TYPE_VOLUME_HORAIRE
--------------------------------------------------------

  CREATE TABLE "OSE"."TYPE_VOLUME_HORAIRE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(15 CHAR), 
	"LIBELLE" VARCHAR2(60 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"ORDRE" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table UNICAEN_CORRESP_STRUCTURE_CC
--------------------------------------------------------

  CREATE TABLE "OSE"."UNICAEN_CORRESP_STRUCTURE_CC" 
   (	"ID" NUMBER(*,0), 
	"CODE_SIFAC" VARCHAR2(15 CHAR), 
	"CODE_HARPEGE" VARCHAR2(250 CHAR)
   ) ;
--------------------------------------------------------
--  DDL for Table UTILISATEUR
--------------------------------------------------------

  CREATE TABLE "OSE"."UTILISATEUR" 
   (	"ID" NUMBER(*,0), 
	"USERNAME" VARCHAR2(255 CHAR), 
	"EMAIL" VARCHAR2(255 CHAR), 
	"DISPLAY_NAME" VARCHAR2(64 CHAR), 
	"PASSWORD" VARCHAR2(128 CHAR), 
	"STATE" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table VALIDATION
--------------------------------------------------------

  CREATE TABLE "OSE"."VALIDATION" 
   (	"ID" NUMBER(*,0), 
	"TYPE_VALIDATION_ID" NUMBER(*,0), 
	"INTERVENANT_ID" NUMBER(*,0), 
	"STRUCTURE_ID" NUMBER(*,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table VALIDATION_VOL_HORAIRE
--------------------------------------------------------

  CREATE TABLE "OSE"."VALIDATION_VOL_HORAIRE" 
   (	"VALIDATION_ID" NUMBER(*,0), 
	"VOLUME_HORAIRE_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table VALIDATION_VOL_HORAIRE_REF
--------------------------------------------------------

  CREATE TABLE "OSE"."VALIDATION_VOL_HORAIRE_REF" 
   (	"VALIDATION_ID" NUMBER(*,0), 
	"VOLUME_HORAIRE_REF_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table VOLUME_HORAIRE
--------------------------------------------------------

  CREATE TABLE "OSE"."VOLUME_HORAIRE" 
   (	"ID" NUMBER(*,0), 
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0), 
	"SERVICE_ID" NUMBER(*,0), 
	"PERIODE_ID" NUMBER(*,0), 
	"TYPE_INTERVENTION_ID" NUMBER(*,0), 
	"HEURES" FLOAT(126) DEFAULT 0, 
	"MOTIF_NON_PAIEMENT_ID" NUMBER(*,0), 
	"CONTRAT_ID" NUMBER(*,0), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0), 
	"TEM_PLAFOND_FC_MAJ" NUMBER(2,0) DEFAULT 0, 
	"BUFF_PFM_HEURES" FLOAT(126), 
	"BUFF_PFM_MOTIF_NON_PAIEMENT_ID" NUMBER(*,0), 
	"BUFF_PFM_HISTO_MODIFICATION" DATE, 
	"BUFF_PFM_HISTO_MODIFICATEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table VOLUME_HORAIRE_CHARGE
--------------------------------------------------------

  CREATE TABLE "OSE"."VOLUME_HORAIRE_CHARGE" 
   (	"ID" NUMBER(*,0), 
	"SCENARIO_ID" NUMBER(*,0), 
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0), 
	"TYPE_INTERVENTION_ID" NUMBER(*,0), 
	"GROUPES" NUMBER(*,0) DEFAULT 0, 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER, 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER, 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table VOLUME_HORAIRE_ENS
--------------------------------------------------------

  CREATE TABLE "OSE"."VOLUME_HORAIRE_ENS" 
   (	"ID" NUMBER(*,0), 
	"ELEMENT_PEDAGOGIQUE_ID" NUMBER(*,0), 
	"TYPE_INTERVENTION_ID" NUMBER(*,0), 
	"HEURES" FLOAT(126), 
	"SOURCE_ID" NUMBER(*,0), 
	"SOURCE_CODE" VARCHAR2(100 CHAR), 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table VOLUME_HORAIRE_REF
--------------------------------------------------------

  CREATE TABLE "OSE"."VOLUME_HORAIRE_REF" 
   (	"ID" NUMBER(*,0), 
	"TYPE_VOLUME_HORAIRE_ID" NUMBER(*,0), 
	"SERVICE_REFERENTIEL_ID" NUMBER(*,0), 
	"HEURES" FLOAT(126) DEFAULT 0, 
	"HISTO_CREATION" DATE DEFAULT SYSDATE, 
	"HISTO_CREATEUR_ID" NUMBER(*,0), 
	"HISTO_MODIFICATION" DATE DEFAULT SYSDATE, 
	"HISTO_MODIFICATEUR_ID" NUMBER(*,0), 
	"HISTO_DESTRUCTION" DATE, 
	"HISTO_DESTRUCTEUR_ID" NUMBER(*,0)
   ) ;
--------------------------------------------------------
--  DDL for Table WF_DEP_BLOQUANTE
--------------------------------------------------------

  CREATE TABLE "OSE"."WF_DEP_BLOQUANTE" 
   (	"ID" NUMBER(*,0), 
	"WF_ETAPE_DEP_ID" NUMBER(*,0), 
	"TBL_WORKFLOW_ID" NUMBER(*,0), 
	"TO_DELETE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Table WF_ETAPE
--------------------------------------------------------

  CREATE TABLE "OSE"."WF_ETAPE" 
   (	"ID" NUMBER(*,0), 
	"CODE" VARCHAR2(64 CHAR), 
	"ORDRE" NUMBER(*,0) DEFAULT 1, 
	"LIBELLE_INTERVENANT" VARCHAR2(150 CHAR), 
	"LIBELLE_AUTRES" VARCHAR2(150 CHAR), 
	"ROUTE" VARCHAR2(200 CHAR), 
	"DESC_NON_FRANCHIE" VARCHAR2(250 CHAR), 
	"OBLIGATOIRE" NUMBER(1,0) DEFAULT 1, 
	"DESC_SANS_OBJECTIF" VARCHAR2(250 CHAR), 
	"ROUTE_INTERVENANT" VARCHAR2(200 CHAR)
   ) ;

   COMMENT ON COLUMN "OSE"."WF_ETAPE"."CODE" IS 'Code de cette √©tape';
   COMMENT ON COLUMN "OSE"."WF_ETAPE"."ORDRE" IS 'Permet d''ordonner les √©tapes';
--------------------------------------------------------
--  DDL for Table WF_ETAPE_DEP
--------------------------------------------------------

  CREATE TABLE "OSE"."WF_ETAPE_DEP" 
   (	"ETAPE_SUIV_ID" NUMBER(*,0), 
	"ETAPE_PREC_ID" NUMBER(*,0), 
	"LOCALE" NUMBER(1,0) DEFAULT 0, 
	"INTEGRALE" NUMBER(1,0) DEFAULT 0, 
	"PARTIELLE" NUMBER(1,0) DEFAULT 0, 
	"ID" NUMBER(*,0), 
	"ACTIVE" NUMBER(1,0) DEFAULT 1, 
	"TYPE_INTERVENANT_ID" NUMBER(*,0), 
	"OBLIGATOIRE" NUMBER(1,0) DEFAULT 0
   ) ;
--------------------------------------------------------
--  DDL for Sequence ADRESSE_INTERVENANT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."ADRESSE_INTERVENANT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 13917 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ADRESSE_STRUCTURE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."ADRESSE_STRUCTURE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 715 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence AFFECTATION_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."AFFECTATION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 131 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence AFFECTATION_RECHERCHE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."AFFECTATION_RECHERCHE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2760 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence AGREMENT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."AGREMENT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 221 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ANNEE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."ANNEE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CAMPAGNE_SAISIE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."CAMPAGNE_SAISIE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 9 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CATEGORIE_PRIVILEGE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."CATEGORIE_PRIVILEGE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 23 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CC_ACTIVITE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."CC_ACTIVITE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CENTRE_COUT_EP_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."CENTRE_COUT_EP_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 605 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CENTRE_COUT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."CENTRE_COUT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 789 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CENTRE_COUT_STRUCTURE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."CENTRE_COUT_STRUCTURE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1315 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CHEMIN_PEDAGOGIQUE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."CHEMIN_PEDAGOGIQUE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 135996 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CIVILITE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."CIVILITE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 9 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CONTRAT_FICHIER_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."CONTRAT_FICHIER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CONTRAT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."CONTRAT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5553 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CORPS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."CORPS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 3089 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence DEPARTEMENT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."DEPARTEMENT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 106 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence DISCIPLINE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."DISCIPLINE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 73 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence DOMAINE_FONCTIONNEL_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."DOMAINE_FONCTIONNEL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 14 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence DOSSIER_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."DOSSIER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 611 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence DOTATION_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."DOTATION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 68 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence EFFECTIFS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."EFFECTIFS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 96862 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ELEMENT_MODULATEUR_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."ELEMENT_MODULATEUR_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4609 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ELEMENT_PEDAGOGIQUE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."ELEMENT_PEDAGOGIQUE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 59153 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ELEMENT_TAUX_REGIMES_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."ELEMENT_TAUX_REGIMES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 69834 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ETABLISSEMENT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."ETABLISSEMENT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 85608 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ETAPE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."ETAPE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 7637 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ETAT_VOLUME_HORAIRE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."ETAT_VOLUME_HORAIRE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence FICHIER_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."FICHIER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1082 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence FONCTION_REFERENTIEL_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."FONCTION_REFERENTIEL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 129 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence FORMULE_RESULTAT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."FORMULE_RESULTAT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 459952 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence FORMULE_RESULTAT_SERVIC_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."FORMULE_RESULTAT_SERVIC_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4085867 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence FORMULE_RESULTAT_VH_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."FORMULE_RESULTAT_VH_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5100652 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence FORMULE_RESULTAT_VH_REF_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."FORMULE_RESULTAT_VH_REF_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence GRADE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."GRADE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 603 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence GROUPE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."GROUPE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence GROUPE_TYPE_FORMATION_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."GROUPE_TYPE_FORMATION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 19 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence HISTO_INTERVENANT_SERVI_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."HISTO_INTERVENANT_SERVI_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81551 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence INDICATEUR_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."INDICATEUR_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 281 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence INDIC_MODIF_DOSSIER_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."INDIC_MODIF_DOSSIER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 561 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence INTERVENANT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."INTERVENANT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 35649 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence INTERVENANT_SAISIE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."INTERVENANT_SAISIE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence LIEN_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."LIEN_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 90113 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence MESSAGE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."MESSAGE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence MISE_EN_PAIEMENT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."MISE_EN_PAIEMENT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence MODIFICATION_SERVICE_DU_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."MODIFICATION_SERVICE_DU_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5783 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence MODULATEUR_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."MODULATEUR_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4054 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence MOTIF_MODIFICATION_SERV_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."MOTIF_MODIFICATION_SERV_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 27 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence MOTIF_NON_PAIEMENT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."MOTIF_NON_PAIEMENT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 14 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence NOEUD_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."NOEUD_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 89909 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence NOTIFICATION_INDICATEUR_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."NOTIFICATION_INDICATEUR_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 411 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PACKAGE_DEPS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."PACKAGE_DEPS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PARAMETRE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."PARAMETRE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 33 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PAYS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."PAYS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 281 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PERIMETRE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."PERIMETRE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PERIODE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."PERIODE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 24 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PERSONNEL_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."PERSONNEL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8937 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PIECE_JOINTE_FICHIER_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."PIECE_JOINTE_FICHIER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PIECE_JOINTE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."PIECE_JOINTE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1169 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PRIVILEGE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."PRIVILEGE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 160 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence REGLE_STRUCTURE_VALIDAT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."REGLE_STRUCTURE_VALIDAT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ROLE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."ROLE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 74 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence ROLE_PRIVILEGE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."ROLE_PRIVILEGE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SCENARIO_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."SCENARIO_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 29 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SCENARIO_LIEN_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."SCENARIO_LIEN_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 355 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SCENARIO_NOEUD_EFFECTIF_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."SCENARIO_NOEUD_EFFECTIF_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 831 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SCENARIO_NOEUD_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."SCENARIO_NOEUD_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 267 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SCENARIO_NOEUD_SEUIL_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."SCENARIO_NOEUD_SEUIL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 84 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SERVICE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."SERVICE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 24478 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SERVICE_REFERENTIEL_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."SERVICE_REFERENTIEL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 20882 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEUIL_CHARGE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."SEUIL_CHARGE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 43 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SOURCE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."SOURCE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence STATUT_INTERVENANT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."STATUT_INTERVENANT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 31 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence STATUT_PRIVILEGE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."STATUT_PRIVILEGE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence STRUCTURE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."STRUCTURE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 12121 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SYNC_LOG_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."SYNC_LOG_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 57059 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TAUX_HORAIRE_HETD_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TAUX_HORAIRE_HETD_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_AGREMENT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_AGREMENT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 44938570 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_CLOTURE_REALISE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_CLOTURE_REALISE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 273697 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_CONTRAT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_CONTRAT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 7446 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_DMEP_LIQUIDATION_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_DMEP_LIQUIDATION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_DOSSIER_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_DOSSIER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 334286 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_LIEN_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_LIEN_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 46100020 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_PAIEMENT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_PAIEMENT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 30206 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_PIECE_JOINTE_DEMAND_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_PIECE_JOINTE_DEMAND_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_PIECE_JOINTE_FOURNI_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_PIECE_JOINTE_FOURNI_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_PIECE_JOINTE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_PIECE_JOINTE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 144246 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_SERVICE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_SERVICE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1893193 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_SERVICE_REFERENTIEL_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_SERVICE_REFERENTIEL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_SERVICE_SAISIE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_SERVICE_SAISIE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 271350 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_VALIDATION_ENSEIGNE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_VALIDATION_ENSEIGNE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_VALIDATION_REFERENT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_VALIDATION_REFERENT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TBL_WORKFLOW_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TBL_WORKFLOW_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1552328 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TEST_BUFFER_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TEST_BUFFER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 47022 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TMP_CALCUL_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TMP_CALCUL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 231605 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_AGREMENT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_AGREMENT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_AGREMENT_STATUT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_AGREMENT_STATUT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 144 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_CONTRAT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_CONTRAT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_DOTATION_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_DOTATION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 62 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_FORMATION_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_FORMATION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_HEURES_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_HEURES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_INTERVENANT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_INTERVENANT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 19 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_INTERVENTION_EP_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_INTERVENTION_EP_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5188 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_INTERVENTION_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_INTERVENTION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 22 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_INTERVENTION_STRUC_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_INTERVENTION_STRUC_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 27 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_MODULATEUR_EP_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_MODULATEUR_EP_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 9224 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_MODULATEUR_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_MODULATEUR_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4016 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_MODULATEUR_STRUCTU_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_MODULATEUR_STRUCTU_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4020 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_PIECE_JOINTE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_PIECE_JOINTE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 131 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_PIECE_JOINTE_STATU_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_PIECE_JOINTE_STATU_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 117 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_RESSOURCE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_RESSOURCE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_STRUCTURE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_STRUCTURE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 291 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_VALIDATION_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_VALIDATION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 9 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence TYPE_VOLUME_HORAIRE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."TYPE_VOLUME_HORAIRE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence UNICAEN_CORRESP_STRUCTU_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."UNICAEN_CORRESP_STRUCTU_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 26 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence UTILISATEUR_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."UTILISATEUR_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 260 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence VALIDATION_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."VALIDATION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 9913 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence VALIDATION_VOL_HORAIRE__ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."VALIDATION_VOL_HORAIRE__ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence VALIDATION_VOL_HORAIRE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."VALIDATION_VOL_HORAIRE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence VOLUME_HORAIRE_CHARGE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."VOLUME_HORAIRE_CHARGE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence VOLUME_HORAIRE_ENS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."VOLUME_HORAIRE_ENS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 31784 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence VOLUME_HORAIRE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."VOLUME_HORAIRE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 30045 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence VOLUME_HORAIRE_REF_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."VOLUME_HORAIRE_REF_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 514 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WF_DEP_BLOQUANTE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."WF_DEP_BLOQUANTE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 807623 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WF_ETAPE_DEP_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."WF_ETAPE_DEP_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 NOCACHE  NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence WF_ETAPE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "OSE"."WF_ETAPE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 201 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Materialized View MV_ADRESSE_INTERVENANT
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_ADRESSE_INTERVENANT" ("Z_INTERVENANT_ID", "TEL_DOMICILE", "MENTION_COMPLEMENTAIRE", "NO_VOIE", "NOM_VOIE", "LOCALITE", "CODE_POSTAL", "VILLE", "PAYS_CODE_INSEE", "PAYS_LIBELLE", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  LTRIM(TO_CHAR(NO_INDIVIDU,'99999999'))                Z_INTERVENANT_ID,
  TRIM(TELEPHONE_DOMICILE)                              TEL_DOMICILE,
  TRIM(UPPER(HABITANT_CHEZ))                            MENTION_COMPLEMENTAIRE,
  NO_VOIE || CASE BIS_TER
    WHEN 'B' THEN ' BIS'
    WHEN 'T' THEN ' TER'
    WHEN 'Q' THEN ' QUATER'
    WHEN 'C' THEN ' QUINQUIES'
    ELSE ''
  END                                                   NO_VOIE,
  UPPER(TRIM(TRIM(V.L_VOIE) || ' ' || TRIM(NOM_VOIE)))  NOM_VOIE,
  LOCALITE                                              LOCALITE,
  COALESCE( CP_ETRANGER, CODE_POSTAL )                  CODE_POSTAL,
  TRIM(VILLE)                                           VILLE,
  PAYS.C_PAYS                                           PAYS_CODE_INSEE,
  PAYS.LL_PAYS                                          PAYS_LIBELLE,
  src.id                                                SOURCE_ID,
  to_char(ID_ADRESSE_PERSO)                             SOURCE_CODE
FROM
  ADRESSE_PERSONNELLE@HARPPROD ADRESSE
  JOIN source src ON src.code = 'Harpege'
  LEFT JOIN PAYS@HARPPROD PAYS ON (PAYS.C_PAYS = ADRESSE.C_PAYS)
  LEFT JOIN VOIRIE@HARPPROD V ON (V.C_VOIE = ADRESSE.C_VOIE)
WHERE
  ADRESSE.D_CREATION <= SYSDATE
  AND TEM_ADR_PERS_PRINC = 'O' -- on n'importe que les adresses principales
;

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_ADRESSE_INTERVENANT"  IS 'snapshot table for snapshot OSE.MV_ADRESSE_INTERVENANT';
--------------------------------------------------------
--  DDL for Materialized View MV_ADRESSE_STRUCTURE
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_ADRESSE_STRUCTURE" ("Z_STRUCTURE_ID", "PRINCIPALE", "TELEPHONE", "NO_VOIE", "NOM_VOIE", "LOCALITE", "CODE_POSTAL", "VILLE", "PAYS_CODE_INSEE", "PAYS_LIBELLE", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  "Z_STRUCTURE_ID", "PRINCIPALE", "TELEPHONE", "NO_VOIE", "NOM_VOIE", "LOCALITE", "CODE_POSTAL", "VILLE", "PAYS_CODE_INSEE", "PAYS_LIBELLE", "SOURCE_ID", "SOURCE_CODE"
FROM (

SELECT DISTINCT
  ls.c_structure                                                  z_structure_id,
  CASE ls.tem_local_principal WHEN 'O' THEN 1 ELSE 0 END          principale,
  ls.no_telephone                                                 telephone,
  NO_VOIE_A || CASE BIS_TER_A
    WHEN 'B' THEN ' BIS'
    WHEN 'T' THEN ' TER'
    WHEN 'Q' THEN ' QUATER'
    WHEN 'C' THEN ' QUINQUIES'
    ELSE ''
  END                                                             NO_VOIE,
  UPPER(TRIM(TRIM(V.L_VOIE) || ' ' || TRIM(NOM_VOIE_A)))          NOM_VOIE,
  LOCALITE_A                                                      LOCALITE,
  COALESCE( CP_ETRANGER_ADMIN, CODE_POSTAL_A )                    CODE_POSTAL,
  TRIM(VILLE_A)                                                   VILLE,
  PAYS.C_PAYS                                                     PAYS_CODE_INSEE,
  PAYS.LL_PAYS                                                    PAYS_LIBELLE,
  src.id                                                          source_id,
  to_char(aa.id_adresse_admin) || '_' || ls.c_structure           source_code,
  COUNT(*) over(partition by aa.id_adresse_admin,ls.c_structure)  doublons
FROM
  adresse_administrat@harpprod aa
  JOIN "LOCAL"@harpprod l ON l.id_adresse_admin = aa.id_adresse_admin
  JOIN localisation_structure@harpprod ls ON ls.c_local = l.c_local
  JOIN source src ON src.code = 'Harpege'
  LEFT JOIN PAYS@HARPPROD PAYS ON (PAYS.C_PAYS = aa.C_PAYS)
  LEFT JOIN VOIRIE@HARPPROD V ON (V.C_VOIE = aa.C_VOIE)
WHERE
  SYSDATE BETWEEN COALESCE(aa.d_deb_val, SYSDATE) AND COALESCE(aa.d_fin_val, SYSDATE)
) tmp1

WHERE
  doublons = 1 OR principale = 1;

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_ADRESSE_STRUCTURE"  IS 'snapshot table for snapshot OSE.MV_ADRESSE_STRUCTURE';
--------------------------------------------------------
--  DDL for Materialized View MV_AFFECTATION
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_AFFECTATION" ("Z_STRUCTURE_ID", "Z_PERSONNEL_ID", "Z_ROLE_ID", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS WITH tmp AS (

SELECT
  CASE WHEN c_structure = 'UNIV' THEN NULL ELSE c_structure END z_structure_id,
  no_individu z_personnel_id,
  
  CASE
    WHEN lc_fonction LIKE '_D30%' OR t.lc_fonction LIKE '_P71%' THEN 'directeur-composante'
    WHEN lc_fonction LIKE '_R00' OR lc_fonction LIKE '_R40%' THEN 'responsable-composante'
    WHEN lc_fonction LIKE '_R00c' OR lc_fonction LIKE '_R40%' THEN 'responsable-recherche-labo'
    WHEN c_structure = 'UNIV' AND lc_fonction = '_P00' OR lc_fonction LIKE '_P10%' OR lc_fonction LIKE '_P50%' THEN 'superviseur-etablissement'
    ELSE NULL
  END z_role_id,
  s.id as source_id,
  c_structure || '_' || no_individu || '_' || lc_fonction source_code,
  
  lc_fonction,
  nom_complet, lc_structure, ll_fonction, t.*
FROM
  UCBN_D2A_RESPONS_STRUCT@harpprod t
  JOIN source s ON s.code = 'Harpege'
WHERE
  niveau_structure <= 2
  AND SYSDATE BETWEEN t.DATE_DEB_EXERC_RESP AND NVL(t.DATE_FIN_EXERC_RESP + 1,SYSDATE)

)
SELECT DISTINCT
  z_structure_id,
  z_personnel_id,
  z_role_id,
  source_id,
  MIN( source_code ) source_code
FROM tmp
WHERE
  tmp.z_role_id IS NOT NULL
GROUP BY
  z_structure_id, z_personnel_id, z_role_id,source_id;

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_AFFECTATION"  IS 'snapshot table for snapshot OSE.MV_ROLE';
--------------------------------------------------------
--  DDL for Materialized View MV_AFFECTATION_RECHERCHE
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_AFFECTATION_RECHERCHE" ("Z_STRUCTURE_ID", "Z_INTERVENANT_ID", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
    to_char(AR.C_STRUCTURE)                       Z_STRUCTURE_ID,
    to_char(AR.NO_DOSSIER_PERS)                   Z_INTERVENANT_ID,
    s.id                                          SOURCE_ID,
    to_char(AR.no_seq_affe_rech)                  SOURCE_CODE
FROM
  affectation_recherche@harpprod ar
  JOIN source s ON s.code = 'Harpege'
WHERE
  SYSDATE BETWEEN AR.D_DEB_AFFE_RECH AND COALESCE(AR.D_FIN_AFFE_RECH + 1,SYSDATE);

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_AFFECTATION_RECHERCHE"  IS 'snapshot table for snapshot OSE.MV_AFFECTATION_RECHERCHE';
--------------------------------------------------------
--  DDL for Materialized View MV_CENTRE_COUT
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_CENTRE_COUT" ("LIBELLE", "Z_ACTIVITE_ID", "Z_TYPE_RESSOURCE_ID", "UNITE_BUDGETAIRE", "Z_PARENT_ID", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT DISTINCT
  TRIM(B.ktext) libelle,
  CASE
    WHEN a.kostl like '%A' THEN 'accueil' -- Activit√© (au sens compta analytique) ne devant pas permettre la saisie de r√©f√©rentiel
    WHEN a.kostl like '%B' THEN 'enseignement'
    WHEN a.kostl like '%M' THEN 'pilotage'
  END z_activite_id,
  CASE
    WHEN LENGTH(a.kostl) = 5 THEN 'paie-etat'
    WHEN LENGTH(a.kostl) > 5 THEN 'ressources-propres'
  END z_type_ressource_id,
  substr( A.kostl, 2, 3 ) unite_budgetaire,
  NULL z_parent_id,
  s.id source_id,
  A.kostl source_code

FROM
  sapsr3.csks@sifacp A,
  sapsr3.cskt@sifacp B,
  source s
WHERE
    s.code = 'SIFAC'
    and A.kostl=B.kostl(+)
    and A.kokrs=B.kokrs(+)
    and B.mandt(+)='500'
    and B.spras(+)='F'
    and A.kokrs='1010'
    and A.bkzkp !='X'
    and a.kostl LIKE 'P%' AND (a.kostl like '%A' OR a.kostl like '%B' OR a.kostl like '%M')
    AND SYSDATE BETWEEN to_date( NVL(A.datab,'10661231'), 'YYYYMMDD') AND to_date( NVL(A.datbi,'99991231'), 'YYYYMMDD')

UNION

SELECT
  TRIM(A.post1) libelle,
  CASE
    WHEN a.kostl like '%A' THEN 'accueil'
    WHEN a.fkstl like '%B' THEN 'enseignement'
    WHEN a.fkstl like '%M' THEN 'pilotage'
  END z_activite_id,
  CASE
    WHEN LENGTH(a.fkstl) = 5 THEN 'paie-etat'
    WHEN LENGTH(a.fkstl) > 5 THEN 'ressources-propres'
  END z_type_ressource_id,
  substr( A.fkstl, 2, 3 ) unite_budgetaire,
  A.fkstl z_parent_id,
  s.id source_id,
  A.posid source_code
FROM
  sapsr3.prps@sifacp A,
  sapsr3.prte@sifacp B,
  source s
WHERE
  s.code = 'SIFAC'
  and A.pspnr=B.posnr(+)
  and A.pkokr='1010'
  and B.mandt(+)='500'
  and a.fkstl LIKE 'P%' AND (a.fkstl like '%A' OR a.fkstl like '%B' OR a.fkstl like '%M')
  AND SYSDATE BETWEEN to_date( NVL(B.pstrt,'10661231'), 'YYYYMMDD') AND to_date( NVL(B.pende,'99991231'), 'YYYYMMDD')
;

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_CENTRE_COUT"  IS 'snapshot table for snapshot OSE.MV_CENTRE_COUT';
--------------------------------------------------------
--  DDL for Materialized View MV_CHEMIN_PEDAGOGIQUE
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_CHEMIN_PEDAGOGIQUE" ("Z_ELEMENT_PEDAGOGIQUE_ID", "Z_ETAPE_ID", "ORDRE", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  z_element_pedagogique_id,
  z_etape_id,
  ROW_NUMBER() OVER (PARTITION BY z_etape_id ORDER BY ROWNUM) ordre,
  s.id source_id,
  source_code
FROM
  ose_chemin_pedagogique@apoprod
  JOIN source s ON s.code = 'Apogee';

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_CHEMIN_PEDAGOGIQUE"  IS 'snapshot table for snapshot OSE.MV_CHEMIN_PEDAGOGIQUE';
--------------------------------------------------------
--  DDL for Materialized View MV_CORPS
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_CORPS" ("LIBELLE_LONG", "LIBELLE_COURT", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS select  
  ll_corps                            libelle_long,
  lc_corps                            libelle_court,
  s.id                                source_id,
  c_corps                             source_code
FROM
  corps@harpprod c
  JOIN source s ON s.code = 'Harpege'
WHERE
  1 = ose_divers.comprise_entre( NVL(d_ouverture_corps,SYSDATE), d_fermeture_corps+1 );

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_CORPS"  IS 'snapshot table for snapshot OSE.MV_CORPS';
--------------------------------------------------------
--  DDL for Materialized View MV_DEPARTEMENT
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_DEPARTEMENT" ("CODE", "LIBELLE_LONG", "LIBELLE_COURT", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  case when '0' = substr(c_departement,1,1) then substr(c_departement,2) else c_departement end code,
  ll_departement libelle_long,
  lc_departement libelle_court,
  s.id               as source_id,
  c_departement  source_code
FROM
  departement@harpprod
  JOIN source s ON s.code = 'Harpege';

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_DEPARTEMENT"  IS 'snapshot table for snapshot OSE.MV_DEPARTEMENT';
--------------------------------------------------------
--  DDL for Materialized View MV_DOMAINE_FONCTIONNEL
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_DOMAINE_FONCTIONNEL" ("LIBELLE", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  B.fkbtx libelle,
  s.id source_id,
  A.fkber source_code
FROM
  sapsr3.tfkb@sifacp A,
  sapsr3.tfkbt@sifacp B,
  source s
WHERE
  s.code = 'SIFAC'
and A.mandt=B.mandt
and A.fkber=B.fkber
and B.SPRAS='F'
and A.mandt='500'
AND SYSDATE BETWEEN to_date( NVL(A.datab,'10661231'), 'YYYYMMDD') AND to_date( NVL(A.datbis,'99991231'), 'YYYYMMDD')
and a.fkber IN ('101', '102', '103', '1053', '106', '107', '108', '109', '110', '111', '112', '1132', '1153');

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_DOMAINE_FONCTIONNEL"  IS 'snapshot table for snapshot OSE.MV_DOMAINE_FONCTIONNEL';
--------------------------------------------------------
--  DDL for Materialized View MV_EFFECTIFS
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_EFFECTIFS" ("Z_ELEMENT_PEDAGOGIQUE_ID", "ANNEE_ID", "FI", "FC", "FA", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  e.z_element_pedagogique_id z_element_pedagogique_id,
  to_number(e.annee_id) annee_id,
  e.effectif_fi fi,
  e.effectif_fc fc,
  e.effectif_fa fa,
  s.id source_id,
  e.annee_id || '-' || e.z_element_pedagogique_id source_code
FROM
  ose_element_effectifs@apoprod e
  JOIN source s ON s.code = 'Apogee';

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_EFFECTIFS"  IS 'snapshot table for snapshot OSE.MV_EFFECTIFS';
--------------------------------------------------------
--  DDL for Materialized View MV_ELEMENT_PEDAGOGIQUE
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_ELEMENT_PEDAGOGIQUE" ("CODE", "LIBELLE", "Z_ETAPE_ID", "Z_STRUCTURE_ID", "Z_PERIODE_ID", "FI", "FC", "FA", "TAUX_FOAD", "SOURCE_ID", "SOURCE_CODE", "Z_DISCIPLINE_ID")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  ep.source_code code,
  ep.libelle,
  ep.z_etape_id,
  ep.z_structure_id,
  ep.z_periode_id,
  CASE WHEN ep.fi+ep.fa+ep.fc=0 THEN 1 ELSE ep.fi END fi,
  ep.fc,ep.fa,
  ep.taux_foad,
  s.id source_id,
  ep.source_code,
  ep.z_discipline_id
FROM
  ose_element_pedagogique@apoprod ep
  JOIN source s ON s.code = 'Apogee';

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_ELEMENT_PEDAGOGIQUE"  IS 'snapshot table for snapshot OSE.MV_ELEMENT_PEDAGOGIQUE';
--------------------------------------------------------
--  DDL for Materialized View MV_ELEMENT_TAUX_REGIMES
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_ELEMENT_TAUX_REGIMES" ("Z_ELEMENT_PEDAGOGIQUE_ID", "ANNEE_ID", "EFFECTIF_FI", "EFFECTIF_FC", "EFFECTIF_FA", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  e.z_element_pedagogique_id z_element_pedagogique_id,
  to_number(e.annee_id) + 1 annee_id,
  e.effectif_fi effectif_fi,
  e.effectif_fc effectif_fc,
  e.effectif_fa effectif_fa,
  s.id source_id,
  to_number(e.annee_id) + 1 || '-' || e.z_element_pedagogique_id source_code
FROM
  ose_element_effectifs@apoprod e
  JOIN source s ON s.code = 'Apogee'
WHERE
  (e.effectif_fi + e.effectif_fc + e.effectif_fa) > 0;

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_ELEMENT_TAUX_REGIMES"  IS 'snapshot table for snapshot OSE.MV_ELEMENT_TAUX_REGIMES';
--------------------------------------------------------
--  DDL for Materialized View MV_ETABLISSEMENT
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_ETABLISSEMENT" ("LIBELLE", "LOCALISATION", "DEPARTEMENT", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH COMPLETE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  lib_off_etb as libelle,
  lic_etb as localisation,
  cod_dep as departement,
  src.id as source_id,
  cod_etb as source_code
FROM
  etablissement@apoprod e
  JOIN source src ON src.code = 'Apogee';

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_ETABLISSEMENT"  IS 'snapshot table for snapshot OSE.MV_ETABLISSEMENT';
--------------------------------------------------------
--  DDL for Materialized View MV_ETAPE
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_ETAPE" ("CODE", "LIBELLE", "Z_TYPE_FORMATION_ID", "NIVEAU", "SPECIFIQUE_ECHANGES", "Z_STRUCTURE_ID", "Z_DOMAINE_FONCTIONNEL_ID", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  e.source_code code,
  e.libelle,
  e.z_type_formation_id,
  to_number(e.niveau) niveau,
  e.specifique_echanges,
  e.z_structure_id,
  e.domaine_fonctionnel z_domaine_fonctionnel_id,
  s.id source_id,
  e.source_code
FROM
  ose_etape@apoprod e
  JOIN source s ON s.code = 'Apogee';

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_ETAPE"  IS 'snapshot table for snapshot OSE.MV_ETAPE';
--------------------------------------------------------
--  DDL for Materialized View MV_GRADE
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_GRADE" ("LIBELLE_LONG", "LIBELLE_COURT", "ECHELLE", "Z_CORPS_ID", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS select
  ll_grade                            libelle_long,
  lc_grade                            libelle_court,
  g.echelle                           echelle,
  c_corps                             z_corps_id,
  s.id                                source_id,
  c_grade                             source_code
FROM
  grade@harpprod g
  JOIN source s ON s.code = 'Harpege'
WHERE
  1 = ose_divers.comprise_entre( NVL(d_ouverture,SYSDATE), d_fermeture+1 );

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_GRADE"  IS 'snapshot table for snapshot OSE.MV_GRADE';
--------------------------------------------------------
--  DDL for Materialized View MV_GROUPE_TYPE_FORMATION
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_GROUPE_TYPE_FORMATION" ("LIBELLE_COURT", "LIBELLE_LONG", "ORDRE", "PERTINENCE_NIVEAU", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  libelle_court,
  libelle_long,
  ordre,
  pertinence_niveau,
  src.id source_id,
  source_code
FROM
  ose_groupe_type_formation@apoprod
  JOIN source src ON src.code = 'Apogee';

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_GROUPE_TYPE_FORMATION"  IS 'snapshot table for snapshot OSE.MV_GROUPE_TYPE_FORMATION';
--------------------------------------------------------
--  DDL for Materialized View MV_INTERVENANT
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_INTERVENANT" ("ANNEE_CREATION", "CIVILITE_ID", "NOM_USUEL", "PRENOM", "NOM_PATRONYMIQUE", "DATE_NAISSANCE", "Z_PAYS_NAISSANCE_ID", "Z_DEP_NAISSANCE_ID", "VILLE_NAISSANCE_CODE_INSEE", "VILLE_NAISSANCE_LIBELLE", "Z_PAYS_NATIONALITE_ID", "TEL_PRO", "TEL_MOBILE", "EMAIL", "STATUT_ID", "STATUT_CODE", "Z_STRUCTURE_ID", "SOURCE_ID", "SOURCE_CODE", "NUMERO_INSEE", "NUMERO_INSEE_CLE", "NUMERO_INSEE_PROVISOIRE", "IBAN", "BIC", "Z_GRADE_ID", "ORDRE", "MIN_ORDRE", "Z_DISCIPLINE_ID_CNU", "Z_DISCIPLINE_ID_SOUS_CNU", "Z_DISCIPLINE_ID_SPE_CNU", "Z_DISCIPLINE_ID_DIS2DEG", "CRITERE_RECHERCHE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS WITH validite ( no_individu, fin ) AS (
  SELECT
    no_individu,
    CASE WHEN MAX( fin ) = to_date('12/12/9999','DD/MM/YYYY') THEN NULL ELSE MAX( fin ) END fin
  FROM
    (SELECT
      ch.no_individu no_individu,
      COALESCE( ch.d_fin_str_trav, to_date('12/12/9999','DD/MM/YYYY') ) fin
    FROM
      chercheur@harpprod ch
    WHERE
      SYSDATE BETWEEN COALESCE(ch.d_deb_str_trav, SYSDATE) AND COALESCE(ch.d_fin_str_trav + 6*31, SYSDATE)
    UNION SELECT
      a.no_dossier_pers no_individu,
      COALESCE( a.d_fin_affectation, to_date('12/12/9999','DD/MM/YYYY') ) fin
    FROM
      affectation@harpprod a
    WHERE
      SYSDATE BETWEEN COALESCE(a.d_deb_affectation, SYSDATE) AND COALESCE(a.d_fin_affectation + 6*31, SYSDATE)
    UNION SELECT
      ar.no_dossier_pers no_individu,
      COALESCE( ar.d_fin_affe_rech, to_date('12/12/9999','DD/MM/YYYY') ) fin
    FROM
      affectation_recherche@harpprod ar
    WHERE
      SYSDATE BETWEEN COALESCE(ar.d_deb_affe_rech, SYSDATE) AND COALESCE(ar.d_fin_affe_rech + 6*31, SYSDATE)
  )
  GROUP BY
    no_individu
),
comptes (no_individu, rank_compte, nombre_comptes, IBAN, BIC) AS (
  SELECT
    i.no_dossier_pers no_individu,
    rank() over(partition by i.no_dossier_pers order by d_creation) rank_compte,
    count(*) over(partition by i.no_dossier_pers) nombre_comptes,
    CASE WHEN i.no_dossier_pers IS NOT NULL THEN
      trim( NVL(i.c_pays_iso || i.cle_controle,'FR00') || ' ' ||
      substr(i.c_banque,0,4) || ' ' ||
      substr(i.c_banque,5,1) || substr(i.c_guichet,0,3) || ' ' ||
      substr(i.c_guichet,4,2) || substr(i.no_compte,0,2) || ' ' ||
      substr(i.no_compte,3,4) || ' ' ||
      substr(i.no_compte,7,4) || ' ' ||
      substr(i.no_compte,11) || i.cle_rib) ELSE NULL END IBAN,
    CASE WHEN i.no_dossier_pers IS NOT NULL THEN i.c_banque_bic || ' ' || i.c_pays_bic || ' ' || i.c_emplacement || ' ' || i.c_branche ELSE NULL END BIC
  from
    individu_banque@harpprod i
)
SELECT DISTINCT
  ose_divers.annee_universitaire(individu.d_creation,5) annee_creation,
  civilite.id                                     civilite_id,
  initcap(individu.nom_usuel)                     nom_usuel,
  initcap(individu.prenom)                        prenom,
  initcap(individu.nom_patronymique)              nom_patronymique,
  individu.d_naissance                            date_naissance,
  individu.c_pays_naissance                       z_pays_naissance_id,
  individu.c_dept_naissance                       z_dep_naissance_id,
  individu.c_commune_naissance                    ville_naissance_code_insee,
  individu.ville_de_naissance                     ville_naissance_libelle,
  individu.c_pays_nationnalite                    z_pays_nationalite_id,
  individu_telephone.no_telephone                 tel_pro,
  individu.no_tel_portable                        tel_mobile,
  CASE 
    WHEN INDIVIDU_E_MAIL.NO_E_MAIL IS NULL AND individu.d_creation > SYSDATE -2 THEN 
      UCBN_LDAP.hid2mail(individu.no_individu)
    ELSE
      INDIVIDU_E_MAIL.NO_E_MAIL
  END                                             email,
  si.id                                           statut_id,
  si.source_code                                  statut_code,
  pbs_divers__cicg.c_structure_globale@harpprod(individu.no_individu, TRUNC(validite.fin) ) z_structure_id,
  s.id                                            source_id,
  ltrim(TO_CHAR(individu.no_individu,'99999999')) source_code,
  code_insee.no_insee                             numero_insee,
  TO_CHAR(code_insee.cle_insee)                   numero_insee_cle,
  CASE WHEN code_insee.no_insee IS NULL THEN NULL ELSE 0 END numero_insee_provisoire,
  comptes.iban                                    iban,
  comptes.bic                                     bic,
  pbs_divers__cicg.c_grade@harpprod(individu.no_individu, TRUNC(validite.fin) ) z_grade_id,
  NVL(si.ordre,0)                                 ordre,
  NVL(min(si.ordre) over(partition BY individu.no_individu),0) min_ordre,
  CASE WHEN psc.no_dossier_pers IS NOT NULL THEN psc.c_section_cnu        ELSE ca.c_section_cnu       END z_discipline_id_cnu,
  CASE WHEN psc.no_dossier_pers IS NOT NULL THEN psc.c_sous_section_cnu   ELSE ca.c_sous_section_cnu  END z_discipline_id_sous_cnu,
  CASE WHEN psc.no_dossier_pers IS NOT NULL THEN psc.c_specialite_cnu     ELSE ca.c_specialite_cnu    END z_discipline_id_spe_cnu,
  CASE WHEN pss.no_dossier_pers IS NOT NULL THEN pss.c_disc_second_degre  ELSE ca.c_disc_second_degre END z_discipline_id_dis2deg,
  to_char(ose_divers.str_reduce(individu.nom_usuel || ' ' || individu.nom_patronymique || ' ' || individu.prenom)) critere_recherche
FROM
            individu@harpprod           individu
       JOIN                             validite           ON validite.no_individu           = individu.no_individu
       JOIN source                      s                  ON s.code                         = 'Harpege'
       JOIN                             civilite           ON civilite.libelle_court         = CASE individu.c_civilite WHEN 'M.' THEN 'M.' ELSE 'Mme' END
  LEFT JOIN individu_e_mail@harpprod    individu_e_mail    ON individu_e_mail.no_individu    = individu.no_individu
  LEFT JOIN individu_telephone@harpprod individu_telephone ON individu_telephone.no_individu = individu.no_individu AND individu_telephone.tem_tel_principal='O' AND individu_telephone.tem_tel='O'
  LEFT JOIN code_insee@harpprod         code_insee         ON code_insee.no_dossier_pers     = individu.no_individu
  LEFT JOIN                             comptes            ON comptes.no_individu            = individu.no_individu AND comptes.rank_compte = comptes.nombre_comptes
  LEFT JOIN contrat_avenant@harpprod    ca                 ON ca.no_dossier_pers             = individu.no_individu AND 1 = ose_divers.comprise_entre( ca.d_deb_contrat_trav, NVL(ca.d_fin_execution,ca.d_fin_contrat_trav), TRUNC(validite.fin), 1 )
  LEFT JOIN contrat_travail@harpprod    ct                 ON ct.no_dossier_pers             = ca.no_dossier_pers AND ct.no_contrat_travail = ca.no_contrat_travail
  LEFT JOIN affectation@harpprod        a                  ON a.no_dossier_pers              = individu.no_individu AND 1 = ose_divers.comprise_entre( a.d_deb_affectation, a.d_fin_affectation, TRUNC(validite.fin), 1 )
  LEFT JOIN carriere@harpprod           c                  ON c.no_dossier_pers              = a.no_dossier_pers AND c.no_seq_carriere = a.no_seq_carriere
  LEFT JOIN statut_intervenant          si                 ON 1 = ose_divers.comprise_entre( si.histo_creation, si.histo_destruction ) AND si.source_code = CASE 
         WHEN ca.no_dossier_pers IS NOT NULL AND ct.c_type_contrat_trav IN ('MC','MA')                THEN 'ASS_MI_TPS'
         WHEN ca.no_dossier_pers IS NOT NULL AND ct.c_type_contrat_trav IN ('AT')                     THEN 'ATER'
         WHEN ca.no_dossier_pers IS NOT NULL AND ct.c_type_contrat_trav IN ('AX')                     THEN 'ATER_MI_TPS'
         WHEN ca.no_dossier_pers IS NOT NULL AND ct.c_type_contrat_trav IN ('DO')                     THEN 'DOCTOR'
         WHEN ca.no_dossier_pers IS NOT NULL AND ct.c_type_contrat_trav IN ('GI','PN','ED')           THEN 'ENS_CONTRACT'
         WHEN ca.no_dossier_pers IS NOT NULL AND ct.c_type_contrat_trav IN ('LT','LB')                THEN 'LECTEUR'
         WHEN ca.no_dossier_pers IS NOT NULL AND ct.c_type_contrat_trav IN ('MB','MP')                THEN 'MAITRE_LANG'
         WHEN ca.no_dossier_pers IS NOT NULL AND ct.c_type_contrat_trav IN ('PT')                     THEN 'HOSPITALO_UNIV'
         WHEN ca.no_dossier_pers IS NOT NULL AND ct.c_type_contrat_trav IN ('C3','CA','CB','CD','CS','HA','HD','HS','MA','S3','SX','SW','SY','SZ','VA') THEN 'BIATSS'
         WHEN ca.no_dossier_pers IS NOT NULL AND ct.c_type_contrat_trav IN ('CU','AH','CG','MM','PM','IN','DN','ET') THEN 'NON_AUTORISE'

         WHEN c.c_type_population IN ('DA','OA','DC')                THEN 'ENS_2ND_DEG'
         WHEN c.c_type_population IN ('SA')                          THEN 'ENS_CH'
         WHEN c.c_type_population IN ('AA','AC','BA','IA','MA')      THEN 'BIATSS'
         WHEN c.c_type_population IN ('MG','SB')                     THEN 'HOSPITALO_UNIV'

                                                                     ELSE 'AUTRES' END
  LEFT JOIN periodes_sp_cnu@harpprod    psc                ON psc.no_dossier_pers = a.no_dossier_pers AND psc.no_seq_carriere = a.no_seq_carriere AND 1 = ose_divers.comprise_entre( psc.d_deb, psc.d_fin, TRUNC(validite.fin), 1 )
  LEFT JOIN periodes_sp_sd_deg@harpprod pss                ON pss.no_dossier_pers = a.no_dossier_pers AND pss.no_seq_carriere = a.no_seq_carriere AND 1 = ose_divers.comprise_entre( pss.d_deb, pss.d_fin, TRUNC(validite.fin), 1 );

  CREATE INDEX "OSE"."MV_INTERVENANT_NOM_PATRO_IDX" ON "OSE"."MV_INTERVENANT" ("NOM_PATRONYMIQUE") 
  ;
  CREATE INDEX "OSE"."MV_INTERVENANT_NOM_USUEL_IDX" ON "OSE"."MV_INTERVENANT" ("NOM_USUEL") 
  ;
  CREATE INDEX "OSE"."MV_INTERVENANT_PRENOM_IDX" ON "OSE"."MV_INTERVENANT" ("PRENOM") 
  ;
  CREATE INDEX "OSE"."MV_INTERVENANT_RECHERCHE_IDX" ON "OSE"."MV_INTERVENANT" ("CRITERE_RECHERCHE") 
  ;

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_INTERVENANT"  IS 'snapshot table for snapshot OSE.MV_INTERVENANT';
--------------------------------------------------------
--  DDL for Materialized View MV_INTERVENANT_RECHERCHE
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_INTERVENANT_RECHERCHE" ("SOURCE_CODE", "NOM_USUEL", "NOM_PATRONYMIQUE", "PRENOM", "DATE_NAISSANCE", "STRUCTURE", "CIVILITE", "CRITERE", "ANNEE_ID")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  i.source_code,
  i.nom_usuel,
  i.nom_patronymique,
  i.prenom,
  i.date_naissance,
  s.libelle_court structure,
  c.libelle_long civilite,
  i.critere_recherche critere,
  i.annee_id
FROM
  src_intervenant i
  JOIN structure s ON s.id = i.structure_id
  JOIN civilite c ON c.id = i.civilite_id
WHERE
  i.id IS NULL;

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_INTERVENANT_RECHERCHE"  IS 'snapshot table for snapshot OSE.MV_INTERVENANT_RECHERCHE';
--------------------------------------------------------
--  DDL for Materialized View MV_PAYS
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_PAYS" ("LIBELLE_LONG", "LIBELLE_COURT", "VALIDITE_DEBUT", "VALIDITE_FIN", "TEMOIN_UE", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  ll_pays                       as libelle_long,
  coalesce(lc_pays,ll_pays)     as libelle_court,
  coalesce(d_deb_val, TO_DATE('1900/01/01','YYYY/MM/DD'))  as validite_debut,
  d_fin_val as validite_fin,
  decode(tem_ue, 'O', 1, 0)     as temoin_ue,
  s.id                          as source_id,
  c_pays                        as source_code
FROM
  pays@harpprod
  JOIN source s ON s.code = 'Harpege';

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_PAYS"  IS 'snapshot table for snapshot OSE.MV_PAYS';
--------------------------------------------------------
--  DDL for Materialized View MV_PERSONNEL
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_PERSONNEL" ("CIVILITE_ID", "NOM_USUEL", "PRENOM", "NOM_PATRONYMIQUE", "DATE_NAISSANCE", "EMAIL", "Z_STRUCTURE_ID", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS WITH aff_ifs (no_dossier_pers, fin) AS (
  SELECT
    no_individu,
    CASE WHEN MAX( fin ) = to_date('12/12/9999','DD/MM/YYYY') THEN NULL ELSE MAX( fin ) END fin
  FROM
    (SELECT
      ifs.no_dossier_pers no_individu,
      COALESCE( ifs.DT_FIN_EXERC_RESP, to_date('12/12/9999','DD/MM/YYYY') ) fin
    FROM
      individu_fonct_struct@harpprod ifs
    WHERE
      SYSDATE BETWEEN COALESCE(ifs.DT_DEB_EXERC_RESP, SYSDATE) AND COALESCE(ifs.DT_FIN_EXERC_RESP + 6*31, SYSDATE)
    UNION SELECT
      a.no_dossier_pers no_individu,
      COALESCE( a.d_fin_affectation, to_date('12/12/9999','DD/MM/YYYY') ) fin
    FROM
      affectation@harpprod a
    WHERE
      SYSDATE BETWEEN COALESCE(a.d_deb_affectation, SYSDATE) AND COALESCE(a.d_fin_affectation + 6*31, SYSDATE)
  )
  GROUP BY
    no_individu
)
SELECT
  c.id                                     civilite_id,
  initcap(i.nom_usuel)                     nom_usuel,
  initcap(i.prenom)                        prenom,
  initcap(i.nom_patronymique)              nom_patronymique,
  i.d_naissance                            date_naissance,
  im.no_e_mail                             email,
  pbs_divers__cicg.c_structure_globale@harpprod(i.no_individu, TRUNC(ai.fin) ) z_structure_id,
  s.id                                     source_id,
  ltrim(TO_CHAR(i.no_individu,'99999999')) source_code
FROM
  individu@harpprod i
  JOIN source                   s   ON s.code = 'Harpege'
  JOIN civilite                 c   ON c.libelle_court = CASE i.c_civilite WHEN 'M.' THEN 'M.' ELSE 'Mme' END
  JOIN aff_ifs                  ai  ON ai.no_dossier_pers = i.no_individu
  JOIN individu_e_mail@harpprod im  ON (im.no_individu = i.no_individu);

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_PERSONNEL"  IS 'snapshot table for snapshot OSE.MV_PERSONNEL';
--------------------------------------------------------
--  DDL for Materialized View MV_STRUCTURE
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_STRUCTURE" ("LIBELLE_LONG", "LIBELLE_COURT", "Z_PARENTE_ID", "Z_STRUCTURE_NIV2_ID", "Z_TYPE_ID", "NIVEAU", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  ll_structure                                    as libelle_long,
  lc_structure                                    as libelle_court,
  c_structure_pere                                as z_parente_id,
  CASE LEVEL WHEN 2 THEN C_STRUCTURE ELSE STR_LEVEL2_CODE@harpprod(c_structure) END as z_structure_niv2_id,
  CASE c_statut_juridique
    WHEN 'UN' THEN 'UNI'
    WHEN 'C' THEN 'CMP'
    WHEN 'EC' THEN 'AUT'
    WHEN 'SC' THEN 'SCM'
    WHEN 'I' THEN 'STI'
    WHEN 'EI' THEN 'IEI'
    WHEN 'EP' THEN 'AUT'
    WHEN 'SE' THEN 'SIE'
    WHEN 'CH' THEN 'CHU'
    WHEN 'IU' THEN 'IUF'
    WHEN 'PR' THEN 'PRS'
    ELSE 'AUT'
  END                                             as z_type_id,
  LEVEL                                           as niveau,
  s.id                                            as source_id,
  c_structure                                     as source_code
FROM
  structure@harpprod
  JOIN source s ON s.code = 'Harpege'
WHERE
  SYSDATE BETWEEN date_ouverture AND NVL( date_fermeture, SYSDATE )
START WITH c_structure_pere IS NULL
CONNECT BY PRIOR c_structure = c_structure_pere;

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_STRUCTURE"  IS 'snapshot table for snapshot OSE.MV_STRUCTURE';
--------------------------------------------------------
--  DDL for Materialized View MV_TYPE_FORMATION
--------------------------------------------------------

  CREATE MATERIALIZED VIEW "OSE"."MV_TYPE_FORMATION" ("LIBELLE_LONG", "LIBELLE_COURT", "Z_GROUPE_ID", "SOURCE_ID", "SOURCE_CODE")
  ORGANIZATION HEAP PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OSE_TS" 
  BUILD IMMEDIATE
  USING INDEX 
  REFRESH FORCE ON DEMAND
  USING DEFAULT LOCAL ROLLBACK SEGMENT
  USING ENFORCED CONSTRAINTS DISABLE QUERY REWRITE
  AS SELECT
  libelle_long,
  libelle_court,
  z_groupe_id,
  src.id source_id,
  source_code
FROM
  ose_type_formation@apoprod
  JOIN source src ON src.code = 'Apogee';

   COMMENT ON MATERIALIZED VIEW "OSE"."MV_TYPE_FORMATION"  IS 'snapshot table for snapshot OSE.MV_TYPE_FORMATION';
--------------------------------------------------------
--  DDL for Index TVE_VALIDATION_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVE_VALIDATION_FK_IDX" ON "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ("VALIDATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DISCIPLINE_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DISCIPLINE_SOURCE_FK_IDX" ON "OSE"."DISCIPLINE" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_MODULATEUR_STRUCTURE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_MODULATEUR_STRUCTURE_UN" ON "OSE"."TYPE_MODULATEUR_STRUCTURE" ("TYPE_MODULATEUR_ID", "STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETAPE_DF_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETAPE_DF_FK_IDX" ON "OSE"."ETAPE" ("DOMAINE_FONCTIONNEL_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SERVICE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."SERVICE_HDFK_IDX" ON "OSE"."SERVICE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_HEURES_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_HEURES_HCFK_IDX" ON "OSE"."TYPE_HEURES" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AGREMENT_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AGREMENT_INTERVENANT_FK_IDX" ON "OSE"."AGREMENT" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TIEP_EP_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TIEP_EP_FK_IDX" ON "OSE"."TYPE_INTERVENTION_EP" ("ELEMENT_PEDAGOGIQUE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CENTRE_COUT_HCFK_IDX" ON "OSE"."CENTRE_COUT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVE_UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TVE_UN_IDX" ON "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ("INTERVENANT_ID", "STRUCTURE_ID", "TYPE_VOLUME_HORAIRE_ID", "SERVICE_ID", "VOLUME_HORAIRE_ID", "VALIDATION_ID", "TO_DELETE") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_AGR_TYPE_AGREMENT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_AGR_TYPE_AGREMENT_FK_IDX" ON "OSE"."TBL_AGREMENT" ("TYPE_AGREMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CCS_SOURCE_CODE_UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CCS_SOURCE_CODE_UN_IDX" ON "OSE"."CENTRE_COUT_STRUCTURE" ("SOURCE_CODE", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index ETAPE_SRC_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ETAPE_SRC_UN" ON "OSE"."ETAPE" ("SOURCE_CODE", "HISTO_DESTRUCTION", "ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_LIEN_NOEUD_INF_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_LIEN_NOEUD_INF_IDX" ON "OSE"."TBL_LIEN" ("NOEUD_INF_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EM_MODULATEUR_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."EM_MODULATEUR_FK_IDX" ON "OSE"."ELEMENT_MODULATEUR" ("MODULATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SERVICE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."SERVICE_HMFK_IDX" ON "OSE"."SERVICE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_FORMATION_GROUPE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_FORMATION_GROUPE_FK_IDX" ON "OSE"."TYPE_FORMATION" ("GROUPE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FONCTION_REFERENTIEL_CODE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."FONCTION_REFERENTIEL_CODE_UN" ON "OSE"."FONCTION_REFERENTIEL" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index CONTRAT_CONTRAT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CONTRAT_CONTRAT_FK_IDX" ON "OSE"."CONTRAT" ("CONTRAT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETABLISSEMENT_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETABLISSEMENT_SOURCE_FK_IDX" ON "OSE"."ETABLISSEMENT" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TME_ELEMENT_PEDAGOGIQUE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TME_ELEMENT_PEDAGOGIQUE_FK_IDX" ON "OSE"."TYPE_MODULATEUR_EP" ("ELEMENT_PEDAGOGIQUE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_AGREMENT_STATUT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_AGREMENT_STATUT_HMFK_IDX" ON "OSE"."TYPE_AGREMENT_STATUT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EP_CODE__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."EP_CODE__UN" ON "OSE"."ELEMENT_PEDAGOGIQUE" ("SOURCE_CODE", "ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_REFERENTIEL_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_SERVICE_REFERENTIEL_PK_IDX" ON "OSE"."TBL_SERVICE_REFERENTIEL" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index HSM_TYPE_VOLUME_HORAIRE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."HSM_TYPE_VOLUME_HORAIRE_FK_IDX" ON "OSE"."HISTO_INTERVENANT_SERVICE" ("TYPE_VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOMAINE_FONCTIONNEL_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DOMAINE_FONCTIONNEL_HCFK_IDX" ON "OSE"."DOMAINE_FONCTIONNEL" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_DMLIQ_TYPE_RESSOUR_FK
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_DMLIQ_TYPE_RESSOUR_FK" ON "OSE"."TBL_DMEP_LIQUIDATION" ("TYPE_RESSOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ADRESSE_INTERVENANT_SOURCE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ADRESSE_INTERVENANT_SOURCE_UN" ON "OSE"."ADRESSE_INTERVENANT" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index SERVICE_REFERENTIEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SERVICE_REFERENTIEL_PK" ON "OSE"."SERVICE_REFERENTIEL" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERSONNEL_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PERSONNEL_SOURCE_FK_IDX" ON "OSE"."PERSONNEL" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CIVILITE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CIVILITE_PK" ON "OSE"."CIVILITE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VOLUME_HORAIRE_HMFK_IDX" ON "OSE"."VOLUME_HORAIRE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AGREMENT_TYPE_AGREMENT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AGREMENT_TYPE_AGREMENT_FK_IDX" ON "OSE"."AGREMENT" ("TYPE_AGREMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ROLE_PRIVILEGE_ROLE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ROLE_PRIVILEGE_ROLE_FK_IDX" ON "OSE"."ROLE_PRIVILEGE" ("ROLE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_CLOTURE_REALISE_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_CLOTURE_REALISE_PK_IDX" ON "OSE"."TBL_CLOTURE_REALISE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TIS_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TIS_HDFK_IDX" ON "OSE"."TYPE_INTERVENTION_STRUCTURE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENANT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_INTERVENANT_PK" ON "OSE"."TYPE_INTERVENANT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CS_TYPE_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CS_TYPE_INTERVENANT_FK_IDX" ON "OSE"."CAMPAGNE_SAISIE" ("TYPE_INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_TAUX_REGIMES_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ELEMENT_TAUX_REGIMES_HCFK_IDX" ON "OSE"."ELEMENT_TAUX_REGIMES" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PAIEMENT_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PAIEMENT_STRUCTURE_FK_IDX" ON "OSE"."TBL_PAIEMENT" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_WORKFLOW_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_WORKFLOW_PK_IDX" ON "OSE"."TBL_WORKFLOW" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index NOTIF_INDICATEUR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."NOTIF_INDICATEUR_PK" ON "OSE"."NOTIFICATION_INDICATEUR" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_INTERVENANT_PRENOM_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MV_INTERVENANT_PRENOM_IDX" ON "OSE"."MV_INTERVENANT" ("PRENOM") 
  ;
--------------------------------------------------------
--  DDL for Index FRES_TVH_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FRES_TVH_FK_IDX" ON "OSE"."FORMULE_RESULTAT" ("TYPE_VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VOLUME_HORAIRE_HCFK_IDX" ON "OSE"."VOLUME_HORAIRE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TAS_STATUT_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TAS_STATUT_INTERVENANT_FK_IDX" ON "OSE"."TYPE_AGREMENT_STATUT" ("STATUT_INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DEPARTEMENT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DEPARTEMENT_HDFK_IDX" ON "OSE"."DEPARTEMENT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SOURCE_CODE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SOURCE_CODE_UN" ON "OSE"."SOURCE" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index STATUT_INTERVENANT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."STATUT_INTERVENANT_HCFK_IDX" ON "OSE"."STATUT_INTERVENANT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index NOTIF_INDICATEUR_AFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."NOTIF_INDICATEUR_AFK_IDX" ON "OSE"."NOTIFICATION_INDICATEUR" ("AFFECTATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_AGREMENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_AGREMENT_PK" ON "OSE"."TYPE_AGREMENT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index GROUPE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."GROUPE_HDFK_IDX" ON "OSE"."GROUPE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_NOM_USUEL_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_NOM_USUEL_IDX" ON "OSE"."INTERVENANT" ("NOM_USUEL") 
  ;
--------------------------------------------------------
--  DDL for Index WF_ETAPE_CODE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."WF_ETAPE_CODE_UN" ON "OSE"."WF_ETAPE" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index PACKAGE_DEPS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PACKAGE_DEPS_PK" ON "OSE"."PACKAGE_DEPS" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_CONTRAT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_CONTRAT_HMFK_IDX" ON "OSE"."TYPE_CONTRAT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_RESSOURCE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_RESSOURCE_HMFK_IDX" ON "OSE"."TYPE_RESSOURCE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TMP_CALCUL_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TMP_CALCUL_UK1" ON "OSE"."TMP_CALCUL" ("INTERVENANT_ID", "SUJET") ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_REF_STRUCTU_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_REF_STRUCTU_FK_IDX" ON "OSE"."TBL_SERVICE_REFERENTIEL" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CENTRE_COUT_SOURCE_FK_IDX" ON "OSE"."CENTRE_COUT" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERIMETRE_CODE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PERIMETRE_CODE_UN" ON "OSE"."PERIMETRE" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index GROUPE__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."GROUPE__UN" ON "OSE"."GROUPE" ("ELEMENT_PEDAGOGIQUE_ID", "HISTO_DESTRUCTEUR_ID", "TYPE_INTERVENTION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index GROUPE_TYPE_FORMATION_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."GROUPE_TYPE_FORMATION_HCFK_IDX" ON "OSE"."GROUPE_TYPE_FORMATION" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CORPS_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CORPS_HDFK_IDX" ON "OSE"."CORPS" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PAIEMENT_FRSR_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PAIEMENT_FRSR_FK_IDX" ON "OSE"."TBL_PAIEMENT" ("FORMULE_RES_SERVICE_REF_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_MODULATEUR_EP__UNV1
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_MODULATEUR_EP__UNV1" ON "OSE"."TYPE_MODULATEUR_EP" ("TYPE_MODULATEUR_ID", "ELEMENT_PEDAGOGIQUE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index HSM_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."HSM_INTERVENANT_FK_IDX" ON "OSE"."HISTO_INTERVENANT_SERVICE" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERIMETRE_LIBELLE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PERIMETRE_LIBELLE_UN" ON "OSE"."PERIMETRE" ("LIBELLE") 
  ;
--------------------------------------------------------
--  DDL for Index TVR_UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TVR_UN_IDX" ON "OSE"."TBL_VALIDATION_REFERENTIEL" ("INTERVENANT_ID", "STRUCTURE_ID", "TYPE_VOLUME_HORAIRE_ID", "SERVICE_REFERENTIEL_ID", "VOLUME_HORAIRE_REF_ID", "VALIDATION_ID", "TO_DELETE") 
  ;
--------------------------------------------------------
--  DDL for Index ADRESSE_STRUCTURE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ADRESSE_STRUCTURE_HMFK_IDX" ON "OSE"."ADRESSE_STRUCTURE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."AFFECTATION__UN" ON "OSE"."AFFECTATION" ("PERSONNEL_ID", "ROLE_ID", "STRUCTURE_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_REF_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VOLUME_HORAIRE_REF_HMFK_IDX" ON "OSE"."VOLUME_HORAIRE_REF" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERSONNEL_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PERSONNEL_HDFK_IDX" ON "OSE"."PERSONNEL" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJF_UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_PJF_UN_IDX" ON "OSE"."TBL_PIECE_JOINTE_FOURNIE" ("TYPE_PIECE_JOINTE_ID", "INTERVENANT_ID", "VALIDATION_ID", "FICHIER_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ADRESSE_STRUCTURE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ADRESSE_STRUCTURE_HDFK_IDX" ON "OSE"."ADRESSE_STRUCTURE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_PIECE_JOINTE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_PIECE_JOINTE_HMFK_IDX" ON "OSE"."TYPE_PIECE_JOINTE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TIS_ANNEE_FIN_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TIS_ANNEE_FIN_FK_IDX" ON "OSE"."TYPE_INTERVENTION_STRUCTURE" ("ANNEE_FIN_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENTION_EP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_INTERVENTION_EP_PK" ON "OSE"."TYPE_INTERVENTION_EP" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVR_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVR_INTERVENANT_FK_IDX" ON "OSE"."TBL_VALIDATION_REFERENTIEL" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AGREMENT_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AGREMENT_STRUCTURE_FK_IDX" ON "OSE"."AGREMENT" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MSD_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MSD_INTERVENANT_FK_IDX" ON "OSE"."MODIFICATION_SERVICE_DU" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TD_TYPE_RESSOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TD_TYPE_RESSOURCE_FK_IDX" ON "OSE"."TYPE_DOTATION" ("TYPE_RESSOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index STRUCTURE_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."STRUCTURE_STRUCTURE_FK_IDX" ON "OSE"."STRUCTURE" ("STRUCTURE_NIV2_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_STRUCTURE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_STRUCTURE_HDFK_IDX" ON "OSE"."TYPE_STRUCTURE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CHEMIN_PEDAGOGIQUE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CHEMIN_PEDAGOGIQUE_HDFK_IDX" ON "OSE"."CHEMIN_PEDAGOGIQUE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_INTERVENANT_NOM_PATRO_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MV_INTERVENANT_NOM_PATRO_IDX" ON "OSE"."MV_INTERVENANT" ("NOM_PATRONYMIQUE") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_MODULATEUR_EP_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_MODULATEUR_EP_HCFK_IDX" ON "OSE"."TYPE_MODULATEUR_EP" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVE_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TVE_PK_IDX" ON "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AFFECTATION_SOURCE_FK_IDX" ON "OSE"."AFFECTATION" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SOURCE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SOURCE_PK" ON "OSE"."SOURCE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVE_SERVICE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVE_SERVICE_FK_IDX" ON "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ("SERVICE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index STRUCTURE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."STRUCTURE_HCFK_IDX" ON "OSE"."STRUCTURE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MOTIF_NON_PAIEMENT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MOTIF_NON_PAIEMENT_HDFK_IDX" ON "OSE"."MOTIF_NON_PAIEMENT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index LIEN_SRC_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."LIEN_SRC_UN" ON "OSE"."LIEN" ("SOURCE_CODE", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index ADRESSE_STRUCTURE_SOURCE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ADRESSE_STRUCTURE_SOURCE_UN" ON "OSE"."ADRESSE_STRUCTURE" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_WORKFLOW_TYPE_INT_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_WORKFLOW_TYPE_INT_IDX" ON "OSE"."TBL_WORKFLOW" ("TYPE_INTERVENANT_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_SAISIE_ANN_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_SAISIE_ANN_FK_IDX" ON "OSE"."TBL_SERVICE_SAISIE" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VHR_SERVICE_REFERENTIEL_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VHR_SERVICE_REFERENTIEL_FK_IDX" ON "OSE"."VOLUME_HORAIRE_REF" ("SERVICE_REFERENTIEL_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETABLISSEMENT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETABLISSEMENT_HCFK_IDX" ON "OSE"."ETABLISSEMENT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TMS_ANNEE_FIN_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TMS_ANNEE_FIN_FK_IDX" ON "OSE"."TYPE_MODULATEUR_STRUCTURE" ("ANNEE_FIN_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_STRUCTURE_CODE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_STRUCTURE_CODE_UN" ON "OSE"."TYPE_STRUCTURE" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index VALIDATION_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VALIDATION_HCFK_IDX" ON "OSE"."VALIDATION" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_ADRESSE_INTERVENANT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_ADRESSE_INTERVENANT_PK" ON "OSE"."MV_ADRESSE_INTERVENANT" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index SERVICE_REFERENTIEL_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."SERVICE_REFERENTIEL_HDFK_IDX" ON "OSE"."SERVICE_REFERENTIEL" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TAS_TYPE_AGREMENT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TAS_TYPE_AGREMENT_FK_IDX" ON "OSE"."TYPE_AGREMENT_STATUT" ("TYPE_AGREMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_LIEN_STRUCTURE_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_LIEN_STRUCTURE_IDX" ON "OSE"."TBL_LIEN" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FICHIER_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FICHIER_HDFK_IDX" ON "OSE"."FICHIER" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MOTIF_NON_PAIEMENT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MOTIF_NON_PAIEMENT_HMFK_IDX" ON "OSE"."MOTIF_NON_PAIEMENT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EP_SRC_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."EP_SRC_UN" ON "OSE"."ELEMENT_PEDAGOGIQUE" ("SOURCE_CODE", "ANNEE_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index DISCIPLINE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DISCIPLINE_HMFK_IDX" ON "OSE"."DISCIPLINE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MEP_FR_SERVICE_REF_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MEP_FR_SERVICE_REF_FK_IDX" ON "OSE"."MISE_EN_PAIEMENT" ("FORMULE_RES_SERVICE_REF_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TAUX_HORAIRE_HETD_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TAUX_HORAIRE_HETD_HCFK_IDX" ON "OSE"."TAUX_HORAIRE_HETD" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SCENARIO_LIEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SCENARIO_LIEN_PK" ON "OSE"."SCENARIO_LIEN" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_DOSSIER_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_DOSSIER_ANNEE_FK_IDX" ON "OSE"."TBL_DOSSIER" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_PIECE_JOINTE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_PIECE_JOINTE_HDFK_IDX" ON "OSE"."TYPE_PIECE_JOINTE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_LIEN_ACTIF_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_LIEN_ACTIF_IDX" ON "OSE"."TBL_LIEN" ("ACTIF") 
  ;
--------------------------------------------------------
--  DDL for Index CCS_CC_S__UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CCS_CC_S__UN_IDX" ON "OSE"."CENTRE_COUT_STRUCTURE" ("CENTRE_COUT_ID", "STRUCTURE_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index CC_ACTIVITE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CC_ACTIVITE_HCFK_IDX" ON "OSE"."CC_ACTIVITE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_CHARGE__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."VOLUME_HORAIRE_CHARGE__UN" ON "OSE"."VOLUME_HORAIRE_CHARGE" ("ELEMENT_PEDAGOGIQUE_ID", "TYPE_INTERVENTION_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index AS_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AS_STRUCTURE_FK_IDX" ON "OSE"."ADRESSE_STRUCTURE" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVE_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVE_ANNEE_FK_IDX" ON "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DEPARTEMENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."DEPARTEMENT_PK" ON "OSE"."DEPARTEMENT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETAT_VOLUME_HORAIRE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETAT_VOLUME_HORAIRE_HMFK_IDX" ON "OSE"."ETAT_VOLUME_HORAIRE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PAIEMENT_MEP_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PAIEMENT_MEP_FK_IDX" ON "OSE"."TBL_PAIEMENT" ("MISE_EN_PAIEMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FRSR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."FRSR_PK" ON "OSE"."FORMULE_RESULTAT_SERVICE_REF" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_MODULATEUR_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_MODULATEUR_HDFK_IDX" ON "OSE"."TYPE_MODULATEUR" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOTATION_TYPE_DOTATION_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DOTATION_TYPE_DOTATION_FK_IDX" ON "OSE"."DOTATION" ("TYPE_RESSOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EFFECTIFS_ELEMENT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."EFFECTIFS_ELEMENT_FK_IDX" ON "OSE"."EFFECTIFS" ("ELEMENT_PEDAGOGIQUE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJF_VALIDATION_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PJF_VALIDATION_FK_IDX" ON "OSE"."TBL_PIECE_JOINTE_FOURNIE" ("VALIDATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_DMLIQ_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_DMLIQ_STRUCTURE_FK_IDX" ON "OSE"."TBL_DMEP_LIQUIDATION" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TMS_TYPE_MODUL_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TMS_TYPE_MODUL_FK_IDX" ON "OSE"."TYPE_MODULATEUR_STRUCTURE" ("TYPE_MODULATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOMAINE_FONCTIONNEL_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DOMAINE_FONCTIONNEL_HMFK_IDX" ON "OSE"."DOMAINE_FONCTIONNEL" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_LIEN_SCENARIO_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_LIEN_SCENARIO_IDX" ON "OSE"."TBL_LIEN" ("SCENARIO_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ADRESSE_STRUCTURE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ADRESSE_STRUCTURE_PK" ON "OSE"."ADRESSE_STRUCTURE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_DOTATION_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_DOTATION_HMFK_IDX" ON "OSE"."TYPE_DOTATION" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FONC_REF_DOMAINE_FONCT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FONC_REF_DOMAINE_FONCT_FK_IDX" ON "OSE"."FONCTION_REFERENTIEL" ("DOMAINE_FONCTIONNEL_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERIODE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PERIODE_PK" ON "OSE"."PERIODE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index STRUCTURE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."STRUCTURE_HDFK_IDX" ON "OSE"."STRUCTURE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_PRENOM_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_PRENOM_IDX" ON "OSE"."INTERVENANT" ("PRENOM") 
  ;
--------------------------------------------------------
--  DDL for Index VHC_HISTO_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."VHC_HISTO_UN" ON "OSE"."VOLUME_HORAIRE_CHARGE" ("SOURCE_CODE", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_SUPANN_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."INTERVENANT_SUPANN_UN" ON "OSE"."INTERVENANT" ("SUPANN_EMP_ID", "ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MESSAGES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MESSAGES_PK" ON "OSE"."MESSAGE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index MMSD_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MMSD_HMFK_IDX" ON "OSE"."MOTIF_MODIFICATION_SERVICE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_STRUCTURE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CENTRE_COUT_STRUCTURE_HDFK_IDX" ON "OSE"."CENTRE_COUT_STRUCTURE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_FORMATION_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_FORMATION_HMFK_IDX" ON "OSE"."TYPE_FORMATION" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENANT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_INTERVENANT_HCFK_IDX" ON "OSE"."TYPE_INTERVENANT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SR_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."SR_INTERVENANT_FK_IDX" ON "OSE"."SERVICE_REFERENTIEL" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PIECE_JOINTE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PIECE_JOINTE_HDFK_IDX" ON "OSE"."PIECE_JOINTE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_WORKFLOW_IFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_WORKFLOW_IFK_IDX" ON "OSE"."TBL_WORKFLOW" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOTATION_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DOTATION_HDFK_IDX" ON "OSE"."DOTATION" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AR_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AR_INTERVENANT_FK_IDX" ON "OSE"."AFFECTATION_RECHERCHE" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FRR_FORMULE_RESULTAT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FRR_FORMULE_RESULTAT_FK_IDX" ON "OSE"."FORMULE_RESULTAT_SERVICE_REF" ("FORMULE_RESULTAT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PAIEMENT_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_PAIEMENT_PK_IDX" ON "OSE"."TBL_PAIEMENT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index MOTIF_MODIFICATION_SERVICE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MOTIF_MODIFICATION_SERVICE_PK" ON "OSE"."MOTIF_MODIFICATION_SERVICE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CHEMIN_PEDAGOGIQUE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CHEMIN_PEDAGOGIQUE_HMFK_IDX" ON "OSE"."CHEMIN_PEDAGOGIQUE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_CHARGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."VOLUME_HORAIRE_CHARGE_PK" ON "OSE"."VOLUME_HORAIRE_CHARGE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TMS_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TMS_HCFK_IDX" ON "OSE"."TYPE_MODULATEUR_STRUCTURE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_WORKFLOW_ETAPE_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_WORKFLOW_ETAPE_IDX" ON "OSE"."TBL_WORKFLOW" ("ETAPE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_EP_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CENTRE_COUT_EP_HCFK_IDX" ON "OSE"."CENTRE_COUT_EP" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index RSV_UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."RSV_UN_IDX" ON "OSE"."REGLE_STRUCTURE_VALIDATION" ("TYPE_VOLUME_HORAIRE_ID", "TYPE_INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INDIC_MODIF_DOSSIER_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INDIC_MODIF_DOSSIER_HCFK_IDX" ON "OSE"."INDIC_MODIF_DOSSIER" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PIECE_JOINTE_VFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PIECE_JOINTE_VFK_IDX" ON "OSE"."PIECE_JOINTE" ("VALIDATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PIECE_JOINTE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PIECE_JOINTE_HCFK_IDX" ON "OSE"."PIECE_JOINTE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_R_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AFFECTATION_R_HCFK_IDX" ON "OSE"."AFFECTATION_RECHERCHE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VHE_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VHE_SOURCE_FK_IDX" ON "OSE"."VOLUME_HORAIRE_ENS" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVE_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVE_INTERVENANT_FK_IDX" ON "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_EP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CENTRE_COUT_EP_PK" ON "OSE"."CENTRE_COUT_EP" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CENTRE_COUT_PK" ON "OSE"."CENTRE_COUT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_REF_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VOLUME_HORAIRE_REF_HCFK_IDX" ON "OSE"."VOLUME_HORAIRE_REF" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DISCIPLINE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DISCIPLINE_HCFK_IDX" ON "OSE"."DISCIPLINE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVE_TYPE_VOLUME_HORAIRE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVE_TYPE_VOLUME_HORAIRE_FK_IDX" ON "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ("TYPE_VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOSSIER_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."DOSSIER_UK1" ON "OSE"."DOSSIER" ("HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_VALIDATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_VALIDATION_PK" ON "OSE"."TYPE_VALIDATION" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index FORMULE_RESULTAT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."FORMULE_RESULTAT_PK" ON "OSE"."FORMULE_RESULTAT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CAMPAGNE_SAISIE__UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CAMPAGNE_SAISIE__UN_IDX" ON "OSE"."CAMPAGNE_SAISIE" ("ANNEE_ID", "TYPE_INTERVENANT_ID", "TYPE_VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_FORMATION__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_FORMATION__UN" ON "OSE"."TYPE_FORMATION" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index DOTATION_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DOTATION_ANNEE_FK_IDX" ON "OSE"."DOTATION" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_STRUCTURE_FK_IDX" ON "OSE"."TBL_SERVICE" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CS_TYPE_VOLUME_HORAIRE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CS_TYPE_VOLUME_HORAIRE_FK_IDX" ON "OSE"."CAMPAGNE_SAISIE" ("TYPE_VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PJ_DOSSIER_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PJ_DOSSIER_FK_IDX" ON "OSE"."PIECE_JOINTE" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_CONTRAT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_CONTRAT_HDFK_IDX" ON "OSE"."TYPE_CONTRAT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MMSD_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MMSD_HDFK_IDX" ON "OSE"."MOTIF_MODIFICATION_SERVICE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CONTRAT_TYPE_CONTRAT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CONTRAT_TYPE_CONTRAT_FK_IDX" ON "OSE"."CONTRAT" ("TYPE_CONTRAT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_R_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AFFECTATION_R_HDFK_IDX" ON "OSE"."AFFECTATION_RECHERCHE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index WF_ETAPE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."WF_ETAPE_PK" ON "OSE"."WF_ETAPE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_MODULATEUR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ELEMENT_MODULATEUR_PK" ON "OSE"."ELEMENT_MODULATEUR" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index EP_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."EP_SOURCE_FK_IDX" ON "OSE"."ELEMENT_PEDAGOGIQUE" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_AGREMENT__UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_AGREMENT__UN_IDX" ON "OSE"."TBL_AGREMENT" ("TYPE_AGREMENT_ID", "INTERVENANT_ID", "STRUCTURE_ID", "TO_DELETE") 
  ;
--------------------------------------------------------
--  DDL for Index TPJS_TYPE_PIECE_JOINTE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TPJS_TYPE_PIECE_JOINTE_FK_IDX" ON "OSE"."TYPE_PIECE_JOINTE_STATUT" ("TYPE_PIECE_JOINTE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVR_SERVICE_REFERENTIEL_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVR_SERVICE_REFERENTIEL_FK_IDX" ON "OSE"."TBL_VALIDATION_REFERENTIEL" ("SERVICE_REFERENTIEL_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MEP_TYPE_HEURES_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MEP_TYPE_HEURES_FK_IDX" ON "OSE"."MISE_EN_PAIEMENT" ("TYPE_HEURES_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MSD_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MSD_HCFK_IDX" ON "OSE"."MODIFICATION_SERVICE_DU" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_HEURES_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_HEURES_HDFK_IDX" ON "OSE"."TYPE_HEURES" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_STRUCTURE_FKV1_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_STRUCTURE_FKV1_IDX" ON "OSE"."TBL_SERVICE" ("INTERVENANT_STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FRVH_VOLUME_HORAIRE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FRVH_VOLUME_HORAIRE_FK_IDX" ON "OSE"."FORMULE_RESULTAT_VH" ("VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CAMPAGNE_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CAMPAGNE_PK_IDX" ON "OSE"."CAMPAGNE_SAISIE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_ANNEE_FK_IDX" ON "OSE"."INTERVENANT" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AGREMENT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AGREMENT_HDFK_IDX" ON "OSE"."AGREMENT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index STRUCTURE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."STRUCTURE_HMFK_IDX" ON "OSE"."STRUCTURE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERSONNEL_CODE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PERSONNEL_CODE_UN" ON "OSE"."PERSONNEL" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index VALIDATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."VALIDATION_PK" ON "OSE"."VALIDATION" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_HEURES_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_HEURES_UN" ON "OSE"."TYPE_HEURES" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJF_PIECE_JOINTE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PJF_PIECE_JOINTE_FK_IDX" ON "OSE"."TBL_PIECE_JOINTE_FOURNIE" ("PIECE_JOINTE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CORPS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CORPS_PK" ON "OSE"."CORPS" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_AGR_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_AGR_INTERVENANT_FK_IDX" ON "OSE"."TBL_AGREMENT" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EFFECTIFS_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."EFFECTIFS_SOURCE_FK_IDX" ON "OSE"."EFFECTIFS" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index GROUPE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."GROUPE_HCFK_IDX" ON "OSE"."GROUPE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."AFFECTATION_PK" ON "OSE"."AFFECTATION" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_CLOTURE_REALISE_ANN_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_CLOTURE_REALISE_ANN_FK_IDX" ON "OSE"."TBL_CLOTURE_REALISE" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETABLISSEMENT_SOURCE_ID_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ETABLISSEMENT_SOURCE_ID_UN" ON "OSE"."ETABLISSEMENT" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index TVR_VALIDATION_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVR_VALIDATION_FK_IDX" ON "OSE"."TBL_VALIDATION_REFERENTIEL" ("VALIDATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_SERVICE_PK_IDX" ON "OSE"."TBL_SERVICE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index MMSD_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MMSD_HCFK_IDX" ON "OSE"."MOTIF_MODIFICATION_SERVICE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INDIC_MODIF_DOSSIER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."INDIC_MODIF_DOSSIER_PK" ON "OSE"."INDIC_MODIF_DOSSIER" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_PEDAGOGIQUE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ELEMENT_PEDAGOGIQUE_PK" ON "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CENTRE_COUT_HMFK_IDX" ON "OSE"."CENTRE_COUT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index GROUPE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."GROUPE_HMFK_IDX" ON "OSE"."GROUPE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_ENS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."VOLUME_HORAIRE_ENS_PK" ON "OSE"."VOLUME_HORAIRE_ENS" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERSONNEL_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PERSONNEL_STRUCTURE_FK_IDX" ON "OSE"."PERSONNEL" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FONCTION_REFERENTIEL_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FONCTION_REFERENTIEL_HDFK_IDX" ON "OSE"."FONCTION_REFERENTIEL" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index WE_PREC_WE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."WE_PREC_WE_FK_IDX" ON "OSE"."WF_ETAPE_DEP" ("ETAPE_PREC_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_STRUCTURE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_STRUCTURE_HMFK_IDX" ON "OSE"."TYPE_STRUCTURE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ANNEE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ANNEE_PK" ON "OSE"."ANNEE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVR_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TVR_PK_IDX" ON "OSE"."TBL_VALIDATION_REFERENTIEL" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PAIEMENT_INTERV_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PAIEMENT_INTERV_FK_IDX" ON "OSE"."TBL_PAIEMENT" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EP_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."EP_ANNEE_FK_IDX" ON "OSE"."ELEMENT_PEDAGOGIQUE" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_AGREMENT__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_AGREMENT__UN" ON "OSE"."TYPE_AGREMENT" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index UTILISATEUR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."UTILISATEUR_PK" ON "OSE"."UTILISATEUR" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_STRUCTURE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_STRUCTURE_PK" ON "OSE"."TYPE_STRUCTURE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index FICHIER_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FICHIER_HCFK_IDX" ON "OSE"."FICHIER" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_ROLE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AFFECTATION_ROLE_FK_IDX" ON "OSE"."AFFECTATION" ("ROLE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TAUX_HORAIRE_HETD_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TAUX_HORAIRE_HETD_HMFK_IDX" ON "OSE"."TAUX_HORAIRE_HETD" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETAPE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ETAPE_PK" ON "OSE"."ETAPE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index STATUT_INTERVENANT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."STATUT_INTERVENANT_HMFK_IDX" ON "OSE"."STATUT_INTERVENANT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_PEDAGOGIQUE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ELEMENT_PEDAGOGIQUE_HDFK_IDX" ON "OSE"."ELEMENT_PEDAGOGIQUE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_REF_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_REF_ANNEE_FK_IDX" ON "OSE"."TBL_SERVICE_REFERENTIEL" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TIS_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TIS_HCFK_IDX" ON "OSE"."TYPE_INTERVENTION_STRUCTURE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETAPE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETAPE_HMFK_IDX" ON "OSE"."ETAPE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOMAINE_FONCTIONNEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."DOMAINE_FONCTIONNEL_PK" ON "OSE"."DOMAINE_FONCTIONNEL" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERIODE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PERIODE_HMFK_IDX" ON "OSE"."PERIODE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERSONNEL_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PERSONNEL_HCFK_IDX" ON "OSE"."PERSONNEL" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETR_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETR_SOURCE_FK_IDX" ON "OSE"."ELEMENT_TAUX_REGIMES" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ADRESSE_INTERVENANT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ADRESSE_INTERVENANT_HMFK_IDX" ON "OSE"."ADRESSE_INTERVENANT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_VOLUME_HORAIRE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_VOLUME_HORAIRE_PK" ON "OSE"."TYPE_VOLUME_HORAIRE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index SERVICE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SERVICE_PK" ON "OSE"."SERVICE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index FICHIER_VALID_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FICHIER_VALID_FK_IDX" ON "OSE"."FICHIER" ("VALIDATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index WF_ETAPE_DEP__UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."WF_ETAPE_DEP__UN_IDX" ON "OSE"."WF_ETAPE_DEP" ("ETAPE_SUIV_ID", "ETAPE_PREC_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AFFECTATION_HCFK_IDX" ON "OSE"."AFFECTATION" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index STRUCTURES_STRUCTURES_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."STRUCTURES_STRUCTURES_FK_IDX" ON "OSE"."STRUCTURE" ("PARENTE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index RSV_TYPE_VOLUME_HORAIRE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."RSV_TYPE_VOLUME_HORAIRE_FK_IDX" ON "OSE"."REGLE_STRUCTURE_VALIDATION" ("TYPE_VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CP_ETAPE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CP_ETAPE_FK_IDX" ON "OSE"."CHEMIN_PEDAGOGIQUE" ("ETAPE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MSD_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MSD_HDFK_IDX" ON "OSE"."MODIFICATION_SERVICE_DU" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERSONNEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PERSONNEL_PK" ON "OSE"."PERSONNEL" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index SI_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."SI_SOURCE_FK_IDX" ON "OSE"."STATUT_INTERVENANT" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index WF_DB_ETAPE_DEP_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."WF_DB_ETAPE_DEP_FK_IDX" ON "OSE"."WF_DEP_BLOQUANTE" ("WF_ETAPE_DEP_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_MODULATEUR_STRUCTURE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_MODULATEUR_STRUCTURE_PK" ON "OSE"."TYPE_MODULATEUR_STRUCTURE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_PERIODE_EP_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_PERIODE_EP_FK_IDX" ON "OSE"."TBL_SERVICE" ("ELEMENT_PEDAGOGIQUE_PERIODE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CIVILITE_LIBELLE_COURT_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CIVILITE_LIBELLE_COURT_UN" ON "OSE"."CIVILITE" ("LIBELLE_COURT") 
  ;
--------------------------------------------------------
--  DDL for Index GTYPE_FORMATION_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."GTYPE_FORMATION_SOURCE_FK_IDX" ON "OSE"."GROUPE_TYPE_FORMATION" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_PIECE_JOINTE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_PIECE_JOINTE_PK" ON "OSE"."TYPE_PIECE_JOINTE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOSSIER_D_FK
--------------------------------------------------------

  CREATE INDEX "OSE"."DOSSIER_D_FK" ON "OSE"."DOSSIER" ("DEPT_NAISSANCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_WORKFLOW_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_WORKFLOW_ANNEE_FK_IDX" ON "OSE"."TBL_WORKFLOW" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERIODE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PERIODE_HDFK_IDX" ON "OSE"."PERIODE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_GROUPE_TYPE_FORMATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_GROUPE_TYPE_FORMATION_PK" ON "OSE"."MV_GROUPE_TYPE_FORMATION" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index EPS_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."EPS_FK_IDX" ON "OSE"."ELEMENT_PEDAGOGIQUE" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVR_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVR_STRUCTURE_FK_IDX" ON "OSE"."TBL_VALIDATION_REFERENTIEL" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_R_SRC_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."AFFECTATION_R_SRC_UN" ON "OSE"."AFFECTATION_RECHERCHE" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index STRUCTURE_SOURCE_ID_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."STRUCTURE_SOURCE_ID_UN" ON "OSE"."STRUCTURE" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index FONCTION_REFERENTIEL_SFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FONCTION_REFERENTIEL_SFK_IDX" ON "OSE"."FONCTION_REFERENTIEL" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EP_CODE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."EP_CODE_UN" ON "OSE"."ELEMENT_PEDAGOGIQUE" ("CODE", "HISTO_DESTRUCTION", "ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AGREMENT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AGREMENT_HMFK_IDX" ON "OSE"."AGREMENT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOTATION__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."DOTATION__UN" ON "OSE"."DOTATION" ("TYPE_RESSOURCE_ID", "ANNEE_ID", "ANNEE_CIVILE", "STRUCTURE_ID", "LIBELLE", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index WF_ETAPE_DEP_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."WF_ETAPE_DEP_PK_IDX" ON "OSE"."WF_ETAPE_DEP" ("ETAPE_PREC_ID", "ETAPE_SUIV_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_TINTERV_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_TINTERV_FK_IDX" ON "OSE"."TBL_SERVICE" ("TYPE_INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ROLE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ROLE_HMFK_IDX" ON "OSE"."ROLE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERIODE__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PERIODE__UN" ON "OSE"."PERIODE" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index CORPS_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CORPS_HMFK_IDX" ON "OSE"."CORPS" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_CLOTURE_REALISE__UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_CLOTURE_REALISE__UN_IDX" ON "OSE"."TBL_CLOTURE_REALISE" ("INTERVENANT_ID", "TO_DELETE") 
  ;
--------------------------------------------------------
--  DDL for Index CHEMIN_PEDAGO_SRC_ID_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CHEMIN_PEDAGO_SRC_ID_UN" ON "OSE"."CHEMIN_PEDAGOGIQUE" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index AGREMENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."AGREMENT_PK" ON "OSE"."AGREMENT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CCEP_EP_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CCEP_EP_FK_IDX" ON "OSE"."CENTRE_COUT_EP" ("ELEMENT_PEDAGOGIQUE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index STATUT_PRIVILEGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."STATUT_PRIVILEGE_PK" ON "OSE"."STATUT_PRIVILEGE" ("STATUT_ID", "PRIVILEGE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ROLE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ROLE_HDFK_IDX" ON "OSE"."ROLE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_DOTATION_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_DOTATION_HDFK_IDX" ON "OSE"."TYPE_DOTATION" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOSSIER_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DOSSIER_INTERVENANT_FK_IDX" ON "OSE"."DOSSIER" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EFFECTIFS__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."EFFECTIFS__UN" ON "OSE"."EFFECTIFS" ("SOURCE_CODE", "ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_SOURCE_FK_IDX" ON "OSE"."INTERVENANT" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PAIEMENT_FRS_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PAIEMENT_FRS_FK_IDX" ON "OSE"."TBL_PAIEMENT" ("FORMULE_RES_SERVICE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENTION_EP_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_INTERVENTION_EP_HCFK_IDX" ON "OSE"."TYPE_INTERVENTION_EP" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VVHR_VOLUME_HORAIRE_REF_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VVHR_VOLUME_HORAIRE_REF_FK_IDX" ON "OSE"."VALIDATION_VOL_HORAIRE_REF" ("VOLUME_HORAIRE_REF_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_TAUX_REGIMES_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ELEMENT_TAUX_REGIMES_HDFK_IDX" ON "OSE"."ELEMENT_TAUX_REGIMES" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PACKAGE_DEPS__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PACKAGE_DEPS__UN" ON "OSE"."PACKAGE_DEPS" ("P1", "P2") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_STATUT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_STATUT_FK_IDX" ON "OSE"."INTERVENANT" ("STATUT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SCENARIO_NOEUD__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SCENARIO_NOEUD__UN" ON "OSE"."SCENARIO_NOEUD" ("SCENARIO_ID", "NOEUD_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index TMS_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TMS_HMFK_IDX" ON "OSE"."TYPE_MODULATEUR_STRUCTURE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AI_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AI_SOURCE_FK_IDX" ON "OSE"."ADRESSE_INTERVENANT" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VALIDATION_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VALIDATION_STRUCTURE_FK_IDX" ON "OSE"."VALIDATION" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CORPS_SOURCE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CORPS_SOURCE_UN" ON "OSE"."CORPS" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index SCENARIO_LIEN__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SCENARIO_LIEN__UN" ON "OSE"."SCENARIO_LIEN" ("SCENARIO_ID", "LIEN_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."INTERVENANT_PK" ON "OSE"."INTERVENANT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PIECE_JOINTE_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PIECE_JOINTE_ANNEE_FK_IDX" ON "OSE"."TBL_PIECE_JOINTE" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJD_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_PJD_PK_IDX" ON "OSE"."TBL_PIECE_JOINTE_DEMANDE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TME_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TME_SOURCE_FK_IDX" ON "OSE"."TYPE_MODULATEUR_EP" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MEP_PERIODE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MEP_PERIODE_FK_IDX" ON "OSE"."MISE_EN_PAIEMENT" ("PERIODE_PAIEMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_LIEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_LIEN_PK" ON "OSE"."TBL_LIEN" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index MSD_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MSD_HMFK_IDX" ON "OSE"."MODIFICATION_SERVICE_DU" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MODULATEUR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MODULATEUR_PK" ON "OSE"."MODULATEUR" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_ELEMENT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_ELEMENT_FK_IDX" ON "OSE"."TBL_SERVICE" ("ELEMENT_PEDAGOGIQUE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_AGREMENT_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_AGREMENT_PK_IDX" ON "OSE"."TBL_AGREMENT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index RP_PRIVILEGE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."RP_PRIVILEGE_FK_IDX" ON "OSE"."ROLE_PRIVILEGE" ("PRIVILEGE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CORPS_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CORPS_SOURCE_FK_IDX" ON "OSE"."CORPS" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MOTIF_MODIFICATION_SERVIC_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MOTIF_MODIFICATION_SERVIC_UK1" ON "OSE"."MOTIF_MODIFICATION_SERVICE" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index INDIC_MODIF_DOSSIER_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INDIC_MODIF_DOSSIER_HMFK_IDX" ON "OSE"."INDIC_MODIF_DOSSIER" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ROLE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ROLE_HCFK_IDX" ON "OSE"."ROLE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_R_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AFFECTATION_R_SOURCE_FK_IDX" ON "OSE"."AFFECTATION_RECHERCHE" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PIECE_JOINTE_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_PIECE_JOINTE_PK_IDX" ON "OSE"."TBL_PIECE_JOINTE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETAT_VOLUME_HORAIRE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETAT_VOLUME_HORAIRE_HDFK_IDX" ON "OSE"."ETAT_VOLUME_HORAIRE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_MODULATEUR_EP__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_MODULATEUR_EP__UN" ON "OSE"."TYPE_MODULATEUR_EP" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index PRIVILEGE__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PRIVILEGE__UN" ON "OSE"."PRIVILEGE" ("CATEGORIE_ID", "CODE") 
  ;
--------------------------------------------------------
--  DDL for Index VHENS_TYPE_INTERVENTION_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VHENS_TYPE_INTERVENTION_FK_IDX" ON "OSE"."VOLUME_HORAIRE_ENS" ("TYPE_INTERVENTION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MODULATEUR_TM_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MODULATEUR_TM_FK_IDX" ON "OSE"."MODULATEUR" ("TYPE_MODULATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index GROUPE_TYPE_FORMATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."GROUPE_TYPE_FORMATION_PK" ON "OSE"."GROUPE_TYPE_FORMATION" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOTATION_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DOTATION_HMFK_IDX" ON "OSE"."DOTATION" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENTION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_INTERVENTION_PK" ON "OSE"."TYPE_INTERVENTION" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index VH_TYPE_VOLUME_HORAIRE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VH_TYPE_VOLUME_HORAIRE_FK_IDX" ON "OSE"."VOLUME_HORAIRE" ("TYPE_VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ST_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ST_STRUCTURE_FK_IDX" ON "OSE"."STRUCTURE" ("TYPE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AGREMENT__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."AGREMENT__UN" ON "OSE"."AGREMENT" ("TYPE_AGREMENT_ID", "INTERVENANT_ID", "STRUCTURE_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index FRS_SERVICE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FRS_SERVICE_FK_IDX" ON "OSE"."FORMULE_RESULTAT_SERVICE" ("SERVICE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOTATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."DOTATION_PK" ON "OSE"."DOTATION" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJF_FICHIER_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PJF_FICHIER_FK_IDX" ON "OSE"."TBL_PIECE_JOINTE_FOURNIE" ("FICHIER_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CATEGORIE_PRIVILEGE__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CATEGORIE_PRIVILEGE__UN" ON "OSE"."CATEGORIE_PRIVILEGE" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_WORKFLOW_SFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_WORKFLOW_SFK_IDX" ON "OSE"."TBL_WORKFLOW" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EFFECTIFS_FK
--------------------------------------------------------

  CREATE INDEX "OSE"."EFFECTIFS_FK" ON "OSE"."EFFECTIFS" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_RESSOURCE_FC
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_RESSOURCE_FC" ON "OSE"."TYPE_RESSOURCE" ("FC") 
  ;
--------------------------------------------------------
--  DDL for Index ETAT_VOLUME_HORAIRE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETAT_VOLUME_HORAIRE_HCFK_IDX" ON "OSE"."ETAT_VOLUME_HORAIRE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_ETAPE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_ETAPE_PK" ON "OSE"."MV_ETAPE" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index CONTRAT_NUMERO_AVENANT_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CONTRAT_NUMERO_AVENANT_UN" ON "OSE"."CONTRAT" ("INTERVENANT_ID", "STRUCTURE_ID", "NUMERO_AVENANT", "VALIDATION_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_AGREMENT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_AGREMENT_HDFK_IDX" ON "OSE"."TYPE_AGREMENT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PIECE_JOINTE_FICHIER_FFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PIECE_JOINTE_FICHIER_FFK_IDX" ON "OSE"."PIECE_JOINTE_FICHIER" ("FICHIER_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_STRUCTURE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_STRUCTURE_HCFK_IDX" ON "OSE"."TYPE_STRUCTURE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index STRUCTURE_ETABLISSEMENT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."STRUCTURE_ETABLISSEMENT_FK_IDX" ON "OSE"."STRUCTURE" ("ETABLISSEMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index GRADE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."GRADE_HDFK_IDX" ON "OSE"."GRADE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_PAYS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_PAYS_PK" ON "OSE"."MV_PAYS" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index AII_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AII_FK_IDX" ON "OSE"."ADRESSE_INTERVENANT" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ROLE_PERIMETRE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ROLE_PERIMETRE_FK_IDX" ON "OSE"."ROLE" ("PERIMETRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_SAISIE_UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_SERVICE_SAISIE_UN_IDX" ON "OSE"."TBL_SERVICE_SAISIE" ("INTERVENANT_ID", "TO_DELETE") 
  ;
--------------------------------------------------------
--  DDL for Index FICHIER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."FICHIER_PK" ON "OSE"."FICHIER" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index VALIDATION_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VALIDATION_HMFK_IDX" ON "OSE"."VALIDATION" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PAYS_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PAYS_HCFK_IDX" ON "OSE"."PAYS" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_ANNEE_FK_IDX" ON "OSE"."TBL_SERVICE" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_MODULATEUR_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ELEMENT_MODULATEUR_HCFK_IDX" ON "OSE"."ELEMENT_MODULATEUR" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AFFECTATION_STRUCTURE_FK_IDX" ON "OSE"."AFFECTATION" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SRFR_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."SRFR_FK_IDX" ON "OSE"."SERVICE_REFERENTIEL" ("FONCTION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ROLE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ROLE_PK" ON "OSE"."ROLE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETAPE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETAPE_HCFK_IDX" ON "OSE"."ETAPE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_R_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AFFECTATION_R_STRUCTURE_FK_IDX" ON "OSE"."AFFECTATION_RECHERCHE" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_AGREMENT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_AGREMENT_HCFK_IDX" ON "OSE"."TYPE_AGREMENT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index WF_ETAPE_DEP_PK1_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."WF_ETAPE_DEP_PK1_IDX" ON "OSE"."WF_ETAPE_DEP" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_FORMATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_FORMATION_PK" ON "OSE"."TYPE_FORMATION" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_TVH_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_TVH_FK_IDX" ON "OSE"."TBL_SERVICE" ("TYPE_VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJ_TPJ_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PJ_TPJ_FK_IDX" ON "OSE"."TBL_PIECE_JOINTE" ("TYPE_PIECE_JOINTE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_LIEN_LIEN_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_LIEN_LIEN_IDX" ON "OSE"."TBL_LIEN" ("LIEN_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PAIEMENT_PERIODE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PAIEMENT_PERIODE_FK_IDX" ON "OSE"."TBL_PAIEMENT" ("PERIODE_PAIEMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERSONNEL_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PERSONNEL_HMFK_IDX" ON "OSE"."PERSONNEL" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_DOSSIER_DOSSIER_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_DOSSIER_DOSSIER_FK_IDX" ON "OSE"."TBL_DOSSIER" ("DOSSIER_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJD_UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_PJD_UN_IDX" ON "OSE"."TBL_PIECE_JOINTE_DEMANDE" ("TYPE_PIECE_JOINTE_ID", "INTERVENANT_ID", "TO_DELETE") 
  ;
--------------------------------------------------------
--  DDL for Index EP_ETAPE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."EP_ETAPE_FK_IDX" ON "OSE"."ELEMENT_PEDAGOGIQUE" ("ETAPE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_STRUCTURE_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CENTRE_COUT_STRUCTURE_PK_IDX" ON "OSE"."CENTRE_COUT_STRUCTURE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index HSM_UTILISATEUR_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."HSM_UTILISATEUR_FK_IDX" ON "OSE"."HISTO_INTERVENANT_SERVICE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CCS_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CCS_STRUCTURE_FK_IDX" ON "OSE"."CENTRE_COUT_STRUCTURE" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_EP_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CENTRE_COUT_EP_HDFK_IDX" ON "OSE"."CENTRE_COUT_EP" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index WE_SUIV_WE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."WE_SUIV_WE_FK_IDX" ON "OSE"."WF_ETAPE_DEP" ("ETAPE_SUIV_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FRVHR_VHR_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FRVHR_VHR_FK_IDX" ON "OSE"."FORMULE_RESULTAT_VH_REF" ("VOLUME_HORAIRE_REF_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJF_TPJ_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PJF_TPJ_FK_IDX" ON "OSE"."TBL_PIECE_JOINTE_FOURNIE" ("TYPE_PIECE_JOINTE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_RESSOURCE_REF
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_RESSOURCE_REF" ON "OSE"."TYPE_RESSOURCE" ("REFERENTIEL") 
  ;
--------------------------------------------------------
--  DDL for Index DISCIPLINE_SOURCE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."DISCIPLINE_SOURCE_UN" ON "OSE"."DISCIPLINE" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index PERSONNEL_SUPANN_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PERSONNEL_SUPANN_UN" ON "OSE"."PERSONNEL" ("SUPANN_EMP_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FONCTION_REFERENTIEL_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FONCTION_REFERENTIEL_HCFK_IDX" ON "OSE"."FONCTION_REFERENTIEL" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MESSAGES__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MESSAGES__UN" ON "OSE"."MESSAGE" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_ENS_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VOLUME_HORAIRE_ENS_HDFK_IDX" ON "OSE"."VOLUME_HORAIRE_ENS" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENANT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_INTERVENANT_HDFK_IDX" ON "OSE"."TYPE_INTERVENANT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_TYPE_INT_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_TYPE_INT_IDX" ON "OSE"."TBL_SERVICE" ("TYPE_INTERVENANT_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index PARAMETRE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PARAMETRE_HDFK_IDX" ON "OSE"."PARAMETRE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FRSR_SR_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FRSR_SR_FK_IDX" ON "OSE"."FORMULE_RESULTAT_SERVICE_REF" ("SERVICE_REFERENTIEL_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FONCTION_REFERENTIEL_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FONCTION_REFERENTIEL_HMFK_IDX" ON "OSE"."FONCTION_REFERENTIEL" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_RESSOURCE_FI
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_RESSOURCE_FI" ON "OSE"."TYPE_RESSOURCE" ("FI") 
  ;
--------------------------------------------------------
--  DDL for Index MODULATEUR__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MODULATEUR__UN" ON "OSE"."MODULATEUR" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index FORMULE_RESULTAT_SERVICE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."FORMULE_RESULTAT_SERVICE_PK" ON "OSE"."FORMULE_RESULTAT_SERVICE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CHEMIN_PEDAGOGIQUE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CHEMIN_PEDAGOGIQUE_HCFK_IDX" ON "OSE"."CHEMIN_PEDAGOGIQUE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EFFECTIFS_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."EFFECTIFS_HDFK_IDX" ON "OSE"."EFFECTIFS" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TMS_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TMS_STRUCTURE_FK_IDX" ON "OSE"."TYPE_MODULATEUR_STRUCTURE" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CONTRAT_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CONTRAT_STRUCTURE_FK_IDX" ON "OSE"."CONTRAT" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVR_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVR_ANNEE_FK_IDX" ON "OSE"."TBL_VALIDATION_REFERENTIEL" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERIODE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PERIODE_HCFK_IDX" ON "OSE"."PERIODE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_TAUX_REGIMES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ELEMENT_TAUX_REGIMES_PK" ON "OSE"."ELEMENT_TAUX_REGIMES" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index MOTIF_NON_PAIEMENT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MOTIF_NON_PAIEMENT_HCFK_IDX" ON "OSE"."MOTIF_NON_PAIEMENT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index STAT_PRIV_PRIVILEGE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."STAT_PRIV_PRIVILEGE_FK_IDX" ON "OSE"."STATUT_PRIVILEGE" ("PRIVILEGE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index GROUPE_TI_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."GROUPE_TI_FK_IDX" ON "OSE"."GROUPE" ("TYPE_INTERVENTION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VHMNP_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VHMNP_FK_IDX" ON "OSE"."VOLUME_HORAIRE" ("MOTIF_NON_PAIEMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index GRADE_CORPS_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."GRADE_CORPS_FK_IDX" ON "OSE"."GRADE" ("CORPS_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VH_SERVICES_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VH_SERVICES_FK_IDX" ON "OSE"."VOLUME_HORAIRE" ("SERVICE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_SOURCE__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."INTERVENANT_SOURCE__UN" ON "OSE"."INTERVENANT" ("SOURCE_CODE", "ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_AGR_AGREMENT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_AGR_AGREMENT_FK_IDX" ON "OSE"."TBL_AGREMENT" ("AGREMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENTION_EP_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_INTERVENTION_EP_HDFK_IDX" ON "OSE"."TYPE_INTERVENTION_EP" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index STRUCTURE_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."STRUCTURE_SOURCE_FK_IDX" ON "OSE"."STRUCTURE" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PARAMETRE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PARAMETRE_HMFK_IDX" ON "OSE"."PARAMETRE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_HEURES_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_HEURES_HMFK_IDX" ON "OSE"."TYPE_HEURES" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TIEP_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TIEP_SOURCE_FK_IDX" ON "OSE"."TYPE_INTERVENTION_EP" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_REF_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VOLUME_HORAIRE_REF_HDFK_IDX" ON "OSE"."VOLUME_HORAIRE_REF" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CPEP_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CPEP_FK_IDX" ON "OSE"."CHEMIN_PEDAGOGIQUE" ("ELEMENT_PEDAGOGIQUE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE__UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_SERVICE__UN_IDX" ON "OSE"."TBL_SERVICE" ("SERVICE_ID", "TYPE_VOLUME_HORAIRE_ID", "TO_DELETE") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_ACTIVITE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CENTRE_COUT_ACTIVITE_FK_IDX" ON "OSE"."CENTRE_COUT" ("ACTIVITE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TPJS_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TPJS_HDFK_IDX" ON "OSE"."TYPE_PIECE_JOINTE_STATUT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DF_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DF_SOURCE_FK_IDX" ON "OSE"."DOMAINE_FONCTIONNEL" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index NOEUD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."NOEUD_PK" ON "OSE"."NOEUD" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index NOTIF_INDICATEUR_IFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."NOTIF_INDICATEUR_IFK_IDX" ON "OSE"."NOTIFICATION_INDICATEUR" ("INDICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index UTILISATEUR_USERNAME_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."UTILISATEUR_USERNAME_UN" ON "OSE"."UTILISATEUR" ("USERNAME") 
  ;
--------------------------------------------------------
--  DDL for Index WF_DEPS_BLOQUANTES_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."WF_DEPS_BLOQUANTES_PK_IDX" ON "OSE"."WF_DEP_BLOQUANTE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index UNICAEN_CORRESP_STR_CC_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."UNICAEN_CORRESP_STR_CC_PK" ON "OSE"."UNICAEN_CORRESP_STRUCTURE_CC" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CC_ACTIVITE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CC_ACTIVITE_HDFK_IDX" ON "OSE"."CC_ACTIVITE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETR_ELEMENT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETR_ELEMENT_FK_IDX" ON "OSE"."ELEMENT_TAUX_REGIMES" ("ELEMENT_PEDAGOGIQUE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TPJS_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TPJS_HCFK_IDX" ON "OSE"."TYPE_PIECE_JOINTE_STATUT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_SERVICE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_SERVICE_FK_IDX" ON "OSE"."TBL_SERVICE" ("SERVICE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_MODULATEUR_EP_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_MODULATEUR_EP_HDFK_IDX" ON "OSE"."TYPE_MODULATEUR_EP" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FORMULE_RESULTAT__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."FORMULE_RESULTAT__UN" ON "OSE"."FORMULE_RESULTAT" ("INTERVENANT_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_HEURES_TYPE_HEURES_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_HEURES_TYPE_HEURES_FK_IDX" ON "OSE"."TYPE_HEURES" ("TYPE_HEURES_ELEMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SERVICE_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."SERVICE_INTERVENANT_FK_IDX" ON "OSE"."SERVICE" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index STRUCTURE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."STRUCTURE_PK" ON "OSE"."STRUCTURE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_MODULATEUR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_MODULATEUR_PK" ON "OSE"."TYPE_MODULATEUR" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_INTERVENANT_FK_IDX" ON "OSE"."TBL_SERVICE" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EFFECTIFS_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."EFFECTIFS_HCFK_IDX" ON "OSE"."EFFECTIFS" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CONTRAT_FICHIER_FFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CONTRAT_FICHIER_FFK_IDX" ON "OSE"."CONTRAT_FICHIER" ("FICHIER_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_DMLIQ_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_DMLIQ_ANNEE_FK_IDX" ON "OSE"."TBL_DMEP_LIQUIDATION" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_RECHERCHE_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_RECHERCHE_IDX" ON "OSE"."INTERVENANT" ("CRITERE_RECHERCHE") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_SOURCE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."AFFECTATION_SOURCE_UN" ON "OSE"."AFFECTATION" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index VVH_VOLUME_HORAIRE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VVH_VOLUME_HORAIRE_FK_IDX" ON "OSE"."VALIDATION_VOL_HORAIRE" ("VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_NOM_PATRO_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_NOM_PATRO_IDX" ON "OSE"."INTERVENANT" ("NOM_PATRONYMIQUE") 
  ;
--------------------------------------------------------
--  DDL for Index MV_INTERVENANT_RECHERCHE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_INTERVENANT_RECHERCHE_PK" ON "OSE"."MV_INTERVENANT_RECHERCHE" ("SOURCE_CODE", "ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index GROUPE_TYPE_FORMATION_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."GROUPE_TYPE_FORMATION_HMFK_IDX" ON "OSE"."GROUPE_TYPE_FORMATION" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index STATUT_INTERVENANT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."STATUT_INTERVENANT_PK" ON "OSE"."STATUT_INTERVENANT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_PEDAGOGIQUE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ELEMENT_PEDAGOGIQUE_HCFK_IDX" ON "OSE"."ELEMENT_PEDAGOGIQUE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVR_VOLUME_HORAIRE_REF_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVR_VOLUME_HORAIRE_REF_FK_IDX" ON "OSE"."TBL_VALIDATION_REFERENTIEL" ("VOLUME_HORAIRE_REF_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJ_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PJ_INTERVENANT_FK_IDX" ON "OSE"."TBL_PIECE_JOINTE" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PJ_TYPE_PIECE_JOINTE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PJ_TYPE_PIECE_JOINTE_FK_IDX" ON "OSE"."PIECE_JOINTE" ("TYPE_PIECE_JOINTE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index NOTIFICATION_INDICATEUR__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."NOTIFICATION_INDICATEUR__UN" ON "OSE"."NOTIFICATION_INDICATEUR" ("INDICATEUR_ID", "AFFECTATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_DOSSIER_VALIDATION_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_DOSSIER_VALIDATION_FK_IDX" ON "OSE"."TBL_DOSSIER" ("VALIDATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CCEP_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CCEP_SOURCE_FK_IDX" ON "OSE"."CENTRE_COUT_EP" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_CONTRAT_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_CONTRAT_INTERVENANT_FK_IDX" ON "OSE"."TBL_CONTRAT" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ROLE_CODE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ROLE_CODE_UN" ON "OSE"."ROLE" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_REF_TVH_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_REF_TVH_FK_IDX" ON "OSE"."TBL_SERVICE_REFERENTIEL" ("TYPE_VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SERVICE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."SERVICE_HCFK_IDX" ON "OSE"."SERVICE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENANT_CODE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_INTERVENANT_CODE_UN" ON "OSE"."TYPE_INTERVENANT" ("CODE") 
  ;
--------------------------------------------------------
--  DDL for Index HISTO_INTERVENANT_SERVICE__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."HISTO_INTERVENANT_SERVICE__UN" ON "OSE"."HISTO_INTERVENANT_SERVICE" ("INTERVENANT_ID", "TYPE_VOLUME_HORAIRE_ID", "REFERENTIEL") 
  ;
--------------------------------------------------------
--  DDL for Index TVE_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVE_STRUCTURE_FK_IDX" ON "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJD_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PJD_ANNEE_FK_IDX" ON "OSE"."TBL_PIECE_JOINTE_DEMANDE" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PRIVILEGE_CATEGORIE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PRIVILEGE_CATEGORIE_FK_IDX" ON "OSE"."PRIVILEGE" ("CATEGORIE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENTION_EP_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_INTERVENTION_EP_HMFK_IDX" ON "OSE"."TYPE_INTERVENTION_EP" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TAUX_HORAIRE_HETD_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TAUX_HORAIRE_HETD_HDFK_IDX" ON "OSE"."TAUX_HORAIRE_HETD" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETAT_VOLUME_HORAIRE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ETAT_VOLUME_HORAIRE_PK" ON "OSE"."ETAT_VOLUME_HORAIRE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index PARAMETRE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PARAMETRE_PK" ON "OSE"."PARAMETRE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_CONTRAT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VOLUME_HORAIRE_CONTRAT_FK_IDX" ON "OSE"."VOLUME_HORAIRE" ("CONTRAT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FORMULE_RESULTAT_VH_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."FORMULE_RESULTAT_VH_PK" ON "OSE"."FORMULE_RESULTAT_VH" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index RSV_TYPE_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."RSV_TYPE_INTERVENANT_FK_IDX" ON "OSE"."REGLE_STRUCTURE_VALIDATION" ("TYPE_INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_HMFK_IDX" ON "OSE"."INTERVENANT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_TVH_IDX_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_TVH_IDX_IDX" ON "OSE"."TBL_SERVICE" ("TYPE_VOLUME_HORAIRE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index ETAPE_CODE_UN
--------------------------------------------------------

  CREATE INDEX "OSE"."ETAPE_CODE_UN" ON "OSE"."ETAPE" ("CODE", "ANNEE_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_FORMATION_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_FORMATION_SOURCE_FK_IDX" ON "OSE"."TYPE_FORMATION" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_DOMAINE_FONCTIONNEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_DOMAINE_FONCTIONNEL_PK" ON "OSE"."MV_DOMAINE_FONCTIONNEL" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_RESSOURCE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_RESSOURCE_PK" ON "OSE"."TYPE_RESSOURCE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJD_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PJD_INTERVENANT_FK_IDX" ON "OSE"."TBL_PIECE_JOINTE_DEMANDE" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_VALIDATION_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_VALIDATION_HCFK_IDX" ON "OSE"."TYPE_VALIDATION" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_MODULATEUR_EP_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_MODULATEUR_EP_HMFK_IDX" ON "OSE"."TYPE_MODULATEUR_EP" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ADRESSE_INTERVENANT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ADRESSE_INTERVENANT_HCFK_IDX" ON "OSE"."ADRESSE_INTERVENANT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_AGREMENT_STATUT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_AGREMENT_STATUT_HDFK_IDX" ON "OSE"."TYPE_AGREMENT_STATUT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_PIECE_JOINTE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_PIECE_JOINTE_HCFK_IDX" ON "OSE"."TYPE_PIECE_JOINTE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SCENARIO_NOEUD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SCENARIO_NOEUD_PK" ON "OSE"."SCENARIO_NOEUD" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CC_ACTIVITE_FI
--------------------------------------------------------

  CREATE INDEX "OSE"."CC_ACTIVITE_FI" ON "OSE"."CC_ACTIVITE" ("FI") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AFFECTATION_HMFK_IDX" ON "OSE"."AFFECTATION" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_VALIDATION_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_VALIDATION_HMFK_IDX" ON "OSE"."TYPE_VALIDATION" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_SAISIE__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."INTERVENANT_SAISIE__UN" ON "OSE"."INTERVENANT_SAISIE" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_VOLUME_HORAIRE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_VOLUME_HORAIRE_HMFK_IDX" ON "OSE"."TYPE_VOLUME_HORAIRE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PAYS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PAYS_PK" ON "OSE"."PAYS" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_ADRESSE_STRUCTURE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_ADRESSE_STRUCTURE_PK" ON "OSE"."MV_ADRESSE_STRUCTURE" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index DOSSIER_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DOSSIER_HMFK_IDX" ON "OSE"."DOSSIER" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_HDFK_IDX" ON "OSE"."INTERVENANT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_HCFK_IDX" ON "OSE"."INTERVENANT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_DMEP_LIQUIDATION_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_DMEP_LIQUIDATION_PK_IDX" ON "OSE"."TBL_DMEP_LIQUIDATION" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index VHR_TYPE_VOLUME_HORAIRE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VHR_TYPE_VOLUME_HORAIRE_FK_IDX" ON "OSE"."VOLUME_HORAIRE_REF" ("TYPE_VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PRIVILEGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PRIVILEGE_PK" ON "OSE"."PRIVILEGE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index FRS_FORMULE_RESULTAT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FRS_FORMULE_RESULTAT_FK_IDX" ON "OSE"."FORMULE_RESULTAT_SERVICE" ("FORMULE_RESULTAT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CATEGORIE_PRIVILEGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CATEGORIE_PRIVILEGE_PK" ON "OSE"."CATEGORIE_PRIVILEGE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_GRADE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_GRADE_FK_IDX" ON "OSE"."INTERVENANT" ("GRADE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETAT_VOLUME_HORAIRE__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ETAT_VOLUME_HORAIRE__UN" ON "OSE"."ETAT_VOLUME_HORAIRE" ("CODE", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index CORPS_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CORPS_HCFK_IDX" ON "OSE"."CORPS" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PAYS_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PAYS_HMFK_IDX" ON "OSE"."PAYS" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_DOSSIER_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_DOSSIER_PK_IDX" ON "OSE"."TBL_DOSSIER" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_STRUCTURE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CENTRE_COUT_STRUCTURE_HMFK_IDX" ON "OSE"."CENTRE_COUT_STRUCTURE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MODULATEUR_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MODULATEUR_HDFK_IDX" ON "OSE"."MODULATEUR" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MOTIF_NON_PAIEMENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MOTIF_NON_PAIEMENT_PK" ON "OSE"."MOTIF_NON_PAIEMENT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_CENTRE_COUT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CENTRE_COUT_CENTRE_COUT_FK_IDX" ON "OSE"."CENTRE_COUT" ("PARENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_DOTATION_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_DOTATION_SOURCE_FK_IDX" ON "OSE"."TYPE_DOTATION" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_AGREMENT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_AGREMENT_HMFK_IDX" ON "OSE"."TYPE_AGREMENT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MODULATEUR_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MODULATEUR_HMFK_IDX" ON "OSE"."MODULATEUR" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VVHR_VALIDATION_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VVHR_VALIDATION_FK_IDX" ON "OSE"."VALIDATION_VOL_HORAIRE_REF" ("VALIDATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENTION_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_INTERVENTION_HDFK_IDX" ON "OSE"."TYPE_INTERVENTION" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANTS_CIVILITES_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANTS_CIVILITES_FK_IDX" ON "OSE"."INTERVENANT" ("CIVILITE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_TAUX_REGIMES_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ELEMENT_TAUX_REGIMES_HMFK_IDX" ON "OSE"."ELEMENT_TAUX_REGIMES" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CCEP_CENTRE_COUT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CCEP_CENTRE_COUT_FK_IDX" ON "OSE"."CENTRE_COUT_EP" ("CENTRE_COUT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_CONTRAT_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_CONTRAT_ANNEE_FK_IDX" ON "OSE"."TBL_CONTRAT" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CENTRE_COUT_HDFK_IDX" ON "OSE"."CENTRE_COUT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ADRESSE_INTERVENANT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ADRESSE_INTERVENANT_HDFK_IDX" ON "OSE"."ADRESSE_INTERVENANT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENANT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_INTERVENANT_HMFK_IDX" ON "OSE"."TYPE_INTERVENANT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETAPE_TYPE_FORMATION_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETAPE_TYPE_FORMATION_FK_IDX" ON "OSE"."ETAPE" ("TYPE_FORMATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SCENARIO_NOEUD_SRC_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SCENARIO_NOEUD_SRC_UN" ON "OSE"."SCENARIO_NOEUD" ("SOURCE_CODE", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_LIEN_NOEUD_SUP_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_LIEN_NOEUD_SUP_IDX" ON "OSE"."TBL_LIEN" ("NOEUD_SUP_ID") 
  ;
--------------------------------------------------------
--  DDL for Index GROUPE_TYPE_FORMATION_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."GROUPE_TYPE_FORMATION_HDFK_IDX" ON "OSE"."GROUPE_TYPE_FORMATION" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_RESSOURCE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_RESSOURCE_HDFK_IDX" ON "OSE"."TYPE_RESSOURCE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MEP_FR_SERVICE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MEP_FR_SERVICE_FK_IDX" ON "OSE"."MISE_EN_PAIEMENT" ("FORMULE_RES_SERVICE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FORMULE_RESULTAT_VH_REF_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."FORMULE_RESULTAT_VH_REF_PK" ON "OSE"."FORMULE_RESULTAT_VH_REF" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_VOLUME_HORAIRE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_VOLUME_HORAIRE_HCFK_IDX" ON "OSE"."TYPE_VOLUME_HORAIRE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CONTRAT_FICHIER_FK
--------------------------------------------------------

  CREATE INDEX "OSE"."CONTRAT_FICHIER_FK" ON "OSE"."CONTRAT_FICHIER" ("CONTRAT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VHIT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VHIT_FK_IDX" ON "OSE"."VOLUME_HORAIRE" ("TYPE_INTERVENTION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOSSIER_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DOSSIER_HDFK_IDX" ON "OSE"."DOSSIER" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_TAUX_REGIMES__UNV1
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ELEMENT_TAUX_REGIMES__UNV1" ON "OSE"."ELEMENT_TAUX_REGIMES" ("ELEMENT_PEDAGOGIQUE_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index INDIC_MODIF_DOSSIER_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INDIC_MODIF_DOSSIER_HDFK_IDX" ON "OSE"."INDIC_MODIF_DOSSIER" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_VOLUME_HORAIRE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_VOLUME_HORAIRE_HDFK_IDX" ON "OSE"."TYPE_VOLUME_HORAIRE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MISE_EN_PAIEMENT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MISE_EN_PAIEMENT_HMFK_IDX" ON "OSE"."MISE_EN_PAIEMENT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FRVHR_FORMULE_RESULTAT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FRVHR_FORMULE_RESULTAT_FK_IDX" ON "OSE"."FORMULE_RESULTAT_VH_REF" ("FORMULE_RESULTAT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PIECE_JOINTE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PIECE_JOINTE_PK" ON "OSE"."PIECE_JOINTE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_EP__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CENTRE_COUT_EP__UN" ON "OSE"."CENTRE_COUT_EP" ("CENTRE_COUT_ID", "ELEMENT_PEDAGOGIQUE_ID", "TYPE_HEURES_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index VALIDATION_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VALIDATION_INTERVENANT_FK_IDX" ON "OSE"."VALIDATION" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PIECE_JOINTE_FICHIER_PJFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PIECE_JOINTE_FICHIER_PJFK_IDX" ON "OSE"."PIECE_JOINTE_FICHIER" ("PIECE_JOINTE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_EP_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CENTRE_COUT_EP_HMFK_IDX" ON "OSE"."CENTRE_COUT_EP" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_DMEP_LIQUIDATION__UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_DMEP_LIQUIDATION__UN_IDX" ON "OSE"."TBL_DMEP_LIQUIDATION" ("ANNEE_ID", "TYPE_RESSOURCE_ID", "STRUCTURE_ID", "TO_DELETE") 
  ;
--------------------------------------------------------
--  DDL for Index CHEMIN_PEDAGOGIQUE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CHEMIN_PEDAGOGIQUE_PK" ON "OSE"."CHEMIN_PEDAGOGIQUE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index ADRESSE_INTERVENANT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ADRESSE_INTERVENANT_PK" ON "OSE"."ADRESSE_INTERVENANT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PAIEMENT_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PAIEMENT_ANNEE_FK_IDX" ON "OSE"."TBL_PAIEMENT" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SEUIL_CHARGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SEUIL_CHARGE_PK" ON "OSE"."SEUIL_CHARGE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_ELEMENT_PEDAGOGIQUE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_ELEMENT_PEDAGOGIQUE_PK" ON "OSE"."MV_ELEMENT_PEDAGOGIQUE" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index SERVICE_REFERENTIEL_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."SERVICE_REFERENTIEL_HMFK_IDX" ON "OSE"."SERVICE_REFERENTIEL" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index WF_DB_TBL_WORKFLOW_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."WF_DB_TBL_WORKFLOW_FK_IDX" ON "OSE"."WF_DEP_BLOQUANTE" ("TBL_WORKFLOW_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_REFERENTIEL_UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_SERVICE_REFERENTIEL_UN_IDX" ON "OSE"."TBL_SERVICE_REFERENTIEL" ("INTERVENANT_ID", "TYPE_VOLUME_HORAIRE_ID", "STRUCTURE_ID", "TO_DELETE") 
  ;
--------------------------------------------------------
--  DDL for Index SCENARIO_NOEUD_SEUIL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SCENARIO_NOEUD_SEUIL_PK" ON "OSE"."SCENARIO_NOEUD_SEUIL" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index EM_ELEMENT_PEDAGOGIQUE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."EM_ELEMENT_PEDAGOGIQUE_FK_IDX" ON "OSE"."ELEMENT_MODULATEUR" ("ELEMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOSSIER_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DOSSIER_HCFK_IDX" ON "OSE"."DOSSIER" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TIS_ANNEE_DEBUT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TIS_ANNEE_DEBUT_FK_IDX" ON "OSE"."TYPE_INTERVENTION_STRUCTURE" ("ANNEE_DEBUT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_AGREMENT_STATUT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_AGREMENT_STATUT_HCFK_IDX" ON "OSE"."TYPE_AGREMENT_STATUT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index STATUT_INTERVENANT_TYPE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."STATUT_INTERVENANT_TYPE_FK_IDX" ON "OSE"."STATUT_INTERVENANT" ("TYPE_INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index WE_TYPE_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."WE_TYPE_INTERVENANT_FK_IDX" ON "OSE"."WF_ETAPE_DEP" ("TYPE_INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJF_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PJF_INTERVENANT_FK_IDX" ON "OSE"."TBL_PIECE_JOINTE_FOURNIE" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CC_ACTIVITE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CC_ACTIVITE_HMFK_IDX" ON "OSE"."CC_ACTIVITE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_AGREMENT_STATUT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_AGREMENT_STATUT_PK" ON "OSE"."TYPE_AGREMENT_STATUT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVR_TYPE_VOLUME_HORAIRE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVR_TYPE_VOLUME_HORAIRE_FK_IDX" ON "OSE"."TBL_VALIDATION_REFERENTIEL" ("TYPE_VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERSONNEL_SOURCE__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PERSONNEL_SOURCE__UN" ON "OSE"."PERSONNEL" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_CONTRAT_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_CONTRAT_STRUCTURE_FK_IDX" ON "OSE"."TBL_CONTRAT" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CC_ACTIVITE_REF
--------------------------------------------------------

  CREATE INDEX "OSE"."CC_ACTIVITE_REF" ON "OSE"."CC_ACTIVITE" ("REFERENTIEL") 
  ;
--------------------------------------------------------
--  DDL for Index PERIMETRE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PERIMETRE_PK" ON "OSE"."PERIMETRE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_FORMATION_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_FORMATION_HDFK_IDX" ON "OSE"."TYPE_FORMATION" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SCENARIO_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SCENARIO_PK" ON "OSE"."SCENARIO" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index RSV_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."RSV_PK_IDX" ON "OSE"."REGLE_STRUCTURE_VALIDATION" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_AGR_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_AGR_ANNEE_FK_IDX" ON "OSE"."TBL_AGREMENT" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MISE_EN_PAIEMENT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MISE_EN_PAIEMENT_HDFK_IDX" ON "OSE"."MISE_EN_PAIEMENT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TMS_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TMS_HDFK_IDX" ON "OSE"."TYPE_MODULATEUR_STRUCTURE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_PERSONNEL_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AFFECTATION_PERSONNEL_FK_IDX" ON "OSE"."AFFECTATION" ("PERSONNEL_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_REF_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."VOLUME_HORAIRE_REF_PK" ON "OSE"."VOLUME_HORAIRE_REF" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index MISE_EN_PAIEMENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MISE_EN_PAIEMENT_PK" ON "OSE"."MISE_EN_PAIEMENT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETABLISSEMENT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETABLISSEMENT_HDFK_IDX" ON "OSE"."ETABLISSEMENT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SERVICE_REFERENTIEL_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."SERVICE_REFERENTIEL_HCFK_IDX" ON "OSE"."SERVICE_REFERENTIEL" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PARAMETRE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PARAMETRE_HCFK_IDX" ON "OSE"."PARAMETRE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_MODULATEUR_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ELEMENT_MODULATEUR_HDFK_IDX" ON "OSE"."ELEMENT_MODULATEUR" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_DOSSIER__UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_DOSSIER__UN_IDX" ON "OSE"."TBL_DOSSIER" ("INTERVENANT_ID", "TO_DELETE") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_MODULATEUR_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_MODULATEUR_HMFK_IDX" ON "OSE"."TYPE_MODULATEUR" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_STRUCTURE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_STRUCTURE_PK" ON "OSE"."MV_STRUCTURE" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_REF_INTERV_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_REF_INTERV_FK_IDX" ON "OSE"."TBL_SERVICE_REFERENTIEL" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index GRADE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."GRADE_PK" ON "OSE"."GRADE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index STATUT_INTERVENANT__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."STATUT_INTERVENANT__UN" ON "OSE"."STATUT_INTERVENANT" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJF_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PJF_ANNEE_FK_IDX" ON "OSE"."TBL_PIECE_JOINTE_FOURNIE" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PERSONNEL_CIVILITE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PERSONNEL_CIVILITE_FK_IDX" ON "OSE"."PERSONNEL" ("CIVILITE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CC_ACTIVITE_FA
--------------------------------------------------------

  CREATE INDEX "OSE"."CC_ACTIVITE_FA" ON "OSE"."CC_ACTIVITE" ("FA") 
  ;
--------------------------------------------------------
--  DDL for Index EP_DISCIPLINE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."EP_DISCIPLINE_FK_IDX" ON "OSE"."ELEMENT_PEDAGOGIQUE" ("DISCIPLINE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TME_TYPE_MODULATEUR_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TME_TYPE_MODULATEUR_FK_IDX" ON "OSE"."TYPE_MODULATEUR_EP" ("TYPE_MODULATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_WORKFLOW_TINTERV_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_WORKFLOW_TINTERV_FK_IDX" ON "OSE"."TBL_WORKFLOW" ("TYPE_INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CONTRAT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CONTRAT_HMFK_IDX" ON "OSE"."CONTRAT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_R_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AFFECTATION_R_HMFK_IDX" ON "OSE"."AFFECTATION_RECHERCHE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_R_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."AFFECTATION_R_PK" ON "OSE"."AFFECTATION_RECHERCHE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJD_TPJ_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_PJD_TPJ_FK_IDX" ON "OSE"."TBL_PIECE_JOINTE_DEMANDE" ("TYPE_PIECE_JOINTE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_AGREMENT_STATUT__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_AGREMENT_STATUT__UN" ON "OSE"."TYPE_AGREMENT_STATUT" ("TYPE_AGREMENT_ID", "STATUT_INTERVENANT_ID", "PREMIER_RECRUTEMENT") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_CONTRAT_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_CONTRAT_PK_IDX" ON "OSE"."TBL_CONTRAT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENTION_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_INTERVENTION_HCFK_IDX" ON "OSE"."TYPE_INTERVENTION" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_RESSOURCE_FA
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_RESSOURCE_FA" ON "OSE"."TYPE_RESSOURCE" ("FA") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_CONTRAT__UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_CONTRAT__UN_IDX" ON "OSE"."TBL_CONTRAT" ("INTERVENANT_ID", "STRUCTURE_ID", "TO_DELETE") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_PEDAGOGIQUE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ELEMENT_PEDAGOGIQUE_HMFK_IDX" ON "OSE"."ELEMENT_PEDAGOGIQUE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETABLISSEMENT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETABLISSEMENT_HMFK_IDX" ON "OSE"."ETABLISSEMENT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index NOEUD_SRC_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."NOEUD_SRC_UN" ON "OSE"."NOEUD" ("SOURCE_CODE", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_DOTATION_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_DOTATION_HCFK_IDX" ON "OSE"."TYPE_DOTATION" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MEP_CENTRE_COUT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MEP_CENTRE_COUT_FK_IDX" ON "OSE"."MISE_EN_PAIEMENT" ("CENTRE_COUT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VOLUME_HORAIRE_HDFK_IDX" ON "OSE"."VOLUME_HORAIRE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AFFECTATION_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AFFECTATION_HDFK_IDX" ON "OSE"."AFFECTATION" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_ENS_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VOLUME_HORAIRE_ENS_HMFK_IDX" ON "OSE"."VOLUME_HORAIRE_ENS" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_PERSONNEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_PERSONNEL_PK" ON "OSE"."MV_PERSONNEL" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index FRVH_FORMULE_RESULTAT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FRVH_FORMULE_RESULTAT_FK_IDX" ON "OSE"."FORMULE_RESULTAT_VH" ("FORMULE_RESULTAT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TAUX_HORAIRE_HETD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TAUX_HORAIRE_HETD_PK" ON "OSE"."TAUX_HORAIRE_HETD" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index FRES_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FRES_INTERVENANT_FK_IDX" ON "OSE"."FORMULE_RESULTAT" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DISCIPLINE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DISCIPLINE_HDFK_IDX" ON "OSE"."DISCIPLINE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DS_MDS_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DS_MDS_FK_IDX" ON "OSE"."MODIFICATION_SERVICE_DU" ("MOTIF_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CAMPAGNE_SAISIE_ANNEE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CAMPAGNE_SAISIE_ANNEE_FK_IDX" ON "OSE"."CAMPAGNE_SAISIE" ("ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CCEP_TYPE_HEURES_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CCEP_TYPE_HEURES_FK_IDX" ON "OSE"."CENTRE_COUT_EP" ("TYPE_HEURES_ID") 
  ;
--------------------------------------------------------
--  DDL for Index STATUT_INTERVENANT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."STATUT_INTERVENANT_HDFK_IDX" ON "OSE"."STATUT_INTERVENANT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DISCIPLINE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."DISCIPLINE_PK" ON "OSE"."DISCIPLINE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index MODIFICATION_SERVICE_DU_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MODIFICATION_SERVICE_DU_PK" ON "OSE"."MODIFICATION_SERVICE_DU" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_PIECE_JOINTE_STATUT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_PIECE_JOINTE_STATUT_PK" ON "OSE"."TYPE_PIECE_JOINTE_STATUT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOTATION_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DOTATION_STRUCTURE_FK_IDX" ON "OSE"."DOTATION" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EP_PERIODE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."EP_PERIODE_FK_IDX" ON "OSE"."ELEMENT_PEDAGOGIQUE" ("PERIODE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENTION_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_INTERVENTION_HMFK_IDX" ON "OSE"."TYPE_INTERVENTION" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_MODULATEUR_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_MODULATEUR_HCFK_IDX" ON "OSE"."TYPE_MODULATEUR" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TVE_VOLUME_HORAIRE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TVE_VOLUME_HORAIRE_FK_IDX" ON "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ("VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETAPE_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETAPE_SOURCE_FK_IDX" ON "OSE"."ETAPE" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PIECE_JOINTE__UN_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_PIECE_JOINTE__UN_IDX" ON "OSE"."TBL_PIECE_JOINTE" ("TYPE_PIECE_JOINTE_ID", "INTERVENANT_ID", "TO_DELETE") 
  ;
--------------------------------------------------------
--  DDL for Index GTYPE_FORMATION_SOURCE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."GTYPE_FORMATION_SOURCE_UN" ON "OSE"."GROUPE_TYPE_FORMATION" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index SCENARIO_LIEN_SRC_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SCENARIO_LIEN_SRC_UN" ON "OSE"."SCENARIO_LIEN" ("SOURCE_CODE", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index MV_AFFECTATION_RECHERCHE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_AFFECTATION_RECHERCHE_PK" ON "OSE"."MV_AFFECTATION_RECHERCHE" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index CP_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CP_SOURCE_FK_IDX" ON "OSE"."CHEMIN_PEDAGOGIQUE" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_SAISIE_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_SERVICE_SAISIE_PK_IDX" ON "OSE"."TBL_SERVICE_SAISIE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index FONCTION_REFERENTIEL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."FONCTION_REFERENTIEL_PK" ON "OSE"."FONCTION_REFERENTIEL" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CONTRAT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CONTRAT_PK" ON "OSE"."CONTRAT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_PIECE_JOINTE_STATUT__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_PIECE_JOINTE_STATUT__UN" ON "OSE"."TYPE_PIECE_JOINTE_STATUT" ("TYPE_PIECE_JOINTE_ID", "STATUT_INTERVENANT_ID", "PREMIER_RECRUTEMENT") 
  ;
--------------------------------------------------------
--  DDL for Index MV_GRADE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_GRADE_PK" ON "OSE"."MV_GRADE" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index MV_CHEMIN_PEDAGOGIQUE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_CHEMIN_PEDAGOGIQUE_PK" ON "OSE"."MV_CHEMIN_PEDAGOGIQUE" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index SR_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."SR_STRUCTURE_FK_IDX" ON "OSE"."SERVICE_REFERENTIEL" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CONTRAT_VALIDATION_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CONTRAT_VALIDATION_FK_IDX" ON "OSE"."CONTRAT" ("VALIDATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TEST_BUFFER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TEST_BUFFER_PK" ON "OSE"."TEST_BUFFER" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index VALIDATION_TYPE_VALIDATION_FK
--------------------------------------------------------

  CREATE INDEX "OSE"."VALIDATION_TYPE_VALIDATION_FK" ON "OSE"."VALIDATION" ("TYPE_VALIDATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SCENARIO_NOEUD_EFFECTIF_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SCENARIO_NOEUD_EFFECTIF_PK" ON "OSE"."SCENARIO_NOEUD_EFFECTIF" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOSSIER_P_FK
--------------------------------------------------------

  CREATE INDEX "OSE"."DOSSIER_P_FK" ON "OSE"."DOSSIER" ("PAYS_NAISSANCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TIS_TYPE_INTERVENTION_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TIS_TYPE_INTERVENTION_FK_IDX" ON "OSE"."TYPE_INTERVENTION_STRUCTURE" ("TYPE_INTERVENTION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index HISTO_SERVICE_MODIFICATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."HISTO_SERVICE_MODIFICATION_PK" ON "OSE"."HISTO_INTERVENANT_SERVICE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index PAYS_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PAYS_SOURCE_FK_IDX" ON "OSE"."PAYS" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VALIDATION_VOL_HORAIRE_REF_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."VALIDATION_VOL_HORAIRE_REF_PK" ON "OSE"."VALIDATION_VOL_HORAIRE_REF" ("VALIDATION_ID", "VOLUME_HORAIRE_REF_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FRES_EVH_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FRES_EVH_FK_IDX" ON "OSE"."FORMULE_RESULTAT" ("ETAT_VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index GRADE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."GRADE_HMFK_IDX" ON "OSE"."GRADE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index S_ELEMENT_PEDAGOGIQUE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."S_ELEMENT_PEDAGOGIQUE_FK_IDX" ON "OSE"."SERVICE" ("ELEMENT_PEDAGOGIQUE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_EFFECTIFS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_EFFECTIFS_PK" ON "OSE"."MV_EFFECTIFS" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_SERVICE_ETAPE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_SERVICE_ETAPE_FK_IDX" ON "OSE"."TBL_SERVICE" ("ETAPE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VHENS_EP_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VHENS_EP_FK_IDX" ON "OSE"."VOLUME_HORAIRE_ENS" ("ELEMENT_PEDAGOGIQUE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_FORMATION_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_FORMATION_HCFK_IDX" ON "OSE"."TYPE_FORMATION" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_CORPS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_CORPS_PK" ON "OSE"."MV_CORPS" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_WORKFLOW_EFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_WORKFLOW_EFK_IDX" ON "OSE"."TBL_WORKFLOW" ("ETAPE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_INTERVENANT_RECHERCHE_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MV_INTERVENANT_RECHERCHE_IDX" ON "OSE"."MV_INTERVENANT" ("CRITERE_RECHERCHE") 
  ;
--------------------------------------------------------
--  DDL for Index MISE_EN_PAIEMENT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MISE_EN_PAIEMENT_HCFK_IDX" ON "OSE"."MISE_EN_PAIEMENT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SERVICE__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SERVICE__UN" ON "OSE"."SERVICE" ("INTERVENANT_ID", "ELEMENT_PEDAGOGIQUE_ID", "ETABLISSEMENT_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index ETAPE_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETAPE_HDFK_IDX" ON "OSE"."ETAPE" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ROLE_PRIVILEGE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ROLE_PRIVILEGE_PK" ON "OSE"."ROLE_PRIVILEGE" ("PRIVILEGE_ID", "ROLE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TPJS_STATUT_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TPJS_STATUT_INTERVENANT_FK_IDX" ON "OSE"."TYPE_PIECE_JOINTE_STATUT" ("STATUT_INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_HEURES_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VOLUME_HORAIRE_HEURES_IDX" ON "OSE"."VOLUME_HORAIRE" ("HEURES") 
  ;
--------------------------------------------------------
--  DDL for Index MEP_VALIDATION_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MEP_VALIDATION_FK_IDX" ON "OSE"."MISE_EN_PAIEMENT" ("VALIDATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_CONTRAT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_CONTRAT_HCFK_IDX" ON "OSE"."TYPE_CONTRAT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_PJF_PK_IDX
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TBL_PJF_PK_IDX" ON "OSE"."TBL_PIECE_JOINTE_FOURNIE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_SAISIE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."INTERVENANT_SAISIE_PK" ON "OSE"."INTERVENANT_SAISIE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_TAUX_REGIMES__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ELEMENT_TAUX_REGIMES__UN" ON "OSE"."ELEMENT_TAUX_REGIMES" ("SOURCE_CODE", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index GRADE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."GRADE_HCFK_IDX" ON "OSE"."GRADE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index AGREMENT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AGREMENT_HCFK_IDX" ON "OSE"."AGREMENT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOSSIER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."DOSSIER_PK" ON "OSE"."DOSSIER" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index MEP_DOMAINE_FONCTIONNEL_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MEP_DOMAINE_FONCTIONNEL_FK_IDX" ON "OSE"."MISE_EN_PAIEMENT" ("DOMAINE_FONCTIONNEL_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_RESSOURCE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_RESSOURCE_HCFK_IDX" ON "OSE"."TYPE_RESSOURCE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index LIEN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."LIEN_PK" ON "OSE"."LIEN" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_CODE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."INTERVENANT_CODE_UN" ON "OSE"."INTERVENANT" ("CODE", "ANNEE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CONTRAT_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CONTRAT_HDFK_IDX" ON "OSE"."CONTRAT" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_ETABLISSEMENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_ETABLISSEMENT_PK" ON "OSE"."MV_ETABLISSEMENT" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index TMS_ANNEE_DEBUT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TMS_ANNEE_DEBUT_FK_IDX" ON "OSE"."TYPE_MODULATEUR_STRUCTURE" ("ANNEE_DEBUT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ADRESSE_STRUCTURE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ADRESSE_STRUCTURE_HCFK_IDX" ON "OSE"."ADRESSE_STRUCTURE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PIECE_JOINTE_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PIECE_JOINTE_HMFK_IDX" ON "OSE"."PIECE_JOINTE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index GROUPE_EP_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."GROUPE_EP_FK_IDX" ON "OSE"."GROUPE" ("ELEMENT_PEDAGOGIQUE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CCS_CENTRE_COUT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CCS_CENTRE_COUT_FK_IDX" ON "OSE"."CENTRE_COUT_STRUCTURE" ("CENTRE_COUT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EFFECTIFS_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."EFFECTIFS_HMFK_IDX" ON "OSE"."EFFECTIFS" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYNC_LOG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."SYNC_LOG_PK" ON "OSE"."SYNC_LOG" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index MODULATEUR_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MODULATEUR_HCFK_IDX" ON "OSE"."MODULATEUR" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SERVICE_ETABLISSEMENT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."SERVICE_ETABLISSEMENT_FK_IDX" ON "OSE"."SERVICE" ("ETABLISSEMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DEPARTEMENT_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DEPARTEMENT_HMFK_IDX" ON "OSE"."DEPARTEMENT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOTATION_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DOTATION_HCFK_IDX" ON "OSE"."DOTATION" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TBL_AGR_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TBL_AGR_STRUCTURE_FK_IDX" ON "OSE"."TBL_AGREMENT" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DEPARTEMENT_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DEPARTEMENT_SOURCE_FK_IDX" ON "OSE"."DEPARTEMENT" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_DISCIPLINE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_DISCIPLINE_FK_IDX" ON "OSE"."INTERVENANT" ("DISCIPLINE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TIS_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TIS_STRUCTURE_FK_IDX" ON "OSE"."TYPE_INTERVENTION_STRUCTURE" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CONTRAT_INTERVENANT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CONTRAT_INTERVENANT_FK_IDX" ON "OSE"."CONTRAT" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_MODULATEUR__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ELEMENT_MODULATEUR__UN" ON "OSE"."ELEMENT_MODULATEUR" ("ELEMENT_ID", "MODULATEUR_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Index TMP_CALCUL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TMP_CALCUL_PK" ON "OSE"."TMP_CALCUL" ("ID") ;
--------------------------------------------------------
--  DDL for Index TYPE_VALIDATION_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TYPE_VALIDATION_HDFK_IDX" ON "OSE"."TYPE_VALIDATION" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FORMULE_RESULTAT_TYPE_INT_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FORMULE_RESULTAT_TYPE_INT_IDX" ON "OSE"."FORMULE_RESULTAT" ("TYPE_INTERVENANT_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index ELEMENT_MODULATEUR_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ELEMENT_MODULATEUR_HMFK_IDX" ON "OSE"."ELEMENT_MODULATEUR" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TIEP_TYPE_INTERVENTION_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TIEP_TYPE_INTERVENTION_FK_IDX" ON "OSE"."TYPE_INTERVENTION_EP" ("TYPE_INTERVENTION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."VOLUME_HORAIRE_PK" ON "OSE"."VOLUME_HORAIRE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CENTRE_COUT_STRUCTURE_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CENTRE_COUT_STRUCTURE_HCFK_IDX" ON "OSE"."CENTRE_COUT_STRUCTURE" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VALIDATION_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VALIDATION_HDFK_IDX" ON "OSE"."VALIDATION" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index STAT_PRIV_STATUT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."STAT_PRIV_STATUT_FK_IDX" ON "OSE"."STATUT_PRIVILEGE" ("STATUT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index FICHIER_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."FICHIER_HMFK_IDX" ON "OSE"."FICHIER" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CONTRAT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CONTRAT_HCFK_IDX" ON "OSE"."CONTRAT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_MODULATEUR_EP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_MODULATEUR_EP_PK" ON "OSE"."TYPE_MODULATEUR_EP" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CONTRAT_FICHIER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CONTRAT_FICHIER_PK" ON "OSE"."CONTRAT_FICHIER" ("CONTRAT_ID", "FICHIER_ID") 
  ;
--------------------------------------------------------
--  DDL for Index WF_ETAPE_ORDRE_UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."WF_ETAPE_ORDRE_UN" ON "OSE"."WF_ETAPE" ("ORDRE") 
  ;
--------------------------------------------------------
--  DDL for Index TPJS_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TPJS_HMFK_IDX" ON "OSE"."TYPE_PIECE_JOINTE_STATUT" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_SOURCE_CODE_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_SOURCE_CODE_IDX" ON "OSE"."INTERVENANT" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index VH_PERIODE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VH_PERIODE_FK_IDX" ON "OSE"."VOLUME_HORAIRE" ("PERIODE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index EFFECTIFS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."EFFECTIFS_PK" ON "OSE"."EFFECTIFS" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index INTERVENANT_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INTERVENANT_STRUCTURE_FK_IDX" ON "OSE"."INTERVENANT" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index INDICATEUR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."INDICATEUR_PK" ON "OSE"."INDICATEUR" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETABLISSEMENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."ETABLISSEMENT_PK" ON "OSE"."ETABLISSEMENT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index ETAPE_STRUCTURE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."ETAPE_STRUCTURE_FK_IDX" ON "OSE"."ETAPE" ("STRUCTURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_INTERVENTION_STRUCTURE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_INTERVENTION_STRUCTURE_PK" ON "OSE"."TYPE_INTERVENTION_STRUCTURE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index AS_SOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."AS_SOURCE_FK_IDX" ON "OSE"."ADRESSE_STRUCTURE" ("SOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DOMAINE_FONCTIONNEL_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DOMAINE_FONCTIONNEL_HDFK_IDX" ON "OSE"."DOMAINE_FONCTIONNEL" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CC_ACTIVITE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."CC_ACTIVITE_PK" ON "OSE"."CC_ACTIVITE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index VOLUME_HORAIRE_ENS_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VOLUME_HORAIRE_ENS_HCFK_IDX" ON "OSE"."VOLUME_HORAIRE_ENS" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PAYS_HDFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."PAYS_HDFK_IDX" ON "OSE"."PAYS" ("HISTO_DESTRUCTEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_TYPE_FORMATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_TYPE_FORMATION_PK" ON "OSE"."MV_TYPE_FORMATION" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index INDIC_DIFF_DOSSIER_INT_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."INDIC_DIFF_DOSSIER_INT_FK_IDX" ON "OSE"."INDIC_MODIF_DOSSIER" ("INTERVENANT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index MV_INTERVENANT_NOM_USUEL_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."MV_INTERVENANT_NOM_USUEL_IDX" ON "OSE"."MV_INTERVENANT" ("NOM_USUEL") 
  ;
--------------------------------------------------------
--  DDL for Index MV_ELEMENT_TAUX_REGIMES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."MV_ELEMENT_TAUX_REGIMES_PK" ON "OSE"."MV_ELEMENT_TAUX_REGIMES" ("SOURCE_CODE") 
  ;
--------------------------------------------------------
--  DDL for Index GROUPE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."GROUPE_PK" ON "OSE"."GROUPE" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index CC_ACTIVITE_FC
--------------------------------------------------------

  CREATE INDEX "OSE"."CC_ACTIVITE_FC" ON "OSE"."CC_ACTIVITE" ("FC") 
  ;
--------------------------------------------------------
--  DDL for Index VVH_VALIDATION_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."VVH_VALIDATION_FK_IDX" ON "OSE"."VALIDATION_VOL_HORAIRE" ("VALIDATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index CC_TYPE_RESSOURCE_FK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."CC_TYPE_RESSOURCE_FK_IDX" ON "OSE"."CENTRE_COUT" ("TYPE_RESSOURCE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_HEURES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_HEURES_PK" ON "OSE"."TYPE_HEURES" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_DOTATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_DOTATION_PK" ON "OSE"."TYPE_DOTATION" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TYPE_CONTRAT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."TYPE_CONTRAT_PK" ON "OSE"."TYPE_CONTRAT" ("ID") 
  ;
--------------------------------------------------------
--  DDL for Index TIS_HMFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."TIS_HMFK_IDX" ON "OSE"."TYPE_INTERVENTION_STRUCTURE" ("HISTO_MODIFICATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PIECE_JOINTE_FICHIER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PIECE_JOINTE_FICHIER_PK" ON "OSE"."PIECE_JOINTE_FICHIER" ("PIECE_JOINTE_ID", "FICHIER_ID") 
  ;
--------------------------------------------------------
--  DDL for Index DEPARTEMENT_HCFK_IDX
--------------------------------------------------------

  CREATE INDEX "OSE"."DEPARTEMENT_HCFK_IDX" ON "OSE"."DEPARTEMENT" ("HISTO_CREATEUR_ID") 
  ;
--------------------------------------------------------
--  DDL for Index VALIDATION_VOL_HORAIRE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."VALIDATION_VOL_HORAIRE_PK" ON "OSE"."VALIDATION_VOL_HORAIRE" ("VALIDATION_ID", "VOLUME_HORAIRE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PIECE_JOINTE__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "OSE"."PIECE_JOINTE__UN" ON "OSE"."PIECE_JOINTE" ("TYPE_PIECE_JOINTE_ID", "INTERVENANT_ID", "HISTO_DESTRUCTION") 
  ;
--------------------------------------------------------
--  DDL for Trigger AFFECTATION_RECHERCHE_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."AFFECTATION_RECHERCHE_CK" 
BEFORE INSERT OR UPDATE ON affectation_recherche
FOR EACH ROW
DECLARE
  pragma autonomous_transaction;
  rows_found integer;
BEGIN

  if :NEW.histo_destruction IS NOT NULL THEN RETURN; END IF; -- pas de check si c'est pour une historicisation
  
  select 
    count(*) into rows_found
  from
    affectation_recherche
  where
    intervenant_id = :new.intervenant_id
    AND structure_id = :new.structure_id
    AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction )
    AND id <> :NEW.id;
  
  if rows_found > 0 THEN
    raise_application_error(-20101, 'Un enseignant (id=' || :NEW.intervenant_id || ') ne peut pas avoir plusieurs affectations de recherche pour une m√™me structure');
  END IF;

END;
/
ALTER TRIGGER "OSE"."AFFECTATION_RECHERCHE_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AGREMENT_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."AGREMENT_CK" 
BEFORE UPDATE ON agrement FOR EACH ROW
DECLARE
  contrat_found INTEGER;
BEGIN

  SELECT
    COUNT(*) INTO contrat_found
  FROM
    contrat c
  WHERE
    c.INTERVENANT_ID = :NEW.intervenant_id
    AND c.structure_id = NVL(:NEW.structure_id,c.structure_id)
    AND 1 = OSE_DIVERS.COMPRISE_ENTRE( c.histo_creation, c.histo_destruction )
    AND ROWNUM = 1;

  IF 
    1 = contrat_found 
    AND :NEW.histo_destruction IS NOT NULL AND :OLD.histo_destruction IS NULL
  THEN 
  
    IF :NEW.structure_id IS NULL THEN
      raise_application_error(-20101, 'Cet agr√©ment ne peut pas √™tre supprim√© car un contrat a √©t√© sign√©.');    
    ELSE
      raise_application_error(-20101, 'Cet agr√©ment ne peut pas √™tre supprim√© car un contrat a √©t√© sign√© dans la m√™me composante.');    
    END IF;
  END IF;
  
END;
/
ALTER TRIGGER "OSE"."AGREMENT_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CHARGENS_MAJ_EFFECTIFS
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."CHARGENS_MAJ_EFFECTIFS" 
  AFTER INSERT OR UPDATE OR DELETE ON scenario_noeud_effectif
  REFERENCING FOR EACH ROW
BEGIN 
  IF NOT ose_chargens.ENABLE_TRIGGER_EFFECTIFS THEN RETURN; END IF;
  IF DELETING THEN
    ose_chargens.DEM_CALC_SUB_EFFECTIF( :OLD.scenario_noeud_id, :OLD.type_heures_id, :OLD.etape_id, 0 );
  ELSE
    ose_chargens.DEM_CALC_SUB_EFFECTIF( :NEW.scenario_noeud_id, :NEW.type_heures_id, :NEW.etape_id, :NEW.effectif );
  END IF;

END;
/
ALTER TRIGGER "OSE"."CHARGENS_MAJ_EFFECTIFS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CHARGENS_MAJ_EFFECTIFS_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."CHARGENS_MAJ_EFFECTIFS_S" 
AFTER INSERT OR UPDATE OR DELETE ON scenario_noeud_effectif
BEGIN
  ose_chargens.CALC_SUB_EFFECTIF_DEM;
END;
/
ALTER TRIGGER "OSE"."CHARGENS_MAJ_EFFECTIFS_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ELEMENT_PEDAGOGIQUE_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."ELEMENT_PEDAGOGIQUE_CK" 
BEFORE INSERT OR UPDATE ON element_pedagogique FOR EACH ROW
DECLARE
  enseignement INTEGER;
  source_id INTEGER;
BEGIN
  SELECT id INTO source_id FROM source WHERE code = 'OSE';

  IF :NEW.source_id <> source_id THEN RETURN; END IF; -- impossible de checker car l'UPD par import se fait champ par champ...
  
  IF :NEW.fi = 0 AND :NEW.fc = 0 AND :NEW.fa = 0 THEN
    raise_application_error(-20101, 'Un enseignement doit obligatoirement √™tre au moins en FI, FC ou FA');
  END IF;

  IF 1 <> ROUND(:NEW.taux_fi + :NEW.taux_fc + :NEW.taux_fa, 2) THEN
    raise_application_error( -20101, 'Le total des taux FI, FC et FA n''est pas √©gal √† 100%');
  END IF;

  IF :NEW.fi = 0 AND :NEW.taux_fi > 0 THEN
    raise_application_error( -20101, 'Le taux FI doit √™tre √† 0 puisque la formation n''est pas dispens√©e en FI');
  END IF;

  IF :NEW.fa = 0 AND :NEW.taux_fa > 0 THEN
    raise_application_error( -20101, 'Le taux FA doit √™tre √† 0 puisque la formation n''est pas dispens√©e en FA');
  END IF;
  
  IF :NEW.fc = 0 AND :NEW.taux_fc > 0 THEN
    raise_application_error( -20101, 'Le taux FC doit √™tre √† 0 puisque la formation n''est pas dispens√©e en FC');
  END IF;  

  IF :NEW.periode_id IS NOT NULL THEN
    SELECT p.enseignement
    INTO enseignement
    FROM periode p
    WHERE p.id	     = :NEW.periode_id;
    IF enseignement <> 1 THEN
      raise_application_error(-20101, 'Cette p√©riode n''est pas appliquable √† cet √©l√©ment p√©dagogique.');
    END IF;
  END IF;

END;
/
ALTER TRIGGER "OSE"."ELEMENT_PEDAGOGIQUE_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_CONTRAT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_CONTRAT" 
  AFTER DELETE OR UPDATE OF INTERVENANT_ID, HISTO_CREATION, HISTO_DESTRUCTION, STRUCTURE_ID, DATE_RETOUR_SIGNE, VALIDATION_ID ON "OSE"."CONTRAT"
  REFERENCING FOR EACH ROW
  BEGIN
  
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;
  
  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      volume_horaire vh
      JOIN service s ON s.id = vh.service_id AND 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
    WHERE
      1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      AND (vh.contrat_id = :OLD.id OR vh.contrat_id = :NEW.id)

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
ALTER TRIGGER "OSE"."F_CONTRAT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_CONTRAT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_CONTRAT_S" 
AFTER UPDATE OR DELETE ON contrat
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_CONTRAT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_ELEMENT_MODULATEUR
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_ELEMENT_MODULATEUR" 
AFTER INSERT OR UPDATE OR DELETE ON element_modulateur
FOR EACH ROW
BEGIN

  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      1 = OSE_DIVERS.COMPRISE_ENTRE( s.histo_creation, s.histo_destruction )
      AND (s.element_pedagogique_id = :OLD.element_id OR s.element_pedagogique_id = :NEW.element_id)
      
  ) LOOP
    
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
    
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."F_ELEMENT_MODULATEUR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_ELEMENT_MODULATEUR_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_ELEMENT_MODULATEUR_S" 
AFTER INSERT OR UPDATE OR DELETE ON element_modulateur
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_ELEMENT_MODULATEUR_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_ELEMENT_PEDAGOGIQUE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_ELEMENT_PEDAGOGIQUE" 
  AFTER DELETE OR UPDATE OF ID, STRUCTURE_ID, PERIODE_ID, TAUX_FOAD, FI, FC, FA, HISTO_CREATION, HISTO_DESTRUCTION, TAUX_FA, TAUX_FC, TAUX_FI, ANNEE_ID ON "OSE"."ELEMENT_PEDAGOGIQUE"
  REFERENCING FOR EACH ROW
  BEGIN 
  
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;
  
  FOR p IN
    ( SELECT DISTINCT s.intervenant_id
    FROM service s
    WHERE (s.element_pedagogique_id = :NEW.id
    OR s.element_pedagogique_id     = :OLD.id)
    AND 1                           = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
    ) LOOP OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
END LOOP;
END;
/
ALTER TRIGGER "OSE"."F_ELEMENT_PEDAGOGIQUE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_ELEMENT_PEDAGOGIQUE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_ELEMENT_PEDAGOGIQUE_S" AFTER
UPDATE OR DELETE ON element_pedagogique BEGIN 
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_ELEMENT_PEDAGOGIQUE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_INTERVENANT" 
  AFTER UPDATE OF ID, DATE_NAISSANCE, STATUT_ID, STRUCTURE_ID, HISTO_CREATION, HISTO_DESTRUCTION, PREMIER_RECRUTEMENT, ANNEE_ID ON "OSE"."INTERVENANT"
  REFERENCING FOR EACH ROW
  BEGIN

  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
      
    SELECT DISTINCT
      fr.intervenant_id
    FROM
      formule_resultat fr
    WHERE
      fr.intervenant_id = :NEW.id OR fr.intervenant_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );

  END LOOP;
  
END;
/
ALTER TRIGGER "OSE"."F_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_INTERVENANT_S" 
AFTER UPDATE ON "OSE"."INTERVENANT"
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_MODIF_SERVICE_DU
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_MODIF_SERVICE_DU" 
AFTER INSERT OR UPDATE OR DELETE ON modification_service_du
FOR EACH ROW
BEGIN

  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF DELETING OR UPDATING THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, :OLD.intervenant_id );
  END IF;
  IF INSERTING OR UPDATING THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, :NEW.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."F_MODIF_SERVICE_DU" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_MODIF_SERVICE_DU_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_MODIF_SERVICE_DU_S" 
AFTER INSERT OR UPDATE OR DELETE ON modification_service_du
BEGIN
    OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_MODIF_SERVICE_DU_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_MODULATEUR
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_MODULATEUR" 
AFTER UPDATE OR DELETE ON modulateur
FOR EACH ROW
BEGIN
  
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;
  
  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN element_modulateur em ON 
        em.element_id   = s.element_pedagogique_id 
        AND 1 = ose_divers.comprise_entre( em.histo_creation, em.histo_destruction )
    WHERE
      1 = OSE_DIVERS.COMPRISE_ENTRE( s.histo_creation, s.histo_destruction )
      AND (em.modulateur_id = :OLD.id OR em.modulateur_id = :NEW.id)

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );

  END LOOP;
END;
/
ALTER TRIGGER "OSE"."F_MODULATEUR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_MODULATEUR_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_MODULATEUR_S" 
AFTER UPDATE OR DELETE ON modulateur
BEGIN
    OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_MODULATEUR_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_MOTIF_MODIFICATION_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_MOTIF_MODIFICATION_SERVICE" 
AFTER UPDATE OR DELETE ON MOTIF_MODIFICATION_SERVICE
FOR EACH ROW
BEGIN

  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      intervenant_id
    FROM
      modification_service_du msd
    WHERE
      1 = OSE_DIVERS.COMPRISE_ENTRE( msd.histo_creation, msd.histo_destruction )
      AND (msd.motif_id = :NEW.id OR msd.motif_id = :OLD.id)
      
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."F_MOTIF_MODIFICATION_SERVICE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_MOTIF_MODIFICATION_SERVICE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_MOTIF_MODIFICATION_SERVICE_S" 
AFTER UPDATE OR DELETE ON MOTIF_MODIFICATION_SERVICE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_MOTIF_MODIFICATION_SERVICE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_SERVICE" 
AFTER INSERT OR UPDATE OR DELETE ON service
FOR EACH ROW
BEGIN

  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF DELETING OR UPDATING THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, :OLD.intervenant_id );
  END IF;
  IF INSERTING OR UPDATING THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, :NEW.intervenant_id );
  END IF;
END;
/
ALTER TRIGGER "OSE"."F_SERVICE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_SERVICE_REFERENTIEL
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_SERVICE_REFERENTIEL" 
AFTER INSERT OR UPDATE OR DELETE ON service_referentiel
FOR EACH ROW
BEGIN

  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF DELETING OR UPDATING THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, :OLD.intervenant_id );
  END IF;
  IF INSERTING OR UPDATING THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, :NEW.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."F_SERVICE_REFERENTIEL" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_SERVICE_REFERENTIEL_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_SERVICE_REFERENTIEL_S" 
AFTER INSERT OR UPDATE OR DELETE ON service_referentiel
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_SERVICE_REFERENTIEL_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_SERVICE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_SERVICE_S" 
AFTER INSERT OR UPDATE OR DELETE ON service
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_SERVICE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_STATUT_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_STATUT_INTERVENANT" 
AFTER UPDATE ON statut_intervenant
FOR EACH ROW
BEGIN

  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      fr.intervenant_id
    FROM
      intervenant i
      JOIN formule_resultat fr ON fr.intervenant_id = i.id
    WHERE
      (i.statut_id = :NEW.id OR i.statut_id = :OLD.id)
      AND 1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  
  END LOOP;
END;
/
ALTER TRIGGER "OSE"."F_STATUT_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_STATUT_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_STATUT_INTERVENANT_S" 
AFTER UPDATE ON statut_intervenant
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_STATUT_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_TYPE_INTERVENTION
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_TYPE_INTERVENTION" 
AFTER UPDATE OF
  taux_hetd_service,
  taux_hetd_complementaire
ON type_intervention
FOR EACH ROW
BEGIN

  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      volume_horaire vh
      JOIN service s ON s.id = vh.service_id AND 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
    WHERE
      1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      AND (vh.type_intervention_id = :NEW.id OR vh.type_intervention_id = :OLD.id)
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  
  END LOOP;
END;
/
ALTER TRIGGER "OSE"."F_TYPE_INTERVENTION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_TYPE_INTERVENTION_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_TYPE_INTERVENTION_S" 
AFTER UPDATE ON type_intervention
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_TYPE_INTERVENTION_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_VALIDATION
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION" 
AFTER UPDATE ON validation
FOR EACH ROW
BEGIN

  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN ( -- validations de volume horaire

    SELECT DISTINCT
      s.intervenant_id
    FROM
      validation_vol_horaire vvh
      JOIN volume_horaire vh ON vh.id = vvh.volume_horaire_id AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      JOIN service s ON s.id = vh.service_id AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
    WHERE
      (vvh.validation_id = :OLD.ID OR vvh.validation_id = :NEW.id)

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );

  END LOOP;

  FOR p IN ( -- validations de contrat

    SELECT DISTINCT
      s.intervenant_id
    FROM
      contrat c
      JOIN volume_horaire vh ON vh.contrat_id = c.id AND 1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      JOIN service s ON s.id = vh.service_id AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
    WHERE
      (c.validation_id = :OLD.ID OR c.validation_id = :NEW.id)

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
ALTER TRIGGER "OSE"."F_VALIDATION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_VALIDATION_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION_S" 
AFTER UPDATE ON validation
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_VALIDATION_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_VALIDATION_VOL_HORAIRE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION_VOL_HORAIRE" 
AFTER INSERT OR UPDATE OR DELETE ON validation_vol_horaire
FOR EACH ROW
BEGIN

  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      volume_horaire vh
      JOIN service s ON s.id = vh.service_id AND 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
    WHERE
      1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      AND (vh.id = :NEW.volume_horaire_id OR vh.id = :OLD.volume_horaire_id)
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  
  END LOOP;
END;
/
ALTER TRIGGER "OSE"."F_VALIDATION_VOL_HORAIRE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_VALIDATION_VOL_HORAIRE_REF
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION_VOL_HORAIRE_REF" 
AFTER INSERT OR UPDATE OR DELETE ON validation_vol_horaire_ref
FOR EACH ROW
BEGIN

  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      volume_horaire_ref vh
      JOIN service_referentiel s ON s.id = vh.service_referentiel_id AND 1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
    WHERE
      1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
      AND (vh.id = :NEW.volume_horaire_ref_id OR vh.id = :OLD.volume_horaire_ref_id)
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  
  END LOOP;
END;
/
ALTER TRIGGER "OSE"."F_VALIDATION_VOL_HORAIRE_REF" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_VALIDATION_VOL_HORAIRE_REF_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION_VOL_HORAIRE_REF_S" 
AFTER INSERT OR UPDATE OR DELETE ON validation_vol_horaire_ref
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_VALIDATION_VOL_HORAIRE_REF_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_VALIDATION_VOL_HORAIRE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_VALIDATION_VOL_HORAIRE_S" 
AFTER INSERT OR UPDATE OR DELETE ON validation_vol_horaire
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_VALIDATION_VOL_HORAIRE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_VOLUME_HORAIRE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_VOLUME_HORAIRE" 
AFTER INSERT 
OR UPDATE OF TYPE_VOLUME_HORAIRE_ID, SERVICE_ID, PERIODE_ID, TYPE_INTERVENTION_ID, 
             HEURES, MOTIF_NON_PAIEMENT_ID, CONTRAT_ID,
             HISTO_CREATION, HISTO_MODIFICATION, HISTO_DESTRUCTION
OR DELETE ON volume_horaire
FOR EACH ROW
BEGIN

  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
      AND (s.id = :NEW.service_id OR s.id = :OLD.service_id)
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  
  END LOOP;
END;
/
ALTER TRIGGER "OSE"."F_VOLUME_HORAIRE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_VOLUME_HORAIRE_REF
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_VOLUME_HORAIRE_REF" 
AFTER INSERT OR UPDATE OR DELETE ON volume_horaire_ref
FOR EACH ROW
BEGIN

  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service_referentiel s
    WHERE
      1 = ose_divers.comprise_entre(s.histo_creation, s.histo_destruction)
      AND (s.id = :NEW.service_referentiel_id OR s.id = :OLD.service_referentiel_id)
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_FORMULE.package_sujet, p.intervenant_id );
  END LOOP;
END;
/
ALTER TRIGGER "OSE"."F_VOLUME_HORAIRE_REF" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_VOLUME_HORAIRE_REF_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_VOLUME_HORAIRE_REF_S" 
AFTER INSERT OR UPDATE OR DELETE ON volume_horaire_ref
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_VOLUME_HORAIRE_REF_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger F_VOLUME_HORAIRE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."F_VOLUME_HORAIRE_S" 
AFTER INSERT OR UPDATE OR DELETE ON volume_horaire
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."F_VOLUME_HORAIRE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger INDIC_TRG_MODIF_DOSSIER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."INDIC_TRG_MODIF_DOSSIER" 
  AFTER INSERT OR UPDATE OF NOM_USUEL, NOM_PATRONYMIQUE, PRENOM, CIVILITE_ID, ADRESSE, RIB, DATE_NAISSANCE ON "OSE"."DOSSIER"

  FOR EACH ROW
/**
 * But : mettre √† jour la liste des PJ attendues.
 */
DECLARE
  i integer := 1;
  intervenantId NUMERIC;
  found integer;
  estCreationDossier integer;
  type array_t is table of varchar2(1024);
  
  attrNames     array_t := array_t();
  attrOldVals   array_t := array_t();
  attrNewVals   array_t := array_t();
  
  -- valeurs import√©es (format texte) :
  impSourceName source.libelle%type;
  impNomUsuel   indic_modif_dossier.ATTR_NEW_VALUE%type;
  impNomPatro   indic_modif_dossier.ATTR_NEW_VALUE%type;
  impPrenom     indic_modif_dossier.ATTR_NEW_VALUE%type;
  impCivilite   indic_modif_dossier.ATTR_NEW_VALUE%type;
  impDateNaiss  indic_modif_dossier.ATTR_NEW_VALUE%type;
  impAdresse    indic_modif_dossier.ATTR_NEW_VALUE%type;
  impRib        indic_modif_dossier.ATTR_NEW_VALUE%type;
  -- anciennes valeurs dans le dossier (format texte) :
  oldSourceName source.libelle%type;
  oldNomUsuel   indic_modif_dossier.ATTR_NEW_VALUE%type;
  oldNomPatro   indic_modif_dossier.ATTR_NEW_VALUE%type;
  oldPrenom     indic_modif_dossier.ATTR_NEW_VALUE%type;
  oldCivilite   indic_modif_dossier.ATTR_NEW_VALUE%type;
  oldDateNaiss  indic_modif_dossier.ATTR_NEW_VALUE%type;
  oldAdresse    indic_modif_dossier.ATTR_NEW_VALUE%type;
  oldRib        indic_modif_dossier.ATTR_NEW_VALUE%type;
  -- nouvelles valeurs dans le dossier (format texte) :
  newSourceName source.libelle%type;
  newNomUsuel   indic_modif_dossier.ATTR_NEW_VALUE%type;
  newNomPatro   indic_modif_dossier.ATTR_NEW_VALUE%type;
  newPrenom     indic_modif_dossier.ATTR_NEW_VALUE%type;
  newCivilite   indic_modif_dossier.ATTR_NEW_VALUE%type;
  newDateNaiss  indic_modif_dossier.ATTR_NEW_VALUE%type;
  newAdresse    indic_modif_dossier.ATTR_NEW_VALUE%type;
  newRib        indic_modif_dossier.ATTR_NEW_VALUE%type;
BEGIN
  --
  -- T√©moin indiquant s'il s'agit d'une cr√©ation de dossier (insert).
  --
  estCreationDossier := case when inserting then 1 else 0 end;
  
  --
  -- Fetch source OSE.
  --
  select s.libelle into newSourceName from source s where s.code = 'OSE';
  
  -- 
  -- Fetch et formattage texte des valeurs import√©es.
  --
  select 
      i.id,
      s.libelle, 
      nvl(i.NOM_USUEL, '(Aucun)'), 
      nvl(i.NOM_PATRONYMIQUE, '(Aucun)'), 
      nvl(i.PRENOM, '(Aucun)'), 
      nvl(c.libelle_court, '(Aucune)'), 
      nvl(to_char(i.DATE_NAISSANCE, 'DD/MM/YYYY'), '(Aucune)'), 
      nvl(ose_divers.formatted_rib(i.bic, i.iban), '(Aucun)'), 
      case when a.id is not null  
        then ose_divers.formatted_adresse(a.NO_VOIE, a.NOM_VOIE, a.BATIMENT, a.MENTION_COMPLEMENTAIRE, a.LOCALITE, a.CODE_POSTAL, a.VILLE, a.PAYS_LIBELLE) 
        else '(Aucune)'
      end
    into 
      intervenantId,
      oldSourceName, 
      impNomUsuel, 
      impNomPatro, 
      impPrenom, 
      impCivilite, 
      impDateNaiss, 
      impRib, 
      impAdresse
    from intervenant i
    join source s on s.id = i.source_id
    left join civilite c on c.id = i.civilite_id
    left join adresse_intervenant a on a.intervenant_id = i.id
    where i.id = :NEW.intervenant_id;
  
  -- 
  -- Anciennes valeurs dans le cas d'une cr√©ation de dossier : ce sont les valeurs import√©es.
  -- 
  if (1 = estCreationDossier) then
    --dbms_output.put_line('inserting');
    oldNomUsuel  := impNomUsuel;
    oldNomPatro  := impNomPatro;
    oldPrenom    := impPrenom;
    oldCivilite  := impCivilite;
    oldDateNaiss := impDateNaiss;
    oldAdresse   := impAdresse;
    oldRib       := impRib;
  -- 
  -- Anciennes valeurs dans le cas d'une mise √† jour du dossier.
  -- 
  else
    --dbms_output.put_line('updating');
    oldNomUsuel     := trim(:OLD.NOM_USUEL);
    oldNomPatro     := trim(:OLD.NOM_PATRONYMIQUE);
    oldPrenom       := trim(:OLD.PRENOM);
    oldDateNaiss    := case when :OLD.DATE_NAISSANCE is null then '(Aucune)' else to_char(:OLD.DATE_NAISSANCE, 'DD/MM/YYYY') end;
    oldAdresse      := trim(:OLD.ADRESSE);
    oldRib          := trim(:OLD.RIB);
    if :OLD.CIVILITE_ID is not null then
      select c.libelle_court into oldCivilite from civilite c where c.id = :OLD.CIVILITE_ID;
    else
      oldCivilite := '(Aucune)';
    end if;
    select s.libelle into oldSourceName from source s where s.code = 'OSE';
  end if;
  
  -- 
  -- Nouvelles valeurs saisies.
  --
  newNomUsuel   := trim(:NEW.NOM_USUEL);
  newNomPatro   := trim(:NEW.NOM_PATRONYMIQUE);
  newPrenom     := trim(:NEW.PRENOM);
  newDateNaiss  := case when :NEW.DATE_NAISSANCE is null then '(Aucune)' else to_char(:NEW.DATE_NAISSANCE, 'DD/MM/YYYY') end;
  newAdresse    := trim(:NEW.ADRESSE);
  newRib        := trim(:NEW.RIB);
  if :NEW.CIVILITE_ID is not null then
    select c.libelle_court into newCivilite from civilite c where c.id = :NEW.CIVILITE_ID;
  else
    newCivilite := '(Aucune)';
  end if;
    
  --
  -- D√©tection des diff√©rences.
  --
  if newNomUsuel <> oldNomUsuel then
    --dbms_output.put_line('NOM_USUEL ' || sourceLib || ' = ' || oldNomUsuel || ' --> NOM_USUEL OSE = ' || :NEW.NOM_USUEL);
    attrNames.extend(1);
    attrOldVals.extend(1);
    attrNewVals.extend(1);
    attrNames(i)   := 'Nom usuel';
    attrOldVals(i) := oldNomUsuel;
    attrNewVals(i) := newNomUsuel;
    i := i + 1;
  end if;  
  if newNomPatro <> oldNomPatro then
    --dbms_output.put_line('NOM_PATRONYMIQUE ' || sourceLib || ' = ' || oldNomPatro || ' --> NOM_PATRONYMIQUE OSE = ' || :NEW.NOM_PATRONYMIQUE);
    attrNames.extend(1);
    attrOldVals.extend(1);
    attrNewVals.extend(1);
    attrNames(i)   := 'Nom de naissance';
    attrOldVals(i) := oldNomPatro;
    attrNewVals(i) := newNomPatro;
    i := i + 1;
  end if;  
  if newPrenom <> oldPrenom then
    --dbms_output.put_line('PRENOM ' || sourceLib || ' = ' || oldPrenom || ' --> PRENOM OSE = ' || :NEW.PRENOM);
    attrNames.extend(1);
    attrOldVals.extend(1);
    attrNewVals.extend(1);
    attrNames(i)   := 'Pr√©nom';
    attrOldVals(i) := oldPrenom;
    attrNewVals(i) := newPrenom;
    i := i + 1;
  end if;  
  if newCivilite <> oldCivilite then
    --dbms_output.put_line('CIVILITE_ID ' || sourceLib || ' = ' || oldCivilite || ' --> CIVILITE_ID OSE = ' || :NEW.CIVILITE_ID);
    attrNames.extend(1);
    attrOldVals.extend(1);
    attrNewVals.extend(1);
    attrNames(i)   := 'Civilit√©';
    attrOldVals(i) := oldCivilite;
    attrNewVals(i) := newCivilite;
    i := i + 1;
  end if;  
  if newDateNaiss <> oldDateNaiss then
    --dbms_output.put_line('DATE_NAISSANCE ' || sourceLib || ' = ' || oldDateNaiss || ' --> DATE_NAISSANCE OSE = ' || :NEW.DATE_NAISSANCE);
    attrNames.extend(1);
    attrOldVals.extend(1);
    attrNewVals.extend(1);
    attrNames(i)   := 'Date de naissance';
    attrOldVals(i) := oldDateNaiss;
    attrNewVals(i) := newDateNaiss;
    i := i + 1;
  end if;  
  if newAdresse <> oldAdresse then
    --dbms_output.put_line('ADRESSE ' || sourceLib || ' = ' || oldAdresse || ' --> ADRESSE OSE = ' || :NEW.ADRESSE);
    attrNames.extend(1);
    attrOldVals.extend(1);
    attrNewVals.extend(1);
    attrNames(i)   := 'Adresse postale';
    attrOldVals(i) := oldAdresse;
    attrNewVals(i) := newAdresse;
    i := i + 1;
  end if;  
  if oldRib is null or newRib <> oldRib then
    --dbms_output.put_line('RIB ' || sourceLib || ' = ' || oldRib || ' --> RIB OSE = ' || :NEW.RIB);
    attrNames.extend(1);
    attrOldVals.extend(1);
    attrNewVals.extend(1);
    attrNames(i)   := 'RIB';
    attrOldVals(i) := oldRib;
    attrNewVals(i) := newRib;
    i := i + 1;
  end if;
  
  --
  -- Enregistrement des diff√©rences.
  --
  for i in 1 .. attrNames.count loop
    --dbms_output.put_line(attrNames(i) || ' ' || oldSourceName || ' = ' || attrOldVals(i) || ' --> ' || attrNames(i) || ' ' || newSourceName || ' = ' || attrNewVals(i));
    
    -- v√©rification que la m√™me modif n'est pas d√©j√† consign√©e
    select count(*) into found from indic_modif_dossier 
      where INTERVENANT_ID = intervenantId
      and ATTR_NAME = attrNames(i) 
      and ATTR_OLD_VALUE = to_char(attrOldVals(i))
      and ATTR_NEW_VALUE = to_char(attrNewVals(i));
    if found > 0 then
      continue;
    end if;
    
    insert into INDIC_MODIF_DOSSIER(
      id, 
      INTERVENANT_ID, 
      ATTR_NAME, 
      ATTR_OLD_SOURCE_NAME, 
      ATTR_OLD_VALUE, 
      ATTR_NEW_SOURCE_NAME, 
      ATTR_NEW_VALUE,
      EST_CREATION_DOSSIER, -- t√©moin indiquant s'il s'agit d'une cr√©ation ou d'une modification de dossier
      HISTO_CREATION,       -- NB: date de modification du dossier
      HISTO_CREATEUR_ID,    -- NB: auteur de la modification du dossier
      HISTO_MODIFICATION,
      HISTO_MODIFICATEUR_ID
    ) 
    values (
      indic_modif_dossier_id_seq.nextval, 
      intervenantId,
      attrNames(i), 
      oldSourceName, 
      to_char(attrOldVals(i)), 
      newSourceName, 
      to_char(attrNewVals(i)),
      estCreationDossier,
      :NEW.HISTO_MODIFICATION,
      :NEW.HISTO_MODIFICATEUR_ID,
      :NEW.HISTO_MODIFICATION,
      :NEW.HISTO_MODIFICATEUR_ID
    );
  end loop;
  
END;
/
ALTER TRIGGER "OSE"."INDIC_TRG_MODIF_DOSSIER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger INTERVENANT_HORO_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."INTERVENANT_HORO_SERVICE" 
AFTER INSERT OR UPDATE OR DELETE ON service
FOR EACH ROW
BEGIN
  
  IF DELETING THEN
  
    ose_divers.intervenant_horodatage_service(
      :OLD.intervenant_id,
      null,
      0,
      :OLD.histo_modificateur_id,
      :OLD.histo_modification
    );
  
  ELSE

    ose_divers.intervenant_horodatage_service(
      :NEW.intervenant_id,
      null,
      0,
      :NEW.histo_modificateur_id,
      :NEW.histo_modification
    );
  
  END IF;

END;
/
ALTER TRIGGER "OSE"."INTERVENANT_HORO_SERVICE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger INTERVENANT_HORO_SERVICE_REF
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."INTERVENANT_HORO_SERVICE_REF" 
AFTER INSERT OR UPDATE OR DELETE ON service_referentiel
FOR EACH ROW
BEGIN
  
  IF DELETING THEN
  
    ose_divers.intervenant_horodatage_service(
      :OLD.intervenant_id,
      null,
      1,
      :OLD.histo_modificateur_id,
      :OLD.histo_modification
    );
  
  ELSE

    ose_divers.intervenant_horodatage_service(
      :NEW.intervenant_id,
      null,
      1,
      :NEW.histo_modificateur_id,
      :NEW.histo_modification
    );
  
  END IF;

END;
/
ALTER TRIGGER "OSE"."INTERVENANT_HORO_SERVICE_REF" ENABLE;
--------------------------------------------------------
--  DDL for Trigger INTERVENANT_HORO_VH
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."INTERVENANT_HORO_VH" 
AFTER INSERT OR UPDATE OR DELETE ON volume_horaire
FOR EACH ROW
DECLARE
  intervenant_id NUMERIC;
BEGIN
  
  
  
  IF DELETING THEN
    SELECT s.intervenant_id INTO intervenant_id FROM service s WHERE s.id = :OLD.service_id;
  
    ose_divers.intervenant_horodatage_service(
      intervenant_id,
      :OLD.type_volume_horaire_id,
      0,
      :OLD.histo_modificateur_id,
      :OLD.histo_modification
    );
  
  ELSE
    SELECT s.intervenant_id INTO intervenant_id FROM service s WHERE s.id = :NEW.service_id;
    
    ose_divers.intervenant_horodatage_service(
      intervenant_id,
      :NEW.type_volume_horaire_id,
      0,
      :NEW.histo_modificateur_id,
      :NEW.histo_modification
    );
  
  END IF;

END;
/
ALTER TRIGGER "OSE"."INTERVENANT_HORO_VH" ENABLE;
--------------------------------------------------------
--  DDL for Trigger INTERVENANT_HORO_VH_REF
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."INTERVENANT_HORO_VH_REF" 
AFTER INSERT OR UPDATE OR DELETE ON volume_horaire_ref
FOR EACH ROW
DECLARE
  intervenant_id NUMERIC;
BEGIN
  
  
  
  IF DELETING THEN
    SELECT s.intervenant_id INTO intervenant_id FROM service_referentiel s WHERE s.id = :OLD.service_referentiel_id;
  
    ose_divers.intervenant_horodatage_service(
      intervenant_id,
      :OLD.type_volume_horaire_id,
      1,
      :OLD.histo_modificateur_id,
      :OLD.histo_modification
    );
  
  ELSE
    SELECT s.intervenant_id INTO intervenant_id FROM service_referentiel s WHERE s.id = :NEW.service_referentiel_id;
    
    ose_divers.intervenant_horodatage_service(
      intervenant_id,
      :NEW.type_volume_horaire_id,
      1,
      :NEW.histo_modificateur_id,
      :NEW.histo_modification
    );
  
  END IF;

END;
/
ALTER TRIGGER "OSE"."INTERVENANT_HORO_VH_REF" ENABLE;
--------------------------------------------------------
--  DDL for Trigger INTERVENANT_RECHERCHE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."INTERVENANT_RECHERCHE" 
  BEFORE INSERT OR UPDATE OF NOM_USUEL, NOM_PATRONYMIQUE, PRENOM ON INTERVENANT
  REFERENCING FOR EACH ROW
BEGIN

  :NEW.critere_recherche := ose_divers.str_reduce( :NEW.nom_usuel || ' ' || :NEW.nom_patronymique || ' ' || :NEW.prenom );
  
END;
/
ALTER TRIGGER "OSE"."INTERVENANT_RECHERCHE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger MISE_EN_PAIEMENT_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."MISE_EN_PAIEMENT_CK" 
  BEFORE INSERT OR UPDATE ON "OSE"."MISE_EN_PAIEMENT"
  REFERENCING FOR EACH ROW
  DECLARE
  has_validation NUMERIC;
  has_mise_en_paiement NUMERIC;
BEGIN

  /* Initialisation des conditions */
  SELECT COUNT(*) INTO has_validation FROM validation v WHERE 
    v.id = :NEW.validation_id
    AND 1 = OSE_DIVERS.COMPRISE_ENTRE( v.histo_creation, v.histo_destruction );
  
  IF :NEW.date_mise_en_paiement IS NULL THEN
    has_mise_en_paiement := 0;
  ELSE
    has_mise_en_paiement := 1;
  END IF;

  /* Mise en place des contraintes */
  IF :NEW.formule_res_service_id IS NULL AND :NEW.formule_res_service_ref_id IS NULL THEN
    raise_application_error(-20101, 'La mise en paiement ne correspond √† aucun service ou service r√©f√©rentiel.');
  END IF;
  
  IF 1 = has_validation AND :NEW.date_validation IS NULL THEN
    raise_application_error(-20101, 'La validation de la mise en paiement num√©ro ' || :NEW.id || ' est bien renseign√©e mais la date de validation n''est pas pr√©cis√©e.');
  END IF;

  IF :NEW.periode_paiement_id IS NOT NULL AND :NEW.date_mise_en_paiement IS NULL THEN
    raise_application_error(-20101, 'La mise en paiement num√©ro ' || :NEW.id || ' est bien effectu√©e mais la date de mise en paiement n''est pas pr√©cis√©e.');
  END IF;

--  IF 0 = has_validation AND 1 = has_mise_en_paiement THEN
--    raise_application_error(-20101, 'La demande de mise en paiement num√©ro ' || :NEW.id || ' ne peut faire l''objet d''une mise en paiement tant qu''elle n''est pas valid√©e.');
--  END IF;

  IF 
    :OLD.validation_id IS NOT NULL AND 1 = ose_divers.comprise_entre( :OLD.histo_creation, :OLD.histo_destruction )
    AND 1 = has_validation AND 0 = ose_divers.comprise_entre( :NEW.histo_creation, :NEW.histo_destruction )
  THEN
    raise_application_error(-20101, 'Il est impossible de supprimer une mise en paiement valid√©e.');
  END IF;
END;
/
ALTER TRIGGER "OSE"."MISE_EN_PAIEMENT_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger MISE_EN_PAIEMENT_DEL_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."MISE_EN_PAIEMENT_DEL_CK" 
  BEFORE DELETE ON "OSE"."MISE_EN_PAIEMENT"
  REFERENCING FOR EACH ROW
  DECLARE
  has_validation NUMERIC;
BEGIN

  /* Initialisation des conditions */
  SELECT COUNT(*) INTO has_validation FROM validation v WHERE 
    v.id = :NEW.validation_id
    AND 1 = OSE_DIVERS.COMPRISE_ENTRE( v.histo_creation, v.histo_destruction );

  /* Mise en place des contraintes */
  IF 
    1 = has_validation AND 0 = ose_divers.comprise_entre( :OLD.histo_creation, :OLD.histo_destruction )
  THEN
    raise_application_error(-20101, 'Il est impossible de supprimer une mise en paiement valid√©e.');
  END IF;
END;
/
ALTER TRIGGER "OSE"."MISE_EN_PAIEMENT_DEL_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PFM_VOLUME_HORAIRE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."PFM_VOLUME_HORAIRE" 
BEFORE UPDATE ON volume_horaire
FOR EACH ROW
BEGIN
    -- si on met en buffer le temps de contr√¥ler le plafond
    IF :NEW.tem_plafond_fc_maj <> 1 THEN
      :NEW.buff_pfm_heures                := :OLD.heures;
      :NEW.buff_pfm_motif_non_paiement_id := :OLD.motif_non_paiement_id;
      :NEW.buff_pfm_histo_modification    := :OLD.histo_modification;
      :NEW.buff_pfm_histo_modificateur_id := :OLD.histo_modificateur_id;
    END IF;
END;
/
ALTER TRIGGER "OSE"."PFM_VOLUME_HORAIRE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SERVICE_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."SERVICE_CK" 
BEFORE INSERT OR UPDATE ON service
FOR EACH ROW
DECLARE 
  etablissement integer;
  res integer;
BEGIN
  
  etablissement := OSE_PARAMETRE.GET_ETABLISSEMENT();
  
  IF :NEW.etablissement_id = etablissement AND :NEW.element_pedagogique_id IS NULL THEN
    raise_application_error(-20101, 'Un enseignement doit obligatoirement √™tre renseign√© si le service est r√©alis√© en interne.');
  END IF;


  IF :NEW.etablissement_id <> etablissement AND OSE_DIVERS.INTERVENANT_HAS_PRIVILEGE(:NEW.intervenant_id, 'saisie_service_exterieur') = 0 THEN
    raise_application_error(-20101, 'Les intervenants vacataires n''ont pas la possibilit√© de renseigner des enseignements pris √† l''ext√©rieur.');
  END IF;

  IF :NEW.intervenant_id IS NOT NULL AND :NEW.element_pedagogique_id IS NOT NULL THEN
    SELECT
      count(*) INTO res
    FROM
      intervenant i,
      element_pedagogique ep
    WHERE
          i.id        = :NEW.intervenant_id
      AND ep.id       = :NEW.element_pedagogique_id
      AND ep.annee_id = i.annee_id
    ;
    
    IF 0 = res THEN -- ann√©es non concomitantes
      raise_application_error(-20101, 'L''ann√©e de l''intervenant ne correspond pas √† l''ann√©e de l''√©l√©ment p√©dagogique.');
    END IF;
  END IF;

  --IF :OLD.id IS NOT NULL AND ( :NEW.etablissement_id <> :OLD.etablissement_id OR :NEW.element_pedagogique_id <> :OLD.element_pedagogique_id ) THEN
    --UPDATE volume_horaire SET histo_destruction = SYSDATE, histo_destructeur_id = :NEW.histo_modificateur_id WHERE service_id = :NEW.id;
  --END IF;

END;
/
ALTER TRIGGER "OSE"."SERVICE_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SERVICE_HISTO_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."SERVICE_HISTO_CK" 
  BEFORE UPDATE OF intervenant_id, element_pedagogique_id, etablissement_id ON "OSE"."SERVICE" 
  REFERENCING FOR EACH ROW
  DECLARE
  has_validation integer;
BEGIN
  SELECT COUNT(*) INTO has_validation
  FROM
    VALIDATION_VOL_HORAIRE vvh
    JOIN validation v ON v.id = VVH.VALIDATION_ID
    JOIN volume_horaire vh ON vh.id = VVH.VOLUME_HORAIRE_ID
  WHERE
    V.HISTO_DESTRUCTION IS NULL
    AND vh.service_ID = :NEW.ID;

  IF 0 <> has_validation THEN
    raise_application_error(-20101, 'Il est impossible de modifier ou supprimer un service dont des heures ont d√©j√† √©t√© valid√©es.');
  END IF;

END;
/
ALTER TRIGGER "OSE"."SERVICE_HISTO_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SERVICE_HISTO_CK_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."SERVICE_HISTO_CK_S" 
AFTER UPDATE ON service
BEGIN
 -- En cas de restauration d'un service, on ne restaure pas les historiques de volumes horaires pour ne pas r√©cussiter d'√©ventuels volume horaires ind√©sirables car pr√©alablement supprim√©s
 FOR s IN (

    SELECT *
    FROM
      service s
    WHERE
      s.histo_destruction IS NOT NULL AND s.histo_destruction > SYSDATE - 1

  ) LOOP

    UPDATE VOLUME_HORAIRE SET histo_destruction = s.histo_destruction, histo_destructeur_id = s.histo_destructeur_id WHERE service_id = s.id AND VOLUME_HORAIRE.histo_destruction IS NULL;

  END LOOP;
   
END;
/
ALTER TRIGGER "OSE"."SERVICE_HISTO_CK_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger SERVICE_REFERENTIEL_HISTO_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."SERVICE_REFERENTIEL_HISTO_CK" 
BEFORE UPDATE OF 
  FONCTION_ID,
  INTERVENANT_ID,
  STRUCTURE_ID,
  HISTO_DESTRUCTION
ON service_referentiel FOR EACH ROW
DECLARE
  has_validation integer;
BEGIN
  SELECT COUNT(*) INTO has_validation
  FROM
    VALIDATION_VOL_HORAIRE_REF vvh
    JOIN validation v ON v.id = VVH.VALIDATION_ID
    JOIN volume_horaire_ref vh ON vh.id = vvh.volume_horaire_ref_id
  WHERE
    V.HISTO_DESTRUCTION IS NULL
    AND vh.service_referentiel_id = :OLD.ID;

  IF 0 <> has_validation THEN
    raise_application_error(-20101, 'Il est impossible de modifier ou supprimer du r√©f√©rentiel dont des heures ont d√©j√† √©t√© valid√©es.');
  END IF;

END;
/
ALTER TRIGGER "OSE"."SERVICE_REFERENTIEL_HISTO_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_AGR_AGREMENT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_AGREMENT" 
AFTER INSERT 
OR UPDATE OF 
    type_agrement_id,
		intervenant_id,
		histo_creation,
		histo_destruction,
		structure_id
OR DELETE ON AGREMENT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_AGR_AGREMENT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_AGR_AGREMENT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_AGREMENT_S" 
AFTER INSERT OR UPDATE OR DELETE ON AGREMENT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_AGR_AGREMENT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_AGR_ELEMENT_PEDAGOGIQUE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_ELEMENT_PEDAGOGIQUE" 
AFTER INSERT 
OR UPDATE OF 
    structure_id
OR DELETE ON ELEMENT_PEDAGOGIQUE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
         s.element_pedagogique_id = :NEW.id
      OR s.element_pedagogique_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_AGR_ELEMENT_PEDAGOGIQUE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_AGR_ELEMENT_PEDAGOGIQUE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_ELEMENT_PEDAGOGIQUE_S" 
AFTER INSERT OR UPDATE OR DELETE ON ELEMENT_PEDAGOGIQUE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_AGR_ELEMENT_PEDAGOGIQUE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_AGR_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
    histo_creation,
		histo_destruction,
		premier_recrutement,
		statut_id,
		annee_id
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :NEW.id );
  END IF;
  
  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :OLD.id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_AGR_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_AGR_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_AGR_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_AGR_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_SERVICE" 
AFTER INSERT 
OR UPDATE OF 
    element_pedagogique_id
OR DELETE ON SERVICE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_AGR_SERVICE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_AGR_SERVICE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_SERVICE_S" 
AFTER INSERT OR UPDATE OR DELETE ON SERVICE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_AGR_SERVICE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_AGR_TA_STATUT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_TA_STATUT" 
AFTER INSERT 
OR UPDATE OF 
    type_agrement_id,
		obligatoire,
		histo_creation,
		histo_destruction,
		premier_recrutement,
		statut_intervenant_id
OR DELETE ON TYPE_AGREMENT_STATUT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      statut_intervenant si
      JOIN intervenant i ON i.statut_id = si.id
    WHERE
         si.id = :NEW.statut_intervenant_id
      OR si.id = :OLD.statut_intervenant_id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( ose_agrement.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_AGR_TA_STATUT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_AGR_TA_STATUT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_AGR_TA_STATUT_S" 
AFTER INSERT OR UPDATE OR DELETE ON TYPE_AGREMENT_STATUT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_AGR_TA_STATUT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CLO_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CLO_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
  annee_id,
	statut_id,
	histo_creation,
	histo_destruction
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;
  
  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CLOTURE_REALISE.package_sujet, :NEW.id );
  END IF;
  
  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CLOTURE_REALISE.package_sujet, :OLD.id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_CLO_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CLO_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CLO_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CLO_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CLO_STATUT_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CLO_STATUT_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
    peut_cloturer_saisie
OR DELETE ON STATUT_INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;
  
  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_CLOTURE_REALISE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_CLO_STATUT_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CLO_STATUT_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CLO_STATUT_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON STATUT_INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CLO_STATUT_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CLO_VALIDATION
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CLO_VALIDATION" 
AFTER INSERT 
OR UPDATE OF 
    intervenant_id,
    type_validation_id,
    histo_creation,
    histo_destruction
OR DELETE ON VALIDATION
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;
  
  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CLOTURE_REALISE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CLOTURE_REALISE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_CLO_VALIDATION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CLO_VALIDATION_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CLO_VALIDATION_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CLO_VALIDATION_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_CONTRAT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_CONTRAT" 
AFTER INSERT 
OR UPDATE OF 
	histo_creation,
	histo_destruction,
	validation_id,
	date_retour_signe
OR DELETE ON CONTRAT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_CRT_CONTRAT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_CONTRAT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_CONTRAT_S" 
AFTER INSERT OR UPDATE OR DELETE ON CONTRAT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CRT_CONTRAT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_ELEMENT_PEDAGOGIQUE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_ELEMENT_PEDAGOGIQUE" 
AFTER INSERT 
OR UPDATE OF 
  structure_id
OR DELETE ON ELEMENT_PEDAGOGIQUE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
         s.element_pedagogique_id = :NEW.id
      OR s.element_pedagogique_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_CRT_ELEMENT_PEDAGOGIQUE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_ELEMENT_PEDAGOGIQUE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_ELEMENT_PEDAGOGIQUE_S" 
AFTER INSERT OR UPDATE OR DELETE ON ELEMENT_PEDAGOGIQUE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CRT_ELEMENT_PEDAGOGIQUE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
  annee_id,
  structure_id,
	statut_id,
	histo_creation,
	histo_destruction
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :OLD.id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_CRT_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CRT_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_SERVICE" 
AFTER INSERT 
OR UPDATE OF 
  intervenant_id,
	histo_creation,
	histo_destruction
OR DELETE ON SERVICE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_CRT_SERVICE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_SERVICE_REFERENTIEL
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_SERVICE_REFERENTIEL" 
AFTER INSERT 
OR UPDATE OF 
	intervenant_id,
  structure_id,
	histo_creation,
	histo_destruction
OR DELETE ON SERVICE_REFERENTIEL
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_CRT_SERVICE_REFERENTIEL" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_SERVICE_REFERENTIEL_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_SERVICE_REFERENTIEL_S" 
AFTER INSERT OR UPDATE OR DELETE ON SERVICE_REFERENTIEL
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CRT_SERVICE_REFERENTIEL_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_SERVICE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_SERVICE_S" 
AFTER INSERT OR UPDATE OR DELETE ON SERVICE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CRT_SERVICE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_STATUT_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_STATUT_INTERVENANT" 
AFTER UPDATE OF 
  peut_avoir_contrat
ON STATUT_INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_CRT_STATUT_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_STATUT_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_STATUT_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON STATUT_INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CRT_STATUT_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_VALIDATION
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VALIDATION" 
AFTER INSERT 
OR UPDATE OF 
  histo_creation,
	histo_destruction
OR DELETE ON VALIDATION
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_CRT_VALIDATION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_VALIDATION_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VALIDATION_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CRT_VALIDATION_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_VALIDATION_VOL_HORAIRE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VALIDATION_VOL_HORAIRE" 
AFTER INSERT 
OR UPDATE OF 
  validation_id,
	volume_horaire_id
OR DELETE ON VALIDATION_VOL_HORAIRE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire vh ON vh.service_id = s.id
    WHERE
      vh.id = :NEW.volume_horaire_id
      OR vh.id = :OLD.volume_horaire_id    

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_CRT_VALIDATION_VOL_HORAIRE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_VALIDATION_VOL_HORAIRE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VALIDATION_VOL_HORAIRE_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION_VOL_HORAIRE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CRT_VALIDATION_VOL_HORAIRE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_VAL_VOL_HORAIRE_REF
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VAL_VOL_HORAIRE_REF" 
AFTER INSERT 
OR UPDATE OF 
  volume_horaire_ref_id,
	validation_id
OR DELETE ON VALIDATION_VOL_HORAIRE_REF
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire_ref vh ON vh.service_referentiel_id = s.id
    WHERE
      vh.id = :NEW.volume_horaire_ref_id
      OR vh.id = :OLD.volume_horaire_ref_id    

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_CRT_VAL_VOL_HORAIRE_REF" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_VAL_VOL_HORAIRE_REF_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VAL_VOL_HORAIRE_REF_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION_VOL_HORAIRE_REF
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CRT_VAL_VOL_HORAIRE_REF_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_VOLUME_HORAIRE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VOLUME_HORAIRE" 
AFTER INSERT 
OR UPDATE OF 
  service_id,
	contrat_id,
	heures,
	histo_creation,
	histo_destruction
OR DELETE ON VOLUME_HORAIRE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      s.id = :NEW.service_id
      OR s.id = :OLD.service_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_CRT_VOLUME_HORAIRE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_VOLUME_HORAIRE_REF
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VOLUME_HORAIRE_REF" 
AFTER INSERT 
OR UPDATE OF 
  service_referentiel_id,
	heures,
	histo_creation,
	histo_destruction
OR DELETE ON VOLUME_HORAIRE_REF
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service_referentiel s
    WHERE
      s.id = :NEW.service_referentiel_id
      OR s.id = :OLD.service_referentiel_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_CONTRAT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_CRT_VOLUME_HORAIRE_REF" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_VOLUME_HORAIRE_REF_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VOLUME_HORAIRE_REF_S" 
AFTER INSERT OR UPDATE OR DELETE ON VOLUME_HORAIRE_REF
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CRT_VOLUME_HORAIRE_REF_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_CRT_VOLUME_HORAIRE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_CRT_VOLUME_HORAIRE_S" 
AFTER INSERT OR UPDATE OR DELETE ON VOLUME_HORAIRE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_CRT_VOLUME_HORAIRE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_DOS_DOSSIER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_DOSSIER" 
AFTER INSERT 
OR UPDATE OF 
  intervenant_id,
	histo_creation,
	histo_destruction
OR DELETE ON DOSSIER
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_DOS_DOSSIER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_DOS_DOSSIER_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_DOSSIER_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_DOS_DOSSIER_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_DOS_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
  annee_id,
  statut_id,
	histo_creation,
	histo_destruction
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, :NEW.id );
  END IF;
  
  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, :OLD.id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_DOS_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_DOS_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_DOS_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_DOS_STATUT_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_STATUT_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
    peut_saisir_dossier
OR DELETE ON STATUT_INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_DOS_STATUT_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_DOS_STATUT_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_STATUT_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON STATUT_INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_DOS_STATUT_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_DOS_VALIDATION
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_VALIDATION" 
AFTER INSERT 
OR UPDATE OF 
    intervenant_id,
    type_validation_id,
    histo_creation,
    histo_destruction
OR DELETE ON VALIDATION
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_DOSSIER.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_DOS_VALIDATION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_DOS_VALIDATION_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_DOS_VALIDATION_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_DOS_VALIDATION_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_LIE_LIEN
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_LIE_LIEN" 
AFTER INSERT OR UPDATE OF 
    noeud_sup_id, noeud_inf_id, structure_id, histo_destruction
OR DELETE ON LIEN
FOR EACH ROW
BEGIN
  RETURN;
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ptbl_lien.package_sujet, :NEW.id );
  END IF;
  
  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ptbl_lien.package_sujet, :OLD.id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_LIE_LIEN" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_LIE_LIEN_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_LIE_LIEN_S" 
AFTER INSERT OR UPDATE OR DELETE ON LIEN
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_LIE_LIEN_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_LIE_SCENARIO
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_LIE_SCENARIO" 
AFTER INSERT OR UPDATE OF 
    histo_destruction
OR DELETE ON SCENARIO
FOR EACH ROW
BEGIN
  RETURN;
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      sl.lien_id
    FROM
      scenario_lien sl
    WHERE
         sl.scenario_id = :NEW.id
      OR sl.scenario_id = :OLD.id
  
  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( ptbl_lien.package_sujet, p.lien_id );

  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_LIE_SCENARIO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_LIE_SCENARIO_LIEN
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_LIE_SCENARIO_LIEN" 
AFTER INSERT OR UPDATE OF 
  actif, poids, choix_minimum, choix_maximum, histo_destruction
OR DELETE ON SCENARIO_LIEN
FOR EACH ROW
BEGIN
  RETURN;
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.lien_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ptbl_lien.package_sujet, :NEW.lien_id );
  END IF;
  
  IF :OLD.lien_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( ptbl_lien.package_sujet, :OLD.lien_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_LIE_SCENARIO_LIEN" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_LIE_SCENARIO_LIEN_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_LIE_SCENARIO_LIEN_S" 
AFTER INSERT OR UPDATE OR DELETE ON SCENARIO_LIEN
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_LIE_SCENARIO_LIEN_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_LIE_SCENARIO_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_LIE_SCENARIO_S" 
AFTER INSERT OR UPDATE OR DELETE ON SCENARIO
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_LIE_SCENARIO_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PAI_ELEMENT_PEDAGOGIQUE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_ELEMENT_PEDAGOGIQUE" 
AFTER INSERT 
OR UPDATE OF 
  structure_id
OR DELETE ON ELEMENT_PEDAGOGIQUE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
         s.element_pedagogique_id = :NEW.id
      OR s.element_pedagogique_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_PAI_ELEMENT_PEDAGOGIQUE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PAI_ELEMENT_PEDAGOGIQUE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_ELEMENT_PEDAGOGIQUE_S" 
AFTER INSERT OR UPDATE OR DELETE ON ELEMENT_PEDAGOGIQUE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PAI_ELEMENT_PEDAGOGIQUE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PAI_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
  annee_id,
	structure_id
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, :OLD.id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_PAI_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PAI_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PAI_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PAI_MISE_EN_PAIEMENT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_MISE_EN_PAIEMENT" 
AFTER INSERT 
OR UPDATE OF 
  periode_paiement_id,
	formule_res_service_id,
	formule_res_service_ref_id,
  heures,
	histo_creation,
	histo_destruction
OR DELETE ON MISE_EN_PAIEMENT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      fr.intervenant_id
    FROM
      formule_resultat fr
      LEFT JOIN formule_resultat_service frs ON frs.formule_resultat_id = fr.id
      LEFT JOIN formule_resultat_service_ref frsr ON frsr.formule_resultat_id = fr.id
    WHERE
         (frs.id  IS NOT NULL AND (frs.id  = :NEW.formule_res_service_id     OR frs.id  = :NEW.formule_res_service_id    ))
      OR (frsr.id IS NOT NULL AND (frsr.id = :NEW.formule_res_service_ref_id OR frsr.id = :NEW.formule_res_service_ref_id))
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_PAI_MISE_EN_PAIEMENT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PAI_MISE_EN_PAIEMENT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_MISE_EN_PAIEMENT_S" 
AFTER INSERT OR UPDATE OR DELETE ON MISE_EN_PAIEMENT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PAI_MISE_EN_PAIEMENT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PAI_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_SERVICE" 
AFTER INSERT 
OR UPDATE OF 
    element_pedagogique_id
OR DELETE ON SERVICE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_PAI_SERVICE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PAI_SERVICE_REFERENTIEL
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_SERVICE_REFERENTIEL" 
AFTER INSERT 
OR UPDATE OF 
    structure_id
OR DELETE ON SERVICE_REFERENTIEL
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PAIEMENT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_PAI_SERVICE_REFERENTIEL" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PAI_SERVICE_REFERENTIEL_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_SERVICE_REFERENTIEL_S" 
AFTER INSERT OR UPDATE OR DELETE ON SERVICE_REFERENTIEL
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PAI_SERVICE_REFERENTIEL_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PAI_SERVICE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PAI_SERVICE_S" 
AFTER INSERT OR UPDATE OR DELETE ON SERVICE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PAI_SERVICE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJD_DOSSIER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_DOSSIER" 
AFTER INSERT 
OR UPDATE OF 
  intervenant_id,
	histo_creation,
	histo_destruction,
	rib
OR DELETE ON DOSSIER
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_PJD_DOSSIER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJD_DOSSIER_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_DOSSIER_S" 
AFTER INSERT OR UPDATE OR DELETE ON DOSSIER
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PJD_DOSSIER_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJD_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
  annee_id,
	statut_id,
	bic,
	iban,
	premier_recrutement,
	histo_creation,
	histo_destruction
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, :OLD.id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_PJD_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJD_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PJD_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJD_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_SERVICE" 
AFTER INSERT 
OR UPDATE OF 
  intervenant_id,
	histo_creation,
	histo_destruction,
	element_pedagogique_id
OR DELETE ON SERVICE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_PJD_SERVICE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJD_SERVICE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_SERVICE_S" 
AFTER INSERT OR UPDATE OR DELETE ON SERVICE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PJD_SERVICE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJD_T_PIECE_JOINTE_STATUT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_T_PIECE_JOINTE_STATUT" 
AFTER INSERT 
OR UPDATE OF 
  statut_intervenant_id,
	histo_creation,
	histo_destruction,
	type_piece_jointe_id,
	seuil_hetd,
	premier_recrutement
OR DELETE ON TYPE_PIECE_JOINTE_STATUT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.statut_intervenant_id
      OR i.statut_id = :OLD.statut_intervenant_id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_PJD_T_PIECE_JOINTE_STATUT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJD_T_PIECE_JOINTE_STATUT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_T_PIECE_JOINTE_STATUT_S" 
AFTER INSERT OR UPDATE OR DELETE ON TYPE_PIECE_JOINTE_STATUT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PJD_T_PIECE_JOINTE_STATUT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJD_TYPE_PIECE_JOINTE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_TYPE_PIECE_JOINTE" 
AFTER INSERT 
OR UPDATE OF 
  histo_creation,
	histo_destruction,
	code
OR DELETE ON TYPE_PIECE_JOINTE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
      JOIN statut_intervenant si ON si.id = i.statut_id
      JOIN type_piece_jointe_statut tpjs ON tpjs.statut_intervenant_id = si.id
    WHERE
         TPJS.TYPE_PIECE_JOINTE_ID = :NEW.id
      OR TPJS.TYPE_PIECE_JOINTE_ID = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_PJD_TYPE_PIECE_JOINTE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJD_TYPE_PIECE_JOINTE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_TYPE_PIECE_JOINTE_S" 
AFTER INSERT OR UPDATE OR DELETE ON TYPE_PIECE_JOINTE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PJD_TYPE_PIECE_JOINTE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJD_VOLUME_HORAIRE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_VOLUME_HORAIRE" 
AFTER INSERT 
OR UPDATE OF 
  heures,
	service_id,
	type_volume_horaire_id,
	histo_creation,
	histo_destruction,
	motif_non_paiement_id
OR DELETE ON VOLUME_HORAIRE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      s.id = :NEW.service_id
      OR s.id = :OLD.service_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_DEMANDE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_PJD_VOLUME_HORAIRE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJD_VOLUME_HORAIRE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJD_VOLUME_HORAIRE_S" 
AFTER INSERT OR UPDATE OR DELETE ON VOLUME_HORAIRE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PJD_VOLUME_HORAIRE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJF_DOSSIER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_DOSSIER" 
AFTER INSERT 
OR UPDATE OF 
  intervenant_id
OR DELETE ON DOSSIER
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_PJF_DOSSIER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJF_DOSSIER_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_DOSSIER_S" 
AFTER INSERT OR UPDATE OR DELETE ON DOSSIER
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PJF_DOSSIER_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJF_FICHER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_FICHER" 
AFTER INSERT 
OR UPDATE OF 
  histo_creation,
	histo_destruction
OR DELETE ON FICHIER
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      pj.intervenant_id
    FROM
      piece_jointe pj
      JOIN piece_jointe_fichier pjf ON pjf.piece_jointe_id = pj.id
    WHERE
         pjf.fichier_id = :NEW.id
      OR pjf.fichier_id = :OLD.id

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_PJF_FICHER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJF_FICHER_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_FICHER_S" 
AFTER INSERT OR UPDATE OR DELETE ON FICHIER
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PJF_FICHER_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJF_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
  annee_id,
	histo_creation,
	histo_destruction
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :OLD.id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_PJF_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJF_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PJF_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJF_PIECE_JOINTE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_PIECE_JOINTE" 
AFTER INSERT 
OR UPDATE OF 
  type_piece_jointe_id,
	intervenant_id,
	validation_id,
	histo_creation,
	histo_destruction
OR DELETE ON PIECE_JOINTE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;
  
  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :NEW.intervenant_id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_PJF_PIECE_JOINTE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJF_PIECE_JOINTE_FICHER
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_PIECE_JOINTE_FICHER" 
AFTER INSERT 
OR UPDATE OF 
  piece_jointe_id,
	fichier_id
OR DELETE ON PIECE_JOINTE_FICHIER
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      pj.intervenant_id
    FROM
      piece_jointe pj
    WHERE
         pj.id = :NEW.piece_jointe_id
      OR pj.id = :OLD.piece_jointe_id

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_PJF_PIECE_JOINTE_FICHER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJF_PIECE_JOINTE_FICHER_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_PIECE_JOINTE_FICHER_S" 
AFTER INSERT OR UPDATE OR DELETE ON PIECE_JOINTE_FICHIER
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PJF_PIECE_JOINTE_FICHER_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJF_PIECE_JOINTE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_PIECE_JOINTE_S" 
AFTER INSERT OR UPDATE OR DELETE ON PIECE_JOINTE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PJF_PIECE_JOINTE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJF_VALIDATION
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_VALIDATION" 
AFTER INSERT 
OR UPDATE OF 
  histo_creation,
	histo_destruction
OR DELETE ON VALIDATION
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :NEW.intervenant_id );
  END IF;

  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_PIECE_JOINTE_FOURNIE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_PJF_VALIDATION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_PJF_VALIDATION_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_PJF_VALIDATION_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_PJF_VALIDATION_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRR_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
  annee_id,
	statut_id,
	histo_creation,
	histo_destruction
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, :OLD.id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_SRR_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRR_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRR_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRR_SERVICE_REFERENTIEL
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_SERVICE_REFERENTIEL" 
AFTER INSERT 
OR UPDATE OF 
  structure_id,
	intervenant_id,
	histo_creation,
	histo_destruction
OR DELETE ON SERVICE_REFERENTIEL
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_SRR_SERVICE_REFERENTIEL" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRR_SERVICE_REFERENTIEL_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_SERVICE_REFERENTIEL_S" 
AFTER INSERT OR UPDATE OR DELETE ON SERVICE_REFERENTIEL
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRR_SERVICE_REFERENTIEL_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRR_STATUT_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_STATUT_INTERVENANT" 
AFTER UPDATE OF 
    peut_saisir_referentiel
ON STATUT_INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_SRR_STATUT_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRR_STATUT_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_STATUT_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON STATUT_INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRR_STATUT_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRR_VALIDATION
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_VALIDATION" 
AFTER INSERT 
OR UPDATE OF 
  histo_creation,
	histo_destruction
OR DELETE ON VALIDATION
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_SRR_VALIDATION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRR_VALIDATION_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_VALIDATION_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRR_VALIDATION_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRR_VAL_VOL_HORAIRE_REF
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_VAL_VOL_HORAIRE_REF" 
AFTER INSERT 
OR UPDATE OF 
  volume_horaire_ref_id,
	validation_id
OR DELETE ON VALIDATION_VOL_HORAIRE_REF
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire_ref vh ON vh.service_referentiel_id = s.id
    WHERE
      vh.id = :NEW.volume_horaire_ref_id
      OR vh.id = :OLD.volume_horaire_ref_id    

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_SRR_VAL_VOL_HORAIRE_REF" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRR_VAL_VOL_HORAIRE_REF_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_VAL_VOL_HORAIRE_REF_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION_VOL_HORAIRE_REF
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRR_VAL_VOL_HORAIRE_REF_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRR_VOLUME_HORAIRE_REF
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_VOLUME_HORAIRE_REF" 
AFTER INSERT 
OR UPDATE OF 
  type_volume_horaire_id,
	service_referentiel_id,
	histo_creation,
	histo_destruction
OR DELETE ON VOLUME_HORAIRE_REF
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service_referentiel s
    WHERE
      s.id = :NEW.service_referentiel_id
      OR s.id = :OLD.service_referentiel_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_SRR_VOLUME_HORAIRE_REF" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRR_VOLUME_HORAIRE_REF_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRR_VOLUME_HORAIRE_REF_S" 
AFTER INSERT OR UPDATE OR DELETE ON VOLUME_HORAIRE_REF
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRR_VOLUME_HORAIRE_REF_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRS_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
  annee_id,
	statut_id,
	histo_creation,
	histo_destruction
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, :OLD.id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_SRS_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRS_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRS_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRS_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_SERVICE" 
AFTER INSERT 
OR UPDATE OF 
  intervenant_id,
	histo_creation,
	histo_destruction
OR DELETE ON SERVICE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_SRS_SERVICE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRS_SERVICE_REFERENTIEL
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_SERVICE_REFERENTIEL" 
AFTER INSERT 
OR UPDATE OF 
	intervenant_id,
	histo_creation,
	histo_destruction
OR DELETE ON SERVICE_REFERENTIEL
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_SRS_SERVICE_REFERENTIEL" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRS_SERVICE_REFERENTIEL_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_SERVICE_REFERENTIEL_S" 
AFTER INSERT OR UPDATE OR DELETE ON SERVICE_REFERENTIEL
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRS_SERVICE_REFERENTIEL_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRS_SERVICE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_SERVICE_S" 
AFTER INSERT OR UPDATE OR DELETE ON SERVICE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRS_SERVICE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRS_STATUT_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_STATUT_INTERVENANT" 
AFTER UPDATE OF 
    peut_saisir_service,
	peut_saisir_referentiel
ON STATUT_INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_SRS_STATUT_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRS_STATUT_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_STATUT_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON STATUT_INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRS_STATUT_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRS_VOLUME_HORAIRE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_VOLUME_HORAIRE" 
AFTER INSERT 
OR UPDATE OF 
  heures,
	service_id,
	type_volume_horaire_id,
	histo_creation,
	histo_destruction
OR DELETE ON VOLUME_HORAIRE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      s.id = :NEW.service_id
      OR s.id = :OLD.service_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_SRS_VOLUME_HORAIRE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRS_VOLUME_HORAIRE_REF
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_VOLUME_HORAIRE_REF" 
AFTER INSERT 
OR UPDATE OF 
  heures,
	service_referentiel_id,
	type_volume_horaire_id,
	histo_creation,
	histo_destruction
OR DELETE ON VOLUME_HORAIRE_REF
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service_referentiel s
    WHERE
      s.id = :NEW.service_referentiel_id
      OR s.id = :OLD.service_referentiel_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE_SAISIE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_SRS_VOLUME_HORAIRE_REF" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRS_VOLUME_HORAIRE_REF_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_VOLUME_HORAIRE_REF_S" 
AFTER INSERT OR UPDATE OR DELETE ON VOLUME_HORAIRE_REF
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRS_VOLUME_HORAIRE_REF_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRS_VOLUME_HORAIRE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRS_VOLUME_HORAIRE_S" 
AFTER INSERT OR UPDATE OR DELETE ON VOLUME_HORAIRE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRS_VOLUME_HORAIRE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_ELEMENT_PEDAGOGIQUE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_ELEMENT_PEDAGOGIQUE" 
AFTER INSERT 
OR UPDATE OF 
  structure_id
OR DELETE ON ELEMENT_PEDAGOGIQUE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
         s.element_pedagogique_id = :NEW.id
      OR s.element_pedagogique_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_SRV_ELEMENT_PEDAGOGIQUE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_ELEMENT_PEDAGOGIQUE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_ELEMENT_PEDAGOGIQUE_S" 
AFTER INSERT OR UPDATE OR DELETE ON ELEMENT_PEDAGOGIQUE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRV_ELEMENT_PEDAGOGIQUE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
  annee_id,
	statut_id,
	structure_id,
	histo_creation,
	histo_destruction
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, :OLD.id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_SRV_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRV_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_SERVICE" 
AFTER INSERT 
OR UPDATE OF 
  intervenant_id,
	histo_creation,
	histo_destruction,
	element_pedagogique_id
OR DELETE ON SERVICE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_SRV_SERVICE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_SERVICE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_SERVICE_S" 
AFTER INSERT OR UPDATE OR DELETE ON SERVICE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRV_SERVICE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_STATUT_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_STATUT_INTERVENANT" 
AFTER UPDATE OF 
    peut_saisir_service
ON STATUT_INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_SRV_STATUT_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_STATUT_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_STATUT_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON STATUT_INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRV_STATUT_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_VALIDATION
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_VALIDATION" 
AFTER INSERT 
OR UPDATE OF 
  histo_creation,
	histo_destruction
OR DELETE ON VALIDATION
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_SRV_VALIDATION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_VALIDATION_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_VALIDATION_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRV_VALIDATION_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_VALIDATION_VOL_HORAIRE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_VALIDATION_VOL_HORAIRE" 
AFTER INSERT 
OR UPDATE OF 
  volume_horaire_id,
	validation_id
OR DELETE ON VALIDATION_VOL_HORAIRE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire vh ON vh.service_id = s.id
    WHERE
      vh.id = :NEW.volume_horaire_id
      OR vh.id = :OLD.volume_horaire_id    

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_SRV_VALIDATION_VOL_HORAIRE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_VALIDATION_VOL_HORAIRE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_VALIDATION_VOL_HORAIRE_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION_VOL_HORAIRE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRV_VALIDATION_VOL_HORAIRE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_VOLUME_HORAIRE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_VOLUME_HORAIRE" 
AFTER INSERT 
OR UPDATE OF 
  type_volume_horaire_id,
	service_id,
	histo_creation,
	histo_destruction
OR DELETE ON VOLUME_HORAIRE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      s.id = :NEW.service_id
      OR s.id = :OLD.service_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_SERVICE.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_SRV_VOLUME_HORAIRE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_SRV_VOLUME_HORAIRE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_SRV_VOLUME_HORAIRE_S" 
AFTER INSERT OR UPDATE OR DELETE ON VOLUME_HORAIRE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_SRV_VOLUME_HORAIRE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_ELEMENT_PEDAGOGIQUE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_ELEMENT_PEDAGOGIQUE" 
AFTER INSERT 
OR UPDATE OF 
  structure_id
OR DELETE ON ELEMENT_PEDAGOGIQUE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
         s.element_pedagogique_id = :NEW.id
      OR s.element_pedagogique_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_VAE_ELEMENT_PEDAGOGIQUE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_ELEMENT_PEDAGOGIQUE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_ELEMENT_PEDAGOGIQUE_S" 
AFTER INSERT OR UPDATE OR DELETE ON ELEMENT_PEDAGOGIQUE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAE_ELEMENT_PEDAGOGIQUE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
  annee_id,
	structure_id,
  statut_id,
	histo_creation,
	histo_destruction
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, :OLD.id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_VAE_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAE_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_REGLE_STRUCTURE_VAL
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_REGLE_STRUCTURE_VAL" 
AFTER UPDATE OF 
  priorite,
	type_intervenant_id,
	type_volume_horaire_id
ON REGLE_STRUCTURE_VALIDATION
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
      JOIN statut_intervenant si ON si.id = i.id
    WHERE
         si.type_intervenant_id = :NEW.type_intervenant_id
      OR si.type_intervenant_id = :OLD.type_intervenant_id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire vh ON vh.service_id = s.id
    WHERE
         vh.type_volume_horaire_id = :NEW.type_volume_horaire_id
      OR vh.type_volume_horaire_id = :OLD.type_volume_horaire_id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_VAE_REGLE_STRUCTURE_VAL" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_REGLE_STRUCTURE_VAL_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_REGLE_STRUCTURE_VAL_S" 
AFTER INSERT OR UPDATE OR DELETE ON REGLE_STRUCTURE_VALIDATION
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAE_REGLE_STRUCTURE_VAL_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_SERVICE" 
AFTER INSERT 
OR UPDATE OF 
	intervenant_id,
	element_pedagogique_id,
	histo_creation,
	histo_destruction
OR DELETE ON SERVICE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, :NEW.intervenant_id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_VAE_SERVICE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_SERVICE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_SERVICE_S" 
AFTER INSERT OR UPDATE OR DELETE ON SERVICE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAE_SERVICE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_STATUT_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_STATUT_INTERVENANT" 
AFTER UPDATE OF 
  type_intervenant_id
ON STATUT_INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_VAE_STATUT_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_STATUT_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_STATUT_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON STATUT_INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAE_STATUT_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_STRUCTURE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_STRUCTURE" 
AFTER UPDATE OF 
	niveau,
	histo_creation,
	histo_destruction
ON STRUCTURE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      tve.intervenant_id
    FROM
      tbl_validation_enseignement tve
    WHERE
         tve.structure_id = :NEW.id
      OR tve.structure_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_VAE_STRUCTURE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_STRUCTURE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_STRUCTURE_S" 
AFTER INSERT OR UPDATE OR DELETE ON STRUCTURE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAE_STRUCTURE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_VALIDATION
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_VALIDATION" 
AFTER INSERT 
OR UPDATE OF 
  histo_creation,
	histo_destruction
OR DELETE ON VALIDATION
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_VAE_VALIDATION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_VALIDATION_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_VALIDATION_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAE_VALIDATION_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_VALIDATION_VOL_HORAIRE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_VALIDATION_VOL_HORAIRE" 
AFTER INSERT 
OR UPDATE OF 
  volume_horaire_id,
	validation_id
OR DELETE ON VALIDATION_VOL_HORAIRE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire vh ON vh.service_id = s.id
    WHERE
      vh.id = :NEW.volume_horaire_id
      OR vh.id = :OLD.volume_horaire_id    

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_VAE_VALIDATION_VOL_HORAIRE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_VALIDATION_VOL_HORAIRE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_VALIDATION_VOL_HORAIRE_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION_VOL_HORAIRE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAE_VALIDATION_VOL_HORAIRE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_VOLUME_HORAIRE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_VOLUME_HORAIRE" 
AFTER INSERT 
OR UPDATE OF 
  type_volume_horaire_id,
	service_id,
	histo_creation,
	histo_destruction
OR DELETE ON VOLUME_HORAIRE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
    WHERE
      s.id = :NEW.service_id
      OR s.id = :OLD.service_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_ENSEIGNEMENT.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_VAE_VOLUME_HORAIRE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAE_VOLUME_HORAIRE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAE_VOLUME_HORAIRE_S" 
AFTER INSERT OR UPDATE OR DELETE ON VOLUME_HORAIRE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAE_VOLUME_HORAIRE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_INTERVENANT" 
AFTER INSERT 
OR UPDATE OF 
  annee_id,
	structure_id,
  statut_id,
	histo_creation,
	histo_destruction
OR DELETE ON INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, :NEW.id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, :OLD.id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_VAR_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAR_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_REGLE_STRUCTURE_VAL
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_REGLE_STRUCTURE_VAL" 
AFTER UPDATE OF 
  priorite,
	type_intervenant_id,
	type_volume_horaire_id
ON REGLE_STRUCTURE_VALIDATION
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
      JOIN statut_intervenant si ON si.id = i.id
    WHERE
         si.type_intervenant_id = :NEW.type_intervenant_id
      OR si.type_intervenant_id = :OLD.type_intervenant_id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service s
      JOIN volume_horaire vh ON vh.service_id = s.id
    WHERE
         vh.type_volume_horaire_id = :NEW.type_volume_horaire_id
      OR vh.type_volume_horaire_id = :OLD.type_volume_horaire_id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_VAR_REGLE_STRUCTURE_VAL" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_REGLE_STRUCTURE_VAL_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_REGLE_STRUCTURE_VAL_S" 
AFTER INSERT OR UPDATE OR DELETE ON REGLE_STRUCTURE_VALIDATION
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAR_REGLE_STRUCTURE_VAL_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_SERVICE_REFERENTIEL
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_SERVICE_REFERENTIEL" 
AFTER INSERT 
OR UPDATE OF 
	intervenant_id,
  structure_id,
	histo_creation,
	histo_destruction
OR DELETE ON SERVICE_REFERENTIEL
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, :NEW.intervenant_id );
  END IF;

  IF :OLD.id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_VAR_SERVICE_REFERENTIEL" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_SERVICE_REFERENTIEL_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_SERVICE_REFERENTIEL_S" 
AFTER INSERT OR UPDATE OR DELETE ON SERVICE_REFERENTIEL
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAR_SERVICE_REFERENTIEL_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_STATUT_INTERVENANT
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_STATUT_INTERVENANT" 
AFTER UPDATE OF 
  type_intervenant_id
ON STATUT_INTERVENANT
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      i.id intervenant_id
    FROM
      intervenant i
    WHERE
         i.statut_id = :NEW.id
      OR i.statut_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_VAR_STATUT_INTERVENANT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_STATUT_INTERVENANT_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_STATUT_INTERVENANT_S" 
AFTER INSERT OR UPDATE OR DELETE ON STATUT_INTERVENANT
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAR_STATUT_INTERVENANT_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_STRUCTURE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_STRUCTURE" 
AFTER UPDATE OF 
	niveau,
	histo_creation,
	histo_destruction
ON STRUCTURE
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      tve.intervenant_id
    FROM
      tbl_validation_enseignement tve
    WHERE
         tve.structure_id = :NEW.id
      OR tve.structure_id = :OLD.id
  
  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_VAR_STRUCTURE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_STRUCTURE_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_STRUCTURE_S" 
AFTER INSERT OR UPDATE OR DELETE ON STRUCTURE
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAR_STRUCTURE_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_VALIDATION
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_VALIDATION" 
AFTER INSERT 
OR UPDATE OF 
  histo_creation,
	histo_destruction
OR DELETE ON VALIDATION
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  IF :NEW.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, :NEW.intervenant_id );
  END IF;
  
  IF :OLD.intervenant_id IS NOT NULL THEN
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, :OLD.intervenant_id );
  END IF;

END;
/
ALTER TRIGGER "OSE"."T_VAR_VALIDATION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_VALIDATION_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_VALIDATION_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAR_VALIDATION_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_VAL_VOL_HORAIRE_REF
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_VAL_VOL_HORAIRE_REF" 
AFTER INSERT 
OR UPDATE OF 
  volume_horaire_ref_id,
	validation_id
OR DELETE ON VALIDATION_VOL_HORAIRE_REF
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (

    SELECT DISTINCT
      s.intervenant_id
    FROM
      service_referentiel s
      JOIN volume_horaire_ref vh ON vh.service_referentiel_id = s.id
    WHERE
      vh.id = :NEW.volume_horaire_ref_id
      OR vh.id = :OLD.volume_horaire_ref_id    

  ) LOOP

    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, p.intervenant_id );

  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_VAR_VAL_VOL_HORAIRE_REF" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_VAL_VOL_HORAIRE_REF_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_VAL_VOL_HORAIRE_REF_S" 
AFTER INSERT OR UPDATE OR DELETE ON VALIDATION_VOL_HORAIRE_REF
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAR_VAL_VOL_HORAIRE_REF_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_VOLUME_HORAIRE_REF
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_VOLUME_HORAIRE_REF" 
AFTER INSERT 
OR UPDATE OF 
  type_volume_horaire_id,
	service_referentiel_id,
	histo_creation,
	histo_destruction
OR DELETE ON VOLUME_HORAIRE_REF
FOR EACH ROW
BEGIN
  IF NOT OSE_EVENT.GET_ACTIF THEN RETURN; END IF;

  FOR p IN (
  
    SELECT DISTINCT
      s.intervenant_id
    FROM
      service_referentiel s
    WHERE
      s.id = :NEW.service_referentiel_id
      OR s.id = :OLD.service_referentiel_id    

  ) LOOP
  
    OSE_EVENT.DEMANDE_CALCUL( OSE_VALIDATION_REFERENTIEL.package_sujet, p.intervenant_id );
  
  END LOOP;

END;
/
ALTER TRIGGER "OSE"."T_VAR_VOLUME_HORAIRE_REF" ENABLE;
--------------------------------------------------------
--  DDL for Trigger T_VAR_VOLUME_HORAIRE_REF_S
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."T_VAR_VOLUME_HORAIRE_REF_S" 
AFTER INSERT OR UPDATE OR DELETE ON VOLUME_HORAIRE_REF
BEGIN
  OSE_EVENT.CALCULER_DEMANDES;
END;
/
ALTER TRIGGER "OSE"."T_VAR_VOLUME_HORAIRE_REF_S" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TYPE_INTERVENTION_STRUCTURE_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."TYPE_INTERVENTION_STRUCTURE_CK" 
  BEFORE INSERT OR UPDATE ON "OSE"."TYPE_INTERVENTION_STRUCTURE"
  REFERENCING FOR EACH ROW
  DECLARE 
  structure_niveau NUMERIC;
BEGIN
  
  SELECT structure.niveau INTO structure_niveau FROM structure WHERE structure.id = :NEW.structure_id;
  
  IF structure_niveau <> 2 THEN
    raise_application_error(-20101, 'Les types d''intervention ne peuvent √™tre associ√©s qu''√† des structures de niveau 2.');
  END IF;

END;
/
ALTER TRIGGER "OSE"."TYPE_INTERVENTION_STRUCTURE_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger VALIDATION_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."VALIDATION_CK" 
BEFORE UPDATE OF histo_destruction, histo_destructeur_id OR DELETE ON validation
FOR EACH ROW
DECLARE
  v validation%rowtype;
  err varchar2(500) default null;
  pragma autonomous_transaction;
BEGIN

  IF deleting THEN
    v.id                  := :OLD.id;
    v.type_validation_id  := :OLD.type_validation_id;
    v.intervenant_id      := :OLD.intervenant_id;
    v.structure_id        := :OLD.structure_id;
    

  ELSIF :OLD.histo_destruction IS NULL AND :NEW.histo_destruction IS NOT NULL THEN

    v.id                  := :NEW.id;
    v.type_validation_id  := :NEW.type_validation_id;
    v.intervenant_id      := :NEW.intervenant_id;
    v.structure_id        := :NEW.structure_id;

  END IF;
  
  err := ose_validation.can_devalider( v );
  
  IF err is not null THEN
    raise_application_error(-20101, err);
  END IF;

END;
/
ALTER TRIGGER "OSE"."VALIDATION_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger VALIDATION_VOL_HORAIRE_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."VALIDATION_VOL_HORAIRE_CK" 
BEFORE INSERT OR UPDATE OR DELETE ON validation_vol_horaire
FOR EACH ROW
DECLARE 
  contrat_blinde NUMERIC; 
  donnee_historisee NUMERIC;  
  pragma autonomous_transaction;
BEGIN

  if updating or deleting then  
  
    SELECT count(*) INTO contrat_blinde 
    FROM volume_horaire vh
    JOIN contrat c ON c.id = vh.contrat_id AND 1 = ose_divers.comprise_entre( c.histo_creation, c.histo_destruction )
    WHERE vh.id = :OLD.volume_horaire_id;
      
    -- Si des volumes horaires ont d√©j√† fait l'objet de contrats alors pas de d√©validation possible des heures
    IF contrat_blinde = 1 THEN
      raise_application_error(-20101, 'La d√©validation est impossible car un contrat a d√©j√† √©t√© √©dit√© sur la base de ces heures.');
    END IF;
    
  else
  
    -- si on en trouve un service, EP, √©tape ou VH historis√©, probl√®me
    select count(*) into donnee_historisee
    from service s
    join element_pedagogique ep on s.element_pedagogique_id = ep.id
    --join etape e on ep.etape_id = e.id
    join volume_horaire vh on vh.service_id = s.id
    where
      vh.id = :NEW.volume_horaire_id 
      AND (
        s.histo_destructeur_id is not null
        or ep.histo_destructeur_id is not null
        --or e.histo_destructeur_id is not null
        or (vh.histo_destructeur_id is not null)
      )
      AND vh.heures > 0;
    
    IF donnee_historisee > 0 THEN
      raise_application_error(-20101, :NEW.volume_horaire_id || ' La validation est impossible car elle porte sur des donn√©es historis√©es (supprim√©es).');
    END IF;
    
  end if;
  
END;
/
ALTER TRIGGER "OSE"."VALIDATION_VOL_HORAIRE_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger VOLUME_HORAIRE_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."VOLUME_HORAIRE_CK" 
BEFORE INSERT OR UPDATE ON volume_horaire 
FOR EACH ROW 
  DECLARE
    has_validation NUMERIC;
    modified       BOOLEAN;
    intervenant_id NUMERIC;
  BEGIN
    IF :OLD.motif_non_paiement_id IS NULL AND :NEW.motif_non_paiement_id IS NOT NULL THEN
      SELECT s.intervenant_id INTO intervenant_id FROM service s WHERE s.id = :NEW.service_id;
      IF 0 = ose_divers.intervenant_has_privilege( intervenant_id, 'saisie_motif_non_paiement') THEN
        raise_application_error(-20101, 'Il est impossible d''associer un motif de non paiement √† cet intervenant.');
      END IF;
    END IF;
    
    IF :NEW.motif_non_paiement_id IS NOT NULL AND :NEW.contrat_id IS NOT NULL THEN
      raise_application_error(-20101, 'Les heures ayant un motif de non paiement ne peuvent faire l''objet d''une contractualisation');
    END IF;

    modified := 
      NVL(:NEW.id,0) <> NVL(:OLD.id,0)
      OR NVL(:NEW.type_volume_horaire_id,0) <> NVL(:OLD.type_volume_horaire_id,0)
      OR NVL(:NEW.service_id,0) <> NVL(:OLD.service_id,0)
      OR NVL(:NEW.periode_id,0) <> NVL(:OLD.periode_id,0)
      OR NVL(:NEW.type_intervention_id,0) <> NVL(:OLD.type_intervention_id,0)
      OR NVL(:NEW.heures,0) <> NVL(:OLD.heures,0)
      OR NVL(:NEW.motif_non_paiement_id,0) <> NVL(:OLD.motif_non_paiement_id,0)
      OR NVL(:NEW.histo_creation,SYSDATE) <> NVL(:OLD.histo_creation,SYSDATE)
      OR NVL(:NEW.histo_createur_id,0) <> NVL(:OLD.histo_createur_id,0)
      OR NVL(:NEW.histo_destruction,SYSDATE) <> NVL(:OLD.histo_destruction,SYSDATE)
      OR NVL(:NEW.histo_destructeur_id,0) <> NVL(:OLD.histo_destructeur_id,0);
    
    SELECT
      COUNT(*)
    INTO
      has_validation
    FROM
      VALIDATION_VOL_HORAIRE vvh
      JOIN validation v ON v.id = VVH.VALIDATION_ID
    WHERE
      V.HISTO_DESTRUCTION IS NULL
      AND vvh.VOLUME_HORAIRE_ID  = :NEW.ID;
      
    IF modified AND 0 <> has_validation THEN
      raise_application_error(-20101, 'Il est impossible de modifier des heures d√©j√† valid√©es.');
    END IF;
  END;
/
ALTER TRIGGER "OSE"."VOLUME_HORAIRE_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger VOLUME_HORAIRE_DEL_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."VOLUME_HORAIRE_DEL_CK" BEFORE
  DELETE ON volume_horaire FOR EACH ROW DECLARE has_validation INTEGER;
  pragma autonomous_transaction;
  BEGIN
    SELECT COUNT(*)
    INTO has_validation
    FROM VALIDATION_VOL_HORAIRE vvh
    JOIN validation v
    ON v.id                    = VVH.VALIDATION_ID
    WHERE V.HISTO_DESTRUCTION IS NULL
    AND vvh.VOLUME_HORAIRE_ID  = :OLD.ID;
    IF 0                      <> has_validation THEN
      raise_application_error(-20101, 'Il est impossible de supprimer des heures d√©j√† valid√©es.');
    END IF;
  END;
/
ALTER TRIGGER "OSE"."VOLUME_HORAIRE_DEL_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger VOLUME_HORAIRE_REF_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."VOLUME_HORAIRE_REF_CK" BEFORE UPDATE ON volume_horaire_REF FOR EACH ROW 
  DECLARE
    has_validation NUMERIC;
  BEGIN  
    
  SELECT 
    COUNT(*)
  INTO
    has_validation
  FROM
    VALIDATION_VOL_HORAIRE_REF vvh
    JOIN validation v ON v.id = VVH.VALIDATION_ID
  WHERE
    V.HISTO_DESTRUCTION IS NULL
    AND vvh.VOLUME_HORAIRE_REF_ID  = :NEW.ID;
    
  IF 0 <> has_validation THEN
    raise_application_error(-20101, 'Il est impossible de modifier des heures r√©f√©rentiel d√©j√† valid√©es.');
  END IF;
END;
/
ALTER TRIGGER "OSE"."VOLUME_HORAIRE_REF_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger VOLUME_HORAIRE_REF_DEL_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."VOLUME_HORAIRE_REF_DEL_CK" BEFORE DELETE ON volume_horaire_REF FOR EACH ROW 
  DECLARE has_validation INTEGER;
  pragma autonomous_transaction;
  BEGIN
    SELECT COUNT(*)
    INTO has_validation
    FROM VALIDATION_VOL_HORAIRE_REF vvh
    JOIN validation v
    ON v.id                    = VVH.VALIDATION_ID
    WHERE V.HISTO_DESTRUCTION IS NULL
    AND vvh.VOLUME_HORAIRE_REF_ID  = :OLD.ID;
    IF 0                      <> has_validation THEN
      raise_application_error(-20101, 'Il est impossible de supprimer des heures r√©f√©rentiel d√©j√† valid√©es.');
    END IF;
  END;
/
ALTER TRIGGER "OSE"."VOLUME_HORAIRE_REF_DEL_CK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger WF_ETAPE_DEP_CK
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "OSE"."WF_ETAPE_DEP_CK" 
BEFORE INSERT OR UPDATE ON wf_etape_dep
FOR EACH ROW 
BEGIN

  OSE_WORKFLOW.DEP_CHECK( :new.etape_suiv_id, :new.etape_prec_id );

END;
/
ALTER TRIGGER "OSE"."WF_ETAPE_DEP_CK" ENABLE;
CREATE MATERIALIZED VIEW LOG ON "OSE"."LIEN"
 
  WITH PRIMARY KEY EXCLUDING NEW VALUES;
CREATE MATERIALIZED VIEW LOG ON "OSE"."SCENARIO"
 
  WITH PRIMARY KEY EXCLUDING NEW VALUES;
CREATE MATERIALIZED VIEW LOG ON "OSE"."SCENARIO_LIEN"
 
  WITH PRIMARY KEY EXCLUDING NEW VALUES;
--------------------------------------------------------
--  DDL for Package Body OSE_AGREMENT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_AGREMENT" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_INTERVENANT( CALC.INTERVENANT_ID );
  
    UPDATE tbl_agrement SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_agrement t 
    USING (
    
      SELECT 
        vc.* 
      FROM 
        V_TBL_AGREMENT vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id   = v.intervenant_id
      AND t.type_agrement_id = v.type_agrement_id
      AND NVL(t.structure_id,0) = NVL(v.structure_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      annee_id    = v.annee_id,
      obligatoire = v.obligatoire,
      agrement_id = v.agrement_id,
      to_delete   = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      TYPE_AGREMENT_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      OBLIGATOIRE,
      AGREMENT_ID,
      TO_DELETE

    ) VALUES (

      TBL_AGREMENT_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.type_agrement_id,
      v.intervenant_id,
      v.structure_id,
      v.obligatoire,
      v.agrement_id,
      0

    );

    DELETE FROM tbl_agrement WHERE to_delete = 1 AND (intervenant_id = CALC.INTERVENANT_ID OR CALC.INTERVENANT_ID = -1);
    SET_INTERVENANT(NULL);
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;

  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_AGREMENT.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_AGREMENT.INTERVENANT_ID := NULL;
    ELSE
      OSE_AGREMENT.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;
  
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_AGREMENT.INTERVENANT_ID IS NULL OR OSE_AGREMENT.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;

END OSE_AGREMENT;

/
--------------------------------------------------------
--  DDL for Package Body OSE_CHARGENS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_CHARGENS" AS
  SCENARIO NUMERIC;
  NOEUD NUMERIC;
  old_enable BOOLEAN DEFAULT TRUE;



  FUNCTION GET_SCENARIO RETURN NUMERIC IS
  BEGIN
    RETURN OSE_CHARGENS.SCENARIO;
  END;

  PROCEDURE SET_SCENARIO( SCENARIO NUMERIC ) IS
  BEGIN
    OSE_CHARGENS.SCENARIO := SET_SCENARIO.SCENARIO;
  END;



  FUNCTION GET_NOEUD RETURN NUMERIC IS
  BEGIN
    RETURN OSE_CHARGENS.NOEUD;
  END;

  PROCEDURE SET_NOEUD( NOEUD NUMERIC ) IS
  BEGIN
    OSE_CHARGENS.NOEUD := SET_NOEUD.NOEUD;
  END;







  FUNCTION GET_SCENARIO_NOEUD_ID(noeud_id NUMERIC, scenario_id NUMERIC) RETURN NUMERIC IS
    res NUMERIC;
  BEGIN
    SELECT
      sn.id INTO res
    FROM
      scenario_noeud sn
    WHERE
      sn.noeud_id = GET_SCENARIO_NOEUD_ID.noeud_id
      AND sn.scenario_id = GET_SCENARIO_NOEUD_ID.scenario_id
      AND 1 = OSE_DIVERS.COMPRISE_ENTRE( sn.histo_creation, sn.histo_destruction );
    
    RETURN res;
  END;


  FUNCTION CALC_COEF( choix_min NUMERIC, choix_max NUMERIC, poids NUMERIC, max_poids NUMERIC, total_poids NUMERIC, nb_choix NUMERIC ) RETURN FLOAT IS
    coef_choix FLOAT;
    coef_poids FLOAT;
    max_coef_poids FLOAT;
    correcteur FLOAT DEFAULT 1;
  BEGIN
  
      coef_choix := (choix_min + choix_max) / 2 / nb_choix;

      coef_poids := poids / total_poids;

      max_coef_poids := max_poids / total_poids;

      IF coef_choix + max_coef_poids <= 1 THEN
        return coef_choix;
      ELSE
        RETURN coef_choix * nb_choix * coef_poids + (((1/nb_choix)-coef_poids)*correcteur);
      END IF;
  END;

  
  PROCEDURE DEM_CALC_SUB_EFFECTIF( scenario_noeud_id NUMERIC, type_heures_id NUMERIC, etape_id NUMERIC, effectif FLOAT ) IS
  BEGIN
    INSERT INTO TMP_scenario_noeud_effectif(
      scenario_noeud_id, type_heures_id, etape_id, effectif
    ) VALUES(
      scenario_noeud_id, type_heures_id, etape_id, effectif
    );
  END;
  
  PROCEDURE CALC_SUB_EFFECTIF_DEM IS
  BEGIN
  ose_test.echo('wxwx');
    FOR p IN (
      SELECT * FROM TMP_scenario_noeud_effectif
    ) LOOP
    ose_test.echo('okok');
      CALC_SUB_EFFECTIF( p.scenario_noeud_id, p.type_heures_id, p.etape_id, p.effectif );
    END LOOP;
    DELETE FROM TMP_scenario_noeud_effectif;
  END;
  
  PROCEDURE CALC_SUB_EFFECTIF( scenario_noeud_id NUMERIC, type_heures_id NUMERIC, etape_id NUMERIC, effectif FLOAT ) IS
    max_poids FLOAT DEFAULT 1;
    total_poids FLOAT DEFAULT 1;
    nb_choix NUMERIC DEFAULT 1;
    coef FLOAT DEFAULT 1;
    snid NUMERIC;
    old_enable BOOLEAN;
  BEGIN
    FOR p IN (

      SELECT * FROM V_CHARGENS_GRANDS_LIENS WHERE SCENARIO_NOEUD_SUP_ID = CALC_SUB_EFFECTIF.scenario_noeud_id
  
    ) LOOP
      
      
      SELECT
        MAX(CASE WHEN sl.poids IS NULL THEN 1 ELSE sl.poids END) max_poids,
        SUM(CASE WHEN sl.poids IS NULL THEN 1 ELSE sl.poids END) total_poids,
        COUNT(*) nb_choix
      INTO
        max_poids, total_poids, nb_choix
      FROM
        lien l
        LEFT JOIN scenario_lien sl ON 
          sl.lien_id = l.id 
          AND sl.histo_destruction IS NULL
          AND sl.scenario_id = 1
      WHERE
        l.histo_destruction IS NULL
        AND (sl.actif = 1 OR sl.actif IS NULL)
        AND l.noeud_sup_id = p.noeud_liste_id
      GROUP BY
        l.noeud_sup_id;
    
      coef := CALC_COEF( p.choix_minimum, p.choix_maximum, p.poids, max_poids, total_poids, nb_choix );
      coef := coef * p.assiduite;
      ose_test.echo('coef=' || coef);
      IF p.scenario_noeud_id IS NULL THEN
        snid := OSE_CHARGENS.CREER_SCENARIO_NOEUD( p.scenario_id, p.noeud_id );
      ELSE
        snid := p.scenario_noeud_id;
      END IF;
      SET_SCENARIO_NOEUD_EFFECTIF( snid, type_heures_id, etape_id, coef * effectif );
      old_enable := ose_chargens.ENABLE_TRIGGER_EFFECTIFS;
      ose_chargens.ENABLE_TRIGGER_EFFECTIFS := false;
      ose_chargens.CALC_SUB_EFFECTIF( snid, type_heures_id, etape_id, coef * effectif ); 
      ose_chargens.ENABLE_TRIGGER_EFFECTIFS := old_enable;

    END LOOP;
  END;



  PROCEDURE DUPLIQUER( source_id NUMERIC, destination_id NUMERIC, utilisateur_id NUMERIC, structure_id NUMERIC, noeuds VARCHAR2 DEFAULT '', liens VARCHAR2 DEFAULT '' ) IS
  BEGIN

    /* Destruction de tous les liens ant√©rieurs de la destination */
    DELETE FROM 
      scenario_lien 
    WHERE 
      scenario_id = DUPLIQUER.destination_id 
      AND 1 = OSE_DIVERS.COMPRISE_ENTRE(histo_creation, histo_destruction)
      AND (DUPLIQUER.LIENS IS NULL OR DUPLIQUER.LIENS LIKE '%,' || lien_id || ',%' )
      AND (DUPLIQUER.STRUCTURE_ID IS NULL OR lien_id IN (
        SELECT id FROM lien WHERE lien.structure_id = DUPLIQUER.STRUCTURE_ID
      ))
    ;

    /* Duplication des liens */
    INSERT INTO scenario_lien (
      id, 
      scenario_id, lien_id, 
      actif, poids, 
      choix_minimum, choix_maximum, 
      source_id, source_code, 
      histo_creation, histo_createur_id,
      histo_modification, histo_modificateur_id
    ) SELECT
      scenario_lien_id_seq.nextval,
      DUPLIQUER.destination_id, sl.lien_id,
      sl.actif, sl.poids,
      sl.choix_minimum, sl.choix_maximum,
      source.id, 'dupli_' || sl.id || '_' || sl.lien_id || '_' || trunc(dbms_random.value(1,10000000000000)),
      sysdate, DUPLIQUER.utilisateur_id,
      sysdate, DUPLIQUER.utilisateur_id
    FROM
      scenario_lien sl
      JOIN lien l ON l.id = sl.lien_id
      JOIN source ON source.code = 'OSE'
    WHERE
      sl.scenario_id = DUPLIQUER.source_id
      AND 1 = OSE_DIVERS.COMPRISE_ENTRE(sl.histo_creation, sl.histo_destruction)
      AND (DUPLIQUER.LIENS IS NULL OR DUPLIQUER.LIENS LIKE '%,' || lien_id || ',%' )
      AND (DUPLIQUER.STRUCTURE_ID IS NULL OR l.structure_id = DUPLIQUER.STRUCTURE_ID)
    ;


    /* Destruction de tous les noeuds ant√©rieurs de la destination */
    DELETE FROM 
      scenario_noeud
    WHERE 
      scenario_id = DUPLIQUER.destination_id 
      AND 1 = OSE_DIVERS.COMPRISE_ENTRE(histo_creation, histo_destruction)
      AND (DUPLIQUER.NOEUDS IS NULL OR DUPLIQUER.NOEUDS LIKE '%,' || noeud_id || ',%' )
      AND (DUPLIQUER.STRUCTURE_ID IS NULL OR scenario_noeud.noeud_id IN (
        SELECT id FROM noeud WHERE noeud.structure_id = DUPLIQUER.STRUCTURE_ID
      ))
    ;

    /* Duplication des noeuds */
    INSERT INTO scenario_noeud (
      id, 
      scenario_id, noeud_id, 
      assiduite, 
      source_id, source_code, 
      histo_creation, histo_createur_id,
      histo_modification, histo_modificateur_id
    ) SELECT
      scenario_noeud_id_seq.nextval,
      DUPLIQUER.destination_id, sn.noeud_id,
      sn.assiduite,
      source.id, 'dupli_' || sn.id || '_' || sn.noeud_id || '_' || trunc(dbms_random.value(1,10000000000000)),
      sysdate, DUPLIQUER.utilisateur_id,
      sysdate, DUPLIQUER.utilisateur_id
    FROM
      scenario_noeud sn
      JOIN noeud n ON n.id = sn.noeud_id
      JOIN source ON source.code = 'OSE'
    WHERE
      sn.scenario_id = DUPLIQUER.source_id
      AND 1 = OSE_DIVERS.COMPRISE_ENTRE(sn.histo_creation, sn.histo_destruction)
      AND (DUPLIQUER.NOEUDS IS NULL OR DUPLIQUER.NOEUDS LIKE '%,' || noeud_id || ',%' )
      AND (DUPLIQUER.STRUCTURE_ID IS NULL OR n.structure_id = DUPLIQUER.STRUCTURE_ID)
    ;

    /* Duplication des effectifs */
    INSERT INTO scenario_noeud_effectif (
      id,
      scenario_noeud_id,
      type_heures_id,
      effectif
    ) SELECT
      scenario_noeud_effectif_id_seq.nextval,
      sn_dst.id,
      sne.type_heures_id,
      sne.effectif
    FROM
      scenario_noeud_effectif sne
      JOIN scenario_noeud sn_src ON sn_src.id = sne.scenario_noeud_id
      JOIN scenario_noeud sn_dst ON sn_dst.scenario_id = DUPLIQUER.destination_id AND sn_dst.noeud_id = sn_src.noeud_id
      JOIN noeud n ON n.id = sn_src.noeud_id
    WHERE
      sn_src.scenario_id = DUPLIQUER.source_id
      AND 1 = OSE_DIVERS.COMPRISE_ENTRE(sn_src.histo_creation, sn_src.histo_destruction)
      AND (DUPLIQUER.NOEUDS IS NULL OR DUPLIQUER.NOEUDS LIKE '%,' || sn_src.noeud_id || ',%' )
      AND (DUPLIQUER.STRUCTURE_ID IS NULL OR n.structure_id = DUPLIQUER.STRUCTURE_ID)
    ;

    /* Duplication des seuils */
    INSERT INTO scenario_noeud_seuil (
      id,
      scenario_noeud_id,
      type_intervention_id,
      ouverture,
      dedoublement
    ) SELECT
      scenario_noeud_seuil_id_seq.nextval,
      sn_dst.id,
      sns.type_intervention_id,
      sns.ouverture,
      sns.dedoublement
    FROM
      scenario_noeud_seuil sns
      JOIN scenario_noeud sn_src ON sn_src.id = sns.scenario_noeud_id
      JOIN scenario_noeud sn_dst ON sn_dst.scenario_id = DUPLIQUER.destination_id AND sn_dst.noeud_id = sn_src.noeud_id
      JOIN noeud n ON n.id = sn_src.noeud_id
    WHERE
      sn_src.scenario_id = DUPLIQUER.source_id
      AND 1 = OSE_DIVERS.COMPRISE_ENTRE(sn_src.histo_creation, sn_src.histo_destruction)
      AND (DUPLIQUER.NOEUDS IS NULL OR DUPLIQUER.NOEUDS LIKE '%,' || sn_src.noeud_id || ',%' )
      AND (DUPLIQUER.STRUCTURE_ID IS NULL OR n.structure_id = DUPLIQUER.STRUCTURE_ID)
    ;
  END;



  PROCEDURE CONTROLE_SEUIL( ouverture NUMERIC, dedoublement NUMERIC ) IS
  BEGIN
    IF ouverture IS NOT NULL THEN
      IF ouverture < 1 THEN
        raise_application_error(-20101, 'Le seuil d''ouverture doit √™tre sup√©rieur ou √©gal √† 1');
      END IF;
    END IF;
    
    IF dedoublement IS NOT NULL THEN
      IF dedoublement < 1 THEN
        raise_application_error(-20101, 'Le seuil de d√©doublement doit √™tre sup√©rieur ou √©gal √† 1');
      END IF;
    END IF;
    
    IF ouverture IS NOT NULL AND dedoublement IS NOT NULL THEN
      IF dedoublement < ouverture THEN
        raise_application_error(-20101, 'Le seuil de d√©doublement doit √™tre sup√©rieur ou √©gal au seuil d''ouverture');
      END IF;
    END IF;
  END;


  FUNCTION CREER_SCENARIO_NOEUD( scenario_id NUMERIC, noeud_id NUMERIC, assiduite FLOAT DEFAULT 1 ) RETURN NUMERIC IS
    new_id NUMERIC;
  BEGIN
    new_id := SCENARIO_NOEUD_ID_SEQ.NEXTVAL;

    INSERT INTO SCENARIO_NOEUD(
      ID,
      SCENARIO_ID,
      NOEUD_ID,
      ASSIDUITE,
      SOURCE_ID,
      SOURCE_CODE,
      HEURES,
      HISTO_CREATION,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATION,
      HISTO_MODIFICATEUR_ID
    ) VALUES (
      new_id,
      CREER_SCENARIO_NOEUD.scenario_id,
      CREER_SCENARIO_NOEUD.noeud_id,
      CREER_SCENARIO_NOEUD.assiduite,
      OSE_DIVERS.GET_OSE_SOURCE_ID,
      'OSE_NEW_SN_' || new_id,
      null,
      SYSDATE,
      OSE_DIVERS.GET_OSE_UTILISATEUR_ID,
      SYSDATE,
      OSE_DIVERS.GET_OSE_UTILISATEUR_ID
    );
    RETURN new_id;
  END;


  PROCEDURE SET_SCENARIO_NOEUD_EFFECTIF( scenario_noeud_id NUMERIC, type_heures_id NUMERIC, etape_id NUMERIC, effectif FLOAT ) IS
    old_enable BOOLEAN;
  BEGIN
    old_enable := ose_chargens.ENABLE_TRIGGER_EFFECTIFS;
    ose_chargens.ENABLE_TRIGGER_EFFECTIFS := false;

    MERGE INTO scenario_noeud_effectif sne USING dual ON (

          sne.scenario_noeud_id = SET_SCENARIO_NOEUD_EFFECTIF.scenario_noeud_id
      AND sne.type_heures_id = SET_SCENARIO_NOEUD_EFFECTIF.type_heures_id
      AND sne.etape_id = SET_SCENARIO_NOEUD_EFFECTIF.etape_id

    ) WHEN MATCHED THEN UPDATE SET

      effectif = SET_SCENARIO_NOEUD_EFFECTIF.effectif

    WHEN NOT MATCHED THEN INSERT (

      ID,
      SCENARIO_NOEUD_ID,
      TYPE_HEURES_ID,
      ETAPE_ID,
      EFFECTIF

    ) VALUES (

      SCENARIO_NOEUD_EFFECTIF_ID_SEQ.NEXTVAL,
      SET_SCENARIO_NOEUD_EFFECTIF.scenario_noeud_id,
      SET_SCENARIO_NOEUD_EFFECTIF.type_heures_id,
      SET_SCENARIO_NOEUD_EFFECTIF.etape_id,
      SET_SCENARIO_NOEUD_EFFECTIF.effectif

    );
    
    ose_chargens.ENABLE_TRIGGER_EFFECTIFS := old_enable;
  END;

END OSE_CHARGENS;

/
--------------------------------------------------------
--  DDL for Package Body OSE_CLOTURE_REALISE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_CLOTURE_REALISE" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_INTERVENANT( CALC.INTERVENANT_ID );
  
    UPDATE tbl_cloture_realise SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_cloture_realise t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_CLOTURE_REALISE vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id   = v.intervenant_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      peut_cloturer_saisie = v.peut_cloturer_saisie,
      cloture              = v.cloture,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      PEUT_CLOTURER_SAISIE,
      CLOTURE,
      TO_DELETE

    ) VALUES (

      TBL_CLOTURE_REALISE_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.peut_cloturer_saisie,
      v.cloture,
      0

    );

    DELETE FROM tbl_cloture_realise WHERE to_delete = 1 AND (intervenant_id = CALC.INTERVENANT_ID OR CALC.INTERVENANT_ID = -1);
    SET_INTERVENANT(NULL);
  END;


  
  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;



  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_CLOTURE_REALISE.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_CLOTURE_REALISE.INTERVENANT_ID := NULL;
    ELSE
      OSE_CLOTURE_REALISE.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;
  
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_CLOTURE_REALISE.INTERVENANT_ID IS NULL OR OSE_CLOTURE_REALISE.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
  
END OSE_CLOTURE_REALISE;

/
--------------------------------------------------------
--  DDL for Package Body OSE_CONTRAT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_CONTRAT" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_INTERVENANT( CALC.INTERVENANT_ID );
    
    UPDATE TBL_CONTRAT SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));
      
    MERGE INTO 
      TBL_CONTRAT t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_CONTRAT vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id        = v.intervenant_id
          AND NVL(t.structure_id,0) = NVL(v.structure_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      peut_avoir_contrat   = v.peut_avoir_contrat,
      nbvh                 = v.nbvh,
      edite                = v.edite,
      signe                = v.signe,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      PEUT_AVOIR_CONTRAT,
      STRUCTURE_ID,
      NBVH,
      EDITE,
      SIGNE,
      TO_DELETE

    ) VALUES (

      TBL_CONTRAT_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.peut_avoir_contrat,
      v.structure_id,
      V.nbvh,
      v.edite,
      v.signe,
      0

    );

    DELETE FROM tbl_contrat WHERE to_delete = 1 AND (intervenant_id = CALC.INTERVENANT_ID OR CALC.INTERVENANT_ID = -1);
    SET_INTERVENANT(NULL);
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;


  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_CONTRAT.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_CONTRAT.INTERVENANT_ID := NULL;
    ELSE
      OSE_CONTRAT.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;

  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_CONTRAT.INTERVENANT_ID IS NULL OR OSE_CONTRAT.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END OSE_CONTRAT;

/
--------------------------------------------------------
--  DDL for Package Body OSE_DIVERS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_DIVERS" AS
  OSE_UTILISATEUR_ID NUMERIC;
  OSE_SOURCE_ID NUMERIC;

/**
 * Retourne un texte de message √† partir de son code
 */
FUNCTION GET_MSG( code VARCHAR2 ) RETURN CLOB IS
  msg CLOB;
BEGIN
  SELECT texte into msg FROM message WHERE code = GET_MSG.code;
  RETURN msg;
END;



FUNCTION GET_OSE_UTILISATEUR_ID RETURN NUMERIC IS
BEGIN
  IF OSE_DIVERS.OSE_UTILISATEUR_ID IS NULL THEN
    SELECT
      to_number(valeur) INTO OSE_DIVERS.OSE_UTILISATEUR_ID
    FROM
      parametre
    WHERE
      nom = 'oseuser';
  END IF;
  
  RETURN OSE_DIVERS.OSE_UTILISATEUR_ID;
END;



FUNCTION GET_OSE_SOURCE_ID RETURN NUMERIC IS
BEGIN
  IF OSE_DIVERS.OSE_SOURCE_ID IS NULL THEN
    SELECT
      id INTO OSE_DIVERS.OSE_SOURCE_ID
    FROM
      source
    WHERE
      code = 'OSE';
  END IF;
  
  RETURN OSE_DIVERS.OSE_SOURCE_ID;
END;



FUNCTION INTERVENANT_HAS_PRIVILEGE( intervenant_id NUMERIC, privilege_name VARCHAR2 ) RETURN NUMERIC IS
  statut statut_intervenant%rowtype;
  itype  type_intervenant%rowtype;
  res NUMERIC;
BEGIN
  res := 1;
  SELECT si.* INTO statut FROM statut_intervenant si JOIN intervenant i ON i.statut_id = si.id WHERE i.id = intervenant_id;
  SELECT ti.* INTO itype  FROM type_intervenant ti WHERE ti.id = statut.type_intervenant_id;
  
  /* DEPRECATED */
  IF 'saisie_service' = privilege_name THEN
    res := statut.peut_saisir_service;
    RETURN res;
  ELSIF 'saisie_service_exterieur' = privilege_name THEN
    --IF INTERVENANT_HAS_PRIVILEGE( intervenant_id, 'saisie_service' ) = 0 OR itype.code = 'E' THEN -- cascade
    IF itype.code = 'E' THEN
      res := 0;
    END IF;
    RETURN res;
  ELSIF 'saisie_service_referentiel' = privilege_name THEN
    IF itype.code = 'E' THEN
      res := 0;
    END IF;
    RETURN res;
  ELSIF 'saisie_service_referentiel_autre_structure' = privilege_name THEN
    res := 1;
    RETURN res;
  ELSIF 'saisie_motif_non_paiement' = privilege_name THEN
    res := statut.peut_saisir_motif_non_paiement;
    RETURN res;
  END IF;
  /* FIN DE DEPRECATED */
  
  SELECT
    count(*)
  INTO
    res
  FROM
    intervenant i
    JOIN statut_privilege sp ON sp.statut_id = i.statut_id
    JOIN privilege p ON p.id = sp.privilege_id
    JOIN categorie_privilege cp ON cp.id = p.categorie_id
  WHERE
    i.id = INTERVENANT_HAS_PRIVILEGE.intervenant_id
    AND cp.code || '-' || p.code = privilege_name;
    
  RETURN res;
END;

FUNCTION implode(i_query VARCHAR2, i_seperator VARCHAR2 DEFAULT ',') RETURN VARCHAR2 AS
  l_return CLOB:='';
  l_temp CLOB;
  TYPE r_cursor is REF CURSOR;
  rc r_cursor;
BEGIN
  OPEN rc FOR i_query;
  LOOP
    FETCH rc INTO L_TEMP;
    EXIT WHEN RC%NOTFOUND;
    l_return:=l_return||L_TEMP||i_seperator;
  END LOOP;
  RETURN RTRIM(l_return,i_seperator);
END;

FUNCTION intervenant_est_permanent( INTERVENANT_ID NUMERIC ) RETURN NUMERIC AS
  resultat NUMERIC;
BEGIN
  SELECT
    COUNT(*) INTO resultat
  FROM
    intervenant i
    JOIN statut_intervenant si ON si.id = i.statut_id
    JOIN type_intervenant ti ON ti.id = si.type_intervenant_id
  WHERE 
    i.id = INTERVENANT_ID
    AND ti.code = 'P';
  RETURN resultat;
END;

FUNCTION intervenant_est_non_autorise( INTERVENANT_ID NUMERIC ) RETURN NUMERIC AS
  resultat NUMERIC;
BEGIN
  SELECT COUNT(*) INTO resultat FROM intervenant i JOIN statut_intervenant si ON si.id = i.statut_id AND si.non_autorise = 1 WHERE i.id = INTERVENANT_ID;
  RETURN resultat;
END;

FUNCTION intervenant_peut_saisir_serv( INTERVENANT_ID NUMERIC ) RETURN NUMERIC AS
  resultat NUMERIC;
BEGIN
  SELECT COUNT(*) INTO resultat FROM intervenant i JOIN statut_intervenant si ON si.id = i.statut_id AND si.peut_saisir_service = 1 WHERE i.id = INTERVENANT_ID;
  RETURN resultat;
END;

PROCEDURE intervenant_horodatage_service( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, REFERENTIEL NUMERIC, HISTO_MODIFICATEUR_ID NUMERIC, HISTO_MODIFICATION DATE ) AS
BEGIN
    MERGE INTO histo_intervenant_service his USING dual ON (
    
          his.INTERVENANT_ID                = intervenant_horodatage_service.INTERVENANT_ID
      AND NVL(his.TYPE_VOLUME_HORAIRE_ID,0) = NVL(intervenant_horodatage_service.TYPE_VOLUME_HORAIRE_ID,0)
      AND his.REFERENTIEL                   = intervenant_horodatage_service.REFERENTIEL

    ) WHEN MATCHED THEN UPDATE SET

      HISTO_MODIFICATEUR_ID = intervenant_horodatage_service.HISTO_MODIFICATEUR_ID,
      HISTO_MODIFICATION = intervenant_horodatage_service.HISTO_MODIFICATION

    WHEN NOT MATCHED THEN INSERT (

      ID,
      INTERVENANT_ID,
      TYPE_VOLUME_HORAIRE_ID,
      REFERENTIEL,
      HISTO_MODIFICATEUR_ID,
      HISTO_MODIFICATION
    ) VALUES (
      HISTO_INTERVENANT_SERVI_ID_SEQ.NEXTVAL,
      intervenant_horodatage_service.INTERVENANT_ID,
      intervenant_horodatage_service.TYPE_VOLUME_HORAIRE_ID,
      intervenant_horodatage_service.REFERENTIEL,
      intervenant_horodatage_service.HISTO_MODIFICATEUR_ID,
      intervenant_horodatage_service.HISTO_MODIFICATION

    );
END;


FUNCTION NIVEAU_FORMATION_ID_CALC( gtf_id NUMERIC, gtf_pertinence_niveau NUMERIC, niveau NUMERIC DEFAULT NULL ) RETURN NUMERIC AS
BEGIN
  IF 1 <> gtf_pertinence_niveau OR niveau IS NULL OR niveau < 1 OR gtf_id < 1 THEN RETURN NULL; END IF;
  RETURN gtf_id * 256 + niveau;
END;

FUNCTION STRUCTURE_DANS_STRUCTURE( structure_testee NUMERIC, structure_cible NUMERIC ) RETURN NUMERIC AS
  RESULTAT NUMERIC;
BEGIN
  IF structure_testee = structure_cible THEN RETURN 1; END IF;
  
  select count(*) into resultat
  from structure
  WHERE structure.id = structure_testee
  start with parente_id = structure_cible
  connect by parente_id = prior id;

  RETURN RESULTAT;
END;

FUNCTION STR_REDUCE( str CLOB ) RETURN CLOB IS
BEGIN
  RETURN utl_raw.cast_to_varchar2((nlssort(str, 'nls_sort=binary_ai')));
END;

FUNCTION STR_FIND( haystack CLOB, needle VARCHAR2 ) RETURN NUMERIC IS
BEGIN
  IF STR_REDUCE( haystack ) LIKE STR_REDUCE( '%' || needle || '%' ) THEN RETURN 1; END IF;
  RETURN 0;
END;

FUNCTION LIKED( haystack CLOB, needle CLOB ) RETURN NUMERIC IS
BEGIN
  RETURN CASE WHEN STR_REDUCE(haystack) LIKE STR_REDUCE(needle) THEN 1 ELSE 0 END;
END;

FUNCTION COMPRISE_ENTRE( date_debut DATE, date_fin DATE, date_obs DATE DEFAULT NULL, inclusif NUMERIC DEFAULT 0 ) RETURN NUMERIC IS
  d_deb DATE;
  d_fin DATE;
  d_obs DATE;
  res NUMERIC;
BEGIN
  IF inclusif = 1 THEN
    d_obs := TRUNC( COALESCE( d_obs     , SYSDATE ) );
    d_deb := TRUNC( COALESCE( date_debut, d_obs   ) );
    d_fin := TRUNC( COALESCE( date_fin  , d_obs   ) );
    IF d_obs BETWEEN d_deb AND d_fin THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  ELSE
    d_obs := TRUNC( COALESCE( d_obs, SYSDATE ) );
    d_deb := TRUNC( date_debut );
    d_fin := TRUNC( date_fin   );
    
    IF d_deb IS NOT NULL AND NOT d_deb <= d_obs THEN
      RETURN 0;
    END IF;
    IF d_fin IS NOT NULL AND NOT d_obs < d_fin THEN
      RETURN 0;
    END IF;
    RETURN 1;
  END IF;
END;

PROCEDURE DO_NOTHING IS
BEGIN
  RETURN;
END;

FUNCTION VOLUME_HORAIRE_VALIDE( volume_horaire_id NUMERIC ) RETURN NUMERIC IS
  res NUMERIC;
BEGIN
  SELECT count(*) INTO res FROM
    validation v
    JOIN validation_vol_horaire vvh ON vvh.validation_id = v.id
  WHERE
    1 = ose_divers.comprise_entre( v.histo_creation, v.histo_destruction );
  RETURN CASE WHEN res > 0 THEN 1 ELSE 0 END;
END;


PROCEDURE CALCUL_TAUX( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, r_fi OUT FLOAT, r_fc OUT FLOAT, r_fa OUT FLOAT, arrondi NUMERIC DEFAULT 15 ) IS
  nt FLOAT;
  bi FLOAT;
  bc FLOAT;
  ba FLOAT;
  reste FLOAT;
BEGIN
  bi := eff_fi * fi;
  bc := eff_fc * fc;
  ba := eff_fa * fa;
  nt := bi + bc + ba;

  IF nt = 0 THEN -- au cas ou, alors on ne prend plus en compte les effectifs!!
    bi := fi;
    bc := fc;
    ba := fa;
    nt := bi + bc + ba;
  END IF;
  
  IF nt = 0 THEN -- toujours au cas ou...
    bi := 1;
    bc := 0;
    ba := 0;
    nt := bi + bc + ba;
  END IF;

  -- Calcul
  r_fi := bi / nt;
  r_fc := bc / nt;
  r_fa := ba / nt;

  -- Arrondis
  r_fi := ROUND( r_fi, arrondi );
  r_fc := ROUND( r_fc, arrondi );
  r_fa := ROUND( r_fa, arrondi );

  -- d√©termination du reste
  reste := 1 - r_fi - r_fc - r_fa;

  -- r√©partition √©ventuelle du reste
  IF reste <> 0 THEN
    IF r_fi > 0 THEN r_fi := r_fi + reste;
    ELSIF r_fc > 0 THEN r_fc := r_fc + reste;
    ELSE r_fa := r_fa + reste; END IF;
  END IF;

END;


FUNCTION CALCUL_TAUX_FI( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT IS
  ri FLOAT;
  rc FLOAT;
  ra FLOAT;
BEGIN
  CALCUL_TAUX( eff_fi, eff_fc, eff_fa, fi, fc, fa, ri, rc, ra, arrondi );
  RETURN ri;
END;
  
FUNCTION CALCUL_TAUX_FC( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT IS
  ri FLOAT;
  rc FLOAT;
  ra FLOAT;
BEGIN
  CALCUL_TAUX( eff_fi, eff_fc, eff_fa, fi, fc, fa, ri, rc, ra, arrondi );
  RETURN rc;
END;
  
FUNCTION CALCUL_TAUX_FA( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT IS
  ri FLOAT;
  rc FLOAT;
  ra FLOAT;
BEGIN
  CALCUL_TAUX( eff_fi, eff_fc, eff_fa, fi, fc, fa, ri, rc, ra, arrondi );
  RETURN ra;
END;

FUNCTION STRUCTURE_UNIV_GET_ID RETURN NUMERIC IS
  res NUMERIC;
BEGIN
  SELECT id INTO res FROM structure WHERE niveau = 1 AND ROWNUM = 1;
  RETURN res;
END;

PROCEDURE SYNC_LOG( msg CLOB ) IS
BEGIN
  INSERT INTO SYNC_LOG( id, date_sync, message ) VALUES ( sync_log_id_seq.nextval, systimestamp, msg );
END;

FUNCTION ANNEE_UNIVERSITAIRE( date_ref DATE DEFAULT SYSDATE, mois_deb_au NUMERIC DEFAULT 9, jour_deb_au NUMERIC DEFAULT 1 ) RETURN NUMERIC IS
  annee_ref NUMERIC;
  mois_ref NUMERIC;
  jour_ref NUMERIC;
BEGIN
  annee_ref := to_number(to_char(date_ref, 'yyyy'));
  mois_ref  := to_number(to_char(date_ref, 'mm'));
  jour_ref  := to_number(to_char(date_ref, 'dd'));
  
  IF jour_ref < jour_deb_au THEN mois_ref := mois_ref - 1; END IF;
  IF mois_ref < mois_deb_au THEN annee_ref := annee_ref - 1; END IF;
  
  RETURN annee_ref;
END;

FUNCTION FORMATTED_RIB (bic VARCHAR2, iban VARCHAR2) RETURN VARCHAR2 IS
BEGIN
  if bic is null and iban is null then
    return null;
  end if;
  RETURN regexp_replace(bic, '[[:space:]]+', '') || '-' || regexp_replace(iban, '[[:space:]]+', '');
END;

FUNCTION FORMATTED_ADRESSE(
    no_voie                VARCHAR2,
    nom_voie               VARCHAR2,
    batiment               VARCHAR2,
    mention_complementaire VARCHAR2,
    localite               VARCHAR2,
    code_postal            VARCHAR2,
    ville                  VARCHAR2,
    pays_libelle           VARCHAR2)
  RETURN VARCHAR2
IS
BEGIN
  return
    -- concat√©nation des √©l√©ments non null s√©par√©s par ', '
    trim(trim(',' FROM REPLACE(', ' || NVL(no_voie,'#') || ', ' || NVL(nom_voie,'#') || ', ' || NVL(batiment,'#') || ', ' || NVL(mention_complementaire,'#'), ', #', ''))) ||
    -- saut de ligne complet
    chr(13) || chr(10) ||
    -- concat√©nation des √©l√©ments non null s√©par√©s par ', '
    trim(trim(',' FROM REPLACE(', ' || NVL(localite,'#') || ', ' || NVL(code_postal,'#') || ', ' || NVL(ville,'#') || ', ' || NVL(pays_libelle,'#'), ', #', '')));
END;



FUNCTION GET_TRIGGER_BODY( TRIGGER_NAME VARCHAR2 ) RETURN VARCHAR2 IS
  vlong long;
BEGIN
  SELECT trigger_body INTO vlong FROM all_triggers WHERE trigger_name = GET_TRIGGER_BODY.TRIGGER_NAME;

  RETURN substr(vlong, 1, 32767);
END;

END OSE_DIVERS;

/
--------------------------------------------------------
--  DDL for Package Body OSE_DOSSIER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_DOSSIER" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;  

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_INTERVENANT( CALC.INTERVENANT_ID );
  
    UPDATE tbl_dossier SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_dossier t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_dossier vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id   = v.intervenant_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      peut_saisir_dossier  = v.peut_saisir_dossier,
      dossier_id           = v.dossier_id,
      validation_id        = v.validation_id,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      PEUT_SAISIR_DOSSIER,
      DOSSIER_ID,
      VALIDATION_ID,
      TO_DELETE

    ) VALUES (

      TBL_DOSSIER_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.peut_saisir_dossier,
      v.dossier_id,
      v.validation_id,
      0

    );

    DELETE FROM TBL_DOSSIER WHERE to_delete = 1 AND (intervenant_id = CALC.INTERVENANT_ID OR CALC.INTERVENANT_ID = -1);
    SET_INTERVENANT(NULL);
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;

  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_DOSSIER.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_DOSSIER.INTERVENANT_ID := NULL;
    ELSE
      OSE_DOSSIER.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;

  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_DOSSIER.INTERVENANT_ID IS NULL OR OSE_DOSSIER.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END OSE_DOSSIER;

/
--------------------------------------------------------
--  DDL for Package Body OSE_EVENT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_EVENT" AS
  TYPE t_dep IS TABLE OF VARCHAR2(80) INDEX BY PLS_INTEGER;
  TYPE t_deps IS TABLE OF t_dep INDEX BY VARCHAR2(80);

  ACTIF BOOLEAN DEFAULT TRUE;

  FUNCTION GET_ACTIF RETURN BOOLEAN IS
  BEGIN
    RETURN OSE_EVENT.ACTIF;
  END;
  
  PROCEDURE SET_ACTIF( ACTIF BOOLEAN ) IS
  BEGIN
    OSE_EVENT.ACTIF := SET_ACTIF.ACTIF;
  END;


  FUNCTION GET_DEPS RETURN t_deps IS 
    i PLS_INTEGER DEFAULT 1;
    deps t_deps;
  BEGIN
    FOR d IN (
      SELECT
        CONNECT_BY_ROOT(p1) pref, p2 pdep
      FROM
        package_deps pd 
      WHERE
        p2 IS NOT NULL
      CONNECT BY
        PRIOR p2 = p1
      ORDER BY
        LEVEL DESC
    ) LOOP
      deps(d.pref)(i) := d.pdep;
      i := i + 1;
    END LOOP;

    RETURN deps;
  END;



  FUNCTION GET_SUCS RETURN t_deps IS 
    i PLS_INTEGER DEFAULT 1;
    deps t_deps;
  BEGIN
    FOR d IN (
      SELECT
        CONNECT_BY_ROOT(p2) pref, p1 pdep
      FROM
        package_deps pd 
      WHERE
        p2 IS NOT NULL
      CONNECT BY
        p2 = PRIOR p1
      ORDER BY
        LEVEL
    ) LOOP
      IF d.pref IS NOT NULL THEN
        deps(d.pref)(i) := d.pdep;
        i := i + 1;
      END IF;
    END LOOP;
  
    RETURN deps;
  END;
  
  
  
  FUNCTION GET_ORDERED RETURN t_dep IS 
    i PLS_INTEGER DEFAULT 1;
    deps t_dep;
  BEGIN
    FOR d IN (
      WITH t AS (
        SELECT
          level n, CONNECT_BY_ROOT(p1) pdep
        FROM
          package_deps pd 
        CONNECT BY NOCYCLE
          p1 = PRIOR p2
      )
      SELECT
        MAX(n) o, pdep
      FROM
        t
      GROUP BY
        pdep
      ORDER BY
        o, pdep
    ) LOOP
      deps(i) := d.pdep;
      i := i + 1;
    END LOOP;
  
    RETURN deps;
  END;



  PROCEDURE CALCULER_SANS_DEPS( PACKAGE_SUJET VARCHAR2, INTERVENANT_ID NUMERIC ) IS
  BEGIN
    IF NOT OSE_EVENT.ACTIF THEN RETURN; END IF;
  
    IF OSE_TEST.DEBUG_ENABLED THEN
      ose_test.echo('OSE_EVENT.CALCULER_SANS_DEPS( ' || PACKAGE_SUJET || ', ' || INTERVENANT_ID || ' ); ['||to_char( SYSTIMESTAMP, 'HH24:MI:SS.ff3' )||']' );
    END IF;
  
    EXECUTE IMMEDIATE 
      'BEGIN ' || PACKAGE_SUJET || '.CALCULER( ' || INTERVENANT_ID || ' ); END;'
    ;
  END;



  PROCEDURE CALCULER( 
    PACKAGE_SUJET VARCHAR2, 
    INTERVENANT_ID NUMERIC,
    WITH_DEPS BOOLEAN DEFAULT FALSE,
    WITH_SUCS BOOLEAN DEFAULT TRUE
  ) IS
    deps t_deps;
    i PLS_INTEGER;
  BEGIN
    IF NOT OSE_EVENT.ACTIF THEN RETURN; END IF;
  
    IF OSE_TEST.DEBUG_ENABLED THEN
      ose_test.echo('OSE_EVENT.CALCULER( ' || PACKAGE_SUJET || ', ' || INTERVENANT_ID || ' ); ['||to_char( SYSTIMESTAMP, 'HH24:MI:SS.ff3' )||']' );
    END IF;
  
    IF WITH_DEPS THEN
      deps := GET_DEPS;
      IF deps.exists(PACKAGE_SUJET) THEN
        i := deps(PACKAGE_SUJET).FIRST;
        LOOP EXIT WHEN i IS NULL;
          CALCULER_SANS_DEPS(deps(PACKAGE_SUJET)(i), INTERVENANT_ID);
          i := deps(PACKAGE_SUJET).next(i);
        END LOOP;
      END IF;
    END IF;

    CALCULER_SANS_DEPS(PACKAGE_SUJET, INTERVENANT_ID);

    IF WITH_SUCS THEN
      deps := GET_SUCS;
      IF deps.exists(PACKAGE_SUJET) THEN
        i := deps(PACKAGE_SUJET).FIRST;
        LOOP EXIT WHEN i IS NULL;
          CALCULER_SANS_DEPS(deps(PACKAGE_SUJET)(i), INTERVENANT_ID);
          i := deps(PACKAGE_SUJET).next(i);
        END LOOP;
      END IF;
    END IF;
  END;



  PROCEDURE CALCULER_TOUT_SANS_DEPS( PACKAGE_SUJET VARCHAR2, ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    IF NOT OSE_EVENT.ACTIF THEN RETURN; END IF;
  
    IF OSE_TEST.DEBUG_ENABLED THEN
      ose_test.echo('  OSE_EVENT.CALCULER_TOUT_SANS_DEPS( ' || PACKAGE_SUJET || ', ' || ANNEE_ID || ' ); ['||to_char( SYSTIMESTAMP, 'HH24:MI:SS.ff3' )||']' );
    END IF;
  
    EXECUTE IMMEDIATE 
      'BEGIN ' || PACKAGE_SUJET || '.CALCULER_TOUT( ' || ANNEE_ID || ' ); END;'
    ;
  END;



  PROCEDURE CALCULER_TOUT( 
    PACKAGE_SUJET VARCHAR2, 
    ANNEE_ID NUMERIC DEFAULT NULL, 
    WITH_DEPS BOOLEAN DEFAULT FALSE,
    WITH_SUCS BOOLEAN DEFAULT TRUE
  ) IS
    deps t_deps;
    i PLS_INTEGER;
  BEGIN
    IF NOT OSE_EVENT.ACTIF THEN RETURN; END IF;
  
    IF OSE_TEST.DEBUG_ENABLED THEN
      ose_test.echo('OSE_EVENT.CALCULER_TOUT( ' || PACKAGE_SUJET || ', ' || ANNEE_ID || ' ); ['||to_char( SYSTIMESTAMP, 'HH24:MI:SS.ff3' )||']' );
    END IF;
    IF WITH_DEPS THEN
      deps := GET_DEPS;
      IF deps.exists(PACKAGE_SUJET) THEN
        i := deps(PACKAGE_SUJET).FIRST;
        LOOP EXIT WHEN i IS NULL;
          CALCULER_TOUT_SANS_DEPS(deps(PACKAGE_SUJET)(i), ANNEE_ID);
          i := deps(PACKAGE_SUJET).next(i);
        END LOOP;
      END IF;
    END IF;

    CALCULER_TOUT_SANS_DEPS(PACKAGE_SUJET, ANNEE_ID);

    IF WITH_SUCS THEN
      deps := GET_SUCS;
      IF deps.exists(PACKAGE_SUJET) THEN
        i := deps(PACKAGE_SUJET).FIRST;
        LOOP EXIT WHEN i IS NULL;
          CALCULER_TOUT_SANS_DEPS(deps(PACKAGE_SUJET)(i), ANNEE_ID);
          i := deps(PACKAGE_SUJET).next(i);
        END LOOP;
      END IF;
    END IF;
  END;



  PROCEDURE DEMANDE_CALCUL_SANS_DEPS( PACKAGE_SUJET VARCHAR2, INTERVENANT_ID NUMERIC ) IS
  BEGIN
    IF NOT OSE_EVENT.ACTIF THEN RETURN; END IF;

    MERGE INTO TMP_CALCUL c USING dual ON (
      c.intervenant_id = DEMANDE_CALCUL_SANS_DEPS.INTERVENANT_ID
      AND c.sujet = PACKAGE_SUJET
    ) WHEN MATCHED THEN UPDATE SET
      ID = TMP_CALCUL_ID_SEQ.NEXTVAL
    WHEN NOT MATCHED THEN INSERT (
      ID,
      INTERVENANT_ID,
      SUJET
    ) VALUES (
      TMP_CALCUL_ID_SEQ.NEXTVAL,
      DEMANDE_CALCUL_SANS_DEPS.INTERVENANT_ID,
      PACKAGE_SUJET
    );
  END;



  PROCEDURE DEMANDE_CALCUL( PACKAGE_SUJET VARCHAR2, INTERVENANT_ID NUMERIC ) IS
    deps t_deps;
    i PLS_INTEGER;
  BEGIN
    IF NOT OSE_EVENT.ACTIF THEN RETURN; END IF;

    IF OSE_TEST.DEBUG_ENABLED THEN
      ose_test.echo('OSE_EVENT.DEMANDE_CALCUL( ' || PACKAGE_SUJET || ', ' || INTERVENANT_ID || ' ); ['||to_char( SYSTIMESTAMP, 'HH24:MI:SS.ff3' )||']' );
    END IF;

    DEMANDE_CALCUL_SANS_DEPS(PACKAGE_SUJET, INTERVENANT_ID);

    deps := GET_SUCS;
    IF deps.exists(PACKAGE_SUJET) THEN
      i := deps(PACKAGE_SUJET).FIRST;
      LOOP EXIT WHEN i IS NULL;
        DEMANDE_CALCUL_SANS_DEPS( deps(PACKAGE_SUJET)(i), intervenant_id );
        i := deps(PACKAGE_SUJET).next(i);
      END LOOP;
    END IF;
  END;



  PROCEDURE CALCULER_DEMANDES( PACKAGE_SUJET VARCHAR2 DEFAULT NULL ) IS
    deps t_deps;
    i PLS_INTEGER;
  BEGIN
    IF NOT OSE_EVENT.ACTIF THEN RETURN; END IF;

    IF OSE_TEST.DEBUG_ENABLED THEN
      ose_test.echo('OSE_EVENT.CALCULER_DEMANDES( ' || PACKAGE_SUJET || ' ); [' || to_char( SYSTIMESTAMP, 'HH24:MI:SS.ff3' ) ||']' );
    END IF;
    FOR mp IN (
      SELECT
        c.sujet,
        c.intervenant_id
      FROM 
        TMP_CALCUL c
      WHERE
        PACKAGE_SUJET IS NULL OR c.sujet = PACKAGE_SUJET
      ORDER BY
        id
    )
    LOOP
      DELETE FROM TMP_CALCUL WHERE sujet = mp.sujet AND intervenant_id = mp.intervenant_id;
      CALCULER_SANS_DEPS( mp.sujet, mp.intervenant_id );
    END LOOP;
  END;



  PROCEDURE ON_BEFORE_FORMULE_RES_DELETE( INTERVENANT_ID NUMERIC ) IS
  BEGIN

    -- recherche des services √† payer pr√™ts √† √™tre supprim√©s pour cet intervenant et check
    FOR sap IN (
      SELECT
        frs.id
      FROM 
        FORMULE_RESULTAT_SERVICE frs
        JOIN FORMULE_RESULTAT fr ON fr.id = frs.formule_resultat_id AND fr.intervenant_id = ON_BEFORE_FORMULE_RES_DELETE.intervenant_id
        JOIN TYPE_VOLUME_HORAIRE tvh ON tvh.id = fr.type_volume_horaire_id AND tvh.code = 'REALISE'
        JOIN ETAT_VOLUME_HORAIRE evh ON evh.id = fr.etat_volume_horaire_id AND evh.code = 'valide'
      WHERE
        frs.TO_DELETE = 1
    )
    LOOP
      OSE_PAIEMENT.CHECK_BAD_PAIEMENTS( sap.id );
    END LOOP;

    FOR sap IN (
      SELECT
        frs.id
      FROM 
        FORMULE_RESULTAT_SERVICE_REF frs
        JOIN FORMULE_RESULTAT fr ON fr.id = frs.formule_resultat_id AND fr.intervenant_id = ON_BEFORE_FORMULE_RES_DELETE.intervenant_id
        JOIN TYPE_VOLUME_HORAIRE tvh ON tvh.id = fr.type_volume_horaire_id AND tvh.code = 'REALISE'
        JOIN ETAT_VOLUME_HORAIRE evh ON evh.id = fr.etat_volume_horaire_id AND evh.code = 'valide'
      WHERE
        frs.TO_DELETE = 1
    )
    LOOP
      OSE_PAIEMENT.CHECK_BAD_PAIEMENTS( null, sap.id );
    END LOOP;
  END;



  PROCEDURE FORCE_CALCULER( INTERVENANT_ID NUMERIC ) IS
    pkgs t_dep;
    i PLS_INTEGER;
    PRE_ACTIF BOOLEAN;
  BEGIN
    PRE_ACTIF := ACTIF;
  
    pkgs := GET_ORDERED;
    i := pkgs.FIRST;
    LOOP EXIT WHEN i IS NULL;
      --BEGIN
        CALCULER_SANS_DEPS( pkgs(i), FORCE_CALCULER.INTERVENANT_ID);
        --COMMIT WORK;
      --END;
      i := pkgs.next(i);
    END LOOP;

    -- plus besoin!!
    DELETE FROM tmp_calcul WHERE intervenant_id = FORCE_CALCULER.INTERVENANT_ID;
    
    ACTIF := PRE_ACTIF;
  END;



  PROCEDURE FORCE_CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
    pkgs t_dep;
    i PLS_INTEGER;
    PRE_ACTIF BOOLEAN;
  BEGIN
    PRE_ACTIF := ACTIF;
  
    pkgs := GET_ORDERED;
    i := pkgs.FIRST;
    LOOP EXIT WHEN i IS NULL;
      BEGIN
        CALCULER_TOUT_SANS_DEPS( pkgs(i), FORCE_CALCULER_TOUT.ANNEE_ID);
        COMMIT WORK;
      END;
      i := pkgs.next(i);
    END LOOP;
    
    -- plus besoin!!
    IF ANNEE_ID IS NULL THEN
      DELETE FROM tmp_calcul;
    ELSE
      DELETE FROM tmp_calcul WHERE intervenant_id IN (
        SELECT id FROM intervenant WHERE annee_id = FORCE_CALCULER_TOUT.ANNEE_ID
      );
    END IF;
    
    ACTIF := PRE_ACTIF;
  END;

END OSE_EVENT;

/
--------------------------------------------------------
--  DDL for Package Body OSE_FORMULE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_FORMULE" AS

  v_date_obs DATE;
  debug_level NUMERIC DEFAULT 0;
  d_all_volume_horaire_ref  t_lst_volume_horaire_ref;
  d_all_volume_horaire      t_lst_volume_horaire;
  arrondi NUMERIC DEFAULT 2;
  INTERVENANT_ID NUMERIC DEFAULT NULL;



  FUNCTION GET_DATE_OBS RETURN DATE AS
  BEGIN
    RETURN COALESCE( v_date_obs, SYSDATE );
  END;

  FUNCTION SET_DATE_OBS( DATE_OBS DATE DEFAULT NULL ) RETURN DATE IS
  BEGIN
    v_date_obs := DATE_OBS;
    RETURN v_date_obs;
  END;

  PROCEDURE SET_DEBUG_LEVEL( DEBUG_LEVEL NUMERIC ) IS
  BEGIN
    ose_formule.debug_level := SET_DEBUG_LEVEL.DEBUG_LEVEL;
  END;
  
  FUNCTION GET_DEBUG_LEVEL RETURN NUMERIC IS
  BEGIN
    RETURN ose_formule.debug_level;
  END;

  FUNCTION GET_TAUX_HORAIRE_HETD( DATE_OBS DATE DEFAULT NULL ) RETURN FLOAT IS
    taux_hetd FLOAT;
  BEGIN
    SELECT valeur INTO taux_hetd FROM taux_horaire_hetd t WHERE 1 = OSE_DIVERS.COMPRISE_ENTRE( t.histo_creation, t.histo_destruction, DATE_OBS );
    RETURN taux_hetd;
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
    a_id NUMERIC;
  BEGIN
    a_id := NVL(CALCULER_TOUT.ANNEE_ID, OSE_PARAMETRE.GET_ANNEE);
    FOR mp IN (
      SELECT DISTINCT
        intervenant_id 
      FROM 
        service s
        JOIN intervenant i ON i.id = s.intervenant_id
      WHERE
        1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction, ose_formule.get_date_obs )
        AND i.annee_id = a_id
        
      UNION
      
      SELECT DISTINCT
        intervenant_id
      FROM
        service_referentiel sr
        JOIN intervenant i ON i.id = sr.intervenant_id
      WHERE
        1 = ose_divers.comprise_entre( sr.histo_creation, sr.histo_destruction, ose_formule.get_date_obs )
        AND i.annee_id = a_id

    )
    LOOP
      CALCULER( mp.intervenant_id );
    END LOOP;
  END;



  FUNCTION ENREGISTRER_RESULTAT( fr formule_resultat%rowtype ) RETURN NUMERIC IS
    id NUMERIC;
    ti_code VARCHAR(5);
  BEGIN
    
    SELECT
      ti.code INTO ti_code 
    FROM 
      type_intervenant        ti 
      JOIN statut_intervenant si ON si.type_intervenant_id = ti.id 
      JOIN intervenant         i ON i.statut_id = si.id 
    WHERE 
      i.id = fr.intervenant_id;
  
  
  
    MERGE INTO formule_resultat tfr USING dual ON (

          tfr.intervenant_id         = fr.intervenant_id
      AND tfr.type_volume_horaire_id = fr.type_volume_horaire_id
      AND tfr.etat_volume_horaire_id = fr.etat_volume_horaire_id
      
    ) WHEN MATCHED THEN UPDATE SET
    
      service_du                     = ROUND( fr.service_du, arrondi ),
      service_fi                     = ROUND( fr.service_fi, arrondi ),
      service_fa                     = ROUND( fr.service_fa, arrondi ),
      service_fc                     = ROUND( fr.service_fc, arrondi ),
      service_referentiel            = ROUND( fr.service_referentiel, arrondi ),
      heures_compl_fi                = ROUND( fr.heures_compl_fi, arrondi ),
      heures_compl_fa                = ROUND( fr.heures_compl_fa, arrondi ),
      heures_compl_fc                = ROUND( fr.heures_compl_fc, arrondi ),
      heures_compl_fc_majorees       = ROUND( fr.heures_compl_fc_majorees, arrondi ),
      heures_compl_referentiel       = ROUND( fr.heures_compl_referentiel, arrondi ),
      total                          = ROUND( fr.total, arrondi ),
      solde                          = ROUND( fr.solde, arrondi ),
      sous_service                   = ROUND( fr.sous_service, arrondi ),
      heures_compl                   = ROUND( fr.heures_compl, arrondi ),
      to_delete                      = 0
      
    WHEN NOT MATCHED THEN INSERT (
    
      ID,
      INTERVENANT_ID,
      TYPE_VOLUME_HORAIRE_ID,
      ETAT_VOLUME_HORAIRE_ID,
      SERVICE_DU,
      SERVICE_FI,
      SERVICE_FA,
      SERVICE_FC,
      SERVICE_REFERENTIEL,
      HEURES_COMPL_FI,
      HEURES_COMPL_FA,
      HEURES_COMPL_FC,
      HEURES_COMPL_FC_majorees,
      HEURES_COMPL_REFERENTIEL,
      TOTAL,
      SOLDE,
      SOUS_SERVICE,
      HEURES_COMPL,
      TO_DELETE,
      type_intervenant_code
      
    ) VALUES (
    
      FORMULE_RESULTAT_ID_SEQ.NEXTVAL,
      fr.intervenant_id,
      fr.type_volume_horaire_id,
      fr.etat_volume_horaire_id,
      ROUND( fr.service_du, arrondi ),
      ROUND( fr.service_fi, arrondi ),
      ROUND( fr.service_fa, arrondi ),
      ROUND( fr.service_fc, arrondi ),
      ROUND( fr.service_referentiel, arrondi ),
      ROUND( fr.heures_compl_fi, arrondi ),
      ROUND( fr.heures_compl_fa, arrondi ),
      ROUND( fr.heures_compl_fc, arrondi ),
      ROUND( fr.heures_compl_fc_majorees, arrondi ),
      ROUND( fr.heures_compl_referentiel, arrondi ),
      ROUND( fr.total, arrondi ),
      ROUND( fr.solde, arrondi ),
      ROUND( fr.sous_service, arrondi ),
      ROUND( fr.heures_compl, arrondi ),
      0,
      ti_code
    );
    
    SELECT id INTO id FROM formule_resultat tfr WHERE
          tfr.intervenant_id         = fr.intervenant_id
      AND tfr.type_volume_horaire_id = fr.type_volume_horaire_id
      AND tfr.etat_volume_horaire_id = fr.etat_volume_horaire_id;
    RETURN id;
  END;


  FUNCTION ENREGISTRER_RESULTAT_SERVICE( fs formule_resultat_service%rowtype ) RETURN NUMERIC IS
    id NUMERIC;
  BEGIN
    MERGE INTO formule_resultat_service tfs USING dual ON (
    
          tfs.formule_resultat_id    = fs.formule_resultat_id
      AND tfs.service_id             = fs.service_id

    ) WHEN MATCHED THEN UPDATE SET
    
      service_fi                     = ROUND( fs.service_fi, arrondi ),
      service_fa                     = ROUND( fs.service_fa, arrondi ),
      service_fc                     = ROUND( fs.service_fc, arrondi ),
      heures_compl_fi                = ROUND( fs.heures_compl_fi, arrondi ),
      heures_compl_fa                = ROUND( fs.heures_compl_fa, arrondi ),
      heures_compl_fc                = ROUND( fs.heures_compl_fc, arrondi ),
      heures_compl_fc_majorees       = ROUND( fs.heures_compl_fc_majorees, arrondi ),
      total                          = ROUND( fs.total, arrondi ),
      TO_DELETE                      = 0
      
    WHEN NOT MATCHED THEN INSERT (
    
      ID,
      FORMULE_RESULTAT_ID,
      SERVICE_ID,
      SERVICE_FI,
      SERVICE_FA,
      SERVICE_FC,
      HEURES_COMPL_FI,
      HEURES_COMPL_FA,
      HEURES_COMPL_FC,
      HEURES_COMPL_FC_majorees,
      TOTAL,
      TO_DELETE

    ) VALUES (

      FORMULE_RESULTAT_SERVIC_ID_SEQ.NEXTVAL,
      fs.formule_resultat_id,
      fs.service_id,
      ROUND( fs.service_fi, arrondi ),
      ROUND( fs.service_fa, arrondi ),
      ROUND( fs.service_fc, arrondi ),
      ROUND( fs.heures_compl_fi, arrondi ),
      ROUND( fs.heures_compl_fa, arrondi ),
      ROUND( fs.heures_compl_fc, arrondi ),
      ROUND( fs.heures_compl_fc_majorees, arrondi ),
      ROUND( fs.total, arrondi ),
      0
      
    );
    
    SELECT id INTO id FROM formule_resultat_service tfs WHERE
          tfs.formule_resultat_id    = fs.formule_resultat_id
      AND tfs.service_id             = fs.service_id;
    RETURN id;
  END;


  FUNCTION ENREGISTRER_RESULTAT_VH( fvh formule_resultat_vh%rowtype ) RETURN NUMERIC IS
    id NUMERIC;
  BEGIN
    MERGE INTO formule_resultat_vh tfvh USING dual ON (
    
          tfvh.formule_resultat_id    = fvh.formule_resultat_id
      AND tfvh.volume_horaire_id      = fvh.volume_horaire_id

    ) WHEN MATCHED THEN UPDATE SET
    
      service_fi                     = ROUND( fvh.service_fi, arrondi ),
      service_fa                     = ROUND( fvh.service_fa, arrondi ),
      service_fc                     = ROUND( fvh.service_fc, arrondi ),
      heures_compl_fi                = ROUND( fvh.heures_compl_fi, arrondi ),
      heures_compl_fa                = ROUND( fvh.heures_compl_fa, arrondi ),
      heures_compl_fc                = ROUND( fvh.heures_compl_fc, arrondi ),
      heures_compl_fc_majorees       = ROUND( fvh.heures_compl_fc_majorees, arrondi ),
      total                          = ROUND( fvh.total, arrondi ),
      TO_DELETE                      = 0
      
    WHEN NOT MATCHED THEN INSERT (
    
      ID,
      FORMULE_RESULTAT_ID,
      VOLUME_HORAIRE_ID,
      SERVICE_FI,
      SERVICE_FA,
      SERVICE_FC,
      HEURES_COMPL_FI,
      HEURES_COMPL_FA,
      HEURES_COMPL_FC,
      HEURES_COMPL_FC_MAJOREES,
      TOTAL,
      TO_DELETE

    ) VALUES (

      FORMULE_RESULTAT_VH_ID_SEQ.NEXTVAL,
      fvh.formule_resultat_id,
      fvh.volume_horaire_id,
      ROUND( fvh.service_fi, arrondi ),
      ROUND( fvh.service_fa, arrondi ),
      ROUND( fvh.service_fc, arrondi ),
      ROUND( fvh.heures_compl_fi, arrondi ),
      ROUND( fvh.heures_compl_fa, arrondi ),
      ROUND( fvh.heures_compl_fc, arrondi ),
      ROUND( fvh.heures_compl_fc_majorees, arrondi ),
      ROUND( fvh.total, arrondi ),
      0
      
    );
    
    SELECT id INTO id FROM formule_resultat_vh tfvh WHERE
          tfvh.formule_resultat_id    = fvh.formule_resultat_id
      AND tfvh.volume_horaire_id      = fvh.volume_horaire_id;
    RETURN id;
  END;
  
  
  FUNCTION ENREGISTRER_RESULTAT_SERV_REF( fr formule_resultat_service_ref%rowtype ) RETURN NUMERIC IS
    id NUMERIC;
  BEGIN
    MERGE INTO formule_resultat_service_ref tfr USING dual ON (

          tfr.formule_resultat_id    = fr.formule_resultat_id
      AND tfr.service_referentiel_id = fr.service_referentiel_id

    ) WHEN MATCHED THEN UPDATE SET

      service_referentiel            = ROUND( fr.service_referentiel, arrondi ),
      heures_compl_referentiel       = ROUND( fr.heures_compl_referentiel, arrondi ),
      TO_DELETE                      = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      FORMULE_RESULTAT_ID,
      SERVICE_REFERENTIEL_ID,
      SERVICE_REFERENTIEL,
      HEURES_COMPL_REFERENTIEL,
      TOTAL,
      TO_DELETE

    ) VALUES (

      FORMULE_RESULTAT_SERVIC_ID_SEQ.NEXTVAL,
      fr.formule_resultat_id,
      fr.service_referentiel_id,
      ROUND( fr.service_referentiel, arrondi ),
      ROUND( fr.heures_compl_referentiel, arrondi ),
      fr.total,
      0

    );

    SELECT id INTO id FROM formule_resultat_service_ref tfr WHERE
          tfr.formule_resultat_id    = fr.formule_resultat_id
      AND tfr.service_referentiel_id = fr.service_referentiel_id;
      
    RETURN id;
  END;
  

  FUNCTION ENREGISTRER_RESULTAT_VH_REF( fvh formule_resultat_vh_ref%rowtype ) RETURN NUMERIC IS
    id NUMERIC;
  BEGIN
    MERGE INTO formule_resultat_vh_ref tfvh USING dual ON (
    
          tfvh.formule_resultat_id    = fvh.formule_resultat_id
      AND tfvh.volume_horaire_ref_id      = fvh.volume_horaire_ref_id

    ) WHEN MATCHED THEN UPDATE SET
    
      service_referentiel            = ROUND( fvh.service_referentiel, arrondi ),
      heures_compl_referentiel       = ROUND( fvh.heures_compl_referentiel, arrondi ),
      total                          = fvh.total,
      TO_DELETE                      = 0
      
    WHEN NOT MATCHED THEN INSERT (
    
      ID,
      FORMULE_RESULTAT_ID,
      VOLUME_HORAIRE_REF_ID,
      SERVICE_REFERENTIEL,
      HEURES_COMPL_REFERENTIEL,
      TOTAL,
      TO_DELETE

    ) VALUES (

      FORMULE_RESULTAT_VH_ID_SEQ.NEXTVAL,
      fvh.formule_resultat_id,
      fvh.volume_horaire_ref_id,
      ROUND( fvh.service_referentiel, arrondi ),
      ROUND( fvh.heures_compl_referentiel, arrondi ),
      fvh.total,
      0
      
    );
    
    SELECT id INTO id FROM formule_resultat_vh_ref tfvh WHERE
          tfvh.formule_resultat_id    = fvh.formule_resultat_id
      AND tfvh.volume_horaire_ref_id  = fvh.volume_horaire_ref_id;
    RETURN id;
  END;
  
  
  PROCEDURE POPULATE_INTERVENANT( INTERVENANT_ID NUMERIC, d_intervenant OUT t_intervenant ) IS
  BEGIN

    SELECT
      structure_id,
      annee_id,
      heures_service_statutaire,
      depassement_service_du_sans_hc
    INTO
      d_intervenant.structure_id,
      d_intervenant.annee_id,
      d_intervenant.heures_service_statutaire,
      d_intervenant.depassement_service_du_sans_hc
    FROM
      v_formule_intervenant fi
    WHERE
      fi.id = POPULATE_INTERVENANT.INTERVENANT_ID;

    SELECT
      NVL( SUM(heures), 0),
      NVL( SUM(heures_decharge), 0)
    INTO
      d_intervenant.heures_service_modifie,
      d_intervenant.heures_decharge
    FROM
      v_formule_service_modifie fsm
    WHERE
      fsm.intervenant_id = POPULATE_INTERVENANT.INTERVENANT_ID;
  
  EXCEPTION WHEN NO_DATA_FOUND THEN
    d_intervenant.structure_id := null;
    d_intervenant.annee_id := null;
    d_intervenant.heures_service_statutaire := 0;
    d_intervenant.depassement_service_du_sans_hc := 0;
    d_intervenant.heures_service_modifie := 0;
    d_intervenant.heures_decharge := 0;
  END;
  

  PROCEDURE POPULATE_SERVICE_REF( INTERVENANT_ID NUMERIC, d_service_ref OUT t_lst_service_ref ) IS
    i PLS_INTEGER;
  BEGIN
    d_service_ref.delete;

    FOR d IN (
      SELECT
        fr.id,
        fr.structure_id
      FROM
        v_formule_service_ref fr
      WHERE
        fr.intervenant_id = POPULATE_SERVICE_REF.INTERVENANT_ID
    ) LOOP
      d_service_ref( d.id ).id           := d.id;
      d_service_ref( d.id ).structure_id := d.structure_id;
    END LOOP;
  END;


  PROCEDURE POPULATE_SERVICE( INTERVENANT_ID NUMERIC, d_service OUT t_lst_service ) IS
  BEGIN
    d_service.delete;

    FOR d IN (
      SELECT
        id,
        taux_fi,
        taux_fa,
        taux_fc,
        structure_aff_id,
        structure_ens_id,
        ponderation_service_du,
        ponderation_service_compl
      FROM
        v_formule_service fs
      WHERE
        fs.intervenant_id = POPULATE_SERVICE.INTERVENANT_ID
    ) LOOP
      d_service( d.id ).id                        := d.id;
      d_service( d.id ).taux_fi                   := d.taux_fi;
      d_service( d.id ).taux_fa                   := d.taux_fa;
      d_service( d.id ).taux_fc                   := d.taux_fc;
      d_service( d.id ).ponderation_service_du    := d.ponderation_service_du;
      d_service( d.id ).ponderation_service_compl := d.ponderation_service_compl;
      d_service( d.id ).structure_aff_id          := d.structure_aff_id;
      d_service( d.id ).structure_ens_id          := d.structure_ens_id;
    END LOOP;
  END;

  PROCEDURE POPULATE_VOLUME_HORAIRE_REF( INTERVENANT_ID NUMERIC, d_volume_horaire_ref OUT t_lst_volume_horaire_ref ) IS
  BEGIN
    d_volume_horaire_ref.delete;

    FOR d IN (
      SELECT
        id,
        service_referentiel_id,
        heures,
        fvh.type_volume_horaire_id,
        fvh.etat_volume_horaire_id,
        fvh.etat_volume_horaire_ordre
      FROM
        v_formule_volume_horaire_ref fvh
      WHERE
        fvh.intervenant_id                = POPULATE_VOLUME_HORAIRE_REF.INTERVENANT_ID
    ) LOOP
      d_volume_horaire_ref( d.id ).id                        := d.id;
      d_volume_horaire_ref( d.id ).service_referentiel_id    := d.service_referentiel_id;
      d_volume_horaire_ref( d.id ).heures                    := d.heures;
      d_volume_horaire_ref( d.id ).type_volume_horaire_id    := d.type_volume_horaire_id;
      d_volume_horaire_ref( d.id ).etat_volume_horaire_id    := d.etat_volume_horaire_id;
      d_volume_horaire_ref( d.id ).etat_volume_horaire_ordre := d.etat_volume_horaire_ordre;
    END LOOP;
  END;

  PROCEDURE POPULATE_VOLUME_HORAIRE( INTERVENANT_ID NUMERIC, d_volume_horaire OUT t_lst_volume_horaire ) IS
  BEGIN
    d_volume_horaire.delete;

    FOR d IN (
      SELECT
        id,
        service_id,
        heures,
        taux_service_du,
        taux_service_compl,
        fvh.type_volume_horaire_id,
        fvh.etat_volume_horaire_id,
        fvh.etat_volume_horaire_ordre
      FROM
        v_formule_volume_horaire fvh
      WHERE
        fvh.intervenant_id                = POPULATE_VOLUME_HORAIRE.INTERVENANT_ID
    ) LOOP
      d_volume_horaire( d.id ).id                        := d.id;
      d_volume_horaire( d.id ).service_id                := d.service_id;
      d_volume_horaire( d.id ).heures                    := d.heures;
      d_volume_horaire( d.id ).taux_service_du           := d.taux_service_du;
      d_volume_horaire( d.id ).taux_service_compl        := d.taux_service_compl;
      d_volume_horaire( d.id ).type_volume_horaire_id    := d.type_volume_horaire_id;
      d_volume_horaire( d.id ).etat_volume_horaire_id    := d.etat_volume_horaire_id;
      d_volume_horaire( d.id ).etat_volume_horaire_ordre := d.etat_volume_horaire_ordre;
    END LOOP;
  END;


  PROCEDURE POPULATE_TYPE_ETAT_VH( d_volume_horaire t_lst_volume_horaire, d_volume_horaire_ref t_lst_volume_horaire_ref, d_type_etat_vh OUT t_lst_type_etat_vh ) IS
    TYPE t_ordres IS TABLE OF NUMERIC INDEX BY PLS_INTEGER;

    ordres_found t_ordres;
    ordres_exists t_ordres;
    type_volume_horaire_id PLS_INTEGER;
    etat_volume_horaire_ordre PLS_INTEGER;
    id PLS_INTEGER;
  BEGIN
    d_type_etat_vh.delete;

    -- r√©cup√©ration des ID et ordres de volumes horaires
    FOR evh IN (
      SELECT   id, ordre
      FROM     etat_volume_horaire evh
      WHERE    OSE_DIVERS.COMPRISE_ENTRE( evh.histo_creation, evh.histo_destruction ) = 1
      ORDER BY ordre
    ) LOOP
      ordres_exists( evh.ordre ) := evh.id;
    END LOOP;

    -- r√©cup√©ration des ordres maximum par type d'intervention
    id := d_volume_horaire.FIRST;
    LOOP EXIT WHEN id IS NULL;
      IF NOT ordres_found.EXISTS(d_volume_horaire(id).type_volume_horaire_id) THEN
        ordres_found( d_volume_horaire(id).type_volume_horaire_id ) := d_volume_horaire(id).etat_volume_horaire_ordre;
      ELSIF ordres_found( d_volume_horaire(id).type_volume_horaire_id ) < d_volume_horaire(id).etat_volume_horaire_ordre THEN
        ordres_found( d_volume_horaire(id).type_volume_horaire_id ) := d_volume_horaire(id).etat_volume_horaire_ordre;
      END IF;
      id := d_volume_horaire.NEXT(id);
    END LOOP;
    
    id := d_volume_horaire_ref.FIRST;
    LOOP EXIT WHEN id IS NULL;
      IF NOT ordres_found.EXISTS(d_volume_horaire_ref(id).type_volume_horaire_id) THEN
        ordres_found( d_volume_horaire_ref(id).type_volume_horaire_id ) := d_volume_horaire_ref(id).etat_volume_horaire_ordre;
      ELSIF ordres_found( d_volume_horaire_ref(id).type_volume_horaire_id ) < d_volume_horaire_ref(id).etat_volume_horaire_ordre THEN
        ordres_found( d_volume_horaire_ref(id).type_volume_horaire_id ) := d_volume_horaire_ref(id).etat_volume_horaire_ordre;
      END IF;
      id := d_volume_horaire_ref.NEXT(id);
    END LOOP;
    
    -- peuplement des t_lst_type_etat_vh
    type_volume_horaire_id := ordres_found.FIRST;
    LOOP EXIT WHEN type_volume_horaire_id IS NULL;
      etat_volume_horaire_ordre := ordres_exists.FIRST;
      LOOP EXIT WHEN etat_volume_horaire_ordre IS NULL;
        IF etat_volume_horaire_ordre <= ordres_found(type_volume_horaire_id) THEN
          d_type_etat_vh( type_volume_horaire_id + 100000 * etat_volume_horaire_ordre ).type_volume_horaire_id := type_volume_horaire_id;
          d_type_etat_vh( type_volume_horaire_id + 100000 * etat_volume_horaire_ordre ).etat_volume_horaire_id := ordres_exists( etat_volume_horaire_ordre );
        END IF;
        etat_volume_horaire_ordre := ordres_exists.NEXT(etat_volume_horaire_ordre);
      END LOOP;
      
      type_volume_horaire_id := ordres_found.NEXT(type_volume_horaire_id);
    END LOOP;

  END;


  PROCEDURE POPULATE( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    POPULATE_INTERVENANT    ( INTERVENANT_ID, d_intervenant );
    IF d_intervenant.heures_service_statutaire IS NOT NULL THEN -- sinon rien n'est √† faire!!
      POPULATE_SERVICE_REF        ( INTERVENANT_ID, d_service_ref         );
      POPULATE_SERVICE            ( INTERVENANT_ID, d_service             );
      POPULATE_VOLUME_HORAIRE_REF ( INTERVENANT_ID, d_all_volume_horaire_ref  );
      POPULATE_VOLUME_HORAIRE     ( INTERVENANT_ID, d_all_volume_horaire      );
      POPULATE_TYPE_ETAT_VH       ( d_all_volume_horaire, d_all_volume_horaire_ref, d_type_etat_vh );
    END IF;
  END;

  
  PROCEDURE POPULATE_FILTER( TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) IS
    EVH_ORDRE NUMERIC;
    id PLS_INTEGER;
  BEGIN
    d_volume_horaire.delete;
    d_volume_horaire_ref.delete;

    SELECT ordre INTO EVH_ORDRE FROM etat_volume_horaire WHERE ID = ETAT_VOLUME_HORAIRE_ID;

    id := d_all_volume_horaire.FIRST;
    LOOP EXIT WHEN id IS NULL;
      IF
        d_all_volume_horaire(id).type_volume_horaire_id = TYPE_VOLUME_HORAIRE_ID
        AND d_all_volume_horaire(id).etat_volume_horaire_ordre >= EVH_ORDRE 
      THEN
        d_volume_horaire(id) := d_all_volume_horaire(id);
      END IF;
      id := d_all_volume_horaire.NEXT(id);
    END LOOP;
    
    id := d_all_volume_horaire_ref.FIRST;
    LOOP EXIT WHEN id IS NULL;
      IF
        d_all_volume_horaire_ref(id).type_volume_horaire_id = TYPE_VOLUME_HORAIRE_ID
        AND d_all_volume_horaire_ref(id).etat_volume_horaire_ordre >= EVH_ORDRE 
      THEN
        d_volume_horaire_ref(id) := d_all_volume_horaire_ref(id);
      END IF;
      id := d_all_volume_horaire_ref.NEXT(id);
    END LOOP;
  END;


  PROCEDURE INIT_RESULTAT ( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) IS
  BEGIN
    d_resultat.intervenant_id         := INTERVENANT_ID;
    d_resultat.type_volume_horaire_id := TYPE_VOLUME_HORAIRE_ID;
    d_resultat.etat_volume_horaire_id := ETAT_VOLUME_HORAIRE_ID;
    d_resultat.service_du             := 0;
    d_resultat.solde                  := 0;
    d_resultat.sous_service           := 0;
    d_resultat.heures_compl           := 0;
    d_resultat.volume_horaire.delete;
    d_resultat.volume_horaire_ref.delete;
  END;


  PROCEDURE CALC_RESULTAT IS
    function_name VARCHAR2(30);
    package_name VARCHAR2(30);
  BEGIN
    package_name  := OSE_PARAMETRE.GET_FORMULE_PACKAGE_NAME;
    function_name := OSE_PARAMETRE.GET_FORMULE_FUNCTION_NAME;

    EXECUTE IMMEDIATE 
      'BEGIN ' || package_name || '.' || function_name || '( :1, :2, :3 ); END;'
    USING
      d_resultat.intervenant_id, d_resultat.type_volume_horaire_id, d_resultat.etat_volume_horaire_id;

  END;
  
  
  PROCEDURE SAVE_RESULTAT IS
    res             t_resultat_hetd;
    res_ref         t_resultat_hetd_ref;
    res_service     t_lst_resultat_hetd;
    res_service_ref t_lst_resultat_hetd_ref;
    id              PLS_INTEGER;
    sid             PLS_INTEGER;
    fr              formule_resultat%rowtype;
    frs             formule_resultat_service%rowtype;
    frsr            formule_resultat_service_ref%rowtype;
    frvh            formule_resultat_vh%rowtype;
    frvhr           formule_resultat_vh_ref%rowtype;
    dev_null        PLS_INTEGER;
  BEGIN
    -- Calcul des donn√©es pour les services et le r√©sultat global
    fr.service_fi := 0;
    fr.service_fa := 0;
    fr.service_fc := 0;
    fr.service_referentiel := 0;
    fr.heures_compl_fi := 0;
    fr.heures_compl_fa := 0;
    fr.heures_compl_fc := 0;
    fr.heures_compl_fc_majorees := 0;
    fr.heures_compl_referentiel := 0;

    id := d_resultat.volume_horaire.FIRST;
    LOOP EXIT WHEN id IS NULL;
      sid := d_volume_horaire(id).service_id;
      IF NOT res_service.exists(sid) THEN res_service(sid).service_fi := 0; END IF;

      res_service(sid).service_fi               := res_service(sid).service_fi               + d_resultat.volume_horaire(id).service_fi;
      res_service(sid).service_fa               := res_service(sid).service_fa               + d_resultat.volume_horaire(id).service_fa;
      res_service(sid).service_fc               := res_service(sid).service_fc               + d_resultat.volume_horaire(id).service_fc;
      res_service(sid).heures_compl_fi          := res_service(sid).heures_compl_fi          + d_resultat.volume_horaire(id).heures_compl_fi;
      res_service(sid).heures_compl_fa          := res_service(sid).heures_compl_fa          + d_resultat.volume_horaire(id).heures_compl_fa;
      res_service(sid).heures_compl_fc          := res_service(sid).heures_compl_fc          + d_resultat.volume_horaire(id).heures_compl_fc;
      res_service(sid).heures_compl_fc_majorees := res_service(sid).heures_compl_fc_majorees + d_resultat.volume_horaire(id).heures_compl_fc_majorees;

      fr.service_fi                             := fr.service_fi                             + d_resultat.volume_horaire(id).service_fi;
      fr.service_fa                             := fr.service_fa                             + d_resultat.volume_horaire(id).service_fa;
      fr.service_fc                             := fr.service_fc                             + d_resultat.volume_horaire(id).service_fc;
      fr.heures_compl_fi                        := fr.heures_compl_fi                        + d_resultat.volume_horaire(id).heures_compl_fi;
      fr.heures_compl_fa                        := fr.heures_compl_fa                        + d_resultat.volume_horaire(id).heures_compl_fa;
      fr.heures_compl_fc                        := fr.heures_compl_fc                        + d_resultat.volume_horaire(id).heures_compl_fc;
      fr.heures_compl_fc_majorees               := fr.heures_compl_fc_majorees               + d_resultat.volume_horaire(id).heures_compl_fc_majorees;
      id := d_resultat.volume_horaire.NEXT(id);
    END LOOP;

    id := d_resultat.volume_horaire_ref.FIRST;
    LOOP EXIT WHEN id IS NULL;
      sid := d_volume_horaire_ref(id).service_referentiel_id;
      IF NOT res_service_ref.exists(sid) THEN res_service_ref(sid).service_referentiel := 0; END IF;

      res_service_ref(sid).service_referentiel      := res_service_ref(sid).service_referentiel      + d_resultat.volume_horaire_ref(id).service_referentiel;
      res_service_ref(sid).heures_compl_referentiel := res_service_ref(sid).heures_compl_referentiel + d_resultat.volume_horaire_ref(id).heures_compl_referentiel;

      fr.service_referentiel                        := fr.service_referentiel                        + d_resultat.volume_horaire_ref(id).service_referentiel;
      fr.heures_compl_referentiel                   := fr.heures_compl_referentiel                   + d_resultat.volume_horaire_ref(id).heures_compl_referentiel;
      id := d_resultat.volume_horaire_ref.NEXT(id);
    END LOOP;

    -- Sauvegarde du r√©sultat global
    fr.id                       := NULL;
    fr.intervenant_id           := d_resultat.intervenant_id;
    fr.type_volume_horaire_id   := d_resultat.type_volume_horaire_id;
    fr.etat_volume_horaire_id   := d_resultat.etat_volume_horaire_id;
    fr.service_du               := d_resultat.service_du;
    fr.total                    := fr.service_fi
                                 + fr.service_fa
                                 + fr.service_fc
                                 + fr.service_referentiel
                                 + fr.heures_compl_fi
                                 + fr.heures_compl_fa
                                 + fr.heures_compl_fc
                                 + fr.heures_compl_fc_majorees
                                 + fr.heures_compl_referentiel;
    fr.solde                    := d_resultat.solde;
    fr.sous_service             := d_resultat.sous_service;
    fr.heures_compl             := d_resultat.heures_compl;
    fr.id := OSE_FORMULE.ENREGISTRER_RESULTAT( fr );

    -- sauvegarde des services
    id := res_service.FIRST;
    LOOP EXIT WHEN id IS NULL;
      frs.id                       := NULL;
      frs.formule_resultat_id      := fr.id;
      frs.service_id               := id;
      frs.service_fi               := res_service(id).service_fi;
      frs.service_fa               := res_service(id).service_fa;
      frs.service_fc               := res_service(id).service_fc;
      frs.heures_compl_fi          := res_service(id).heures_compl_fi;
      frs.heures_compl_fa          := res_service(id).heures_compl_fa;
      frs.heures_compl_fc          := res_service(id).heures_compl_fc;
      frs.heures_compl_fc_majorees := res_service(id).heures_compl_fc_majorees;
      frs.total                    := frs.service_fi
                                    + frs.service_fa
                                    + frs.service_fc
                                    + frs.heures_compl_fi
                                    + frs.heures_compl_fa
                                    + frs.heures_compl_fc
                                    + frs.heures_compl_fc_majorees;
      dev_null := OSE_FORMULE.ENREGISTRER_RESULTAT_SERVICE( frs );
      id := res_service.NEXT(id);
    END LOOP;
     
    -- sauvegarde des services r√©f√©rentiels
    id := res_service_ref.FIRST;
    LOOP EXIT WHEN id IS NULL;
      frsr.id                       := NULL;
      frsr.formule_resultat_id      := fr.id;
      frsr.service_referentiel_id   := id;
      frsr.service_referentiel      := res_service_ref(id).service_referentiel;
      frsr.heures_compl_referentiel := res_service_ref(id).heures_compl_referentiel;
      frsr.total                    := res_service_ref(id).service_referentiel
                                     + res_service_ref(id).heures_compl_referentiel;
      dev_null := OSE_FORMULE.ENREGISTRER_RESULTAT_SERV_REF( frsr );
      id := res_service_ref.NEXT(id);
    END LOOP;

    -- sauvegarde des volumes horaires
    id := d_resultat.volume_horaire.FIRST;
    LOOP EXIT WHEN id IS NULL;
      frvh.id                        := NULL;
      frvh.formule_resultat_id       := fr.id;
      frvh.volume_horaire_id         := id;
      frvh.service_fi                := d_resultat.volume_horaire(id).service_fi;
      frvh.service_fa                := d_resultat.volume_horaire(id).service_fa;
      frvh.service_fc                := d_resultat.volume_horaire(id).service_fc;
      frvh.heures_compl_fi           := d_resultat.volume_horaire(id).heures_compl_fi;
      frvh.heures_compl_fa           := d_resultat.volume_horaire(id).heures_compl_fa;
      frvh.heures_compl_fc           := d_resultat.volume_horaire(id).heures_compl_fc;
      frvh.heures_compl_fc_majorees  := d_resultat.volume_horaire(id).heures_compl_fc_majorees;
      frvh.total                     := frvh.service_fi
                                      + frvh.service_fa
                                      + frvh.service_fc
                                      + frvh.heures_compl_fi
                                      + frvh.heures_compl_fa
                                      + frvh.heures_compl_fc
                                      + frvh.heures_compl_fc_majorees;
      dev_null := OSE_FORMULE.ENREGISTRER_RESULTAT_VH( frvh );
      id := d_resultat.volume_horaire.NEXT(id);
    END LOOP;

    -- sauvegarde des volumes horaires r√©f√©rentiels
    id := d_resultat.volume_horaire_ref.FIRST;
    LOOP EXIT WHEN id IS NULL;
      frvhr.id                       := NULL;
      frvhr.formule_resultat_id      := fr.id;
      frvhr.volume_horaire_ref_id    := id;
      frvhr.service_referentiel      := d_resultat.volume_horaire_ref(id).service_referentiel;
      frvhr.heures_compl_referentiel := d_resultat.volume_horaire_ref(id).heures_compl_referentiel;
      frvhr.total                    := frvhr.service_referentiel
                                      + frvhr.heures_compl_referentiel;
      dev_null := OSE_FORMULE.ENREGISTRER_RESULTAT_VH_REF( frvhr );
      id := d_resultat.volume_horaire_ref.NEXT(id);
    END LOOP;
  END;

  PROCEDURE DEBUG_INTERVENANT IS
  BEGIN
    ose_test.echo('d_intervenant');
    ose_test.echo('      .structure_id                   = ' || d_intervenant.structure_id || ' (' || ose_test.get_structure_by_id(d_intervenant.structure_id).libelle_court || ')' );
    ose_test.echo('      .heures_service_statutaire      = ' || d_intervenant.heures_service_statutaire );
    ose_test.echo('      .heures_service_modifie         = ' || d_intervenant.heures_service_modifie );
    ose_test.echo('      .depassement_service_du_sans_hc = ' || d_intervenant.depassement_service_du_sans_hc );
    ose_test.echo('');
  END;
  
  PROCEDURE DEBUG_SERVICE( SERVICE_ID PLS_INTEGER ) IS
  BEGIN
    ose_test.echo('d_service(' || SERVICE_ID || ')' );
    ose_test.echo('      .taux_fi                   = ' || d_service(SERVICE_ID).taux_fi );
    ose_test.echo('      .taux_fa                   = ' || d_service(SERVICE_ID).taux_fa );
    ose_test.echo('      .taux_fc                   = ' || d_service(SERVICE_ID).taux_fc );
    ose_test.echo('      .ponderation_service_du    = ' || d_service(SERVICE_ID).ponderation_service_du );
    ose_test.echo('      .ponderation_service_compl = ' || d_service(SERVICE_ID).ponderation_service_compl );
    ose_test.echo('      .structure_aff_id          = ' || d_service(SERVICE_ID).structure_aff_id || ' (' || ose_test.get_structure_by_id(d_service(SERVICE_ID).structure_aff_id).libelle_court || ')' );
    ose_test.echo('      .structure_ens_id          = ' || d_service(SERVICE_ID).structure_ens_id || ' (' || CASE WHEN d_service(SERVICE_ID).structure_ens_id IS NOT NULL THEN ose_test.get_structure_by_id(d_service(SERVICE_ID).structure_ens_id).libelle_court ELSE 'null' END || ')' );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_SERVICE_REF( SERVICE_REF_ID PLS_INTEGER ) IS
  BEGIN
    ose_test.echo('d_service_ref(' || SERVICE_REF_ID || ')' );
    ose_test.echo('      .structure_id          = ' || d_service_ref(SERVICE_REF_ID).structure_id || ' (' || ose_test.get_structure_by_id(d_service_ref(SERVICE_REF_ID).structure_id).libelle_court || ')' );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_VOLUME_HORAIRE( VH_ID PLS_INTEGER ) IS
  BEGIN
    ose_test.echo('d_volume_horaire(' || VH_ID || ')' );
    ose_test.echo('      .service_id                = ' || d_volume_horaire(VH_ID).service_id );
    ose_test.echo('      .type_volume_horaire_id    = ' || d_volume_horaire(VH_ID).type_volume_horaire_id );
    ose_test.echo('      .etat_volume_horaire_id    = ' || d_volume_horaire(VH_ID).etat_volume_horaire_id );
    ose_test.echo('      .etat_volume_horaire_ordre = ' || d_volume_horaire(VH_ID).etat_volume_horaire_ordre );
    ose_test.echo('      .heures                    = ' || d_volume_horaire(VH_ID).heures );
    ose_test.echo('      .taux_service_du           = ' || d_volume_horaire(VH_ID).taux_service_du );
    ose_test.echo('      .taux_service_compl        = ' || d_volume_horaire(VH_ID).taux_service_compl );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_VOLUME_HORAIRE_REF( VH_REF_ID PLS_INTEGER ) IS
  BEGIN
    ose_test.echo('d_volume_horaire_ref(' || VH_REF_ID || ')' );
    ose_test.echo('      .service_referentiel_id    = ' || d_volume_horaire_ref(VH_REF_ID).service_referentiel_id );
    ose_test.echo('      .type_volume_horaire_id    = ' || d_volume_horaire_ref(VH_REF_ID).type_volume_horaire_id );
    ose_test.echo('      .etat_volume_horaire_id    = ' || d_volume_horaire_ref(VH_REF_ID).etat_volume_horaire_id );
    ose_test.echo('      .etat_volume_horaire_ordre = ' || d_volume_horaire_ref(VH_REF_ID).etat_volume_horaire_ordre );
    ose_test.echo('      .heures                    = ' || d_volume_horaire_ref(VH_REF_ID).heures );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_RESULTAT IS
  BEGIN
    ose_test.echo('d_resultat' );
    ose_test.echo('      .service_du   = ' || d_resultat.service_du );
    ose_test.echo('      .solde        = ' || d_resultat.solde );
    ose_test.echo('      .sous_service = ' || d_resultat.sous_service );
    ose_test.echo('      .heures_compl = ' || d_resultat.heures_compl );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_RESULTAT_VH( VH_ID PLS_INTEGER ) IS
  BEGIN
    ose_test.echo('d_resultat.volume_horaire(' || VH_ID || ')' );
    ose_test.echo('      .service_fi                = ' || d_resultat.volume_horaire(VH_ID).service_fi );
    ose_test.echo('      .service_fa                = ' || d_resultat.volume_horaire(VH_ID).service_fa );
    ose_test.echo('      .service_fc                = ' || d_resultat.volume_horaire(VH_ID).service_fc );
    ose_test.echo('      .heures_compl_fi           = ' || d_resultat.volume_horaire(VH_ID).heures_compl_fi );
    ose_test.echo('      .heures_compl_fa           = ' || d_resultat.volume_horaire(VH_ID).heures_compl_fa );
    ose_test.echo('      .heures_compl_fc           = ' || d_resultat.volume_horaire(VH_ID).heures_compl_fc );
    ose_test.echo('      .heures_compl_fc_majorees  = ' || d_resultat.volume_horaire(VH_ID).heures_compl_fc_majorees );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_RESULTAT_VH_REF( VH_REF_ID PLS_INTEGER ) IS
  BEGIN
    ose_test.echo('d_resultat.volume_horaire_ref(' || VH_REF_ID || ')' );
    ose_test.echo('      .service_referentiel                = ' || d_resultat.volume_horaire_ref(VH_REF_ID).service_referentiel );
    ose_test.echo('      .heures_compl_referentiel           = ' || d_resultat.volume_horaire_ref(VH_REF_ID).heures_compl_referentiel );
    ose_test.echo('');
  END;

  PROCEDURE DEBUG_ALL( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) IS
    id  PLS_INTEGER;
    i   intervenant%rowtype;
    a   annee%rowtype;
    tvh type_volume_horaire%rowtype;
    evh etat_volume_horaire%rowtype;
  BEGIN
    IF GET_DEBUG_LEVEL >= 1 THEN
      SELECT * INTO   i FROM intervenant         WHERE id = INTERVENANT_ID;
      SELECT * INTO   a FROM annee               WHERE id = i.annee_id;
      SELECT * INTO tvh FROM type_volume_horaire WHERE id = TYPE_VOLUME_HORAIRE_ID;
      SELECT * INTO evh FROM etat_volume_horaire WHERE id = ETAT_VOLUME_HORAIRE_ID;
          
      ose_test.echo('');
      ose_test.echo('---------------------------------------------------------------------');
      ose_test.echo('Intervenant: ' || INTERVENANT_ID || ' : ' || i.prenom || ' ' || i.nom_usuel || ' (n¬∞ harp. ' || i.source_code || ')' );
      ose_test.echo(
                  'Ann√©e: ' || a.libelle
               || ', type ' || tvh.libelle
               || ', √©tat ' || evh.libelle
      );
      ose_test.echo('');
    END IF;
    IF GET_DEBUG_LEVEL >= 2 THEN
      DEBUG_INTERVENANT;
    END IF;
    
    IF GET_DEBUG_LEVEL >= 5 THEN     
      id := d_service.FIRST;
      LOOP EXIT WHEN id IS NULL;
        DEBUG_SERVICE( id ); 
        id := d_service.NEXT(id);
      END LOOP;

      id := d_service_ref.FIRST;
      LOOP EXIT WHEN id IS NULL;
        DEBUG_SERVICE_REF( id ); 
        id := d_service_ref.NEXT(id);
      END LOOP;
    END IF;
    
    IF GET_DEBUG_LEVEL >= 6 THEN     
      id := d_volume_horaire.FIRST;
      LOOP EXIT WHEN id IS NULL;
        DEBUG_VOLUME_HORAIRE( id ); 
        id := d_volume_horaire.NEXT(id);
      END LOOP;

      id := d_volume_horaire_ref.FIRST;
      LOOP EXIT WHEN id IS NULL;
        DEBUG_VOLUME_HORAIRE_REF( id ); 
        id := d_volume_horaire_ref.NEXT(id);
      END LOOP;
    END IF;

    IF GET_DEBUG_LEVEL >= 3 THEN
      DEBUG_RESULTAT;
    END IF;
    
    IF GET_DEBUG_LEVEL >= 4 THEN
      id := d_resultat.volume_horaire.FIRST;
      LOOP EXIT WHEN id IS NULL;
        DEBUG_RESULTAT_VH( id ); 
        id := d_resultat.volume_horaire.NEXT(id);
      END LOOP;
      
      id := d_resultat.volume_horaire_ref.FIRST;
      LOOP EXIT WHEN id IS NULL;
        DEBUG_RESULTAT_VH_REF( id ); 
        id := d_resultat.volume_horaire_ref.NEXT(id);
      END LOOP;
    END IF;
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
    id PLS_INTEGER;
    found BOOLEAN;
    function_name VARCHAR2(30);
    package_name VARCHAR2(30);
  BEGIN
    package_name  := OSE_PARAMETRE.GET_FORMULE_PACKAGE_NAME;
    function_name := OSE_PARAMETRE.GET_FORMULE_FUNCTION_NAME;

    -- d√©tection de suppression des lignes de r√©sultat obsol√®tes
    UPDATE formule_resultat SET TO_DELETE = 1 WHERE intervenant_id = CALCULER.INTERVENANT_ID;
    UPDATE FORMULE_RESULTAT_SERVICE_REF SET TO_DELETE = 1 WHERE formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    UPDATE FORMULE_RESULTAT_SERVICE     SET TO_DELETE = 1 WHERE formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    UPDATE FORMULE_RESULTAT_VH_REF      SET TO_DELETE = 1 WHERE formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    UPDATE FORMULE_RESULTAT_VH          SET TO_DELETE = 1 WHERE formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);

    POPULATE( INTERVENANT_ID );
    IF d_intervenant.heures_service_statutaire IS NOT NULL THEN -- sinon rien n'est √† faire!!
      -- lancement du calcul sur les nouvelles lignes ou sur les lignes existantes
      id := d_type_etat_vh.FIRST;
      LOOP EXIT WHEN id IS NULL;
        POPULATE_FILTER( d_type_etat_vh(id).type_volume_horaire_id, d_type_etat_vh(id).etat_volume_horaire_id );
        DEBUG_ALL( INTERVENANT_ID, d_type_etat_vh(id).type_volume_horaire_id, d_type_etat_vh(id).etat_volume_horaire_id );
        OSE_FORMULE.INIT_RESULTAT( INTERVENANT_ID, d_type_etat_vh(id).type_volume_horaire_id, d_type_etat_vh(id).etat_volume_horaire_id );
        OSE_FORMULE.CALC_RESULTAT;
        OSE_FORMULE.SAVE_RESULTAT;
        id := d_type_etat_vh.NEXT(id);
      END LOOP;
    END IF;

    -- suppression des donn√©es devenues obsol√®tes
    OSE_EVENT.ON_BEFORE_FORMULE_RES_DELETE( CALCULER.INTERVENANT_ID );
    
    DELETE FROM MISE_EN_PAIEMENT WHERE 0 = OSE_DIVERS.comprise_entre( histo_creation, histo_destruction ) AND
      (
        formule_res_service_id IN (
          SELECT id FROM FORMULE_RESULTAT_SERVICE WHERE TO_DELETE = 1 AND formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID)
        )
        OR formule_res_service_ref_id IN (
          SELECT id FROM FORMULE_RESULTAT_SERVICE_REF WHERE TO_DELETE = 1 AND formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID)
        )
      );
    
    DELETE FROM FORMULE_RESULTAT_SERVICE_REF WHERE TO_DELETE = 1 AND formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    DELETE FROM FORMULE_RESULTAT_SERVICE WHERE TO_DELETE = 1 AND formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    DELETE FROM FORMULE_RESULTAT_VH_REF WHERE TO_DELETE = 1 AND formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    DELETE FROM FORMULE_RESULTAT_VH WHERE TO_DELETE = 1 AND formule_resultat_id IN (SELECT id FROM formule_resultat WHERE intervenant_id = CALCULER.INTERVENANT_ID);
    DELETE FROM FORMULE_RESULTAT WHERE TO_DELETE = 1 AND intervenant_id = CALCULER.INTERVENANT_ID;
  END;



  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_FORMULE.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_FORMULE.INTERVENANT_ID := NULL;
    ELSE
      OSE_FORMULE.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;
    
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_FORMULE.INTERVENANT_ID IS NULL OR OSE_FORMULE.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END OSE_FORMULE;

/
--------------------------------------------------------
--  DDL for Package Body OSE_HISTO
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_HISTO" AS 

  FUNCTION FILTRE( histo_debut NUMERIC, histo_fin NUMERIC ) RETURN NUMERIC IS
  BEGIN
    RETURN 1;
  END;

END OSE_HISTO;

/
--------------------------------------------------------
--  DDL for Package Body OSE_IMPORT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_IMPORT" IS

  PROCEDURE REFRESH_MV( mview_name varchar2 ) IS
  BEGIN
    DBMS_MVIEW.REFRESH(mview_name, 'C');
  EXCEPTION WHEN OTHERS THEN
    UNICAEN_IMPORT.SYNC_LOG( SQLERRM, mview_name );
  END;

  PROCEDURE REFRESH_MVS IS
  BEGIN
    -- Mise √† jour des vues mat√©rialis√©es
    REFRESH_MV('MV_PAYS');
    REFRESH_MV('MV_DEPARTEMENT');
    REFRESH_MV('MV_ETABLISSEMENT');
    REFRESH_MV('MV_STRUCTURE');
    REFRESH_MV('MV_ADRESSE_STRUCTURE');
    
    REFRESH_MV('MV_PERSONNEL');
    REFRESH_MV('MV_AFFECTATION');
    
    REFRESH_MV('MV_CORPS');
    REFRESH_MV('MV_GRADE');
    
    REFRESH_MV('MV_INTERVENANT');
    REFRESH_MV('MV_AFFECTATION_RECHERCHE');
    REFRESH_MV('MV_ADRESSE_INTERVENANT');
    REFRESH_MV('MV_INTERVENANT_RECHERCHE'); -- pour la recherche d'intervenants
    
    REFRESH_MV('MV_GROUPE_TYPE_FORMATION');
    REFRESH_MV('MV_TYPE_FORMATION');
    REFRESH_MV('MV_ETAPE');
    REFRESH_MV('MV_ELEMENT_PEDAGOGIQUE');
    REFRESH_MV('MV_EFFECTIFS');
    REFRESH_MV('MV_ELEMENT_TAUX_REGIMES');
    REFRESH_MV('MV_CHEMIN_PEDAGOGIQUE');
    REFRESH_MV('MV_ELEMENT_PORTEUR_PORTE');
    
    REFRESH_MV('MV_CENTRE_COUT');
    REFRESH_MV('MV_DOMAINE_FONCTIONNEL');
  END;

  PROCEDURE SYNC_TABLES IS
  BEGIN
    UNICAEN_IMPORT.MAJ_PAYS();
    UNICAEN_IMPORT.MAJ_DEPARTEMENT();
  
    UNICAEN_IMPORT.MAJ_ETABLISSEMENT();
    UNICAEN_IMPORT.MAJ_STRUCTURE();
    UNICAEN_IMPORT.MAJ_ADRESSE_STRUCTURE();
    
    UNICAEN_IMPORT.MAJ_DOMAINE_FONCTIONNEL();
    UNICAEN_IMPORT.MAJ_CENTRE_COUT();
    UNICAEN_IMPORT.MAJ_CENTRE_COUT_STRUCTURE();

    UNICAEN_IMPORT.MAJ_PERSONNEL();
    UNICAEN_IMPORT.MAJ_AFFECTATION();

    UNICAEN_IMPORT.MAJ_CORPS();
    UNICAEN_IMPORT.MAJ_GRADE();

    UNICAEN_IMPORT.MAJ_INTERVENANT();
    UNICAEN_IMPORT.MAJ_AFFECTATION_RECHERCHE();
    UNICAEN_IMPORT.MAJ_ADRESSE_INTERVENANT();

    UNICAEN_IMPORT.MAJ_GROUPE_TYPE_FORMATION();
    UNICAEN_IMPORT.MAJ_TYPE_FORMATION();
    UNICAEN_IMPORT.MAJ_ETAPE();
    UNICAEN_IMPORT.MAJ_ELEMENT_PEDAGOGIQUE();
    UNICAEN_IMPORT.MAJ_EFFECTIFS();
    UNICAEN_IMPORT.MAJ_ELEMENT_TAUX_REGIMES();
    UNICAEN_IMPORT.MAJ_CHEMIN_PEDAGOGIQUE();
    
    -- Mise √† jour des sources calcul√©es en dernier
    UNICAEN_IMPORT.MAJ_TYPE_INTERVENTION_EP();
    UNICAEN_IMPORT.MAJ_TYPE_MODULATEUR_EP();
  END;

  PROCEDURE SYNCHRONISATION IS
  BEGIN
    REFRESH_MVS;
    SYNC_TABLES;
  END SYNCHRONISATION;

END ose_import;

/
--------------------------------------------------------
--  DDL for Package Body OSE_PAIEMENT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_PAIEMENT" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_INTERVENANT( CALC.INTERVENANT_ID );
  
    UPDATE tbl_paiement SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_paiement t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_PAIEMENT vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
              nvl(t.formule_res_service_id,0)     = nvl(v.formule_res_service_id,0)
          AND nvl(t.formule_res_service_ref_id,0) = nvl(v.formule_res_service_ref_id,0)
          AND t.intervenant_id                    = v.intervenant_id
          AND nvl(t.mise_en_paiement_id,0)        = nvl(v.mise_en_paiement_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      structure_id         = v.structure_id,
      periode_paiement_id  = v.periode_paiement_id,
      heures_a_payer       = v.heures_a_payer,
      heures_a_payer_pond  = v.heures_a_payer_pond,
      heures_demandees     = v.heures_demandees,
      heures_payees        = v.heures_payees,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      FORMULE_RES_SERVICE_ID,
      FORMULE_RES_SERVICE_REF_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      MISE_EN_PAIEMENT_ID,
      PERIODE_PAIEMENT_ID,
      HEURES_A_PAYER,
      HEURES_A_PAYER_POND,
      HEURES_DEMANDEES,
      HEURES_PAYEES,
      TO_DELETE

    ) VALUES (

      TBL_PAIEMENT_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.formule_res_service_id,
      v.formule_res_service_ref_id,
      v.intervenant_id,
      v.structure_id,
      v.mise_en_paiement_id,
      v.periode_paiement_id,
      v.heures_a_payer,
      v.heures_a_payer_pond,
      v.heures_demandees,
      v.heures_payees,
      0

    );

    DELETE FROM TBL_PAIEMENT WHERE to_delete = 1 AND (intervenant_id = CALC.INTERVENANT_ID OR CALC.INTERVENANT_ID = -1);
    SET_INTERVENANT(NULL);
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;



  PROCEDURE CHECK_BAD_PAIEMENTS( FORMULE_RES_SERVICE_ID NUMERIC DEFAULT NULL, FORMULE_RES_SERVICE_REF_ID NUMERIC DEFAULT NULL ) IS
    cc NUMERIC;
  BEGIN
    SELECT count(*) INTO cc 
    FROM mise_en_paiement mep 
    WHERE
      mep.histo_destruction IS NULL
      AND mep.formule_res_service_id = NVL( CHECK_BAD_PAIEMENTS.FORMULE_RES_SERVICE_ID, mep.formule_res_service_id )
      AND mep.formule_res_service_ref_id = NVL( CHECK_BAD_PAIEMENTS.FORMULE_RES_SERVICE_REF_ID, mep.formule_res_service_ref_id )
  ;

    IF (cc > 0) THEN
      raise_application_error(-20101, 'Il est impossible d''effectuer cette action : des demandes de mise en paiement ont √©t√© saisies et ne peuvent pas √™tre modifi√©es');
    ELSE
      DELETE FROM mise_en_paiement WHERE 
        histo_destruction IS NOT NULL
        AND formule_res_service_id = NVL( CHECK_BAD_PAIEMENTS.FORMULE_RES_SERVICE_ID, formule_res_service_id )
        AND formule_res_service_ref_id = NVL( CHECK_BAD_PAIEMENTS.FORMULE_RES_SERVICE_REF_ID, formule_res_service_ref_id )
      ;
    END IF;
  END;
  
  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_PAIEMENT.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_PAIEMENT.INTERVENANT_ID := NULL;
    ELSE
      OSE_PAIEMENT.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;
  
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_PAIEMENT.INTERVENANT_ID IS NULL OR OSE_PAIEMENT.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END OSE_PAIEMENT;

/
--------------------------------------------------------
--  DDL for Package Body OSE_PARAMETRE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_PARAMETRE" AS

  cache_ose_user NUMERIC;
  cache_annee_id NUMERIC;

  function get_etablissement return Numeric AS
    etab_id numeric;
  BEGIN
    select to_number(valeur) into etab_id from parametre where nom = 'etablissement';
    RETURN etab_id;
  END get_etablissement;

  function get_annee return Numeric AS
    annee_id numeric;
  BEGIN
    IF cache_annee_id IS NOT NULL THEN RETURN cache_annee_id; END IF;
    select to_number(valeur) into annee_id from parametre where nom = 'annee';
    cache_annee_id := annee_id;
    RETURN cache_annee_id;
  END get_annee;

  FUNCTION get_annee_import RETURN NUMERIC AS
    annee_id NUMERIC;
  BEGIN
    SELECT to_number(valeur) INTO annee_id FROM parametre WHERE nom = 'annee_import';
    RETURN annee_id;
  END get_annee_import;

  function get_ose_user return Numeric AS
    ose_user_id numeric;
  BEGIN
    IF cache_ose_user IS NOT NULL THEN RETURN cache_ose_user; END IF;
    select to_number(valeur) into ose_user_id from parametre where nom = 'oseuser';
    cache_ose_user := ose_user_id;
    RETURN cache_ose_user;
  END get_ose_user;

  function get_drh_structure_id return Numeric AS
    drh_structure_id numeric;
  BEGIN
    select to_number(valeur) into drh_structure_id from parametre where nom = 'drh_structure_id';
    RETURN drh_structure_id;
  END get_drh_structure_id;

  FUNCTION get_date_fin_saisie_permanents RETURN DATE IS
    date_fin_saisie_permanents date;
  BEGIN
    select TO_DATE(valeur, 'dd/mm/yyyy') into date_fin_saisie_permanents from parametre where nom = 'date_fin_saisie_permanents';
    RETURN date_fin_saisie_permanents;
  END;

  FUNCTION get_ddeb_saisie_serv_real RETURN DATE IS
    val date;
  BEGIN
    select TO_DATE(valeur, 'dd/mm/yyyy') into val from parametre where nom = 'date_debut_saisie_services_realises';
    RETURN val;
  END;
  
  FUNCTION get_dfin_saisie_serv_real RETURN DATE IS
    val date;
  BEGIN
    select TO_DATE(valeur, 'dd/mm/yyyy') into val from parametre where nom = 'date_fin_saisie_services_realises';
    RETURN val;
  END;

  FUNCTION get_formule_package_name RETURN VARCHAR2 IS
    formule_package_name VARCHAR2(30);
  BEGIN
    SELECT valeur INTO formule_package_name FROM parametre WHERE nom = 'formule_package_name';
    RETURN formule_package_name;
  END;
  
  FUNCTION get_formule_function_name RETURN VARCHAR2 IS
    formule_function_name VARCHAR2(30);
  BEGIN
    SELECT valeur INTO formule_function_name FROM parametre WHERE nom = 'formule_function_name';
    RETURN formule_function_name;
  END;

END OSE_PARAMETRE;

/
--------------------------------------------------------
--  DDL for Package Body OSE_PIECE_JOINTE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_PIECE_JOINTE" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_INTERVENANT( CALC.INTERVENANT_ID );
  
    UPDATE tbl_PIECE_JOINTE SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_PIECE_JOINTE t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_PIECE_JOINTE vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.type_piece_jointe_id = v.type_piece_jointe_id
          AND t.intervenant_id   = v.intervenant_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      demandee             = v.demandee,
      fournie              = v.fournie,
      validee              = v.validee,
      heures_pour_seuil    = v.heures_pour_seuil,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      TYPE_PIECE_JOINTE_ID,
      INTERVENANT_ID,
      DEMANDEE,
      FOURNIE,
      VALIDEE,
      HEURES_POUR_SEUIL,
      TO_DELETE

    ) VALUES (

      TBL_PIECE_JOINTE_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.type_piece_jointe_id,
      v.intervenant_id,
      v.demandee,
      v.fournie,
      v.validee,
      v.heures_pour_seuil,
      0

    );

    DELETE FROM TBL_PIECE_JOINTE WHERE to_delete = 1 AND (intervenant_id = CALC.INTERVENANT_ID OR CALC.INTERVENANT_ID = -1);
    SET_INTERVENANT(NULL);
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;
  
  
  
  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_PIECE_JOINTE.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_PIECE_JOINTE.INTERVENANT_ID := NULL;
    ELSE
      OSE_PIECE_JOINTE.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;
    
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_PIECE_JOINTE.INTERVENANT_ID IS NULL OR OSE_PIECE_JOINTE.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END OSE_PIECE_JOINTE;

/
--------------------------------------------------------
--  DDL for Package Body OSE_PIECE_JOINTE_DEMANDE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_PIECE_JOINTE_DEMANDE" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_INTERVENANT( CALC.INTERVENANT_ID );
  
    UPDATE TBL_PIECE_JOINTE_DEMANDE SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_PIECE_JOINTE_DEMANDE t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_PIECE_JOINTE_DEMANDE vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.type_piece_jointe_id = v.type_piece_jointe_id
      AND t.intervenant_id       = v.intervenant_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      heures_pour_seuil    = v.heures_pour_seuil,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      TYPE_PIECE_JOINTE_ID,
      INTERVENANT_ID,
      HEURES_POUR_SEUIL,
      TO_DELETE

    ) VALUES (

      TBL_PIECE_JOINTE_DEMAND_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.type_piece_jointe_id,
      v.intervenant_id,
      v.heures_pour_seuil,
      0

    );

    DELETE FROM TBL_PIECE_JOINTE_DEMANDE WHERE to_delete = 1 AND (intervenant_id = CALC.INTERVENANT_ID OR CALC.INTERVENANT_ID = -1);
    SET_INTERVENANT(NULL);
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;



  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_PIECE_JOINTE_DEMANDE.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_PIECE_JOINTE_DEMANDE.INTERVENANT_ID := NULL;
    ELSE
      OSE_PIECE_JOINTE_DEMANDE.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;
  
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_PIECE_JOINTE_DEMANDE.INTERVENANT_ID IS NULL OR OSE_PIECE_JOINTE_DEMANDE.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END OSE_PIECE_JOINTE_DEMANDE;

/
--------------------------------------------------------
--  DDL for Package Body OSE_PIECE_JOINTE_FOURNIE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_PIECE_JOINTE_FOURNIE" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_INTERVENANT( CALC.INTERVENANT_ID );

    UPDATE TBL_PIECE_JOINTE_FOURNIE SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      TBL_PIECE_JOINTE_FOURNIE t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_PIECE_JOINTE_FOURNIE vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)

    ) v ON (

      t.type_piece_jointe_id     = v.type_piece_jointe_id
      AND t.intervenant_id       = v.intervenant_id
      AND NVL(t.validation_id,0) = NVL(v.validation_id,0)
      AND NVL(t.fichier_id,0)    = NVL(v.fichier_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      piece_jointe_id      = v.piece_jointe_id,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      TYPE_PIECE_JOINTE_ID,
      INTERVENANT_ID,
      PIECE_JOINTE_ID,
      VALIDATION_ID,
      FICHIER_ID,
      TO_DELETE

    ) VALUES (

      TBL_PIECE_JOINTE_FOURNI_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.type_piece_jointe_id,
      v.intervenant_id,
      v.piece_jointe_id,
      v.validation_id,
      v.fichier_id,
      0

    );

    DELETE FROM TBL_PIECE_JOINTE_FOURNIE WHERE to_delete = 1 AND (intervenant_id = CALC.INTERVENANT_ID OR CALC.INTERVENANT_ID = -1);
    SET_INTERVENANT(NULL);
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;



  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_PIECE_JOINTE_FOURNIE.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_PIECE_JOINTE_FOURNIE.INTERVENANT_ID := NULL;
    ELSE
      OSE_PIECE_JOINTE_FOURNIE.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;
  
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_PIECE_JOINTE_FOURNIE.INTERVENANT_ID IS NULL OR OSE_PIECE_JOINTE_FOURNIE.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END OSE_PIECE_JOINTE_FOURNIE;

/
--------------------------------------------------------
--  DDL for Package Body OSE_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_SERVICE" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_INTERVENANT( CALC.INTERVENANT_ID );

    UPDATE tbl_SERVICE SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_SERVICE t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_SERVICE vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.service_id                = v.service_id
      AND NVL(t.type_volume_horaire_id,0) = NVL(v.type_volume_horaire_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      intervenant_id                 = v.intervenant_id,
      structure_id                   = v.structure_id,
      annee_id                       = v.annee_id,
      peut_saisir_service            = v.peut_saisir_service,
      nbvh                           = v.nbvh,
      heures                         = v.heures,
      valide                         = v.valide,
      element_pedagogique_id         = v.element_pedagogique_id,
      element_pedagogique_periode_id = v.element_pedagogique_periode_id,
      etape_id                       = v.etape_id,
      element_pedagogique_histo      = v.element_pedagogique_histo,
      etape_histo                    = v.etape_histo,
      has_heures_mauvaise_periode    = v.has_heures_mauvaise_periode,
      intervenant_structure_id       = v.intervenant_structure_id, 
      type_intervenant_id            = v.type_intervenant_id,
      type_intervenant_code          = v.type_intervenant_code,
      type_volume_horaire_code       = v.type_volume_horaire_code,
      to_delete                      = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      PEUT_SAISIR_SERVICE,
      TYPE_VOLUME_HORAIRE_ID,
      STRUCTURE_ID,
      NBVH,
      heures,
      VALIDE,
      element_pedagogique_id,
      element_pedagogique_periode_id,
      etape_id,
      element_pedagogique_histo,
      etape_histo,
      has_heures_mauvaise_periode,
      service_id,
      intervenant_structure_id,
      type_intervenant_id,
      type_intervenant_code,
      type_volume_horaire_code,
      TO_DELETE

    ) VALUES (

      TBL_SERVICE_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.peut_saisir_service,
      v.type_volume_horaire_id,
      v.structure_id,
      v.nbvh,
      v.heures,
      v.valide,
      v.element_pedagogique_id,
      v.element_pedagogique_periode_id,
      v.etape_id,
      v.element_pedagogique_histo,
      v.etape_histo,
      v.has_heures_mauvaise_periode,
      v.service_id,
      v.intervenant_structure_id,
      v.type_intervenant_id,
      v.type_intervenant_code,
      v.type_volume_horaire_code,
      0

    );

    DELETE FROM TBL_SERVICE WHERE to_delete = 1 AND (intervenant_id = CALC.INTERVENANT_ID OR CALC.INTERVENANT_ID = -1);
    SET_INTERVENANT(NULL);
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;



  /**
   * Retourne true si le test passe, false sinon
   */
  FUNCTION test_plafond_fc_maj( intervenant_id NUMERIC, type_volume_horaire_id NUMERIC ) RETURN BOOLEAN IS
    heures_restantes FLOAT;
  BEGIN
    BEGIN
      SELECT
        pla.plafond - pla.heures INTO heures_restantes 
      FROM
        v_plafond_fc_maj pla
        JOIN etat_volume_horaire evh ON evh.code = 'saisi' AND evh.id = pla.etat_volume_horaire_id
      WHERE
            intervenant_id         = test_plafond_fc_maj.intervenant_id
        AND type_volume_horaire_id = test_plafond_fc_maj.type_volume_horaire_id;
        
      RETURN heures_restantes >= 0;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN RETURN TRUE;
    END;
  END;



  /**
   * Contr√¥le du plafond FC D714-60
   */
  PROCEDURE controle_plafond_fc_maj( intervenant_id NUMERIC, type_volume_horaire_id NUMERIC ) IS
  BEGIN
    IF test_plafond_fc_maj(intervenant_id, type_volume_horaire_id) THEN
      
      /* On dit que le contr√¥le a √©t√© effectu√© !! */
      UPDATE volume_horaire 
      SET tem_plafond_fc_maj = 1 
      WHERE 
        type_volume_horaire_id = controle_plafond_fc_maj.type_volume_horaire_id
        AND service_id IN (SELECT s.id FROM service s WHERE s.intervenant_id = controle_plafond_fc_maj.intervenant_id);
      
    ELSE
      
      /* Suppression des volumes horaires induement cr√©√©s */
      DELETE FROM volume_horaire 
      WHERE
        tem_plafond_fc_maj <> 1
        AND buff_pfm_heures IS NULL -- on ne d√©truit que les nouvellement cr√©√©s
        AND type_volume_horaire_id = controle_plafond_fc_maj.type_volume_horaire_id
        AND service_id IN (SELECT ID FROM service WHERE intervenant_id = controle_plafond_fc_maj.intervenant_id);

      /* remise √† l'√©tat ant√©rieur des volumes horaires induement modifi√©s */
      UPDATE volume_horaire SET
        heures                         = buff_pfm_heures,
        motif_non_paiement_id          = buff_pfm_motif_non_paiement_id,
        histo_modification             = buff_pfm_histo_modification,
        histo_modificateur_id          = buff_pfm_histo_modificateur_id,
        buff_pfm_heures                = NULL,
        buff_pfm_motif_non_paiement_id = NULL,
        buff_pfm_histo_modification    = NULL,
        buff_pfm_histo_modificateur_id = NULL,
        tem_plafond_fc_maj             = 1
      WHERE
        tem_plafond_fc_maj <> 1
        AND buff_pfm_heures IS NOT NULL -- on ne met √† jour que les anciennes donn√©es
        AND type_volume_horaire_id = controle_plafond_fc_maj.type_volume_horaire_id
        AND service_id IN (SELECT ID FROM service WHERE intervenant_id = controle_plafond_fc_maj.intervenant_id);
        
      /* Purge de la liste des services devenus inutiles (le cas √©ch√©ant) */
      DELETE FROM service WHERE
        intervenant_id = controle_plafond_fc_maj.intervenant_id
        AND NOT EXISTS(SELECT * FROM volume_horaire WHERE service_id = service.id);
    
      COMMIT; 
      /* Renvoi de l'exception */
      raise_application_error(-20101, ose_divers.get_msg('service-pladond-fc-maj-depasse'));

    END IF;
  END;


  


  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_SERVICE.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_SERVICE.INTERVENANT_ID := NULL;
    ELSE
      OSE_SERVICE.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;

  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_SERVICE.INTERVENANT_ID IS NULL OR OSE_SERVICE.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END OSE_SERVICE;

/
--------------------------------------------------------
--  DDL for Package Body OSE_SERVICE_REFERENTIEL
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_SERVICE_REFERENTIEL" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_INTERVENANT( CALC.INTERVENANT_ID );
  
    UPDATE tbl_SERVICE_REFERENTIEL SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_SERVICE_REFERENTIEL t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_SERVICE_REFERENTIEL vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id                = v.intervenant_id
      AND NVL(t.type_volume_horaire_id,0) = NVL(v.type_volume_horaire_id,0)
      AND NVL(t.structure_id,0)           = NVL(v.structure_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      peut_saisir_service  = v.peut_saisir_service,
      nbvh                 = v.nbvh,
      valide               = v.valide,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      PEUT_SAISIR_SERVICE,
      TYPE_VOLUME_HORAIRE_ID,
      STRUCTURE_ID,
      NBVH,
      VALIDE,
      TO_DELETE

    ) VALUES (

      TBL_SERVICE_REFERENTIEL_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.peut_saisir_service,
      v.type_volume_horaire_id,
      v.structure_id,
      v.nbvh,
      v.valide,
      0

    );

    DELETE FROM TBL_SERVICE_REFERENTIEL WHERE to_delete = 1 AND (intervenant_id = CALC.INTERVENANT_ID OR CALC.INTERVENANT_ID = -1);
    SET_INTERVENANT(NULL);
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;



  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_SERVICE_REFERENTIEL.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_SERVICE_REFERENTIEL.INTERVENANT_ID := NULL;
    ELSE
      OSE_SERVICE_REFERENTIEL.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;
    
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_SERVICE_REFERENTIEL.INTERVENANT_ID IS NULL OR OSE_SERVICE_REFERENTIEL.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END OSE_SERVICE_REFERENTIEL;

/
--------------------------------------------------------
--  DDL for Package Body OSE_SERVICE_SAISIE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_SERVICE_SAISIE" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_INTERVENANT( CALC.INTERVENANT_ID );
  
    UPDATE TBL_SERVICE_SAISIE SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      TBL_SERVICE_SAISIE t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_SERVICE_SAISIE vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id        = v.intervenant_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id                = v.annee_id,
      peut_saisir_service     = v.peut_saisir_service,
      peut_saisir_referentiel = v.peut_saisir_referentiel,
      heures_service_prev     = v.heures_service_prev,
      heures_referentiel_prev = v.heures_referentiel_prev,
      heures_service_real     = v.heures_service_real,
      heures_referentiel_real = v.heures_referentiel_real,
      to_delete               = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      PEUT_SAISIR_SERVICE,
      PEUT_SAISIR_REFERENTIEL,
      HEURES_SERVICE_PREV,
      HEURES_REFERENTIEL_PREV,
      HEURES_SERVICE_REAL,
      HEURES_REFERENTIEL_REAL,
      TO_DELETE

    ) VALUES (

      TBL_SERVICE_SAISIE_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.peut_saisir_service,
      v.peut_saisir_referentiel,
      v.heures_service_prev,
      v.heures_referentiel_prev,
      v.heures_service_real,
      v.heures_referentiel_real,
      0

    );

    DELETE FROM TBL_SERVICE_SAISIE WHERE to_delete = 1 AND (intervenant_id = CALC.INTERVENANT_ID OR CALC.INTERVENANT_ID = -1);
    SET_INTERVENANT(NULL);
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;



  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_SERVICE_SAISIE.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_SERVICE_SAISIE.INTERVENANT_ID := NULL;
    ELSE
      OSE_SERVICE_SAISIE.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;
    
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_SERVICE_SAISIE.INTERVENANT_ID IS NULL OR OSE_SERVICE_SAISIE.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END OSE_SERVICE_SAISIE;

/
--------------------------------------------------------
--  DDL for Package Body OSE_TEST
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_TEST" AS
  TYPE OUT_LIST IS TABLE OF CLOB;

  SUCCES_SHOWN BOOLEAN DEFAULT TRUE;
  T_SUCCES_COUNT NUMERIC DEFAULT 0;
  T_ECHECS_COUNT NUMERIC DEFAULT 0;
  A_SUCCES_COUNT NUMERIC DEFAULT 0;
  A_ECHECS_COUNT NUMERIC DEFAULT 0;
  CURRENT_TEST CLOB;
  CURRENT_TEST_OUTPUT_BUFFER OUT_LIST := OUT_LIST();
  CURRENT_TEST_OUTPUT_BUFFER_ERR BOOLEAN;
    
  PROCEDURE SHOW_SUCCES IS
  BEGIN
    SUCCES_SHOWN := true;
  END SHOW_SUCCES;

  PROCEDURE HIDE_SUCCES IS
  BEGIN
    SUCCES_SHOWN := false;
  END HIDE_SUCCES;

  PROCEDURE DEBUT( TEST_NAME CLOB ) IS
  BEGIN
    CURRENT_TEST := TEST_NAME;
    CURRENT_TEST_OUTPUT_BUFFER_ERR := FALSE;
    echo (' '); echo('TEST ' || TEST_NAME || ' >>>>>>>>>>' );
  END;

  PROCEDURE FIN IS
    TEST_NAME CLOB;
  BEGIN
    IF CURRENT_TEST_OUTPUT_BUFFER_ERR THEN
      T_ECHECS_COUNT := T_ECHECS_COUNT + 1;
      echo('>>>>>>>>>> FIN DU TEST ' || CURRENT_TEST ); echo (' ');
      CURRENT_TEST := NULL;

      FOR i IN 1 .. CURRENT_TEST_OUTPUT_BUFFER.COUNT LOOP
        echo( CURRENT_TEST_OUTPUT_BUFFER(i) );
      END LOOP;
    ELSE
      T_SUCCES_COUNT := T_SUCCES_COUNT + 1;
      TEST_NAME := CURRENT_TEST;
      CURRENT_TEST := NULL;
      echo('SUCC√àS DU TEST : ' || TEST_NAME );
    END IF;
    CURRENT_TEST_OUTPUT_BUFFER.DELETE; -- clear buffer
  END;

  PROCEDURE ECHO( MSG CLOB ) IS
  BEGIN
    IF CURRENT_TEST IS NULL THEN
      dbms_output.put_line(MSG);
    ELSE
      CURRENT_TEST_OUTPUT_BUFFER.EXTEND;
      CURRENT_TEST_OUTPUT_BUFFER (CURRENT_TEST_OUTPUT_BUFFER.LAST) := MSG;
    END IF;
  END;

  PROCEDURE INIT IS
  BEGIN
    T_SUCCES_COUNT  := 0;
    T_ECHECS_COUNT  := 0;
    A_SUCCES_COUNT  := 0;
    A_ECHECS_COUNT  := 0;
    CURRENT_TEST    := NULL;
  END INIT;

  PROCEDURE SHOW_STATS IS
  BEGIN
    echo ( ' ' );
    echo ( '********************************* STATISTIQUES *********************************' );
    echo ( ' ' );
    echo ( '   - nombre de tests pass√©s avec succ√®s :       ' || T_SUCCES_COUNT );
    echo ( '   - nombre de tests ayant √©chou√© :             ' || T_ECHECS_COUNT );
    echo ( ' ' );
    echo ( '   - nombre d''assertions pass√©s avec succ√®s :   ' || A_SUCCES_COUNT );
    echo ( '   - nombre d''assertions ayant √©chou√© :         ' || A_ECHECS_COUNT );
    echo ( ' ' );
    echo ( '********************************************************************************' );
    echo ( ' ' );
  END;

  PROCEDURE ASSERT( condition BOOLEAN, MSG CLOB ) IS
  BEGIN
    IF condition THEN
      A_SUCCES_COUNT := A_SUCCES_COUNT + 1;
      IF SUCCES_SHOWN THEN
        ECHO('        SUCC√àS : ' || MSG );
      END IF;
    ELSE
      A_ECHECS_COUNT := A_ECHECS_COUNT + 1;
      CURRENT_TEST_OUTPUT_BUFFER_ERR := TRUE;
      ECHO('        ** ECHEC ** : ' || MSG );
    END IF;
  END;
  
  PROCEDURE ADD_BUFFER( table_name VARCHAR2, id NUMERIC ) IS
  BEGIN
    INSERT INTO TEST_BUFFER( ID, TABLE_NAME, DATA_ID ) 
                    VALUES ( TEST_BUFFER_ID_SEQ.NEXTVAL, table_name, id );
  END;
  
  PROCEDURE DELETE_TEST_DATA IS
  BEGIN
    FOR tb IN (SELECT * FROM TEST_BUFFER)
    LOOP
      EXECUTE IMMEDIATE 'DELETE FROM ' || tb.table_name || ' WHERE ID = ' || tb.data_id;
    END LOOP;
    DELETE FROM TEST_BUFFER;
  END;
  
  FUNCTION GET_USER RETURN NUMERIC IS
  BEGIN
    RETURN 1; -- utilisateur r√©serv√© aux tests... (√† revoir!!)
  END;
 
  FUNCTION GET_SOURCE RETURN NUMERIC IS
    res_id Numeric;
  BEGIN
    SELECT s.id INTO res_id FROM ose.source s WHERE s.code = 'TEST';
    RETURN res_id;
  END;
  
  
  FUNCTION GET_CIVILITE( libelle_court VARCHAR2 DEFAULT NULL ) RETURN civilite%rowtype IS
    res civilite%rowtype;
  BEGIN
    SELECT * INTO res FROM civilite WHERE
      (OSE_DIVERS.LIKED( libelle_court, GET_CIVILITE.libelle_court ) = 1 OR GET_CIVILITE.libelle_court IS NULL) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_TYPE_INTERVENANT( code VARCHAR2 DEFAULT NULL ) RETURN type_intervenant%rowtype IS
    res type_intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM type_intervenant WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_INTERVENANT.code ) = 1 OR GET_TYPE_INTERVENANT.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_TYPE_INTERVENANT_BY_ID( id NUMERIC ) RETURN type_intervenant%rowtype IS
    res type_intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM type_intervenant WHERE
      id = GET_TYPE_INTERVENANT_BY_ID.id;
    RETURN res;
  END;

  FUNCTION GET_STATUT_INTERVENANT( source_code VARCHAR2 DEFAULT NULL ) RETURN statut_intervenant%rowtype IS
    res statut_intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM statut_intervenant WHERE
      (OSE_DIVERS.LIKED( source_code, GET_STATUT_INTERVENANT.source_code ) = 1 OR GET_STATUT_INTERVENANT.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_STATUT_INTERVENANT_BY_ID( id NUMERIC ) RETURN statut_intervenant%rowtype IS
    res statut_intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM statut_intervenant WHERE id = GET_STATUT_INTERVENANT_BY_ID.id;
    RETURN res;
  END;
  
  FUNCTION GET_TYPE_STRUCTURE( code VARCHAR2 DEFAULT NULL ) RETURN type_structure%rowtype IS
    res type_structure%rowtype;
  BEGIN
    SELECT * INTO res FROM type_structure WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_STRUCTURE.code ) = 1 OR GET_TYPE_STRUCTURE.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_STRUCTURE( source_code VARCHAR2 DEFAULT NULL ) RETURN structure%rowtype IS
    res structure%rowtype;
  BEGIN
    SELECT * INTO res FROM structure WHERE
      (OSE_DIVERS.LIKED( source_code, GET_STRUCTURE.source_code ) = 1 OR GET_STRUCTURE.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION GET_STRUCTURE_BY_ID( id NUMERIC ) RETURN structure%rowtype IS
    res structure%rowtype;
  BEGIN
    IF ID IS NULL THEN RETURN res; END IF;
    SELECT * INTO res FROM structure WHERE id = GET_STRUCTURE_BY_ID.id;
    RETURN res;
  END;
  
  FUNCTION GET_STRUCTURE_ENS_BY_NIVEAU( niveau NUMERIC ) RETURN structure%rowtype IS
    res structure%rowtype;
  BEGIN
    SELECT * INTO res FROM structure WHERE
      niveau = GET_STRUCTURE_ENS_BY_NIVEAU.niveau AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_STRUCTURE_UNIV RETURN "STRUCTURE"%rowtype IS
    res "STRUCTURE"%rowtype;
  BEGIN
    SELECT * INTO res FROM "STRUCTURE" WHERE source_code = 'UNIV' AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction );
    RETURN res;  
  END;

  FUNCTION ADD_STRUCTURE(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    parente_id    NUMERIC,
    type_id       NUMERIC,
    source_code   VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
    parente  structure%rowtype;
    niv2_id  NUMERIC;
  BEGIN
    entity_id := STRUCTURE_ID_SEQ.NEXTVAL;
    IF parente_id IS NOT NULL THEN
      parente := GET_STRUCTURE_BY_ID( parente_id );
      niv2_id := CASE
        WHEN parente.niveau = 1 THEN entity_id
        WHEN parente.niveau = 2 THEN parente_id
        WHEN parente.niveau = 3 THEN parente.parente_id
        WHEN parente.niveau = 4 THEN GET_STRUCTURE_BY_ID( parente.parente_id ).parente_id
        WHEN parente.niveau = 5 THEN GET_STRUCTURE_BY_ID( GET_STRUCTURE_BY_ID( parente.parente_id ).parente_id ).parente_id
        WHEN parente.niveau = 6 THEN GET_STRUCTURE_BY_ID( GET_STRUCTURE_BY_ID( GET_STRUCTURE_BY_ID( parente.parente_id ).parente_id ).parente_id ).parente_id
      END;
    END IF;
    INSERT INTO STRUCTURE (
      ID,
      LIBELLE_LONG,
      LIBELLE_COURT,
      PARENTE_ID,
      STRUCTURE_NIV2_ID,
      TYPE_ID,
      ETABLISSEMENT_ID,
      NIVEAU,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      libelle_long,
      libelle_court,
      parente_id,
      niv2_id,
      type_id,
      OSE_PARAMETRE.GET_ETABLISSEMENT,
      NVL( parente.niveau, 1),
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'structure', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_INTERVENANT( source_code VARCHAR2 DEFAULT NULL ) RETURN intervenant%rowtype IS
    res intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM intervenant WHERE
      (OSE_DIVERS.LIKED( source_code, GET_INTERVENANT.source_code ) = 1 OR GET_INTERVENANT.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_INTERVENANT_BY_ID( id NUMERIC DEFAULT NULL ) RETURN intervenant%rowtype IS
    res intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM intervenant WHERE id = GET_INTERVENANT_BY_ID.id;
    RETURN res;
  END;

  FUNCTION GET_INTERVENANT_BY_STATUT( statut_id NUMERIC ) RETURN intervenant%rowtype IS
    res intervenant%rowtype;
  BEGIN
    SELECT * INTO res FROM intervenant WHERE
      statut_id = GET_INTERVENANT_BY_STATUT.statut_id AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION ADD_INTERVENANT(
    civilite_id     NUMERIC,
    nom_usuel       VARCHAR2,
    prenom          VARCHAR2,
    date_naissance  DATE,
    email           VARCHAR2,
    statut_id       NUMERIC,
    structure_id    NUMERIC,
    source_code     VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
    statut statut_intervenant%rowtype;
  BEGIN
    entity_id := INTERVENANT_ID_SEQ.NEXTVAL;
    statut := GET_STATUT_INTERVENANT_BY_ID( statut_id );
    INSERT INTO INTERVENANT (
      ID,
      CIVILITE_ID,
      NOM_USUEL,
      PRENOM,
      NOM_PATRONYMIQUE,
      DATE_NAISSANCE,
      PAYS_NAISSANCE_ID,
      EMAIL,
      STATUT_ID,
      STRUCTURE_ID,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      civilite_id,
      nom_usuel,
      prenom,
      nom_usuel,
      date_naissance,
      (SELECT id FROM pays WHERE libelle_court = 'FRANCE'),
      email,
      statut_id,
      structure_id,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'intervenant', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_GROUPE_TYPE_FORMATION( source_code VARCHAR2 DEFAULT NULL ) RETURN groupe_type_formation%rowtype IS
    res groupe_type_formation%rowtype;
  BEGIN
    SELECT * INTO res FROM groupe_type_formation WHERE
      (OSE_DIVERS.LIKED( source_code, GET_GROUPE_TYPE_FORMATION.source_code ) = 1 OR GET_GROUPE_TYPE_FORMATION.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_GROUPE_TYPE_FORMATION(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    source_code   VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := GROUPE_TYPE_FORMATION_ID_SEQ.NEXTVAL;
    INSERT INTO GROUPE_TYPE_FORMATION (
      ID,
      LIBELLE_COURT,
      LIBELLE_LONG,
      ORDRE,
      PERTINENCE_NIVEAU,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    ) VALUES (
      entity_id,
      libelle_court,
      libelle_long,
      999,
      0,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'groupe_type_formation', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_TYPE_FORMATION( source_code VARCHAR2 ) RETURN type_formation%rowtype IS
    res type_formation%rowtype;
  BEGIN
    SELECT * INTO res FROM type_formation WHERE
      (OSE_DIVERS.LIKED( source_code, GET_TYPE_FORMATION.source_code ) = 1 OR GET_TYPE_FORMATION.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_TYPE_FORMATION(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    groupe_id     NUMERIC,
    source_code   VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := TYPE_FORMATION_ID_SEQ.NEXTVAL;
    INSERT INTO TYPE_FORMATION(
      ID,
      LIBELLE_LONG,
      LIBELLE_COURT,
      GROUPE_ID,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    ) VALUES (
      entity_id,
      libelle_long,
      libelle_court,
      groupe_id,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'type_formation', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_ETAPE( source_code VARCHAR2 DEFAULT NULL ) RETURN etape%rowtype IS
    res etape%rowtype;
  BEGIN
    SELECT * INTO res FROM etape WHERE
      (OSE_DIVERS.LIKED( source_code, GET_ETAPE.source_code ) = 1 OR GET_ETAPE.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_ETAPE(
    libelle           VARCHAR2,
    type_formation_id NUMERIC,
    niveau            NUMERIC,
    structure_id      NUMERIC,
    source_code       VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := ETAPE_ID_SEQ.NEXTVAL;
    INSERT INTO ETAPE (
      ID,
      LIBELLE,
      TYPE_FORMATION_ID,
      NIVEAU,
      SPECIFIQUE_ECHANGES,
      STRUCTURE_ID,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      libelle,
      type_formation_id,
      niveau,
      0,
      structure_id,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'etape', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_PERIODE( code VARCHAR2 DEFAULT NULL ) RETURN periode%rowtype IS
    res periode%rowtype;
  BEGIN
    SELECT * INTO res FROM periode WHERE
      (OSE_DIVERS.LIKED( code, GET_PERIODE.code ) = 1 OR GET_PERIODE.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_ELEMENT_PEDAGOGIQUE( source_code VARCHAR2 DEFAULT NULL ) RETURN element_pedagogique%rowtype IS
    res element_pedagogique%rowtype;
  BEGIN
    SELECT * INTO res FROM element_pedagogique WHERE
      (OSE_DIVERS.LIKED( source_code, GET_ELEMENT_PEDAGOGIQUE.source_code ) = 1 OR GET_ELEMENT_PEDAGOGIQUE.source_code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION GET_ELEMENT_PEDAGOGIQUE_BY_ID( ID NUMERIC ) RETURN element_pedagogique%rowtype IS
    res element_pedagogique%rowtype;
  BEGIN
    SELECT * INTO res FROM element_pedagogique WHERE id = GET_ELEMENT_PEDAGOGIQUE_BY_ID.id;
    RETURN res;
  END;
  
  FUNCTION ADD_ELEMENT_PEDAGOGIQUE(
    libelle       VARCHAR2,
    etape_id      NUMERIC,
    structure_id  NUMERIC,
    periode_id    NUMERIC,
    taux_foad     FLOAT,
    taux_fi       FLOAT,
    taux_fc       FLOAT,
    taux_fa       FLOAT,
    source_code   VARCHAR2
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
    ch_id NUMERIC;
  BEGIN
    entity_id := ELEMENT_PEDAGOGIQUE_ID_SEQ.NEXTVAL;
    INSERT INTO ELEMENT_PEDAGOGIQUE (
      ID,
      LIBELLE,
      ETAPE_ID,
      STRUCTURE_ID,
      PERIODE_ID,
      TAUX_FOAD,
      TAUX_FI,
      TAUX_FC,
      TAUX_FA,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      libelle,
      etape_id,
      structure_id,
      periode_id,
      taux_foad,
      taux_fi,
      taux_fc,
      taux_fa,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    ch_id := CHEMIN_PEDAGOGIQUE_ID_SEQ.NEXTVAL;
    INSERT INTO CHEMIN_PEDAGOGIQUE (
      ID,
      ELEMENT_PEDAGOGIQUE_ID,
      ETAPE_ID,
      ORDRE,
      SOURCE_ID,
      SOURCE_CODE,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      ch_id,
      entity_id,
      etape_id,
      9999999,
      GET_SOURCE,
      source_code,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'element_pedagogique', entity_id);
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'chemin_pedagogique', ch_id);
    RETURN entity_id;
  END;

  FUNCTION GET_TYPE_MODULATEUR( code VARCHAR2 DEFAULT NULL ) RETURN type_modulateur%rowtype IS
    res type_modulateur%rowtype;
  BEGIN
    SELECT * INTO res FROM type_modulateur WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_MODULATEUR.code ) = 1 OR GET_TYPE_MODULATEUR.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_TYPE_MODULATEUR(
    code        VARCHAR2,
    libelle     VARCHAR2,
    publique    NUMERIC,
    obligatoire NUMERIC
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
    tms_id    NUMERIC;
    structure_id NUMERIC;
  BEGIN
    entity_id := TYPE_MODULATEUR_ID_SEQ.NEXTVAL;
    INSERT INTO TYPE_MODULATEUR (
      ID,
      CODE,
      LIBELLE,
      PUBLIQUE,
      OBLIGATOIRE,
      SAISIE_PAR_ENSEIGNANT,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      code,
      libelle,
      publique,
      obligatoire,
      0,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'type_modulateur', entity_id);
    structure_id := ose_test.get_structure_univ().id;
    tms_id := TYPE_MODULATEUR_STRUCTU_ID_SEQ.NEXTVAL;
    INSERT INTO TYPE_MODULATEUR_STRUCTURE(
      ID,
      TYPE_MODULATEUR_ID,
      STRUCTURE_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      tms_id,
      entity_id,
      structure_id,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'type_modulateur_structure', tms_id);
    RETURN entity_id;
  END;

  FUNCTION GET_MODULATEUR( code VARCHAR2 DEFAULT NULL ) RETURN modulateur%rowtype IS
    res modulateur%rowtype;
  BEGIN
    SELECT * INTO res FROM modulateur WHERE
      (OSE_DIVERS.LIKED( code, GET_MODULATEUR.code ) = 1 OR GET_MODULATEUR.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_MODULATEUR(
    code                      VARCHAR2,
    libelle                   VARCHAR2,
    type_modulateur_id        NUMERIC,
    ponderation_service_du    FLOAT,
    ponderation_service_compl FLOAT
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := MODULATEUR_ID_SEQ.NEXTVAL;
    INSERT INTO MODULATEUR (
      ID,
      CODE,
      LIBELLE,
      TYPE_MODULATEUR_ID,
      PONDERATION_SERVICE_DU,
      PONDERATION_SERVICE_COMPL,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      code,
      libelle,
      type_modulateur_id,
      ponderation_service_du,
      ponderation_service_compl,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'modulateur', entity_id);
    RETURN entity_id;
  END;

  FUNCTION ADD_ELEMENT_MODULATEUR(
    element_id    NUMERIC,
    modulateur_id NUMERIC
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := ELEMENT_MODULATEUR_ID_SEQ.NEXTVAL;
    INSERT INTO ELEMENT_MODULATEUR (
      ID,
      ELEMENT_ID,
      MODULATEUR_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      element_id,
      modulateur_id,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'element_modulateur', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_FONCTION_REFERENTIEL( code VARCHAR2 DEFAULT NULL ) RETURN fonction_referentiel%rowtype IS
    res fonction_referentiel%rowtype;
  BEGIN
    SELECT * INTO res FROM fonction_referentiel WHERE
      (OSE_DIVERS.LIKED( code, GET_FONCTION_REFERENTIEL.code ) = 1 OR GET_FONCTION_REFERENTIEL.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION ADD_FONCTION_REFERENTIEL(
    code          VARCHAR2,
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    plafond       FLOAT
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := FONCTION_REFERENTIEL_ID_SEQ.NEXTVAL;
    INSERT INTO FONCTION_REFERENTIEL (
      ID,
      CODE,
      LIBELLE_LONG,
      LIBELLE_COURT,
      PLAFOND,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      code,
      libelle_long,
      libelle_court,
      plafond,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'fonction_referentiel', entity_id);
    RETURN entity_id;
  END;
  
  FUNCTION ADD_SERVICE_REFERENTIEL(
    fonction_id     NUMERIC,
    intervenant_id  NUMERIC,
    structure_id    NUMERIC
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := SERVICE_REFERENTIEL_ID_SEQ.NEXTVAL;
    INSERT INTO SERVICE_REFERENTIEL (
      ID,
      FONCTION_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      fonction_id,
      intervenant_id,
      structure_id,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'service_referentiel', entity_id);
    RETURN entity_id;
  END;
  
  FUNCTION ADD_MODIFICATION_SERVICE_DU(
    intervenant_id  NUMERIC,    
    heures          FLOAT,
    motif_id        NUMERIC,
    commentaires    CLOB DEFAULT NULL
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := MODIFICATION_SERVICE_DU_ID_SEQ.NEXTVAL;
    INSERT INTO MODIFICATION_SERVICE_DU (
      ID,
      INTERVENANT_ID,
      HEURES,
      MOTIF_ID,
      COMMENTAIRES,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      intervenant_id,
      heures,
      motif_id,
      commentaires,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'modification_service_du', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_MOTIF_MODIFICATION_SERVICE( code VARCHAR2 DEFAULT NULL, multiplicateur FLOAT DEFAULT NULL ) RETURN motif_modification_service%rowtype IS
    res motif_modification_service%rowtype;
  BEGIN
    SELECT * INTO res FROM motif_modification_service WHERE
      (OSE_DIVERS.LIKED( code, GET_MOTIF_MODIFICATION_SERVICE.code ) = 1 OR GET_MOTIF_MODIFICATION_SERVICE.code IS NULL)
      AND (multiplicateur = GET_MOTIF_MODIFICATION_SERVICE.multiplicateur OR GET_MOTIF_MODIFICATION_SERVICE.multiplicateur IS NULL)
      AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_ETABLISSEMENT( source_code VARCHAR2 DEFAULT NULL ) RETURN etablissement%rowtype IS
    res etablissement%rowtype;
  BEGIN
    SELECT * INTO res FROM etablissement WHERE
      (OSE_DIVERS.LIKED( source_code, GET_ETABLISSEMENT.source_code ) = 1 OR (GET_ETABLISSEMENT.source_code IS NULL AND id <> OSE_PARAMETRE.GET_ETABLISSEMENT))
      AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction )
      AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_SERVICE_BY_ID( id NUMERIC ) RETURN service%rowtype IS
    res service%rowtype;
  BEGIN
    SELECT * INTO res FROM service WHERE id = GET_SERVICE_BY_ID.id;
    RETURN res;
  END;

  FUNCTION ADD_SERVICE(
    intervenant_id          NUMERIC,
    element_pedagogique_id  NUMERIC,
    etablissement_id        NUMERIC DEFAULT NULL
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := SERVICE_ID_SEQ.NEXTVAL;
    INSERT INTO SERVICE (
      ID,
      INTERVENANT_ID,
      ELEMENT_PEDAGOGIQUE_ID,      
      ETABLISSEMENT_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      intervenant_id,
      element_pedagogique_id,
      COALESCE( ADD_SERVICE.etablissement_id, OSE_PARAMETRE.GET_ETABLISSEMENT),
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'service', entity_id);
    RETURN entity_id;
  END;

  FUNCTION GET_ETAT_VOLUME_HORAIRE( code VARCHAR2 DEFAULT NULL ) RETURN etat_volume_horaire%rowtype IS
    res etat_volume_horaire%rowtype;
  BEGIN
    SELECT * INTO res FROM etat_volume_horaire WHERE
      (OSE_DIVERS.LIKED( code, GET_ETAT_VOLUME_HORAIRE.code ) = 1 OR GET_ETAT_VOLUME_HORAIRE.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION GET_TYPE_VOLUME_HORAIRE( code VARCHAR2 DEFAULT NULL ) RETURN type_volume_horaire%rowtype IS
    res type_volume_horaire%rowtype;
  BEGIN
    SELECT * INTO res FROM type_volume_horaire WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_VOLUME_HORAIRE.code ) = 1 OR GET_TYPE_VOLUME_HORAIRE.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
  FUNCTION GET_TYPE_INTERVENTION( code VARCHAR2 DEFAULT NULL ) RETURN type_intervention%rowtype IS
    res type_intervention%rowtype;
  BEGIN
    SELECT * INTO res FROM type_intervention WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_INTERVENTION.code ) = 1 OR GET_TYPE_INTERVENTION.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_TYPE_INTERVENTION_BY_ID( id NUMERIC ) RETURN type_intervention%rowtype IS
    res type_intervention%rowtype;
  BEGIN
    SELECT * INTO res FROM type_intervention WHERE id = GET_TYPE_INTERVENTION_BY_ID.id;
    RETURN res;
  END;

  FUNCTION GET_TYPE_INTERVENTION_BY_ELEMT( ELEMENT_ID NUMERIC ) RETURN type_intervention%rowtype IS
    res type_intervention%rowtype;
  BEGIN
    SELECT
      ti.*
    INTO
      res
    FROM
      type_intervention ti
      JOIN v_element_type_intervention eti ON eti.type_intervention_id = ti.id AND eti.element_pedagogique_id = ELEMENT_ID
    WHERE
      1 = ose_divers.comprise_entre( ti.histo_creation, ti.histo_destruction )
      AND rownum = 1;
    RETURN res;
  END;

  FUNCTION GET_MOTIF_NON_PAIEMENT( code VARCHAR2 DEFAULT NULL ) RETURN motif_non_paiement%rowtype IS
    res motif_non_paiement%rowtype;
  BEGIN
    SELECT * INTO res FROM motif_non_paiement WHERE
      (OSE_DIVERS.LIKED( code, GET_MOTIF_NON_PAIEMENT.code ) = 1 OR GET_MOTIF_NON_PAIEMENT.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;

  FUNCTION GET_VOLUME_HORAIRE( id NUMERIC DEFAULT NULL ) RETURN volume_horaire%rowtype IS
    res volume_horaire%rowtype;
  BEGIN
    SELECT * INTO res FROM volume_horaire WHERE
      id = GET_VOLUME_HORAIRE.id OR (GET_VOLUME_HORAIRE.id IS NULL AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1);
    RETURN res;    
  END;

  FUNCTION ADD_VOLUME_HORAIRE(
    type_volume_horaire_id  NUMERIC,
    service_id              NUMERIC,
    periode_id              NUMERIC,
    type_intervention_id    NUMERIC,
    heures                  FLOAT,
    motif_non_paiement_id   NUMERIC DEFAULT NULL
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := VOLUME_HORAIRE_ID_SEQ.NEXTVAL;
    INSERT INTO VOLUME_HORAIRE (
      ID,
      TYPE_VOLUME_HORAIRE_ID,
      SERVICE_ID,
      PERIODE_ID,
      TYPE_INTERVENTION_ID,
      HEURES,
      MOTIF_NON_PAIEMENT_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      type_volume_horaire_id,
      service_id,
      periode_id,
      type_intervention_id,
      heures,
      motif_non_paiement_id,
      GET_USER,
      GET_USER
    );
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'volume_horaire', entity_id);
    RETURN entity_id;
  END;

  FUNCTION ADD_VALIDATION_VOLUME_HORAIRE(
    structure_id      NUMERIC,
    intervenant_id    NUMERIC,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := VALIDATION_ID_SEQ.NEXTVAL;
    INSERT INTO VALIDATION (
      ID,
      TYPE_VALIDATION_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      (SELECT id FROM type_validation WHERE code = 'SERVICES_PAR_COMP'),
      intervenant_id,
      structure_id,
      GET_USER,
      GET_USER
    );
    FOR vh IN (
      SELECT 
        vh.id
      FROM
        volume_horaire vh
        JOIN service s ON s.id = vh.service_id
        JOIN intervenant i ON i.id = s.intervenant_id
        LEFT JOIN element_pedagogique ep on ep.id = s.element_pedagogique_id
      WHERE
        vh.histo_destruction IS NULL AND
        s.histo_destruction IS NULL
        AND (NVL(ep.structure_id,0) = ADD_VALIDATION_VOLUME_HORAIRE.structure_id OR i.structure_id = ADD_VALIDATION_VOLUME_HORAIRE.structure_id)
        AND (s.intervenant_id = ADD_VALIDATION_VOLUME_HORAIRE.intervenant_id)
        AND (vh.id = ADD_VALIDATION_VOLUME_HORAIRE.volume_horaire_id OR ADD_VALIDATION_VOLUME_HORAIRE.volume_horaire_id IS NULL)
        AND (s.id = ADD_VALIDATION_VOLUME_HORAIRE.service_id OR ADD_VALIDATION_VOLUME_HORAIRE.service_id IS NULL)
    ) LOOP
      INSERT INTO VALIDATION_VOL_HORAIRE(
        VALIDATION_ID,
        VOLUME_HORAIRE_ID
      )VALUES(
        entity_id,
        vh.id
      );
    END LOOP;
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'validation', entity_id);
    RETURN entity_id;
  END;

  PROCEDURE DEL_VALIDATION_VOLUME_HORAIRE(
    structure_id      NUMERIC,
    intervenant_id    NUMERIC,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL,
    validation_id     NUMERIC DEFAULT NULL
  ) IS
    vvh_count NUMERIC;
  BEGIN
    FOR vh IN (
      SELECT
        vh.id
      FROM
        volume_horaire vh
        JOIN service s ON s.id = vh.service_id
        JOIN intervenant i ON i.id = s.intervenant_id
        LEFT JOIN element_pedagogique ep on ep.id = s.element_pedagogique_id
      WHERE
        1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction ) AND
        1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
        AND (NVL(ep.structure_id,0) = DEL_VALIDATION_VOLUME_HORAIRE.structure_id OR i.structure_id = DEL_VALIDATION_VOLUME_HORAIRE.structure_id)
        AND (s.intervenant_id = DEL_VALIDATION_VOLUME_HORAIRE.intervenant_id)
        AND (vh.id = DEL_VALIDATION_VOLUME_HORAIRE.volume_horaire_id OR DEL_VALIDATION_VOLUME_HORAIRE.volume_horaire_id IS NULL)
        AND (s.id = DEL_VALIDATION_VOLUME_HORAIRE.service_id OR DEL_VALIDATION_VOLUME_HORAIRE.service_id IS NULL)
    ) LOOP
      DELETE FROM VALIDATION_VOL_HORAIRE WHERE 
        VOLUME_HORAIRE_ID = vh.id 
        AND (VALIDATION_ID = DEL_VALIDATION_VOLUME_HORAIRE.validation_id OR DEL_VALIDATION_VOLUME_HORAIRE.validation_id IS NULL);
    END LOOP;
    IF VALIDATION_ID IS NOT NULL THEN
      SELECT count(*) INTO vvh_count FROM VALIDATION_VOL_HORAIRE WHERE VALIDATION_ID = DEL_VALIDATION_VOLUME_HORAIRE.validation_id;
      IF 0 = vvh_count THEN
        DELETE FROM validation WHERE id = VALIDATION_ID;
      END IF;
    END IF;
  END;

  FUNCTION GET_CONTRAT_BY_ID( ID NUMERIC ) RETURN contrat%rowtype IS
    res contrat%rowtype;
  BEGIN
    SELECT * INTO res FROM contrat WHERE id = GET_CONTRAT_BY_ID.id;
    RETURN res;
  END;



  FUNCTION GET_WF_ETAPE_BY_ID( ID NUMERIC ) RETURN wf_etape%rowtype IS
    res wf_etape%rowtype;
  BEGIN
    SELECT * INTO res FROM wf_etape WHERE id = GET_WF_ETAPE_BY_ID.id;
    RETURN res;
  END;



  FUNCTION ADD_CONTRAT(
    structure_id      NUMERIC DEFAULT NULL,
    intervenant_id    NUMERIC DEFAULT NULL,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL    
  ) RETURN NUMERIC IS
    entity_id NUMERIC;
  BEGIN
    entity_id := CONTRAT_ID_SEQ.NEXTVAL;
    INSERT INTO CONTRAT (
      ID,
      TYPE_CONTRAT_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      NUMERO_AVENANT,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      (SELECT id FROM type_contrat WHERE code = 'CONTRAT'),
      intervenant_id,
      structure_id,
      (SELECT MAX(numero_avenant) FROM contrat) + 1,
      GET_USER,
      GET_USER
    );
    FOR vh IN (
      SELECT vh.id FROM volume_horaire vh JOIN service s ON s.id = vh.service_id
      WHERE
        1 = ose_divers.comprise_entre( vh.histo_creation, vh.histo_destruction )
        AND 1 = ose_divers.comprise_entre( s.histo_creation, s.histo_destruction )
        AND (s.intervenant_id = ADD_CONTRAT.intervenant_id OR ADD_CONTRAT.intervenant_id IS NULL)
        AND (vh.id = ADD_CONTRAT.volume_horaire_id OR ADD_CONTRAT.volume_horaire_id IS NULL)
        AND (s.id = ADD_CONTRAT.service_id OR ADD_CONTRAT.service_id IS NULL)
        AND vh.contrat_id IS NULL
    ) LOOP
      UPDATE volume_horaire SET contrat_id = entity_id WHERE volume_horaire.id = vh.id;
    END LOOP;

    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'contrat', entity_id);
    RETURN entity_id;
  END;
  
  FUNCTION SIGNATURE_CONTRAT(
    contrat_id        NUMERIC
  ) RETURN NUMERIC IS
  BEGIN
    UPDATE contrat SET date_retour_signe = SYSDATE WHERE id = SIGNATURE_CONTRAT.contrat_id;
    RETURN contrat_id;
  END;
  
  FUNCTION ADD_CONTRAT_VALIDATION( contrat_id NUMERIC ) RETURN NUMERIC IS
    entity_id NUMERIC;
    ctr contrat%rowtype;
  BEGIN
    ctr := GET_CONTRAT_BY_ID( contrat_id );

    IF ctr.validation_id IS NOT NULL THEN RETURN NULL; END IF;

    entity_id := VALIDATION_ID_SEQ.NEXTVAL;
    INSERT INTO VALIDATION (
      ID,
      TYPE_VALIDATION_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      HISTO_CREATEUR_ID,
      HISTO_MODIFICATEUR_ID
    )VALUES(
      entity_id,
      (SELECT id FROM type_validation WHERE code = 'CONTRAT_PAR_COMP'),
      ctr.intervenant_id,
      ctr.structure_id,
      GET_USER,
      GET_USER
    );
    UPDATE contrat SET validation_id = entity_id WHERE id = ADD_CONTRAT_VALIDATION.contrat_id;
    INSERT INTO TEST_BUFFER(ID, TABLE_NAME, DATA_ID) VALUES(TEST_BUFFER_ID_SEQ.NEXTVAL, 'validation', entity_id);
    RETURN entity_id;
  END;  
  
  FUNCTION DEL_CONTRAT_VALIDATION( contrat_id NUMERIC ) RETURN NUMERIC IS
    ctr contrat%rowtype;
  BEGIN
    ctr := GET_CONTRAT_BY_ID( contrat_id );
    
    IF ctr.validation_id IS NOT NULL THEN
      UPDATE contrat SET validation_id = NULL WHERE contrat_id = DEL_CONTRAT_VALIDATION.contrat_id;
      DELETE FROM validation WHERE id = ctr.validation_id;
    END IF;
    RETURN contrat_id;
  END;
  
  FUNCTION GET_TYPE_VALIDATION( code VARCHAR2 DEFAULT NULL ) RETURN type_validation%rowtype IS
    res type_validation%rowtype;
  BEGIN
    SELECT * INTO res FROM type_validation WHERE
      (OSE_DIVERS.LIKED( code, GET_TYPE_VALIDATION.code ) = 1 OR GET_TYPE_VALIDATION.code IS NULL) AND 1 = ose_divers.comprise_entre( histo_creation, histo_destruction ) AND ROWNUM = 1;
    RETURN res;
  END;
  
END OSE_TEST;

/
--------------------------------------------------------
--  DDL for Package Body OSE_VALIDATION
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_VALIDATION" AS

  FUNCTION can_devalider ( v validation%rowtype ) RETURN varchar2 IS
    tv type_validation%rowtype;
    nb NUMERIC;
    result varchar2(500) default null;
  BEGIN
  
    SELECT * INTO tv FROM type_validation WHERE id = v.type_validation_id;
  
    IF tv.code = 'SERVICES_PAR_COMP' THEN
    
      SELECT
        SUM(CASE WHEN c.id IS NOT NULL THEN 1 ELSE 0 END) INTO nb
      FROM
        validation_vol_horaire vvh
        JOIN volume_horaire vh ON vh.id = vvh.volume_horaire_id
        LEFT JOIN contrat c ON c.id = vh.contrat_id AND c.histo_destruction IS NULL
      WHERE
        vvh.validation_id = v.id;
    
      -- Si des volumes horaires ont d√©j√† fait l'objet de contrats alors pas de d√©validation possible des heures
      IF nb > 0 THEN
        result := 'La d√©validation est impossible car des contrats ont d√©j√† √©t√© √©dit√©s sur la base de ces heures.';
      END IF;
  
    END IF;
    
    IF tv.code = 'CLOTURE_REALISE' THEN
      
      SELECT
        COUNT(*) INTO nb
      FROM
        tbl_paiement p
      WHERE
        p.periode_paiement_id IS NOT NULL
        AND p.intervenant_id = v.intervenant_id
        AND ROWNUM = 1;
      
      IF nb > 0 THEN
        result := 'La suppression de la cl√¥ture des services r√©alis√©s est impossible car des heures ont √©t√© pay√©es ou bien le paiement a √©t√© demand√©.';
      END IF;
      
    END IF;
  
    RETURN result;
  END;

END OSE_VALIDATION;

/
--------------------------------------------------------
--  DDL for Package Body OSE_VALIDATION_ENSEIGNEMENT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_VALIDATION_ENSEIGNEMENT" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_INTERVENANT( CALC.INTERVENANT_ID );
  
    UPDATE TBL_VALIDATION_ENSEIGNEMENT SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));
      
    MERGE INTO 
      TBL_VALIDATION_ENSEIGNEMENT t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_VALIDATION_ENSEIGNEMENT vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id              = v.intervenant_id
          AND t.structure_id            = v.structure_id
          AND t.type_volume_horaire_id  = v.type_volume_horaire_id
          AND t.service_id              = v.service_id
          AND t.volume_horaire_id       = v.volume_horaire_id
          AND t.validation_id           = v.validation_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      TYPE_VOLUME_HORAIRE_ID,
      SERVICE_ID,
      VOLUME_HORAIRE_ID,
      VALIDATION_ID,
      TO_DELETE

    ) VALUES (

      TBL_VALIDATION_ENSEIGNE_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.structure_id,
      v.type_volume_horaire_id,
      v.service_id,
      v.volume_horaire_id,
      v.validation_id,
      0

    );

    DELETE FROM tbl_validation_enseignement WHERE to_delete = 1 AND (intervenant_id = CALC.INTERVENANT_ID OR CALC.INTERVENANT_ID = -1);
    SET_INTERVENANT(NULL);
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;



  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_VALIDATION_ENSEIGNEMENT.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_VALIDATION_ENSEIGNEMENT.INTERVENANT_ID := NULL;
    ELSE
      OSE_VALIDATION_ENSEIGNEMENT.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;
    
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_VALIDATION_ENSEIGNEMENT.INTERVENANT_ID IS NULL OR OSE_VALIDATION_ENSEIGNEMENT.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END OSE_VALIDATION_ENSEIGNEMENT;

/
--------------------------------------------------------
--  DDL for Package Body OSE_VALIDATION_REFERENTIEL
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_VALIDATION_REFERENTIEL" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;

  PROCEDURE CALC( ANNEE_ID NUMERIC DEFAULT -1, INTERVENANT_ID NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_INTERVENANT( CALC.INTERVENANT_ID );
  
    UPDATE TBL_VALIDATION_REFERENTIEL SET to_delete = 1 WHERE 
          (annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
      AND (intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
      AND (USE_DEMANDES = 0 OR intervenant_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));
      
    MERGE INTO 
      TBL_VALIDATION_REFERENTIEL t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_VALIDATION_REFERENTIEL vc
        LEFT JOIN TMP_CALCUL tc ON vc.intervenant_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.annee_id       = CALC.annee_id       OR CALC.annee_id = -1)
        AND (vc.intervenant_id = CALC.intervenant_id OR CALC.intervenant_id = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)
        
    ) v ON (
  
          t.intervenant_id              = v.intervenant_id
          AND t.structure_id            = v.structure_id
          AND t.type_volume_horaire_id  = v.type_volume_horaire_id
          AND t.service_referentiel_id  = v.service_referentiel_id
          AND t.volume_horaire_ref_id   = v.volume_horaire_ref_id
          AND t.validation_id           = v.validation_id

    ) WHEN MATCHED THEN UPDATE SET

      annee_id             = v.annee_id,
      to_delete            = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      ANNEE_ID,
      INTERVENANT_ID,
      STRUCTURE_ID,
      TYPE_VOLUME_HORAIRE_ID,
      SERVICE_REFERENTIEL_ID,
      VOLUME_HORAIRE_REF_ID,
      VALIDATION_ID,
      TO_DELETE

    ) VALUES (

      TBL_VALIDATION_ENSEIGNE_ID_SEQ.NEXTVAL,
      v.annee_id,
      v.intervenant_id,
      v.structure_id,
      v.type_volume_horaire_id,
      v.service_referentiel_id,
      v.volume_horaire_ref_id,
      v.validation_id,
      0

    );

    DELETE FROM tbl_validation_referentiel WHERE to_delete = 1 AND (intervenant_id = CALC.INTERVENANT_ID OR CALC.INTERVENANT_ID = -1);
    SET_INTERVENANT(NULL);
  END;



  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    CALC( -1, INTERVENANT_ID );
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(ANNEE_ID,-1) );
  END;


  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_VALIDATION_REFERENTIEL.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_VALIDATION_REFERENTIEL.INTERVENANT_ID := NULL;
    ELSE
      OSE_VALIDATION_REFERENTIEL.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;
    
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_VALIDATION_REFERENTIEL.INTERVENANT_ID IS NULL OR OSE_VALIDATION_REFERENTIEL.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END OSE_VALIDATION_REFERENTIEL;

/
--------------------------------------------------------
--  DDL for Package Body OSE_WORKFLOW
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."OSE_WORKFLOW" AS
  INTERVENANT_ID NUMERIC DEFAULT NULL;

  TYPE t_workflow IS TABLE OF tbl_workflow%rowtype INDEX BY PLS_INTEGER;

  TYPE t_dep IS TABLE OF wf_etape_dep%rowtype INDEX BY PLS_INTEGER;
  TYPE t_deps IS TABLE OF t_dep INDEX BY PLS_INTEGER;
  TYPE t_deps_bloquantes IS TABLE OF wf_dep_bloquante%rowtype INDEX BY PLS_INTEGER;

  -- propre au calcul courant ! !
  etapes          t_workflow;
  deps            t_deps;
  deps_initialized boolean default false;
  deps_bloquantes t_deps_bloquantes;
  deps_bloquantes_index PLS_INTEGER DEFAULT 1;




  FUNCTION ETAPE_FRANCHIE( etape tbl_workflow%rowtype, need_done boolean default false ) RETURN FLOAT IS
    res FLOAT DEFAULT 0;
  BEGIN
    IF etape.objectif = 0 THEN 
      IF need_done THEN RETURN 0; ELSE RETURN 1; END IF;
    END IF;
    
    IF etape.atteignable = 0 THEN RETURN 0; END IF;

    IF etape.objectif > 0 THEN
      res := etape.realisation / etape.objectif;
    END IF;

    IF res > 1 THEN 
      res := 1; 
    END IF;

    RETURN res;
  END;



  PROCEDURE POPULATE_ETAPES( INTERVENANT_ID NUMERIC ) IS
    i NUMERIC DEFAULT 0;
  BEGIN
    etapes.delete; -- initialisation

    FOR wie IN (
      SELECT
        wep.annee_id                                          annee_id,
        e.id                                                  etape_id,
        w.structure_id                                        structure_id,
        NVL(w.objectif,0)                                     objectif,
        CASE WHEN w.intervenant_id IS NULL THEN 0 ELSE 1 END  atteignable,
        NVL(w.realisation,0)                                  realisation,
        wep.etape_code                                        etape_code,
        ti.id                                                 type_intervenant_id,
        ti.code                                               type_intervenant_code
      FROM
        v_workflow_etape_pertinente wep
        JOIN wf_etape                 e ON e.code = wep.etape_code
        JOIN intervenant              i ON i.id = wep.intervenant_id
        JOIN statut_intervenant      si ON si.id = i.statut_id
        JOIN type_intervenant        ti ON ti.id = si.type_intervenant_id
        LEFT JOIN v_tbl_workflow      w ON w.intervenant_id = wep.intervenant_id AND w.etape_code = wep.etape_code
      WHERE
        wep.intervenant_id = POPULATE_ETAPES.INTERVENANT_ID
        AND (e.obligatoire = 1 OR w.intervenant_id IS NOT NULL)
      ORDER BY
        e.ordre
    ) LOOP
      etapes( i ).annee_id              := wie.annee_id;
      etapes( i ).intervenant_id        := intervenant_id;
      etapes( i ).etape_id              := wie.etape_id;
      etapes( i ).structure_id          := wie.structure_id;
      etapes( i ).atteignable           := wie.atteignable;
      etapes( i ).objectif              := wie.objectif;
      etapes( i ).realisation           := wie.realisation;
      etapes( i ).etape_code            := wie.etape_code;
      etapes( i ).type_intervenant_id   := wie.type_intervenant_id;
      etapes( i ).type_intervenant_code := wie.type_intervenant_code;
      i := i + 1;
    END LOOP;
  END;



  -- peuple l'arbre des d√©pendances entre √©tapes de workflow
  PROCEDURE POPULATE_DEPS( INTERVENANT_ID NUMERIC ) IS
    s PLS_INTEGER; -- index de l'√©tape suivante
    p PLS_INTEGER; -- index de l'√©tape pr√©c√©dente
  BEGIN
    IF deps_initialized THEN RETURN; END IF;

    FOR d IN (
      SELECT
        wed.*
      FROM
        wf_etape_dep wed
        JOIN intervenant i ON i.id = POPULATE_DEPS.INTERVENANT_ID
        JOIN statut_intervenant si ON si.id = i.statut_id
      WHERE
        active = 1
        AND wed.type_intervenant_id IS NULL OR wed.type_intervenant_id = si.type_intervenant_id
    ) LOOP
      deps(d.etape_suiv_id)(d.etape_prec_id) := d;
    END LOOP;

    deps_initialized := true;
  END;



  PROCEDURE ADD_DEP_BLOQUANTE( wf_etape_dep_id NUMERIC, tbl_workflow_id NUMERIC ) IS
  BEGIN
    deps_bloquantes_index := deps_bloquantes_index + 1;
    deps_bloquantes(deps_bloquantes_index).wf_etape_dep_id := wf_etape_dep_id;
    deps_bloquantes(deps_bloquantes_index).tbl_workflow_id := tbl_workflow_id;
  END;



  PROCEDURE CALCUL_ATTEIGNABLE( s PLS_INTEGER, d wf_etape_dep%rowtype ) IS
    count_tested PLS_INTEGER DEFAULT 0;
    count_na     PLS_INTEGER DEFAULT 0;
    p PLS_INTEGER; -- index de l'√©tape pr√©c√©dente
  BEGIN

    p := etapes.FIRST;
    LOOP EXIT WHEN p IS NULL;
      IF etapes(p).etape_id = d.etape_prec_id THEN
        -- on restreint en fonction du p√©rim√®tre vis√© :
        --  - si la d√©pendance n'est pas locale alors on teste
        --  - si les structures aussi bien de l'√©tape test√©e que de l'√©tape d√©pendante sont nulles alors on teste aussi car elles sont "universelles"
        --  - si les structures sont √©quivalentes alors on teste, sinon elles ne sont pas dans le p√©rim√®tre local
        IF
          (d.locale = 0) 
          OR etapes(s).structure_id IS NULL 
          OR etapes(p).structure_id IS NULL 
          OR etapes(s).structure_id = etapes(p).structure_id 
        THEN
          count_tested := count_tested + 1;

          -- on teste le type de franchissement d√©sir√© et si ce n'est pas bon alors on d√©clare l'√©tape courante non atteignable

          --  - idem si on a besoin d'une d√©pendance partiellement franchie est qu'elle ne l'est pas
          IF d.partielle = 1 THEN
            IF ETAPE_FRANCHIE(etapes(p), d.obligatoire=1) = 0 THEN -- si le franchissement est totalement inexistant
              count_na := count_na + 1;
            END IF;
          --  - si on a besoin d'une d√©pendance compl√®tement franchie est qu'elle ne l'est pas alors ce n'est pas atteignable  
          ELSE
            IF ETAPE_FRANCHIE(etapes(p), d.obligatoire=1) < 1 THEN
              count_na := count_na + 1;
            END IF;
          END IF;
        END IF;

      END IF;
      p := etapes.next(p);
    END LOOP;

    -- on applique le r√©sultat uniquement si des √©tapes d√©pendantes ont √©t√© trouv√©es
    IF count_tested > 0 THEN
      
      -- si les √©tapes d√©pendantes ont √©t√© int√©gralement franchies
      IF d.integrale = 1 THEN
        -- si l'int√©gralit√© des √©tapes est atteignable = NON si au moins une ne l'est pas
        IF count_na > 0 THEN
          etapes(s).atteignable := 0;
          ADD_DEP_BLOQUANTE( d.id, s );
        END IF;

      -- sinon...
      ELSE
        -- si au moins une √©tape est atteignable = NON si toutes ne sont pas atteignables
        IF count_tested = count_na THEN 
          etapes(s).atteignable := 0;
          ADD_DEP_BLOQUANTE( d.id, s );
        END IF;
      END IF;
    END IF;
  END;



  -- calcule si les √©tapes sont atteignables ou non
  PROCEDURE CALCUL_ATTEIGNABLES IS
    e PLS_INTEGER; -- index de l'√©tape courante
    d PLS_INTEGER; -- ID de l'√©tape pr√©c√©dante
  BEGIN
    deps_bloquantes.delete;
    e := etapes.FIRST;
    LOOP EXIT WHEN e IS NULL;
      IF deps.exists(etapes(e).etape_id) THEN -- s'il n'y a aucune d√©pendance alors pas de test!!
        d := deps(etapes(e).etape_id).FIRST;
        LOOP EXIT WHEN d IS NULL;

          CALCUL_ATTEIGNABLE(e, deps(etapes(e).etape_id)(d));

          d := deps(etapes(e).etape_id).next(d);
        END LOOP;
      END IF;
      e := etapes.next(e);
    END LOOP;
  END;



  FUNCTION ENREGISTRER_ETAPE( e tbl_workflow%rowtype ) RETURN NUMERIC IS
    n_etape_id NUMERIC;
  BEGIN

    MERGE INTO tbl_workflow w USING dual ON (

          w.intervenant_id      = e.intervenant_id
      AND w.etape_id            = e.etape_id
      AND NVL(w.structure_id,0) = NVL(e.structure_id,0)

    ) WHEN MATCHED THEN UPDATE SET

      atteignable                  = e.atteignable,
      objectif                     = e.objectif,
      realisation                  = e.realisation,
      etape_code                   = e.etape_code,
      type_intervenant_id          = e.type_intervenant_id,
      type_intervenant_code        = e.type_intervenant_code,
      to_delete                    = 0

    WHEN NOT MATCHED THEN INSERT (

      id,
      annee_id,
      intervenant_id,
      etape_id,
      structure_id,
      atteignable,
      objectif,
      realisation,
      etape_code,
      type_intervenant_id,
      type_intervenant_code,
      to_delete

    ) VALUES (

      TBL_WORKFLOW_ID_SEQ.NEXTVAL,
      e.annee_id,
      e.intervenant_id,
      e.etape_id,
      e.structure_id,
      e.atteignable,
      e.objectif,
      e.realisation,
      e.etape_code,
      e.type_intervenant_id,
      e.type_intervenant_code,
      0

    );

    SELECT w.id INTO n_etape_id FROM tbl_workflow w WHERE
      w.intervenant_id          = e.intervenant_id
      AND w.etape_id            = e.etape_id
      AND NVL(w.structure_id,0) = NVL(e.structure_id,0)
    ;

    RETURN n_etape_id;
  END;



  PROCEDURE ENREGISTRER_DEP_BLOQUANTE( db wf_dep_bloquante%rowtype ) IS
  BEGIN
    MERGE INTO wf_dep_bloquante wdb USING dual ON (

          wdb.wf_etape_dep_id   = db.wf_etape_dep_id
      AND wdb.tbl_workflow_id   = db.tbl_workflow_id

    ) WHEN MATCHED THEN UPDATE SET

      to_delete                 = 0

    WHEN NOT MATCHED THEN INSERT (

      id,
      wf_etape_dep_id,
      tbl_workflow_id,
      to_delete

    ) VALUES (

      WF_DEP_BLOQUANTE_ID_SEQ.NEXTVAL,
      db.wf_etape_dep_id,
      db.tbl_workflow_id,
      0

    );  
  END;



  PROCEDURE ENREGISTRER( INTERVENANT_ID NUMERIC ) IS
    i PLS_INTEGER;
  BEGIN

    UPDATE tbl_workflow SET to_delete = 1 WHERE intervenant_id = ENREGISTRER.INTERVENANT_ID;
    UPDATE wf_dep_bloquante SET to_delete = 1 WHERE tbl_workflow_id IN (SELECT id FROM tbl_workflow WHERE intervenant_id = ENREGISTRER.INTERVENANT_ID);

    i := etapes.FIRST;
    LOOP EXIT WHEN i IS NULL;
      etapes(i).id := ENREGISTRER_ETAPE( etapes(i) );
      i := etapes.NEXT(i);
    END LOOP;

    i := deps_bloquantes.FIRST;
    LOOP EXIT WHEN i IS NULL;
      deps_bloquantes(i).tbl_workflow_id := etapes(deps_bloquantes(i).tbl_workflow_id).id;
      ENREGISTRER_DEP_BLOQUANTE( deps_bloquantes(i) );
      i := deps_bloquantes.NEXT(i);
    END LOOP;

    DELETE FROM tbl_workflow WHERE TO_DELETE = 1 AND intervenant_id = ENREGISTRER.INTERVENANT_ID;
    DELETE FROM wf_dep_bloquante WHERE TO_DELETE = 1;
  END;



  PROCEDURE DEP_CHECK( etape_suiv_id NUMERIC, etape_prec_id NUMERIC ) IS
    eso NUMERIC;
    epo NUMERIC;
  BEGIN
    SELECT ordre INTO eso FROM wf_etape WHERE id = etape_suiv_id;
    SELECT ordre INTO epo FROM wf_etape WHERE id = etape_prec_id;

    IF eso < epo THEN
      raise_application_error(-20101, 'Une √©tape de Workflow ne peut d√©pendre d''une √©tape situ√©e en aval');
    END IF;
    IF eso = epo THEN
      raise_application_error(-20101, 'Une √©tape de Workflow ne peut d√©pendre d''elle-m√™me');
    END IF;
  END;



  PROCEDURE DEBUG_CALCUL( INTERVENANT_ID NUMERIC ) IS
    i PLS_INTEGER;
    d PLS_INTEGER;
    dep_desc VARCHAR2(200);
  BEGIN
    ose_test.echo('');
    ose_test.echo('-- DEBUG WORKFLOW ETAPE INTERVENANT_ID='|| INTERVENANT_ID ||' --');
    i := etapes.FIRST;
    LOOP EXIT WHEN i IS NULL;
      ose_test.echo(
               'etape='       || RPAD( ose_test.get_wf_etape_by_id(etapes(i).etape_id).code, 30, ' ' )
          || ', structure='   || RPAD( NVL(ose_test.get_structure_by_id(etapes(i).structure_id).libelle_court,' '), 20, ' ' )
          || ', ' || CASE WHEN etapes(i).atteignable=1 THEN 'atteignable' ELSE 'na' END
          || ', objectif= ' || ROUND(etapes(i).objectif)
          || ', realisation= ' || ROUND(etapes(i).realisation)
      );

      d := deps_bloquantes.FIRST;
      LOOP EXIT WHEN d IS NULL;
        IF deps_bloquantes(d).tbl_workflow_id = i THEN

          SELECT
            we.desc_non_franchie INTO dep_desc
          FROM
            wf_etape_dep wed
            JOIN wf_etape we ON we.id = wed.etape_prec_id
          WHERE
            wed.id = deps_bloquantes(d).wf_etape_dep_id;

          ose_test.echo('    CAUSE =' || dep_desc);
        END IF;
        d := deps_bloquantes.NEXT(d);
      END LOOP;

      i := etapes.NEXT(i);
    END LOOP;
    ose_test.echo('');
  END;



  -- calcul du workflow pour un intervenant
  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC ) IS
  BEGIN
    set_intervenant(intervenant_id);
    POPULATE_ETAPES( INTERVENANT_ID );
    POPULATE_DEPS( INTERVENANT_ID );
    CALCUL_ATTEIGNABLES;
    IF OSE_TEST.DEBUG_ENABLED THEN
      DEBUG_CALCUL( INTERVENANT_ID );
    END IF;
    ENREGISTRER( INTERVENANT_ID );
    set_intervenant();
  END;



  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL ) IS
  BEGIN
    FOR mp IN (
      SELECT
        id intervenant_id
      FROM 
        intervenant i
      WHERE
        1 = ose_divers.comprise_entre( i.histo_creation, i.histo_destruction )
        AND (CALCULER_TOUT.ANNEE_ID IS NULL OR i.annee_id = CALCULER_TOUT.ANNEE_ID)
    )
    LOOP
      CALCULER( mp.intervenant_id );
    END LOOP;
  END;
  
  
  FUNCTION GET_INTERVENANT RETURN NUMERIC IS
  BEGIN
    RETURN OSE_WORKFLOW.INTERVENANT_ID;
  END;
  
  PROCEDURE SET_INTERVENANT( INTERVENANT_ID NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_INTERVENANT.INTERVENANT_ID = -1 THEN
      OSE_WORKFLOW.INTERVENANT_ID := NULL;
    ELSE
      OSE_WORKFLOW.INTERVENANT_ID := SET_INTERVENANT.INTERVENANT_ID;
    END IF;
  END;
    
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF OSE_WORKFLOW.INTERVENANT_ID IS NULL OR OSE_WORKFLOW.INTERVENANT_ID = MATCH_INTERVENANT.INTERVENANT_ID THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END OSE_WORKFLOW;

/
--------------------------------------------------------
--  DDL for Package Body PTBL_LIEN
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."PTBL_LIEN" AS
  SUJET NUMERIC DEFAULT NULL;

  PROCEDURE CALC( COLLECTION NUMERIC DEFAULT -1, SUJET NUMERIC DEFAULT -1, USE_DEMANDES NUMERIC DEFAULT 0 ) IS
  BEGIN
    SET_SUJET( CALC.SUJET );

    UPDATE tbl_lien SET to_delete = 1 WHERE 
          (scenario_id = CALC.COLLECTION OR CALC.COLLECTION = -1)
      AND (lien_id = CALC.SUJET OR CALC.SUJET = -1)
      AND (USE_DEMANDES = 0 OR lien_id IN (SELECT intervenant_id FROM TMP_CALCUL WHERE sujet = PACKAGE_SUJET));

    MERGE INTO 
      tbl_lien t 
    USING (

      SELECT 
        vc.* 
      FROM 
        V_TBL_lien vc
        LEFT JOIN TMP_CALCUL tc ON vc.lien_id = tc.intervenant_id AND tc.sujet = PACKAGE_SUJET
      WHERE
            (vc.scenario_id = CALC.COLLECTION OR CALC.COLLECTION = -1)
        AND (vc.lien_id = CALC.SUJET OR CALC.SUJET = -1)
        AND (USE_DEMANDES = 0 OR tc.intervenant_id IS NOT NULL)

    ) v ON (
  
          t.lien_id   = v.lien_id

    ) WHEN MATCHED THEN UPDATE SET

      scenario_lien_id = v.scenario_lien_id,
      noeud_sup_id     = v.noeud_sup_id,
      noeud_inf_id     = v.noeud_inf_id,
      structure_id     = v.structure_id,
      actif            = v.actif,
      poids            = v.poids,
      max_poids        = v.max_poids,
      choix_minimum    = v.choix_minimum,
      choix_maximum    = v.choix_maximum,
      nb_choix         = v.nb_choix,
      total_poids      = v.total_poids,
      to_delete        = 0

    WHEN NOT MATCHED THEN INSERT (

      ID,
      LIEN_ID,
      SCENARIO_ID,
      SCENARIO_LIEN_ID,
      NOEUD_SUP_ID,
      NOEUD_INF_ID,
      STRUCTURE_ID,
      ACTIF,
      POIDS,
      MAX_POIDS,
      CHOIX_MINIMUM,
      CHOIX_MAXIMUM,
      NB_CHOIX,
      TOTAL_POIDS,
      TO_DELETE

    ) VALUES (

      TBL_LIEN_ID_SEQ.NEXTVAL,
      v.lien_id,
      v.scenario_id,
      v.scenario_lien_id,
      v.noeud_sup_id,
      v.noeud_inf_id,
      v.structure_id,
      v.actif,
      v.poids,
      v.max_poids,
      v.choix_minimum,
      v.choix_maximum,
      v.nb_choix,
      v.total_poids,
      0

    );

    DELETE FROM TBL_LIEN WHERE to_delete = 1 AND (lien_id = CALC.SUJET OR CALC.SUJET = -1);
    SET_SUJET(NULL);
  END;



  PROCEDURE CALCULER( SUJET NUMERIC ) IS
  BEGIN
    CALC( -1, SUJET );
  END;

  PROCEDURE CALCULER_TOUT( COLLECTION NUMERIC DEFAULT NULL ) IS
  BEGIN
    CALC( NVL(COLLECTION,-1) );
  END;



  FUNCTION GET_SUJET RETURN NUMERIC IS
  BEGIN
    RETURN PTBL_LIEN.SUJET;
  END;
  
  PROCEDURE SET_SUJET( SUJET NUMERIC DEFAULT NULL) IS
  BEGIN
    IF SET_SUJET.SUJET = -1 THEN
      PTBL_LIEN.SUJET := NULL;
    ELSE
      PTBL_LIEN.SUJET := SET_SUJET.SUJET;
    END IF;
  END;

  FUNCTION MATCH_SUJET(SUJET NUMERIC DEFAULT NULL) RETURN NUMERIC IS
  BEGIN
    IF PTBL_LIEN.SUJET IS NULL OR PTBL_LIEN.SUJET = MATCH_SUJET.SUJET THEN
      RETURN 1;
    ELSE
      RETURN 0;
    END IF;
  END;
END PTBL_LIEN;

/
--------------------------------------------------------
--  DDL for Package Body UCBN_LDAP
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."UCBN_LDAP" AS

--===================================================================
--===================================================================
-- version()
--===================================================================
FUNCTION version RETURN VARCHAR2 IS
BEGIN
  RETURN ' 0.5.0 (2013-09-24) ';
END version;


--===================================================================
--===================================================================
-- free()
--===================================================================
FUNCTION free RETURN NUMBER IS
  l_retval PLS_INTEGER ;
BEGIN
  BEGIN
    l_retval := DBMS_LDAP.unbind_s(ld => ldap_sess);
    RETURN l_retval ;
  EXCEPTION
    WHEN DBMS_LDAP.INVALID_SESSION THEN
    RETURN NULL ;
  END;
END free ;


--===================================================================
--===================================================================
-- ldap_connect()
--===================================================================
FUNCTION ldap_connect RETURN NUMBER IS
  ldap_host   VARCHAR2(256 char) := 'ldap.unicaen.fr';
  ldap_port   VARCHAR2(3 char)   := '389';
  ldap_user   VARCHAR2(256 char) := 'uid=authinfo,ou=system,dc=unicaen,dc=fr' ;
  ldap_passwd VARCHAR2(30 char)  := 'iLnDfAoP2010' ;
  ldap_base   VARCHAR2(256 char) := 'ou=people,dc=unicaen,dc=fr';

  l_retval  PLS_INTEGER ;

  resultat  VARCHAR2(1024 char) := NULL ;

BEGIN
  -- Ouverture de connexion
  BEGIN
  ldap_sess := DBMS_LDAP.init(hostname => ldap_host,
                              portnum  => ldap_port) ;
  EXCEPTION
    WHEN DBMS_LDAP.INIT_FAILED THEN
      RETURN 1 ;
  END;


  -- Authentification
  BEGIN
  l_retval := DBMS_LDAP.simple_bind_s(ld     => ldap_sess,
                                      dn     => ldap_user,
                                      passwd => ldap_passwd) ;
  EXCEPTION
    WHEN DBMS_LDAP.GENERAL_ERROR THEN
      l_retval := DBMS_LDAP.unbind_s(ld => ldap_sess);
      RETURN 2 ;
    WHEN DBMS_LDAP.INVALID_SESSION THEN
      l_retval := DBMS_LDAP.unbind_s(ld => ldap_sess);
      RETURN 2 ;
  END;
  RETURN 0 ;
END ldap_connect;






--===================================================================
--===================================================================
-- get(filtre, attribut)
--===================================================================
FUNCTION get(filtre IN VARCHAR2, attribut IN VARCHAR2, v_multi IN VARCHAR2 DEFAULT 'N', a_multi OUT ARRAY_STR) RETURN VARCHAR2 IS
  ldap_base   VARCHAR2(256 char) := 'ou=people,dc=unicaen,dc=fr';
  l_retval  PLS_INTEGER ;
  l_attrs   DBMS_LDAP.string_collection ;
  l_message DBMS_LDAP.message ;
  l_entry   DBMS_LDAP.message ;
  l_attr_name VARCHAR2(256 char) ;
  l_ber_element  DBMS_LDAP.ber_element;
  l_vals         DBMS_LDAP.string_collection;

  i         PLS_INTEGER ;
  nb_res    PLS_INTEGER ;
  probleme  EXCEPTION ;
  resultat  VARCHAR2(1024 char) := NULL ;

  elapsed_since_used NUMBER ;

BEGIN

  -- On regarde depuis combien de temps la session n'a pas ete utilisee
  elapsed_since_used:= to_number( to_char( SYSDATE,'yyyymmddhh24miss' ) ) - last_used ;
  last_used := to_number( to_char( SYSDATE,'yyyymmddhh24miss' ) ) ;

  -- Si c'est trop vieux, on se reconnecte
  IF elapsed_since_used > 10 THEN
    l_retval := free() ;
  END IF ;

  -- Si on n'est pas connecte:
  IF ldap_sess IS NULL THEN
    DBMS_OUTPUT.PUT_LINE('Reconnexion au serveur LDAP...');
    l_retval := ldap_connect() ;
    CASE l_retval
      WHEN 1 THEN RETURN '#Err 0010';
      WHEN 2 THEN RETURN '#Err 0011';
      ELSE NULL;
    END CASE;
  END IF ;

  -- On cherche le mail seulement
  l_attrs(1) := attribut ;
  BEGIN
  l_retval := DBMS_LDAP.search_s(ld       => ldap_sess,
                                 base     => ldap_base,
                                 scope    => DBMS_LDAP.SCOPE_SUBTREE,
                                 filter   => filtre,
                                 attrs    => l_attrs,
                                 attronly => 0,
                                 res      => l_message) ;
  EXCEPTION
    WHEN DBMS_LDAP.GENERAL_ERROR THEN
      DBMS_OUTPUT.PUT_LINE('Erreur: '||SQLERRM);
      RETURN '#Err 0020' ;
    WHEN DBMS_LDAP.INVALID_SESSION THEN
      RETURN '#Err 0021' ;
    WHEN DBMS_LDAP.invalid_search_scope THEN
      RETURN '#Err 0022' ;
  END;


  BEGIN
  nb_res := DBMS_LDAP.count_entries(ld => ldap_sess, msg => l_message) ;
  EXCEPTION
    WHEN DBMS_LDAP.INVALID_SESSION THEN
      RETURN '#Err 0030' ;
    WHEN DBMS_LDAP.INVALID_MESSAGE THEN
      RETURN '#Err 0031' ;
    WHEN DBMS_LDAP.count_entry_error THEN
      RETURN '#Err 0032' ;
  END;

  IF nb_res < 1 THEN
    -- Pas besoin de fermer la connexion puisqu'on en utilise qu'une...
    -- l_retval := DBMS_LDAP.unbind_s(ld => ldap_sess);
    -- RETURN '#Err 0033'; -- On retourne NULL depuis la 0.4.1
    RETURN NULL ;
  END IF;

  -- Les entrees retournees
  BEGIN
  l_entry := DBMS_LDAP.first_entry(ld => ldap_sess, msg => l_message);

  EXCEPTION
    WHEN DBMS_LDAP.INVALID_SESSION THEN
      RETURN '#Err 0034' ;
    WHEN DBMS_LDAP.INVALID_MESSAGE THEN
      RETURN '#Err 0035' ;
  END;


  WHILE l_entry IS NOT NULL LOOP
    -- Tous les attributs de l'entree:
    BEGIN
    l_attr_name := DBMS_LDAP.first_attribute(ld        => ldap_sess,
                                             ldapentry => l_entry,
                                             ber_elem  => l_ber_element);
    EXCEPTION
      WHEN DBMS_LDAP.INVALID_SESSION THEN
        RETURN '#Err 0040' ;
      WHEN DBMS_LDAP.INVALID_MESSAGE THEN
        RETURN '#Err 0041' ;
    END;

    WHILE l_attr_name IS NOT NULL LOOP
      -- Les valeurs de cet attribut
      BEGIN
      l_vals := DBMS_LDAP.get_values (ld        => ldap_sess,
                                      ldapentry => l_entry,
                                      attr      => l_attr_name);
      EXCEPTION
        WHEN DBMS_LDAP.INVALID_SESSION THEN
          RETURN '#Err 0044' ;
        WHEN DBMS_LDAP.INVALID_MESSAGE THEN
          RETURN '#Err 0045' ;
      END;

      -- On ne retourne que la premiere valeur si mono-value
      -- Sinon, on retourne le tableau a_multi
      IF v_multi = 'N' THEN
        resultat := l_vals(l_vals.FIRST) ;
      ELSE
        a_multi := ARRAY_STR() ; -- Initialisation du tableau
        i := 0 ; -- tableau commence a 1 (d'ou i++ a l'entree du FOR)
        FOR v IN l_vals.FIRST .. l_vals.LAST LOOP
          i := i + 1 ;
          a_multi.extend ;
          a_multi(i) := l_vals(v) ;
        END LOOP ;
        resultat := '#Err Multi-value: '||i ;
      END IF;

      EXIT WHEN resultat IS NOT NULL ;

      -- Attribut suivant
      BEGIN
      l_attr_name := DBMS_LDAP.next_attribute(ld        => ldap_sess,
                                              ldapentry => l_entry,
                                              ber_elem  => l_ber_element);
      EXCEPTION
        WHEN DBMS_LDAP.INVALID_SESSION THEN
          RETURN '#Err 0042' ;
        WHEN DBMS_LDAP.INVALID_MESSAGE THEN
          RETURN '#Err 0043' ;
      END;
    END LOOP ; -- LOOP Fin des attributs
    IF l_ber_element IS NOT NULL THEN
      DBMS_LDAP.ber_free(l_ber_element, 0) ;
    END IF ;
    EXIT WHEN resultat IS NOT NULL ;
    BEGIN
    l_entry := DBMS_LDAP.next_entry(ld  => ldap_sess,
                                    msg => l_entry);
    EXCEPTION
      WHEN DBMS_LDAP.INVALID_SESSION THEN
        RETURN '#Err 0036' ;
      WHEN DBMS_LDAP.INVALID_MESSAGE THEN
        RETURN '#Err 0037' ;
    END;
  END LOOP ; -- LOOP Fin des entrees

  -- Liberation de la memoire
  --l_retval := DBMS_LDAP.msgfree(l_message) ;
  IF l_entry IS NOT NULL THEN
    l_retval := DBMS_LDAP.msgfree(l_entry) ;
  END IF ;

  -- Pas de deconnexion (on la reutilisera)
  --l_retval := DBMS_LDAP.unbind_s(ld => l_session);
  --DBMS_OUTPUT.PUT_LINE('L_RETVAL: ' || l_retval);

  RETURN resultat ;

END get ;


--===================================================================
--===================================================================
-- uid2mail(ldap_uid)
--===================================================================
FUNCTION uid2mail(ldap_uid IN VARCHAR2) RETURN VARCHAR2 IS
BEGIN
  RETURN get('uid='||ldap_uid, 'mail', 'N', a_multi) ;
END uid2mail;


--===================================================================
--===================================================================
-- hid2mail(harpege_uid)
--===================================================================
FUNCTION hid2mail(harpege_uid IN NUMBER) RETURN VARCHAR2 IS
BEGIN
  RETURN get('uid=p'||to_char(harpege_uid,'FM00000000'), 'mail', 'N', a_multi) ;
END hid2mail;


--===================================================================
--===================================================================
-- etu2mail(code_etu)
--===================================================================
FUNCTION etu2mail(code_etu IN NUMBER) RETURN VARCHAR2 IS
BEGIN
  RETURN get('uid=e'||to_char(code_etu,'FM00000000'), 'mail', 'N', a_multi) ;
END etu2mail;


--===================================================================
--===================================================================
-- uid2alias(ldap_uid)
--===================================================================
FUNCTION uid2alias(ldap_uid IN VARCHAR2) RETURN VARCHAR2 IS
BEGIN
  RETURN get('uid='||ldap_uid, 'supannAliasLogin', 'N', a_multi) ;
END uid2alias;

--===================================================================
--===================================================================
-- hid2alias(harpege_uid)
--===================================================================
FUNCTION hid2alias(harpege_uid IN NUMBER) RETURN VARCHAR2 IS
BEGIN
  RETURN get('uid=p'||to_char(harpege_uid,'FM00000000'), 'supannAliasLogin', 'N', a_multi) ;
END hid2alias;


--===================================================================
--===================================================================
-- uid2cn(ldap_uid)
--===================================================================
FUNCTION uid2cn(ldap_uid IN VARCHAR2) RETURN VARCHAR2 IS
BEGIN
  RETURN get('uid='||ldap_uid, 'cn', 'N', a_multi) ;
END uid2cn;


--===================================================================
--===================================================================
-- uid2sn(ldap_uid)
--===================================================================
FUNCTION uid2sn(ldap_uid IN VARCHAR2) RETURN VARCHAR2 IS
BEGIN
  RETURN get('uid='||ldap_uid, 'sn', 'N', a_multi) ;
END uid2sn;

--===================================================================
--===================================================================
-- uid2givenname(ldap_uid)
--===================================================================
FUNCTION uid2givenname(ldap_uid IN VARCHAR2) RETURN VARCHAR2 IS
BEGIN
  RETURN get('uid='||ldap_uid, 'givenname', 'N', a_multi) ;
END uid2givenname;

--===================================================================
--===================================================================
-- uid2gn(ldap_uid)
--===================================================================
FUNCTION uid2gn(ldap_uid IN VARCHAR2) RETURN VARCHAR2 IS
BEGIN
  RETURN get('uid='||ldap_uid, 'givenname', 'N', a_multi)||' '||get('uid='||ldap_uid, 'sn', 'N', a_multi) ;
END uid2gn;



--===================================================================
--===================================================================
-- hidIsPrimaryTeacher(harpege_uid)
--
-- Verifie eduPersonPrimaryAffiliation
--===================================================================
FUNCTION hidIsPrimaryTeacher(harpege_uid IN NUMBER) RETURN VARCHAR2 IS
  l_resultat VARCHAR2(1024 char) := NULL ;
  isTeacher VARCHAR2(1) := 'N' ;
BEGIN
  l_resultat := get('uid=p'||to_char(harpege_uid,'FM00000000'), 'eduPersonPrimaryAffiliation', 'N', a_multi) ;

  IF l_resultat IS NULL THEN
    RETURN NULL ;
  END IF ;

  IF SUBSTR( l_resultat, 1, 4 ) = '#Err' THEN
    RETURN l_resultat ;
  END IF ;

  IF l_resultat = 'teacher' THEN
    isTeacher := 'O' ;
  END IF ;

  RETURN isTeacher ;

END hidIsPrimaryTeacher;


--===================================================================
--===================================================================
-- hidIsTeacher(harpege_uid)
--
-- Retourne NULL si non trouve,
--             O si flag teacher ou faculty
--             N si pas ce flag.
--===================================================================
FUNCTION hidIsTeacher(harpege_uid IN NUMBER) RETURN VARCHAR2 IS
  l_resultat VARCHAR2(1024 char) := NULL ;
  isTeacher VARCHAR2(1) := 'N' ;
BEGIN
  l_resultat := get('uid=p'||to_char(harpege_uid,'FM00000000'), 'eduPersonAffiliation', 'Y', a_multi) ;
  -- ici, l_resultat ne contient que '#Err Multi-value: i'

  -- On verifie qu'on a bien obtenu des resultats
  IF l_resultat IS NULL OR SUBSTR( l_resultat, 1, 18) != '#Err Multi-value: ' THEN
    RETURN l_resultat ;
  END IF ;

  -- Le Nombre de resultats
  IF a_multi.count = 0 THEN
    RETURN NULL ;
  END IF ;

  FOR i IN 1 .. a_multi.count LOOP
    IF a_multi(i)='teacher' THEN
      isTeacher := 'O' ;
    END IF ;
  END LOOP ;

  RETURN isTeacher ;

END hidIsTeacher;




END ucbn_ldap ;

/
--------------------------------------------------------
--  DDL for Package Body UNICAEN_IMPORT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."UNICAEN_IMPORT" AS

  v_current_user INTEGER;
  v_current_annee INTEGER;



  FUNCTION get_current_user RETURN INTEGER IS
  BEGIN
    IF v_current_user IS NULL THEN
      v_current_user := OSE_PARAMETRE.GET_OSE_USER();
    END IF;
    RETURN v_current_user;
  END get_current_user;
 
  PROCEDURE set_current_user (p_current_user INTEGER) is
  BEGIN
    v_current_user := p_current_user;
  END set_current_user;



  FUNCTION get_current_annee RETURN INTEGER IS
  BEGIN
    IF v_current_annee IS NULL THEN
      v_current_annee := OSE_PARAMETRE.GET_ANNEE_IMPORT();
    END IF;
    RETURN v_current_annee;
  END get_current_annee;
 
  PROCEDURE set_current_annee (p_current_annee INTEGER) IS
  BEGIN
    v_current_annee := p_current_annee;
  END set_current_annee;
  


  FUNCTION get_sql_criterion( table_name varchar2, sql_criterion VARCHAR2 ) RETURN CLOB IS
  BEGIN
    IF sql_criterion <> '' OR sql_criterion IS NOT NULL THEN
      RETURN sql_criterion;
    END IF;
    RETURN CASE table_name
      WHEN 'INTERVENANT' THEN -- Met √† jour toutes les donn√©es sauf le statut, qui sera trait√© √† part
        'WHERE IMPORT_ACTION IN (''delete'',''update'',''undelete'')'
        
      WHEN 'AFFECTATION_RECHERCHE' THEN
        'WHERE INTERVENANT_ID IS NOT NULL'
        
      WHEN 'ADRESSE_INTERVENANT' THEN
        'WHERE INTERVENANT_ID IS NOT NULL'
        
      WHEN 'ELEMENT_TAUX_REGIMES' THEN
        'WHERE IMPORT_ACTION IN (''delete'',''insert'',''undelete'')'

      ELSE
        ''
    END;
  END;



  PROCEDURE SYNC_LOG( message CLOB, table_name VARCHAR2 DEFAULT NULL, source_code VARCHAR2 DEFAULT NULL ) IS
  BEGIN
    INSERT INTO OSE.SYNC_LOG("ID","DATE_SYNC","MESSAGE","TABLE_NAME","SOURCE_CODE") VALUES (SYNC_LOG_ID_SEQ.NEXTVAL, SYSDATE, message,table_name,source_code);
  END SYNC_LOG;



  FUNCTION IN_COLUMN_LIST( VALEUR VARCHAR2, CHAMPS CLOB ) RETURN NUMERIC IS
  BEGIN
    IF REGEXP_LIKE(CHAMPS, '(^|,)[ \t\r\n\v\f]*' || VALEUR || '[ \t\r\n\v\f]*(,|$)') THEN RETURN 1; END IF;
    RETURN 0;
  END;
  

  -- AUTOMATIC GENERATION --

  PROCEDURE MAJ_GROUPE_TYPE_FORMATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_GROUPE_TYPE_FORMATION%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_GROUPE_TYPE_FORMATION.* FROM V_DIFF_GROUPE_TYPE_FORMATION ' || get_sql_criterion('GROUPE_TYPE_FORMATION',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO GROUPE_TYPE_FORMATION
              ( id, LIBELLE_COURT,LIBELLE_LONG,ORDRE,PERTINENCE_NIVEAU, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,GROUPE_TYPE_FORMATION_ID_SEQ.NEXTVAL), diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG,diff_row.ORDRE,diff_row.PERTINENCE_NIVEAU, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE GROUPE_TYPE_FORMATION SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE GROUPE_TYPE_FORMATION SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE GROUPE_TYPE_FORMATION SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PERTINENCE_NIVEAU = 1 AND IN_COLUMN_LIST('PERTINENCE_NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE GROUPE_TYPE_FORMATION SET PERTINENCE_NIVEAU = diff_row.PERTINENCE_NIVEAU WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE GROUPE_TYPE_FORMATION SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE GROUPE_TYPE_FORMATION SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE GROUPE_TYPE_FORMATION SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE GROUPE_TYPE_FORMATION SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PERTINENCE_NIVEAU = 1 AND IN_COLUMN_LIST('PERTINENCE_NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE GROUPE_TYPE_FORMATION SET PERTINENCE_NIVEAU = diff_row.PERTINENCE_NIVEAU WHERE ID = diff_row.id; END IF;
            UPDATE GROUPE_TYPE_FORMATION SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'GROUPE_TYPE_FORMATION', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_GROUPE_TYPE_FORMATION;



  PROCEDURE MAJ_TYPE_FORMATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_TYPE_FORMATION%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_TYPE_FORMATION.* FROM V_DIFF_TYPE_FORMATION ' || get_sql_criterion('TYPE_FORMATION',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO TYPE_FORMATION
              ( id, GROUPE_ID,LIBELLE_COURT,LIBELLE_LONG, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,TYPE_FORMATION_ID_SEQ.NEXTVAL), diff_row.GROUPE_ID,diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_GROUPE_ID = 1 AND IN_COLUMN_LIST('GROUPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_FORMATION SET GROUPE_ID = diff_row.GROUPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_FORMATION SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_FORMATION SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE TYPE_FORMATION SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_GROUPE_ID = 1 AND IN_COLUMN_LIST('GROUPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_FORMATION SET GROUPE_ID = diff_row.GROUPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_FORMATION SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_FORMATION SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
            UPDATE TYPE_FORMATION SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'TYPE_FORMATION', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_TYPE_FORMATION;



  PROCEDURE MAJ_PERSONNEL(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_PERSONNEL%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_PERSONNEL.* FROM V_DIFF_PERSONNEL ' || get_sql_criterion('PERSONNEL',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO PERSONNEL
              ( id, CIVILITE_ID,CODE,EMAIL,NOM_PATRONYMIQUE,NOM_USUEL,PRENOM,STRUCTURE_ID,SUPANN_EMP_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,PERSONNEL_ID_SEQ.NEXTVAL), diff_row.CIVILITE_ID,diff_row.CODE,diff_row.EMAIL,diff_row.NOM_PATRONYMIQUE,diff_row.NOM_USUEL,diff_row.PRENOM,diff_row.STRUCTURE_ID,diff_row.SUPANN_EMP_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CIVILITE_ID = 1 AND IN_COLUMN_LIST('CIVILITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET CIVILITE_ID = diff_row.CIVILITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM = 1 AND IN_COLUMN_LIST('PRENOM',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET PRENOM = diff_row.PRENOM WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SUPANN_EMP_ID = 1 AND IN_COLUMN_LIST('SUPANN_EMP_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET SUPANN_EMP_ID = diff_row.SUPANN_EMP_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE PERSONNEL SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CIVILITE_ID = 1 AND IN_COLUMN_LIST('CIVILITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET CIVILITE_ID = diff_row.CIVILITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM = 1 AND IN_COLUMN_LIST('PRENOM',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET PRENOM = diff_row.PRENOM WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SUPANN_EMP_ID = 1 AND IN_COLUMN_LIST('SUPANN_EMP_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE PERSONNEL SET SUPANN_EMP_ID = diff_row.SUPANN_EMP_ID WHERE ID = diff_row.id; END IF;
            UPDATE PERSONNEL SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'PERSONNEL', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_PERSONNEL;



  PROCEDURE MAJ_ADRESSE_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ADRESSE_STRUCTURE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ADRESSE_STRUCTURE.* FROM V_DIFF_ADRESSE_STRUCTURE ' || get_sql_criterion('ADRESSE_STRUCTURE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO ADRESSE_STRUCTURE
              ( id, CODE_POSTAL,LOCALITE,NOM_VOIE,NO_VOIE,PAYS_CODE_INSEE,PAYS_LIBELLE,PRINCIPALE,STRUCTURE_ID,TELEPHONE,VILLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ADRESSE_STRUCTURE_ID_SEQ.NEXTVAL), diff_row.CODE_POSTAL,diff_row.LOCALITE,diff_row.NOM_VOIE,diff_row.NO_VOIE,diff_row.PAYS_CODE_INSEE,diff_row.PAYS_LIBELLE,diff_row.PRINCIPALE,diff_row.STRUCTURE_ID,diff_row.TELEPHONE,diff_row.VILLE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CODE_POSTAL = 1 AND IN_COLUMN_LIST('CODE_POSTAL',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET CODE_POSTAL = diff_row.CODE_POSTAL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALITE = 1 AND IN_COLUMN_LIST('LOCALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET LOCALITE = diff_row.LOCALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_VOIE = 1 AND IN_COLUMN_LIST('NOM_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET NOM_VOIE = diff_row.NOM_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NO_VOIE = 1 AND IN_COLUMN_LIST('NO_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET NO_VOIE = diff_row.NO_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET PAYS_CODE_INSEE = diff_row.PAYS_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET PAYS_LIBELLE = diff_row.PAYS_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRINCIPALE = 1 AND IN_COLUMN_LIST('PRINCIPALE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET PRINCIPALE = diff_row.PRINCIPALE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TELEPHONE = 1 AND IN_COLUMN_LIST('TELEPHONE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET TELEPHONE = diff_row.TELEPHONE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE = 1 AND IN_COLUMN_LIST('VILLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET VILLE = diff_row.VILLE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE ADRESSE_STRUCTURE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CODE_POSTAL = 1 AND IN_COLUMN_LIST('CODE_POSTAL',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET CODE_POSTAL = diff_row.CODE_POSTAL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALITE = 1 AND IN_COLUMN_LIST('LOCALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET LOCALITE = diff_row.LOCALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_VOIE = 1 AND IN_COLUMN_LIST('NOM_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET NOM_VOIE = diff_row.NOM_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NO_VOIE = 1 AND IN_COLUMN_LIST('NO_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET NO_VOIE = diff_row.NO_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET PAYS_CODE_INSEE = diff_row.PAYS_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET PAYS_LIBELLE = diff_row.PAYS_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRINCIPALE = 1 AND IN_COLUMN_LIST('PRINCIPALE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET PRINCIPALE = diff_row.PRINCIPALE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TELEPHONE = 1 AND IN_COLUMN_LIST('TELEPHONE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET TELEPHONE = diff_row.TELEPHONE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE = 1 AND IN_COLUMN_LIST('VILLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_STRUCTURE SET VILLE = diff_row.VILLE WHERE ID = diff_row.id; END IF;
            UPDATE ADRESSE_STRUCTURE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ADRESSE_STRUCTURE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ADRESSE_STRUCTURE;



  PROCEDURE MAJ_AFFECTATION_RECHERCHE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_AFFECTATION_RECHERCHE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_AFFECTATION_RECHERCHE.* FROM V_DIFF_AFFECTATION_RECHERCHE ' || get_sql_criterion('AFFECTATION_RECHERCHE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO AFFECTATION_RECHERCHE
              ( id, INTERVENANT_ID,STRUCTURE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,AFFECTATION_RECHERCHE_ID_SEQ.NEXTVAL), diff_row.INTERVENANT_ID,diff_row.STRUCTURE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_INTERVENANT_ID = 1 AND IN_COLUMN_LIST('INTERVENANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE AFFECTATION_RECHERCHE SET INTERVENANT_ID = diff_row.INTERVENANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE AFFECTATION_RECHERCHE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE AFFECTATION_RECHERCHE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_INTERVENANT_ID = 1 AND IN_COLUMN_LIST('INTERVENANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE AFFECTATION_RECHERCHE SET INTERVENANT_ID = diff_row.INTERVENANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE AFFECTATION_RECHERCHE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
            UPDATE AFFECTATION_RECHERCHE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'AFFECTATION_RECHERCHE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_AFFECTATION_RECHERCHE;



  PROCEDURE MAJ_CORPS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_CORPS%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_CORPS.* FROM V_DIFF_CORPS ' || get_sql_criterion('CORPS',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO CORPS
              ( id, LIBELLE_COURT,LIBELLE_LONG, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,CORPS_ID_SEQ.NEXTVAL), diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE CORPS SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE CORPS SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE CORPS SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE CORPS SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE CORPS SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
            UPDATE CORPS SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'CORPS', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_CORPS;



  PROCEDURE MAJ_ADRESSE_INTERVENANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ADRESSE_INTERVENANT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ADRESSE_INTERVENANT.* FROM V_DIFF_ADRESSE_INTERVENANT ' || get_sql_criterion('ADRESSE_INTERVENANT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO ADRESSE_INTERVENANT
              ( id, CODE_POSTAL,INTERVENANT_ID,LOCALITE,MENTION_COMPLEMENTAIRE,NOM_VOIE,NO_VOIE,PAYS_CODE_INSEE,PAYS_LIBELLE,TEL_DOMICILE,VILLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ADRESSE_INTERVENANT_ID_SEQ.NEXTVAL), diff_row.CODE_POSTAL,diff_row.INTERVENANT_ID,diff_row.LOCALITE,diff_row.MENTION_COMPLEMENTAIRE,diff_row.NOM_VOIE,diff_row.NO_VOIE,diff_row.PAYS_CODE_INSEE,diff_row.PAYS_LIBELLE,diff_row.TEL_DOMICILE,diff_row.VILLE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CODE_POSTAL = 1 AND IN_COLUMN_LIST('CODE_POSTAL',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET CODE_POSTAL = diff_row.CODE_POSTAL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_INTERVENANT_ID = 1 AND IN_COLUMN_LIST('INTERVENANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET INTERVENANT_ID = diff_row.INTERVENANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALITE = 1 AND IN_COLUMN_LIST('LOCALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET LOCALITE = diff_row.LOCALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_MENTION_COMPLEMENTAIRE = 1 AND IN_COLUMN_LIST('MENTION_COMPLEMENTAIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET MENTION_COMPLEMENTAIRE = diff_row.MENTION_COMPLEMENTAIRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_VOIE = 1 AND IN_COLUMN_LIST('NOM_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET NOM_VOIE = diff_row.NOM_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NO_VOIE = 1 AND IN_COLUMN_LIST('NO_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET NO_VOIE = diff_row.NO_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET PAYS_CODE_INSEE = diff_row.PAYS_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET PAYS_LIBELLE = diff_row.PAYS_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_DOMICILE = 1 AND IN_COLUMN_LIST('TEL_DOMICILE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET TEL_DOMICILE = diff_row.TEL_DOMICILE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE = 1 AND IN_COLUMN_LIST('VILLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET VILLE = diff_row.VILLE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE ADRESSE_INTERVENANT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CODE_POSTAL = 1 AND IN_COLUMN_LIST('CODE_POSTAL',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET CODE_POSTAL = diff_row.CODE_POSTAL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_INTERVENANT_ID = 1 AND IN_COLUMN_LIST('INTERVENANT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET INTERVENANT_ID = diff_row.INTERVENANT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALITE = 1 AND IN_COLUMN_LIST('LOCALITE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET LOCALITE = diff_row.LOCALITE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_MENTION_COMPLEMENTAIRE = 1 AND IN_COLUMN_LIST('MENTION_COMPLEMENTAIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET MENTION_COMPLEMENTAIRE = diff_row.MENTION_COMPLEMENTAIRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_VOIE = 1 AND IN_COLUMN_LIST('NOM_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET NOM_VOIE = diff_row.NOM_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NO_VOIE = 1 AND IN_COLUMN_LIST('NO_VOIE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET NO_VOIE = diff_row.NO_VOIE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_CODE_INSEE = 1 AND IN_COLUMN_LIST('PAYS_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET PAYS_CODE_INSEE = diff_row.PAYS_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_LIBELLE = 1 AND IN_COLUMN_LIST('PAYS_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET PAYS_LIBELLE = diff_row.PAYS_LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_DOMICILE = 1 AND IN_COLUMN_LIST('TEL_DOMICILE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET TEL_DOMICILE = diff_row.TEL_DOMICILE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE = 1 AND IN_COLUMN_LIST('VILLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ADRESSE_INTERVENANT SET VILLE = diff_row.VILLE WHERE ID = diff_row.id; END IF;
            UPDATE ADRESSE_INTERVENANT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ADRESSE_INTERVENANT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ADRESSE_INTERVENANT;



  PROCEDURE MAJ_CHEMIN_PEDAGOGIQUE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_CHEMIN_PEDAGOGIQUE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_CHEMIN_PEDAGOGIQUE.* FROM V_DIFF_CHEMIN_PEDAGOGIQUE ' || get_sql_criterion('CHEMIN_PEDAGOGIQUE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO CHEMIN_PEDAGOGIQUE
              ( id, ELEMENT_PEDAGOGIQUE_ID,ETAPE_ID,ORDRE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,CHEMIN_PEDAGOGIQUE_ID_SEQ.NEXTVAL), diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.ETAPE_ID,diff_row.ORDRE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CHEMIN_PEDAGOGIQUE SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CHEMIN_PEDAGOGIQUE SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE CHEMIN_PEDAGOGIQUE SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE CHEMIN_PEDAGOGIQUE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CHEMIN_PEDAGOGIQUE SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CHEMIN_PEDAGOGIQUE SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ORDRE = 1 AND IN_COLUMN_LIST('ORDRE',IGNORE_UPD_COLS) = 0) THEN UPDATE CHEMIN_PEDAGOGIQUE SET ORDRE = diff_row.ORDRE WHERE ID = diff_row.id; END IF;
            UPDATE CHEMIN_PEDAGOGIQUE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'CHEMIN_PEDAGOGIQUE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_CHEMIN_PEDAGOGIQUE;



  PROCEDURE MAJ_ETABLISSEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ETABLISSEMENT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ETABLISSEMENT.* FROM V_DIFF_ETABLISSEMENT ' || get_sql_criterion('ETABLISSEMENT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO ETABLISSEMENT
              ( id, DEPARTEMENT,LIBELLE,LOCALISATION, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ETABLISSEMENT_ID_SEQ.NEXTVAL), diff_row.DEPARTEMENT,diff_row.LIBELLE,diff_row.LOCALISATION, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_DEPARTEMENT = 1 AND IN_COLUMN_LIST('DEPARTEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE ETABLISSEMENT SET DEPARTEMENT = diff_row.DEPARTEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ETABLISSEMENT SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALISATION = 1 AND IN_COLUMN_LIST('LOCALISATION',IGNORE_UPD_COLS) = 0) THEN UPDATE ETABLISSEMENT SET LOCALISATION = diff_row.LOCALISATION WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE ETABLISSEMENT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_DEPARTEMENT = 1 AND IN_COLUMN_LIST('DEPARTEMENT',IGNORE_UPD_COLS) = 0) THEN UPDATE ETABLISSEMENT SET DEPARTEMENT = diff_row.DEPARTEMENT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ETABLISSEMENT SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LOCALISATION = 1 AND IN_COLUMN_LIST('LOCALISATION',IGNORE_UPD_COLS) = 0) THEN UPDATE ETABLISSEMENT SET LOCALISATION = diff_row.LOCALISATION WHERE ID = diff_row.id; END IF;
            UPDATE ETABLISSEMENT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ETABLISSEMENT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ETABLISSEMENT;



  PROCEDURE MAJ_CENTRE_COUT_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_CENTRE_COUT_STRUCTURE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_CENTRE_COUT_STRUCTURE.* FROM V_DIFF_CENTRE_COUT_STRUCTURE ' || get_sql_criterion('CENTRE_COUT_STRUCTURE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO CENTRE_COUT_STRUCTURE
              ( id, CENTRE_COUT_ID,STRUCTURE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,CENTRE_COUT_STRUCTURE_ID_SEQ.NEXTVAL), diff_row.CENTRE_COUT_ID,diff_row.STRUCTURE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CENTRE_COUT_ID = 1 AND IN_COLUMN_LIST('CENTRE_COUT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT_STRUCTURE SET CENTRE_COUT_ID = diff_row.CENTRE_COUT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT_STRUCTURE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE CENTRE_COUT_STRUCTURE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CENTRE_COUT_ID = 1 AND IN_COLUMN_LIST('CENTRE_COUT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT_STRUCTURE SET CENTRE_COUT_ID = diff_row.CENTRE_COUT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT_STRUCTURE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
            UPDATE CENTRE_COUT_STRUCTURE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'CENTRE_COUT_STRUCTURE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_CENTRE_COUT_STRUCTURE;



  PROCEDURE MAJ_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_STRUCTURE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_STRUCTURE.* FROM V_DIFF_STRUCTURE ' || get_sql_criterion('STRUCTURE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO STRUCTURE
              ( id, ETABLISSEMENT_ID,LIBELLE_COURT,LIBELLE_LONG,NIVEAU,PARENTE_ID,STRUCTURE_NIV2_ID,TYPE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,STRUCTURE_ID_SEQ.NEXTVAL), diff_row.ETABLISSEMENT_ID,diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG,diff_row.NIVEAU,diff_row.PARENTE_ID,diff_row.STRUCTURE_NIV2_ID,diff_row.TYPE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET ETABLISSEMENT_ID = diff_row.ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NIVEAU = 1 AND IN_COLUMN_LIST('NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET NIVEAU = diff_row.NIVEAU WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PARENTE_ID = 1 AND IN_COLUMN_LIST('PARENTE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET PARENTE_ID = diff_row.PARENTE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_NIV2_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_NIV2_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET STRUCTURE_NIV2_ID = diff_row.STRUCTURE_NIV2_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_ID = 1 AND IN_COLUMN_LIST('TYPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET TYPE_ID = diff_row.TYPE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE STRUCTURE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ETABLISSEMENT_ID = 1 AND IN_COLUMN_LIST('ETABLISSEMENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET ETABLISSEMENT_ID = diff_row.ETABLISSEMENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NIVEAU = 1 AND IN_COLUMN_LIST('NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET NIVEAU = diff_row.NIVEAU WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PARENTE_ID = 1 AND IN_COLUMN_LIST('PARENTE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET PARENTE_ID = diff_row.PARENTE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_NIV2_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_NIV2_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET STRUCTURE_NIV2_ID = diff_row.STRUCTURE_NIV2_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_ID = 1 AND IN_COLUMN_LIST('TYPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE STRUCTURE SET TYPE_ID = diff_row.TYPE_ID WHERE ID = diff_row.id; END IF;
            UPDATE STRUCTURE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'STRUCTURE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_STRUCTURE;



  PROCEDURE MAJ_TYPE_INTERVENTION_EP(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_TYPE_INTERVENTION_EP%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_TYPE_INTERVENTION_EP.* FROM V_DIFF_TYPE_INTERVENTION_EP ' || get_sql_criterion('TYPE_INTERVENTION_EP',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO TYPE_INTERVENTION_EP
              ( id, ELEMENT_PEDAGOGIQUE_ID,TYPE_INTERVENTION_ID,VISIBLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,TYPE_INTERVENTION_EP_ID_SEQ.NEXTVAL), diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.TYPE_INTERVENTION_ID,diff_row.VISIBLE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_INTERVENTION_EP SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_INTERVENTION_ID = 1 AND IN_COLUMN_LIST('TYPE_INTERVENTION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_INTERVENTION_EP SET TYPE_INTERVENTION_ID = diff_row.TYPE_INTERVENTION_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VISIBLE = 1 AND IN_COLUMN_LIST('VISIBLE',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_INTERVENTION_EP SET VISIBLE = diff_row.VISIBLE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE TYPE_INTERVENTION_EP SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_INTERVENTION_EP SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_INTERVENTION_ID = 1 AND IN_COLUMN_LIST('TYPE_INTERVENTION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_INTERVENTION_EP SET TYPE_INTERVENTION_ID = diff_row.TYPE_INTERVENTION_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VISIBLE = 1 AND IN_COLUMN_LIST('VISIBLE',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_INTERVENTION_EP SET VISIBLE = diff_row.VISIBLE WHERE ID = diff_row.id; END IF;
            UPDATE TYPE_INTERVENTION_EP SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'TYPE_INTERVENTION_EP', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_TYPE_INTERVENTION_EP;



  PROCEDURE MAJ_DEPARTEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_DEPARTEMENT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_DEPARTEMENT.* FROM V_DIFF_DEPARTEMENT ' || get_sql_criterion('DEPARTEMENT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO DEPARTEMENT
              ( id, CODE,LIBELLE_COURT,LIBELLE_LONG, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,DEPARTEMENT_ID_SEQ.NEXTVAL), diff_row.CODE,diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE DEPARTEMENT SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE DEPARTEMENT SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE DEPARTEMENT SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE DEPARTEMENT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE DEPARTEMENT SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE DEPARTEMENT SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE DEPARTEMENT SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
            UPDATE DEPARTEMENT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'DEPARTEMENT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_DEPARTEMENT;



  PROCEDURE MAJ_PAYS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_PAYS%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_PAYS.* FROM V_DIFF_PAYS ' || get_sql_criterion('PAYS',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO PAYS
              ( id, LIBELLE_COURT,LIBELLE_LONG,TEMOIN_UE,VALIDITE_DEBUT,VALIDITE_FIN, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,PAYS_ID_SEQ.NEXTVAL), diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG,diff_row.TEMOIN_UE,diff_row.VALIDITE_DEBUT,diff_row.VALIDITE_FIN, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE PAYS SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE PAYS SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEMOIN_UE = 1 AND IN_COLUMN_LIST('TEMOIN_UE',IGNORE_UPD_COLS) = 0) THEN UPDATE PAYS SET TEMOIN_UE = diff_row.TEMOIN_UE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE PAYS SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE PAYS SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE PAYS SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE PAYS SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE PAYS SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEMOIN_UE = 1 AND IN_COLUMN_LIST('TEMOIN_UE',IGNORE_UPD_COLS) = 0) THEN UPDATE PAYS SET TEMOIN_UE = diff_row.TEMOIN_UE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_DEBUT = 1 AND IN_COLUMN_LIST('VALIDITE_DEBUT',IGNORE_UPD_COLS) = 0) THEN UPDATE PAYS SET VALIDITE_DEBUT = diff_row.VALIDITE_DEBUT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VALIDITE_FIN = 1 AND IN_COLUMN_LIST('VALIDITE_FIN',IGNORE_UPD_COLS) = 0) THEN UPDATE PAYS SET VALIDITE_FIN = diff_row.VALIDITE_FIN WHERE ID = diff_row.id; END IF;
            UPDATE PAYS SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'PAYS', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_PAYS;



  PROCEDURE MAJ_GRADE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_GRADE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_GRADE.* FROM V_DIFF_GRADE ' || get_sql_criterion('GRADE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO GRADE
              ( id, CORPS_ID,ECHELLE,LIBELLE_COURT,LIBELLE_LONG, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,GRADE_ID_SEQ.NEXTVAL), diff_row.CORPS_ID,diff_row.ECHELLE,diff_row.LIBELLE_COURT,diff_row.LIBELLE_LONG, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_CORPS_ID = 1 AND IN_COLUMN_LIST('CORPS_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE GRADE SET CORPS_ID = diff_row.CORPS_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ECHELLE = 1 AND IN_COLUMN_LIST('ECHELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE GRADE SET ECHELLE = diff_row.ECHELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE GRADE SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE GRADE SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE GRADE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_CORPS_ID = 1 AND IN_COLUMN_LIST('CORPS_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE GRADE SET CORPS_ID = diff_row.CORPS_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ECHELLE = 1 AND IN_COLUMN_LIST('ECHELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE GRADE SET ECHELLE = diff_row.ECHELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_COURT = 1 AND IN_COLUMN_LIST('LIBELLE_COURT',IGNORE_UPD_COLS) = 0) THEN UPDATE GRADE SET LIBELLE_COURT = diff_row.LIBELLE_COURT WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE_LONG = 1 AND IN_COLUMN_LIST('LIBELLE_LONG',IGNORE_UPD_COLS) = 0) THEN UPDATE GRADE SET LIBELLE_LONG = diff_row.LIBELLE_LONG WHERE ID = diff_row.id; END IF;
            UPDATE GRADE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'GRADE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_GRADE;



  PROCEDURE MAJ_AFFECTATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_AFFECTATION%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_AFFECTATION.* FROM V_DIFF_AFFECTATION ' || get_sql_criterion('AFFECTATION',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO AFFECTATION
              ( id, PERSONNEL_ID,ROLE_ID,STRUCTURE_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,AFFECTATION_ID_SEQ.NEXTVAL), diff_row.PERSONNEL_ID,diff_row.ROLE_ID,diff_row.STRUCTURE_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_PERSONNEL_ID = 1 AND IN_COLUMN_LIST('PERSONNEL_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE AFFECTATION SET PERSONNEL_ID = diff_row.PERSONNEL_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ROLE_ID = 1 AND IN_COLUMN_LIST('ROLE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE AFFECTATION SET ROLE_ID = diff_row.ROLE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE AFFECTATION SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE AFFECTATION SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_PERSONNEL_ID = 1 AND IN_COLUMN_LIST('PERSONNEL_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE AFFECTATION SET PERSONNEL_ID = diff_row.PERSONNEL_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ROLE_ID = 1 AND IN_COLUMN_LIST('ROLE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE AFFECTATION SET ROLE_ID = diff_row.ROLE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE AFFECTATION SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
            UPDATE AFFECTATION SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'AFFECTATION', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_AFFECTATION;



  PROCEDURE MAJ_TYPE_MODULATEUR_EP(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_TYPE_MODULATEUR_EP%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_TYPE_MODULATEUR_EP.* FROM V_DIFF_TYPE_MODULATEUR_EP ' || get_sql_criterion('TYPE_MODULATEUR_EP',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO TYPE_MODULATEUR_EP
              ( id, ELEMENT_PEDAGOGIQUE_ID,TYPE_MODULATEUR_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,TYPE_MODULATEUR_EP_ID_SEQ.NEXTVAL), diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.TYPE_MODULATEUR_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_MODULATEUR_EP SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_MODULATEUR_ID = 1 AND IN_COLUMN_LIST('TYPE_MODULATEUR_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_MODULATEUR_EP SET TYPE_MODULATEUR_ID = diff_row.TYPE_MODULATEUR_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE TYPE_MODULATEUR_EP SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_MODULATEUR_EP SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_MODULATEUR_ID = 1 AND IN_COLUMN_LIST('TYPE_MODULATEUR_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE TYPE_MODULATEUR_EP SET TYPE_MODULATEUR_ID = diff_row.TYPE_MODULATEUR_ID WHERE ID = diff_row.id; END IF;
            UPDATE TYPE_MODULATEUR_EP SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'TYPE_MODULATEUR_EP', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_TYPE_MODULATEUR_EP;



  PROCEDURE MAJ_INTERVENANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_INTERVENANT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_INTERVENANT.* FROM V_DIFF_INTERVENANT ' || get_sql_criterion('INTERVENANT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO INTERVENANT
              ( id, ANNEE_ID,BIC,CIVILITE_ID,CODE,CRITERE_RECHERCHE,DATE_NAISSANCE,DEP_NAISSANCE_ID,DISCIPLINE_ID,EMAIL,GRADE_ID,IBAN,NOM_PATRONYMIQUE,NOM_USUEL,NUMERO_INSEE,NUMERO_INSEE_CLE,NUMERO_INSEE_PROVISOIRE,PAYS_NAISSANCE_ID,PAYS_NATIONALITE_ID,PRENOM,STATUT_ID,STRUCTURE_ID,SUPANN_EMP_ID,TEL_MOBILE,TEL_PRO,VILLE_NAISSANCE_CODE_INSEE,VILLE_NAISSANCE_LIBELLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,INTERVENANT_ID_SEQ.NEXTVAL), diff_row.ANNEE_ID,diff_row.BIC,diff_row.CIVILITE_ID,diff_row.CODE,diff_row.CRITERE_RECHERCHE,diff_row.DATE_NAISSANCE,diff_row.DEP_NAISSANCE_ID,diff_row.DISCIPLINE_ID,diff_row.EMAIL,diff_row.GRADE_ID,diff_row.IBAN,diff_row.NOM_PATRONYMIQUE,diff_row.NOM_USUEL,diff_row.NUMERO_INSEE,diff_row.NUMERO_INSEE_CLE,diff_row.NUMERO_INSEE_PROVISOIRE,diff_row.PAYS_NAISSANCE_ID,diff_row.PAYS_NATIONALITE_ID,diff_row.PRENOM,diff_row.STATUT_ID,diff_row.STRUCTURE_ID,diff_row.SUPANN_EMP_ID,diff_row.TEL_MOBILE,diff_row.TEL_PRO,diff_row.VILLE_NAISSANCE_CODE_INSEE,diff_row.VILLE_NAISSANCE_LIBELLE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_BIC = 1 AND IN_COLUMN_LIST('BIC',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET BIC = diff_row.BIC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CIVILITE_ID = 1 AND IN_COLUMN_LIST('CIVILITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET CIVILITE_ID = diff_row.CIVILITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CRITERE_RECHERCHE = 1 AND IN_COLUMN_LIST('CRITERE_RECHERCHE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET CRITERE_RECHERCHE = diff_row.CRITERE_RECHERCHE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_NAISSANCE = 1 AND IN_COLUMN_LIST('DATE_NAISSANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET DATE_NAISSANCE = diff_row.DATE_NAISSANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DEP_NAISSANCE_ID = 1 AND IN_COLUMN_LIST('DEP_NAISSANCE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET DEP_NAISSANCE_ID = diff_row.DEP_NAISSANCE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DISCIPLINE_ID = 1 AND IN_COLUMN_LIST('DISCIPLINE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET DISCIPLINE_ID = diff_row.DISCIPLINE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_GRADE_ID = 1 AND IN_COLUMN_LIST('GRADE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET GRADE_ID = diff_row.GRADE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_IBAN = 1 AND IN_COLUMN_LIST('IBAN',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET IBAN = diff_row.IBAN WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET NUMERO_INSEE = diff_row.NUMERO_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE_CLE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE_CLE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET NUMERO_INSEE_CLE = diff_row.NUMERO_INSEE_CLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE_PROVISOIRE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE_PROVISOIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET NUMERO_INSEE_PROVISOIRE = diff_row.NUMERO_INSEE_PROVISOIRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NAISSANCE_ID = 1 AND IN_COLUMN_LIST('PAYS_NAISSANCE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET PAYS_NAISSANCE_ID = diff_row.PAYS_NAISSANCE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NATIONALITE_ID = 1 AND IN_COLUMN_LIST('PAYS_NATIONALITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET PAYS_NATIONALITE_ID = diff_row.PAYS_NATIONALITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM = 1 AND IN_COLUMN_LIST('PRENOM',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET PRENOM = diff_row.PRENOM WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STATUT_ID = 1 AND IN_COLUMN_LIST('STATUT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET STATUT_ID = diff_row.STATUT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SUPANN_EMP_ID = 1 AND IN_COLUMN_LIST('SUPANN_EMP_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET SUPANN_EMP_ID = diff_row.SUPANN_EMP_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_MOBILE = 1 AND IN_COLUMN_LIST('TEL_MOBILE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET TEL_MOBILE = diff_row.TEL_MOBILE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_PRO = 1 AND IN_COLUMN_LIST('TEL_PRO',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET TEL_PRO = diff_row.TEL_PRO WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('VILLE_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET VILLE_NAISSANCE_CODE_INSEE = diff_row.VILLE_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('VILLE_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET VILLE_NAISSANCE_LIBELLE = diff_row.VILLE_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE INTERVENANT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_BIC = 1 AND IN_COLUMN_LIST('BIC',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET BIC = diff_row.BIC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CIVILITE_ID = 1 AND IN_COLUMN_LIST('CIVILITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET CIVILITE_ID = diff_row.CIVILITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CRITERE_RECHERCHE = 1 AND IN_COLUMN_LIST('CRITERE_RECHERCHE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET CRITERE_RECHERCHE = diff_row.CRITERE_RECHERCHE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DATE_NAISSANCE = 1 AND IN_COLUMN_LIST('DATE_NAISSANCE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET DATE_NAISSANCE = diff_row.DATE_NAISSANCE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DEP_NAISSANCE_ID = 1 AND IN_COLUMN_LIST('DEP_NAISSANCE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET DEP_NAISSANCE_ID = diff_row.DEP_NAISSANCE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DISCIPLINE_ID = 1 AND IN_COLUMN_LIST('DISCIPLINE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET DISCIPLINE_ID = diff_row.DISCIPLINE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_EMAIL = 1 AND IN_COLUMN_LIST('EMAIL',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET EMAIL = diff_row.EMAIL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_GRADE_ID = 1 AND IN_COLUMN_LIST('GRADE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET GRADE_ID = diff_row.GRADE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_IBAN = 1 AND IN_COLUMN_LIST('IBAN',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET IBAN = diff_row.IBAN WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_PATRONYMIQUE = 1 AND IN_COLUMN_LIST('NOM_PATRONYMIQUE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET NOM_PATRONYMIQUE = diff_row.NOM_PATRONYMIQUE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOM_USUEL = 1 AND IN_COLUMN_LIST('NOM_USUEL',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET NOM_USUEL = diff_row.NOM_USUEL WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET NUMERO_INSEE = diff_row.NUMERO_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE_CLE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE_CLE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET NUMERO_INSEE_CLE = diff_row.NUMERO_INSEE_CLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NUMERO_INSEE_PROVISOIRE = 1 AND IN_COLUMN_LIST('NUMERO_INSEE_PROVISOIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET NUMERO_INSEE_PROVISOIRE = diff_row.NUMERO_INSEE_PROVISOIRE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NAISSANCE_ID = 1 AND IN_COLUMN_LIST('PAYS_NAISSANCE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET PAYS_NAISSANCE_ID = diff_row.PAYS_NAISSANCE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PAYS_NATIONALITE_ID = 1 AND IN_COLUMN_LIST('PAYS_NATIONALITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET PAYS_NATIONALITE_ID = diff_row.PAYS_NATIONALITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PRENOM = 1 AND IN_COLUMN_LIST('PRENOM',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET PRENOM = diff_row.PRENOM WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STATUT_ID = 1 AND IN_COLUMN_LIST('STATUT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET STATUT_ID = diff_row.STATUT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SUPANN_EMP_ID = 1 AND IN_COLUMN_LIST('SUPANN_EMP_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET SUPANN_EMP_ID = diff_row.SUPANN_EMP_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_MOBILE = 1 AND IN_COLUMN_LIST('TEL_MOBILE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET TEL_MOBILE = diff_row.TEL_MOBILE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TEL_PRO = 1 AND IN_COLUMN_LIST('TEL_PRO',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET TEL_PRO = diff_row.TEL_PRO WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE_NAISSANCE_CODE_INSEE = 1 AND IN_COLUMN_LIST('VILLE_NAISSANCE_CODE_INSEE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET VILLE_NAISSANCE_CODE_INSEE = diff_row.VILLE_NAISSANCE_CODE_INSEE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_VILLE_NAISSANCE_LIBELLE = 1 AND IN_COLUMN_LIST('VILLE_NAISSANCE_LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE INTERVENANT SET VILLE_NAISSANCE_LIBELLE = diff_row.VILLE_NAISSANCE_LIBELLE WHERE ID = diff_row.id; END IF;
            UPDATE INTERVENANT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'INTERVENANT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_INTERVENANT;



  PROCEDURE MAJ_ELEMENT_TAUX_REGIMES(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ELEMENT_TAUX_REGIMES%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ELEMENT_TAUX_REGIMES.* FROM V_DIFF_ELEMENT_TAUX_REGIMES ' || get_sql_criterion('ELEMENT_TAUX_REGIMES',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO ELEMENT_TAUX_REGIMES
              ( id, ELEMENT_PEDAGOGIQUE_ID,TAUX_FA,TAUX_FC,TAUX_FI, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ELEMENT_TAUX_REGIMES_ID_SEQ.NEXTVAL), diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.TAUX_FA,diff_row.TAUX_FC,diff_row.TAUX_FI, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_TAUX_REGIMES SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FA = 1 AND IN_COLUMN_LIST('TAUX_FA',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_TAUX_REGIMES SET TAUX_FA = diff_row.TAUX_FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FC = 1 AND IN_COLUMN_LIST('TAUX_FC',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_TAUX_REGIMES SET TAUX_FC = diff_row.TAUX_FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FI = 1 AND IN_COLUMN_LIST('TAUX_FI',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_TAUX_REGIMES SET TAUX_FI = diff_row.TAUX_FI WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE ELEMENT_TAUX_REGIMES SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_TAUX_REGIMES SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FA = 1 AND IN_COLUMN_LIST('TAUX_FA',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_TAUX_REGIMES SET TAUX_FA = diff_row.TAUX_FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FC = 1 AND IN_COLUMN_LIST('TAUX_FC',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_TAUX_REGIMES SET TAUX_FC = diff_row.TAUX_FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FI = 1 AND IN_COLUMN_LIST('TAUX_FI',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_TAUX_REGIMES SET TAUX_FI = diff_row.TAUX_FI WHERE ID = diff_row.id; END IF;
            UPDATE ELEMENT_TAUX_REGIMES SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ELEMENT_TAUX_REGIMES', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ELEMENT_TAUX_REGIMES;



  PROCEDURE MAJ_EFFECTIFS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_EFFECTIFS%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_EFFECTIFS.* FROM V_DIFF_EFFECTIFS ' || get_sql_criterion('EFFECTIFS',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO EFFECTIFS
              ( id, ANNEE_ID,ELEMENT_PEDAGOGIQUE_ID,FA,FC,FI, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,EFFECTIFS_ID_SEQ.NEXTVAL), diff_row.ANNEE_ID,diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.FA,diff_row.FC,diff_row.FI, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE EFFECTIFS SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE EFFECTIFS SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FA = 1 AND IN_COLUMN_LIST('FA',IGNORE_UPD_COLS) = 0) THEN UPDATE EFFECTIFS SET FA = diff_row.FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FC = 1 AND IN_COLUMN_LIST('FC',IGNORE_UPD_COLS) = 0) THEN UPDATE EFFECTIFS SET FC = diff_row.FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FI = 1 AND IN_COLUMN_LIST('FI',IGNORE_UPD_COLS) = 0) THEN UPDATE EFFECTIFS SET FI = diff_row.FI WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE EFFECTIFS SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE EFFECTIFS SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE EFFECTIFS SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FA = 1 AND IN_COLUMN_LIST('FA',IGNORE_UPD_COLS) = 0) THEN UPDATE EFFECTIFS SET FA = diff_row.FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FC = 1 AND IN_COLUMN_LIST('FC',IGNORE_UPD_COLS) = 0) THEN UPDATE EFFECTIFS SET FC = diff_row.FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FI = 1 AND IN_COLUMN_LIST('FI',IGNORE_UPD_COLS) = 0) THEN UPDATE EFFECTIFS SET FI = diff_row.FI WHERE ID = diff_row.id; END IF;
            UPDATE EFFECTIFS SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'EFFECTIFS', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_EFFECTIFS;



  PROCEDURE MAJ_ETAPE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ETAPE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ETAPE.* FROM V_DIFF_ETAPE ' || get_sql_criterion('ETAPE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO ETAPE
              ( id, ANNEE_ID,CODE,DOMAINE_FONCTIONNEL_ID,LIBELLE,NIVEAU,SPECIFIQUE_ECHANGES,STRUCTURE_ID,TYPE_FORMATION_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ETAPE_ID_SEQ.NEXTVAL), diff_row.ANNEE_ID,diff_row.CODE,diff_row.DOMAINE_FONCTIONNEL_ID,diff_row.LIBELLE,diff_row.NIVEAU,diff_row.SPECIFIQUE_ECHANGES,diff_row.STRUCTURE_ID,diff_row.TYPE_FORMATION_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DOMAINE_FONCTIONNEL_ID = 1 AND IN_COLUMN_LIST('DOMAINE_FONCTIONNEL_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET DOMAINE_FONCTIONNEL_ID = diff_row.DOMAINE_FONCTIONNEL_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NIVEAU = 1 AND IN_COLUMN_LIST('NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET NIVEAU = diff_row.NIVEAU WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SPECIFIQUE_ECHANGES = 1 AND IN_COLUMN_LIST('SPECIFIQUE_ECHANGES',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET SPECIFIQUE_ECHANGES = diff_row.SPECIFIQUE_ECHANGES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_FORMATION_ID = 1 AND IN_COLUMN_LIST('TYPE_FORMATION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET TYPE_FORMATION_ID = diff_row.TYPE_FORMATION_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE ETAPE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DOMAINE_FONCTIONNEL_ID = 1 AND IN_COLUMN_LIST('DOMAINE_FONCTIONNEL_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET DOMAINE_FONCTIONNEL_ID = diff_row.DOMAINE_FONCTIONNEL_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NIVEAU = 1 AND IN_COLUMN_LIST('NIVEAU',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET NIVEAU = diff_row.NIVEAU WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_SPECIFIQUE_ECHANGES = 1 AND IN_COLUMN_LIST('SPECIFIQUE_ECHANGES',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET SPECIFIQUE_ECHANGES = diff_row.SPECIFIQUE_ECHANGES WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_FORMATION_ID = 1 AND IN_COLUMN_LIST('TYPE_FORMATION_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ETAPE SET TYPE_FORMATION_ID = diff_row.TYPE_FORMATION_ID WHERE ID = diff_row.id; END IF;
            UPDATE ETAPE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ETAPE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ETAPE;



  PROCEDURE MAJ_DOMAINE_FONCTIONNEL(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_DOMAINE_FONCTIONNEL%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_DOMAINE_FONCTIONNEL.* FROM V_DIFF_DOMAINE_FONCTIONNEL ' || get_sql_criterion('DOMAINE_FONCTIONNEL',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO DOMAINE_FONCTIONNEL
              ( id, LIBELLE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,DOMAINE_FONCTIONNEL_ID_SEQ.NEXTVAL), diff_row.LIBELLE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE DOMAINE_FONCTIONNEL SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE DOMAINE_FONCTIONNEL SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE DOMAINE_FONCTIONNEL SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
            UPDATE DOMAINE_FONCTIONNEL SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'DOMAINE_FONCTIONNEL', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_DOMAINE_FONCTIONNEL;



  PROCEDURE MAJ_CENTRE_COUT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_CENTRE_COUT%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_CENTRE_COUT.* FROM V_DIFF_CENTRE_COUT ' || get_sql_criterion('CENTRE_COUT',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO CENTRE_COUT
              ( id, ACTIVITE_ID,LIBELLE,PARENT_ID,TYPE_RESSOURCE_ID,UNITE_BUDGETAIRE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,CENTRE_COUT_ID_SEQ.NEXTVAL), diff_row.ACTIVITE_ID,diff_row.LIBELLE,diff_row.PARENT_ID,diff_row.TYPE_RESSOURCE_ID,diff_row.UNITE_BUDGETAIRE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ACTIVITE_ID = 1 AND IN_COLUMN_LIST('ACTIVITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT SET ACTIVITE_ID = diff_row.ACTIVITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PARENT_ID = 1 AND IN_COLUMN_LIST('PARENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT SET PARENT_ID = diff_row.PARENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_RESSOURCE_ID = 1 AND IN_COLUMN_LIST('TYPE_RESSOURCE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT SET TYPE_RESSOURCE_ID = diff_row.TYPE_RESSOURCE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_UNITE_BUDGETAIRE = 1 AND IN_COLUMN_LIST('UNITE_BUDGETAIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT SET UNITE_BUDGETAIRE = diff_row.UNITE_BUDGETAIRE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE CENTRE_COUT SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ACTIVITE_ID = 1 AND IN_COLUMN_LIST('ACTIVITE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT SET ACTIVITE_ID = diff_row.ACTIVITE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PARENT_ID = 1 AND IN_COLUMN_LIST('PARENT_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT SET PARENT_ID = diff_row.PARENT_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TYPE_RESSOURCE_ID = 1 AND IN_COLUMN_LIST('TYPE_RESSOURCE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT SET TYPE_RESSOURCE_ID = diff_row.TYPE_RESSOURCE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_UNITE_BUDGETAIRE = 1 AND IN_COLUMN_LIST('UNITE_BUDGETAIRE',IGNORE_UPD_COLS) = 0) THEN UPDATE CENTRE_COUT SET UNITE_BUDGETAIRE = diff_row.UNITE_BUDGETAIRE WHERE ID = diff_row.id; END IF;
            UPDATE CENTRE_COUT SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'CENTRE_COUT', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_CENTRE_COUT;



  PROCEDURE MAJ_NOEUD(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_NOEUD%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_NOEUD.* FROM V_DIFF_NOEUD ' || get_sql_criterion('NOEUD',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO NOEUD
              ( id, ANNEE_ID,CODE,ELEMENT_PEDAGOGIQUE_ID,ETAPE_ID,LIBELLE,LISTE, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,NOEUD_ID_SEQ.NEXTVAL), diff_row.ANNEE_ID,diff_row.CODE,diff_row.ELEMENT_PEDAGOGIQUE_ID,diff_row.ETAPE_ID,diff_row.LIBELLE,diff_row.LISTE, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE NOEUD SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE NOEUD SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE NOEUD SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE NOEUD SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE NOEUD SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LISTE = 1 AND IN_COLUMN_LIST('LISTE',IGNORE_UPD_COLS) = 0) THEN UPDATE NOEUD SET LISTE = diff_row.LISTE WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE NOEUD SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE NOEUD SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE NOEUD SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ELEMENT_PEDAGOGIQUE_ID = 1 AND IN_COLUMN_LIST('ELEMENT_PEDAGOGIQUE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE NOEUD SET ELEMENT_PEDAGOGIQUE_ID = diff_row.ELEMENT_PEDAGOGIQUE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE NOEUD SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE NOEUD SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LISTE = 1 AND IN_COLUMN_LIST('LISTE',IGNORE_UPD_COLS) = 0) THEN UPDATE NOEUD SET LISTE = diff_row.LISTE WHERE ID = diff_row.id; END IF;
            UPDATE NOEUD SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'NOEUD', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_NOEUD;



  PROCEDURE MAJ_LIEN(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_LIEN%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_LIEN.* FROM V_DIFF_LIEN ' || get_sql_criterion('LIEN',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO LIEN
              ( id, NOEUD_INF_ID,NOEUD_SUP_ID, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,LIEN_ID_SEQ.NEXTVAL), diff_row.NOEUD_INF_ID,diff_row.NOEUD_SUP_ID, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_NOEUD_INF_ID = 1 AND IN_COLUMN_LIST('NOEUD_INF_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE LIEN SET NOEUD_INF_ID = diff_row.NOEUD_INF_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOEUD_SUP_ID = 1 AND IN_COLUMN_LIST('NOEUD_SUP_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE LIEN SET NOEUD_SUP_ID = diff_row.NOEUD_SUP_ID WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE LIEN SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_NOEUD_INF_ID = 1 AND IN_COLUMN_LIST('NOEUD_INF_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE LIEN SET NOEUD_INF_ID = diff_row.NOEUD_INF_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_NOEUD_SUP_ID = 1 AND IN_COLUMN_LIST('NOEUD_SUP_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE LIEN SET NOEUD_SUP_ID = diff_row.NOEUD_SUP_ID WHERE ID = diff_row.id; END IF;
            UPDATE LIEN SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'LIEN', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_LIEN;



  PROCEDURE MAJ_ELEMENT_PEDAGOGIQUE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '') IS
    TYPE r_cursor IS REF CURSOR;
    sql_query CLOB;
    diff_cur r_cursor;
    diff_row V_DIFF_ELEMENT_PEDAGOGIQUE%ROWTYPE;
  BEGIN
    sql_query := 'SELECT V_DIFF_ELEMENT_PEDAGOGIQUE.* FROM V_DIFF_ELEMENT_PEDAGOGIQUE ' || get_sql_criterion('ELEMENT_PEDAGOGIQUE',SQL_CRITERION);
    OPEN diff_cur FOR sql_query;
    LOOP
      FETCH diff_cur INTO diff_row; EXIT WHEN diff_cur%NOTFOUND;
      BEGIN

        CASE diff_row.import_action
          WHEN 'insert' THEN
            INSERT INTO ELEMENT_PEDAGOGIQUE
              ( id, ANNEE_ID,CODE,DISCIPLINE_ID,ETAPE_ID,FA,FC,FI,LIBELLE,PERIODE_ID,STRUCTURE_ID,TAUX_FA,TAUX_FC,TAUX_FI,TAUX_FOAD, source_id, source_code, histo_createur_id, histo_modificateur_id )
            VALUES
              ( COALESCE(diff_row.id,ELEMENT_PEDAGOGIQUE_ID_SEQ.NEXTVAL), diff_row.ANNEE_ID,diff_row.CODE,diff_row.DISCIPLINE_ID,diff_row.ETAPE_ID,diff_row.FA,diff_row.FC,diff_row.FI,diff_row.LIBELLE,diff_row.PERIODE_ID,diff_row.STRUCTURE_ID,diff_row.TAUX_FA,diff_row.TAUX_FC,diff_row.TAUX_FI,diff_row.TAUX_FOAD, diff_row.source_id, diff_row.source_code, get_current_user, get_current_user );

          WHEN 'update' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DISCIPLINE_ID = 1 AND IN_COLUMN_LIST('DISCIPLINE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET DISCIPLINE_ID = diff_row.DISCIPLINE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FA = 1 AND IN_COLUMN_LIST('FA',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET FA = diff_row.FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FC = 1 AND IN_COLUMN_LIST('FC',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET FC = diff_row.FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FI = 1 AND IN_COLUMN_LIST('FI',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET FI = diff_row.FI WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PERIODE_ID = 1 AND IN_COLUMN_LIST('PERIODE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET PERIODE_ID = diff_row.PERIODE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FA = 1 AND IN_COLUMN_LIST('TAUX_FA',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET TAUX_FA = diff_row.TAUX_FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FC = 1 AND IN_COLUMN_LIST('TAUX_FC',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET TAUX_FC = diff_row.TAUX_FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FI = 1 AND IN_COLUMN_LIST('TAUX_FI',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET TAUX_FI = diff_row.TAUX_FI WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FOAD = 1 AND IN_COLUMN_LIST('TAUX_FOAD',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET TAUX_FOAD = diff_row.TAUX_FOAD WHERE ID = diff_row.id; END IF;

          WHEN 'delete' THEN
            UPDATE ELEMENT_PEDAGOGIQUE SET histo_destruction = SYSDATE, histo_destructeur_id = get_current_user WHERE ID = diff_row.id;

          WHEN 'undelete' THEN
            IF (diff_row.u_ANNEE_ID = 1 AND IN_COLUMN_LIST('ANNEE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET ANNEE_ID = diff_row.ANNEE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_CODE = 1 AND IN_COLUMN_LIST('CODE',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET CODE = diff_row.CODE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_DISCIPLINE_ID = 1 AND IN_COLUMN_LIST('DISCIPLINE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET DISCIPLINE_ID = diff_row.DISCIPLINE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_ETAPE_ID = 1 AND IN_COLUMN_LIST('ETAPE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET ETAPE_ID = diff_row.ETAPE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FA = 1 AND IN_COLUMN_LIST('FA',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET FA = diff_row.FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FC = 1 AND IN_COLUMN_LIST('FC',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET FC = diff_row.FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_FI = 1 AND IN_COLUMN_LIST('FI',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET FI = diff_row.FI WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_LIBELLE = 1 AND IN_COLUMN_LIST('LIBELLE',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET LIBELLE = diff_row.LIBELLE WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_PERIODE_ID = 1 AND IN_COLUMN_LIST('PERIODE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET PERIODE_ID = diff_row.PERIODE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_STRUCTURE_ID = 1 AND IN_COLUMN_LIST('STRUCTURE_ID',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET STRUCTURE_ID = diff_row.STRUCTURE_ID WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FA = 1 AND IN_COLUMN_LIST('TAUX_FA',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET TAUX_FA = diff_row.TAUX_FA WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FC = 1 AND IN_COLUMN_LIST('TAUX_FC',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET TAUX_FC = diff_row.TAUX_FC WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FI = 1 AND IN_COLUMN_LIST('TAUX_FI',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET TAUX_FI = diff_row.TAUX_FI WHERE ID = diff_row.id; END IF;
          IF (diff_row.u_TAUX_FOAD = 1 AND IN_COLUMN_LIST('TAUX_FOAD',IGNORE_UPD_COLS) = 0) THEN UPDATE ELEMENT_PEDAGOGIQUE SET TAUX_FOAD = diff_row.TAUX_FOAD WHERE ID = diff_row.id; END IF;
            UPDATE ELEMENT_PEDAGOGIQUE SET histo_destruction = NULL, histo_destructeur_id = NULL WHERE ID = diff_row.id;

        END CASE;

      EXCEPTION WHEN OTHERS THEN
        UNICAEN_IMPORT.SYNC_LOG( SQLERRM, 'ELEMENT_PEDAGOGIQUE', diff_row.source_code );
      END;
    END LOOP;
    CLOSE diff_cur;

  END MAJ_ELEMENT_PEDAGOGIQUE;

  -- END OF AUTOMATIC GENERATION --
END UNICAEN_IMPORT;

/
--------------------------------------------------------
--  DDL for Package Body UNICAEN_OSE_FORMULE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "OSE"."UNICAEN_OSE_FORMULE" AS

  /* Stockage des valeurs interm√©diaires */
  TYPE t_valeurs IS TABLE OF FLOAT INDEX BY PLS_INTEGER;
  TYPE t_tableau IS RECORD (
    valeurs t_valeurs,
    total   FLOAT DEFAULT 0
  );  
  TYPE t_tableaux       IS TABLE OF t_tableau INDEX BY PLS_INTEGER;
  t                     t_tableaux;
  current_id            PLS_INTEGER;

  /* Acc√®s au stockage des valeurs interm√©diaires */
  -- Initialisation des tableaux de valeurs interm√©diaires
  PROCEDURE V_INIT IS
  BEGIN
    t.delete;
  END;

  -- Setter d'une valeur interm√©diaire au niveau case
  PROCEDURE SV( tab_index PLS_INTEGER, id PLS_INTEGER, val FLOAT ) IS
  BEGIN
    t(tab_index).valeurs(id) := val;
    t(tab_index).total       := t(tab_index).total + val;
  END;

  -- Setter d'une valeur interm√©diaire au niveau tableau
  PROCEDURE SV( tab_index PLS_INTEGER, val FLOAT ) IS
  BEGIN
    t(tab_index).total      := val;
  END;

  -- Getter d'une valeur interm√©diaire, au niveau case
  FUNCTION GV( tab_index PLS_INTEGER, id PLS_INTEGER DEFAULT NULL ) RETURN FLOAT IS
  BEGIN
    IF NOT t.exists(tab_index) THEN RETURN 0; END IF;
    IF NOT t(tab_index).valeurs.exists( NVL(id,current_id) ) THEN RETURN 0; END IF;
    RETURN t(tab_index).valeurs( NVL(id,current_id) );
  END;

  -- Getter d'une valeur interm√©diaire, au niveau tableau
  FUNCTION GT( tab_index PLS_INTEGER ) RETURN FLOAT IS
  BEGIN 
    IF NOT t.exists(tab_index) THEN RETURN 0; END IF;
    RETURN t(tab_index).total;
  END;


  /* D√©bogage des valeurs interm√©diaires */
  PROCEDURE DEBUG_TAB( tab_index PLS_INTEGER ) IS
    id PLS_INTEGER;
  BEGIN
    ose_test.echo( 'Tableau num√©ro ' || tab_index );
    
    id := ose_formule.d_service.FIRST;
    LOOP EXIT WHEN id IS NULL;
      dbms_output.put( 'Service id=' || lpad(id,6,' ') || ', data = ' );

      current_id := ose_formule.d_volume_horaire.FIRST;
      LOOP EXIT WHEN current_id IS NULL;
        dbms_output.put( lpad(gv(tab_index),10,' ') || ' | ' );
        current_id := ose_formule.d_volume_horaire.NEXT(current_id);
      END LOOP;
      dbms_output.new_line;
      id := ose_formule.d_service.NEXT(id);
    END LOOP;

    ose_test.echo( 'TOTAL = ' || LPAD(gt(tab_index), 10, ' ') );
  END;



  /* Calcul des valeurs interm√©diaires */
  FUNCTION C2_11( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF NVL(s.structure_ens_id,0) = NVL(s.structure_aff_id,0) AND s.taux_fc < 1 THEN
      RETURN vh.heures;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C3_11( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF NVL(s.structure_ens_id,0) = NVL(s.structure_aff_id,0) THEN
      RETURN vh.heures * (s.taux_fi + s.taux_fa);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_12( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF NVL(s.structure_ens_id,0) <> NVL(s.structure_aff_id,0) AND s.taux_fc < 1 THEN
      RETURN vh.heures;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C3_12( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF NVL(s.structure_ens_id,0) <> NVL(s.structure_aff_id,0) THEN
      RETURN vh.heures * (s.taux_fi + s.taux_fa);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_13( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
  
    IF NVL(s.structure_ens_id,0) = NVL(s.structure_aff_id,0) AND s.taux_fc = 1 THEN
      RETURN vh.heures;
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C3_13( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
  
    IF NVL(s.structure_ens_id,0) = NVL(s.structure_aff_id,0) THEN
      RETURN vh.heures * s.taux_fc;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_14( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
  
    IF NVL(s.structure_ens_id,0) <> NVL(s.structure_aff_id,0) AND s.taux_fc = 1 THEN
      RETURN vh.heures;
    ELSE
      RETURN 0;
    END IF;
  END;  

  FUNCTION C3_14( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
  
    IF NVL(s.structure_ens_id,0) <> NVL(s.structure_aff_id,0) THEN
      RETURN vh.heures * s.taux_fc;
    ELSE
      RETURN 0;
    END IF;
  END;  

  FUNCTION C2_15( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
    f ose_formule.t_service_ref;
  BEGIN
    f := ose_formule.d_service_ref( fr.service_referentiel_id );
  
    IF NVL(ose_formule.d_intervenant.structure_id,0) = NVL(f.structure_id,0) THEN
      RETURN fr.heures;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_16( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
    f ose_formule.t_service_ref;
  BEGIN
    f := ose_formule.d_service_ref( fr.service_referentiel_id );
    
    IF NVL(ose_formule.d_intervenant.structure_id,0) <> NVL(f.structure_id,0) AND NVL(f.structure_id,0) <> ose_divers.STRUCTURE_UNIV_GET_ID THEN
      RETURN fr.heures;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_17( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
    f ose_formule.t_service_ref;
  BEGIN
    f := ose_formule.d_service_ref( fr.service_referentiel_id );
    
    IF NVL(f.structure_id,0) = ose_divers.STRUCTURE_UNIV_GET_ID THEN
      RETURN fr.heures;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_21( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(11) * vh.taux_service_du;
  END;

  FUNCTION C2_22( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(12) * vh.taux_service_du;
  END;
  
  FUNCTION C2_23( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(13) * vh.taux_service_du;
  END;
  
  FUNCTION C2_24( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(14) * vh.taux_service_du;
  END;

  FUNCTION C2_25( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN gv(15);
  END;
  
  FUNCTION C2_26( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN gv(16);
  END;
  
  FUNCTION C2_27( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN gv(17);
  END;

  FUNCTION C2_31 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( ose_formule.d_resultat.service_du - gt(21), 0 );
  END;

  FUNCTION C2_32 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( gt(31) - gt(22), 0 );
  END;

  FUNCTION C2_33 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( gt(32) - gt(23), 0 );
  END;

  FUNCTION C2_34 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( gt(33) - gt(24), 0 );
  END;
  
  FUNCTION C2_35 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( gt(34) - gt(25), 0 );
  END;

  FUNCTION C2_36 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( gt(35) - gt(26), 0 );
  END;

  FUNCTION C2_37 RETURN FLOAT IS
  BEGIN
    RETURN GREATEST( gt(36) - gt(27), 0 );
  END;

  FUNCTION C2_41( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(21) <> 0 THEN
      RETURN gv(21) / gt(21);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_42( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(22) <> 0 THEN
      RETURN gv(22) / gt(22);
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_43( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(23) <> 0 THEN
      RETURN gv(23) / gt(23);
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_44( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(24) <> 0 THEN
      RETURN gv(24) / gt(24);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_45( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gt(25) <> 0 THEN
      RETURN gv(25) / gt(25);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_46( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gt(26) <> 0 THEN
      RETURN gv(26) / gt(26);
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_47( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gt(27) <> 0 THEN
      RETURN gv(27) / gt(27);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_51( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( ose_formule.d_resultat.service_du, gt(21) ) * gv(41);
  END;

  FUNCTION C2_52( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( gt(31), gt(22) ) * gv(42);
  END;

  FUNCTION C2_53( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( gt(32), gt(23) ) * gv(43);
  END;

  FUNCTION C2_54( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( gt(33), gt(24) ) * gv(44);
  END;

  FUNCTION C2_55( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( gt(34), gt(25) ) * gv(45);
  END;

  FUNCTION C2_56( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( gt(35), gt(26) ) * gv(46);
  END;
  
  FUNCTION C2_57( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN LEAST( gt(36), gt(27) ) * gv(47);
  END;  

  FUNCTION C2_61( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(51) * s.taux_fi;
  END;

  FUNCTION C3_61( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(51) / (s.taux_fi + s.taux_fa) * s.taux_fi;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_62( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(52) * s.taux_fi;
  END;
  
  FUNCTION C3_62( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(52) / (s.taux_fi + s.taux_fa) * s.taux_fi;
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_71( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(51) * s.taux_fa;
  END;

  FUNCTION C3_71( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(51) / (s.taux_fi + s.taux_fa) * s.taux_fa;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_72( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(52) * s.taux_fa;
  END;
  
  FUNCTION C3_72( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(52) / (s.taux_fi + s.taux_fa) * s.taux_fa;
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_81( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(51) * s.taux_fc;
  END;

  FUNCTION C2_82( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(52) * s.taux_fc;
  END;
  
  FUNCTION C2_83( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(53) * s.taux_fc;
  END;

  FUNCTION C3_83( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(53);
  END;

  FUNCTION C2_84( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(54) * s.taux_fc;
  END;
  
  FUNCTION C3_84( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(54);
  END;
  
  FUNCTION C2_91( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gv(21) <> 0 THEN
      RETURN gv(51) / gv(21);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_92( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gv(22) <> 0 THEN
      RETURN gv(52) / gv(22);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_93( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gv(23) <> 0 THEN
      RETURN gv(53) / gv(23);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_94( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gv(24) <> 0 THEN
      RETURN gv(54) / gv(24);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_95( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gv(25) <> 0 THEN
      RETURN gv(55) / gv(25);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_96( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gv(26) <> 0 THEN
      RETURN gv(56) / gv(26);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_97( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gv(27) <> 0 THEN
      RETURN gv(57) / gv(27);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_101( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(91);
    END IF;
  END;

  FUNCTION C2_102( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(92);
    END IF;
  END;

  FUNCTION C2_103( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(93);
    END IF;
  END;

  FUNCTION C2_104( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(94);
    END IF;
  END;

  FUNCTION C2_105( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(95);
    END IF;
  END;

  FUNCTION C2_106( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(96);
    END IF;
  END;
  
  FUNCTION C2_107( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    IF gt(37) <> 0 THEN
      RETURN 0;
    ELSE
      RETURN 1 - gv(97);
    END IF;
  END;
  
  FUNCTION C2_111( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(11) * vh.taux_service_compl * gv(101);
  END;

  FUNCTION C2_112( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(12) * vh.taux_service_compl * gv(102);
  END;

  FUNCTION C2_113( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(13) * vh.taux_service_compl * gv(103);
  END;
  
  FUNCTION C2_114( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
  BEGIN
    RETURN gv(14) * vh.taux_service_compl * gv(104);
  END;

  FUNCTION C2_115( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN gv(15) * gv(105);
  END;

  FUNCTION C2_116( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN gv(16) * gv(106);
  END;

  FUNCTION C2_117( fr ose_formule.t_volume_horaire_ref ) RETURN FLOAT IS
  BEGIN
    RETURN gv(17) * gv(107);
  END;

  FUNCTION C2_123( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF s.taux_fc = 1 THEN
      RETURN gv(113) * s.ponderation_service_compl;
    ELSE
      RETURN gv(113);
    END IF;
  END;

  FUNCTION C3_123( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF s.taux_fc > 0 THEN
      RETURN gv(113) * s.ponderation_service_compl;
    ELSE
      RETURN gv(113);
    END IF;
  END;
  
  FUNCTION C2_124( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF s.taux_fc = 1 THEN
      RETURN gv(114) * s.ponderation_service_compl;
    ELSE
      RETURN gv(114);
    END IF;    
  END;

  FUNCTION C3_124( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );

    IF s.taux_fc > 0 THEN
      RETURN gv(114) * s.ponderation_service_compl;
    ELSE
      RETURN gv(114);
    END IF;
  END;

  FUNCTION C2_131( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(111) * s.taux_fi;
  END;

  FUNCTION C3_131( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(111) / (s.taux_fi + s.taux_fa) * s.taux_fi;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_132( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(112) * s.taux_fi;
  END;

  FUNCTION C3_132( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(112) / (s.taux_fi + s.taux_fa) * s.taux_fi;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_141( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(111) * s.taux_fa;
  END;

  FUNCTION C3_141( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(111) / (s.taux_fi + s.taux_fa) * s.taux_fa;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_142( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(112) * s.taux_fa;
  END;
  
  FUNCTION C3_142( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF s.taux_fi + s.taux_fa > 0 THEN
      RETURN gv(112) / (s.taux_fi + s.taux_fa) * s.taux_fa;
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_151( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(111) * s.taux_fc;
  END;

  FUNCTION C2_152( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    RETURN gv(112) * s.taux_fc;
  END;
  
  FUNCTION C2_153( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(123) = gv(113) THEN
      RETURN gv(113) * s.taux_fc;
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C3_153( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(123) = gv(113) THEN
      RETURN gv(113);
    ELSE
      RETURN 0;
    END IF;
  END;
  
  FUNCTION C2_154( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(124) = gv(114) THEN
      RETURN gv(114) * s.taux_fc;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C3_154( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(124) = gv(114) THEN
      RETURN gv(114);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_163( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(123) <> gv(113) THEN
      RETURN gv(123) * s.taux_fc;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C3_163( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(123) <> gv(113) THEN
      RETURN gv(123);
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C2_164( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(124) <> gv(114) THEN
      RETURN gv(124) * s.taux_fc;
    ELSE
      RETURN 0;
    END IF;
  END;

  FUNCTION C3_164( vh ose_formule.t_volume_horaire ) RETURN FLOAT IS
    s  ose_formule.t_service;
  BEGIN
    s  := ose_formule.d_service( vh.service_id );
    
    IF gv(124) <> gv(114) THEN
      RETURN gv(124);
    ELSE
      RETURN 0;
    END IF;
  END;










  PROCEDURE CALCUL_RESULTAT_V2( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) IS
    current_tableau           PLS_INTEGER;
    id                        PLS_INTEGER;
    val                       FLOAT;
    TYPE t_liste_tableaux   IS VARRAY (100) OF PLS_INTEGER;
    liste_tableaux            t_liste_tableaux;
    resultat_total            FLOAT;
    res                       FLOAT;
    vh                        ose_formule.t_volume_horaire;
    vhr                       ose_formule.t_volume_horaire_ref;
  BEGIN
    V_INIT;

    ose_formule.d_resultat.service_du := CASE
      WHEN ose_formule.d_intervenant.depassement_service_du_sans_hc = 1 -- HC trait√©es comme du service
        OR ose_formule.d_intervenant.heures_decharge < 0 -- s'il y a une d√©charge => aucune HC     
        
      THEN 9999 
      ELSE ose_formule.d_intervenant.heures_service_statutaire + ose_formule.d_intervenant.heures_service_modifie
    END;

    liste_tableaux := t_liste_tableaux(
       11,  12,  13,  14,  15,  16,  17,
       21,  22,  23,  24,  25,  26,  27,
       31,  32,  33,  34,  35,  36,  37,
       41,  42,  43,  44,  45,  46,  47,
       51,  52,  53,  54,  55,  56,  57,
       61,  62,
       71,  72,
       81,  82,  83,  84,       
       91,  92,  93,  94,  95,  96,  97,
      101, 102, 103, 104, 105, 106, 107,
      111, 112, 113, 114, 115, 116, 117,
                123, 124,
      131, 132,
      141, 142,
      151, 152, 153, 154,
                163, 164
    );

    FOR i IN liste_tableaux.FIRST .. liste_tableaux.LAST
    LOOP
      current_tableau := liste_tableaux(i);

      IF current_tableau IN ( -- calcul pour les volumes horaires des services
         11,  12,  13,  14,
         21,  22,  23,  24,
         41,  42,  43,  44,
         51,  52,  53,  54,
         61,  62,
         71,  72,
         81,  82,  83,  84,
         91,  92,  93,  94,
        101, 102, 103, 104,
        111, 112, 113, 114,
                  123, 124,
        131, 132,
        141, 142,
        151, 152, 153, 154,
                  163, 164
      ) THEN
      
        current_id := ose_formule.d_volume_horaire.FIRST;
        LOOP EXIT WHEN current_id IS NULL;
          vh := ose_formule.d_volume_horaire(current_id);
          res := CASE current_tableau
            WHEN  11 THEN  C2_11 (vh) WHEN  12 THEN  C2_12 (vh) WHEN  13 THEN  C2_13 (vh) WHEN  14 THEN  C2_14 (vh)
            WHEN  21 THEN  C2_21 (vh) WHEN  22 THEN  C2_22 (vh) WHEN  23 THEN  C2_23 (vh) WHEN  24 THEN  C2_24 (vh)
            WHEN  41 THEN  C2_41 (vh) WHEN  42 THEN  C2_42 (vh) WHEN  43 THEN  C2_43 (vh) WHEN  44 THEN  C2_44 (vh)
            WHEN  51 THEN  C2_51 (vh) WHEN  52 THEN  C2_52 (vh) WHEN  53 THEN  C2_53 (vh) WHEN  54 THEN  C2_54 (vh)
            WHEN  61 THEN  C2_61 (vh) WHEN  62 THEN  C2_62 (vh)
            WHEN  71 THEN  C2_71 (vh) WHEN  72 THEN  C2_72 (vh)
            WHEN  81 THEN  C2_81 (vh) WHEN  82 THEN  C2_82 (vh) WHEN  83 THEN  C2_83 (vh) WHEN  84 THEN  C2_84 (vh)
            WHEN  91 THEN  C2_91 (vh) WHEN  92 THEN  C2_92 (vh) WHEN  93 THEN  C2_93 (vh) WHEN  94 THEN  C2_94 (vh)
            WHEN 101 THEN C2_101 (vh) WHEN 102 THEN C2_102 (vh) WHEN 103 THEN C2_103 (vh) WHEN 104 THEN C2_104 (vh)
            WHEN 111 THEN C2_111 (vh) WHEN 112 THEN C2_112 (vh) WHEN 113 THEN C2_113 (vh) WHEN 114 THEN C2_114 (vh)
                                                              WHEN 123 THEN C2_123 (vh) WHEN 124 THEN C2_124 (vh)
            WHEN 131 THEN C2_131 (vh) WHEN 132 THEN C2_132 (vh)
            WHEN 141 THEN C2_141 (vh) WHEN 142 THEN C2_142 (vh)
            WHEN 151 THEN C2_151 (vh) WHEN 152 THEN C2_152 (vh) WHEN 153 THEN C2_153 (vh) WHEN 154 THEN C2_154 (vh)
                                                              WHEN 163 THEN C2_163 (vh) WHEN 164 THEN C2_164 (vh)
          END;
          SV( current_tableau, current_id, res );
          current_id := ose_formule.d_volume_horaire.NEXT(current_id);
        END LOOP;
      
      ELSIF current_tableau IN ( -- calcul des services restants dus
        31, 32, 33, 34, 35, 36, 37
      ) THEN
      
        res := CASE current_tableau
          WHEN 31 THEN C2_31  WHEN 32 THEN C2_32  WHEN 33 THEN C2_33
          WHEN 34 THEN C2_34  WHEN 35 THEN C2_35  WHEN 36 THEN C2_36
          WHEN 37 THEN C2_37
        END;
        SV( current_tableau, res );
  
      ELSIF current_tableau IN ( -- tableaux de calcul des volumes horaires r√©f√©rentiels
         15,  16,  17,
         25,  26,  27,
         45,  46,  47,
         55,  56,  57,     
         95,  96,  97,
        105, 106, 107,
        115, 116, 117
      ) THEN  

        current_id := ose_formule.d_volume_horaire_ref.FIRST;
        LOOP EXIT WHEN current_id IS NULL;
          vhr := ose_formule.d_volume_horaire_ref(current_id);
          res := CASE current_tableau
            WHEN  15 THEN  C2_15 (vhr)  WHEN  16 THEN  C2_16 (vhr)  WHEN  17 THEN  C2_17 (vhr)
            WHEN  25 THEN  C2_25 (vhr)  WHEN  26 THEN  C2_26 (vhr)  WHEN  27 THEN  C2_27 (vhr)
            WHEN  45 THEN  C2_45 (vhr)  WHEN  46 THEN  C2_46 (vhr)  WHEN  47 THEN  C2_47 (vhr)
            WHEN  55 THEN  C2_55 (vhr)  WHEN  56 THEN  C2_56 (vhr)  WHEN  57 THEN  C2_57 (vhr)
            WHEN  95 THEN  C2_95 (vhr)  WHEN  96 THEN  C2_96 (vhr)  WHEN  97 THEN  C2_97 (vhr)
            WHEN 105 THEN C2_105 (vhr)  WHEN 106 THEN C2_106 (vhr)  WHEN 107 THEN C2_107 (vhr)
            WHEN 115 THEN C2_115 (vhr)  WHEN 116 THEN C2_116 (vhr)  WHEN 117 THEN C2_117 (vhr)
          END;
          SV(current_tableau, current_id, res);
          current_id := ose_formule.d_volume_horaire_ref.NEXT(current_id);
        END LOOP;

      END IF;
    END LOOP;

    resultat_total :=                                         gt( 55) + gt( 56) + gt( 57)
                    + gt( 61) + gt( 62)
                    + gt( 71) + gt( 72)
                    + gt( 81) + gt( 82) + gt( 83) + gt( 84)
                                                            + gt(115) + gt(116) + gt(117)                                       
                    + gt(131) + gt(132)
                    + gt(141) + gt(142)
                    + gt(151) + gt(152) + gt(153) + gt(154)
                                        + gt(163) + gt(164);

    ose_formule.d_resultat.service_du := CASE
      WHEN ose_formule.d_intervenant.depassement_service_du_sans_hc = 1 OR ose_formule.d_intervenant.heures_decharge < 0
      THEN GREATEST(resultat_total, ose_formule.d_intervenant.heures_service_statutaire + ose_formule.d_intervenant.heures_service_modifie)
      ELSE ose_formule.d_intervenant.heures_service_statutaire + ose_formule.d_intervenant.heures_service_modifie
    END;
    ose_formule.d_resultat.solde                    := resultat_total - ose_formule.d_resultat.service_du;
    IF ose_formule.d_resultat.solde >= 0 THEN
      ose_formule.d_resultat.sous_service           := 0;
      ose_formule.d_resultat.heures_compl           := ose_formule.d_resultat.solde;
    ELSE
      ose_formule.d_resultat.sous_service           := ose_formule.d_resultat.solde * -1;
      ose_formule.d_resultat.heures_compl           := 0;
    END IF;

     -- r√©partition des r√©sultats par volumes horaires
    current_id := ose_formule.d_volume_horaire.FIRST;
    LOOP EXIT WHEN current_id IS NULL;
      ose_formule.d_resultat.volume_horaire(current_id).service_fi               := gv( 61) + gv( 62);
      ose_formule.d_resultat.volume_horaire(current_id).service_fa               := gv( 71) + gv( 72);
      ose_formule.d_resultat.volume_horaire(current_id).service_fc               := gv( 81) + gv( 82) + gv( 83) + gv( 84);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fi          := gv(131) + gv(132);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fa          := gv(141) + gv(142);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fc          := gv(151) + gv(152) + gv(153) + gv(154);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fc_majorees :=                     gv(163) + gv(164);
      current_id := ose_formule.d_volume_horaire.NEXT(current_id); 
    END LOOP;

    -- r√©partition des r√©sultats par volumes horaires r√©f√©rentiel
    current_id := ose_formule.d_volume_horaire_ref.FIRST;
    LOOP EXIT WHEN current_id IS NULL;
      ose_formule.d_resultat.volume_horaire_ref(current_id).service_referentiel      := gv(55) + gv(56) + gv(57);
      ose_formule.d_resultat.volume_horaire_ref(current_id).heures_compl_referentiel := gv(115) + gv(116) + gv(117);
      current_id := ose_formule.d_volume_horaire_ref.NEXT(current_id); 
    END LOOP;

  END;














  PROCEDURE CALCUL_RESULTAT_V3( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC ) IS
    current_tableau           PLS_INTEGER;
    id                        PLS_INTEGER;
    val                       FLOAT;
    TYPE t_liste_tableaux   IS VARRAY (100) OF PLS_INTEGER;
    liste_tableaux            t_liste_tableaux;
    resultat_total            FLOAT;
    res                       FLOAT;
    vh                        ose_formule.t_volume_horaire;
    vhr                       ose_formule.t_volume_horaire_ref;
  BEGIN
    
    -- si l'ann√©e est ant√©rieure √† 2016/2017 alors on utilise la V2!!
    IF ose_formule.d_intervenant.annee_id < 2016 THEN
      CALCUL_RESULTAT_V2( INTERVENANT_ID, TYPE_VOLUME_HORAIRE_ID, ETAT_VOLUME_HORAIRE_ID );
      RETURN;
    END IF;
  
    V_INIT;

    ose_formule.d_resultat.service_du := CASE
      WHEN ose_formule.d_intervenant.depassement_service_du_sans_hc = 1 -- HC trait√©es comme du service
        OR ose_formule.d_intervenant.heures_decharge < 0 -- s'il y a une d√©charge => aucune HC     
        
      THEN 9999 
      ELSE ose_formule.d_intervenant.heures_service_statutaire + ose_formule.d_intervenant.heures_service_modifie
    END;

    liste_tableaux := t_liste_tableaux(
       11,  12,  13,  14,  15,  16,  17,
       21,  22,  23,  24,  25,  26,  27,
       31,  32,  33,  34,  35,  36,  37,
       41,  42,  43,  44,  45,  46,  47,
       51,  52,  53,  54,  55,  56,  57,
       61,  62,
       71,  72,
       81,  82,  83,  84,       
       91,  92,  93,  94,  95,  96,  97,
      101, 102, 103, 104, 105, 106, 107,
      111, 112, 113, 114, 115, 116, 117,
                123, 124,
      131, 132,
      141, 142,
      151, 152, 153, 154,
                163, 164
    );

    FOR i IN liste_tableaux.FIRST .. liste_tableaux.LAST
    LOOP
      current_tableau := liste_tableaux(i);

      IF current_tableau IN ( -- calcul pour les volumes horaires des services
         11,  12,  13,  14,
         21,  22,  23,  24,
         41,  42,  43,  44,
         51,  52,  53,  54,
         61,  62,
         71,  72,
         81,  82,  83,  84,
         91,  92,  93,  94,
        101, 102, 103, 104,
        111, 112, 113, 114,
                  123, 124,
        131, 132,
        141, 142,
        151, 152, 153, 154,
                  163, 164
      ) THEN
      
        current_id := ose_formule.d_volume_horaire.FIRST;
        LOOP EXIT WHEN current_id IS NULL;
          vh := ose_formule.d_volume_horaire(current_id);
          res := CASE current_tableau
            WHEN  11 THEN  C3_11 (vh) WHEN  12 THEN  C3_12 (vh) WHEN  13 THEN  C3_13 (vh) WHEN  14 THEN  C3_14 (vh)
            WHEN  21 THEN  C2_21 (vh) WHEN  22 THEN  C2_22 (vh) WHEN  23 THEN  C2_23 (vh) WHEN  24 THEN  C2_24 (vh)
            WHEN  41 THEN  C2_41 (vh) WHEN  42 THEN  C2_42 (vh) WHEN  43 THEN  C2_43 (vh) WHEN  44 THEN  C2_44 (vh)
            WHEN  51 THEN  C2_51 (vh) WHEN  52 THEN  C2_52 (vh) WHEN  53 THEN  C2_53 (vh) WHEN  54 THEN  C2_54 (vh)
            WHEN  61 THEN  C3_61 (vh) WHEN  62 THEN  C3_62 (vh)
            WHEN  71 THEN  C3_71 (vh) WHEN  72 THEN  C3_72 (vh)
                                                                WHEN  83 THEN  C3_83 (vh) WHEN  84 THEN  C3_84 (vh)
            WHEN  91 THEN  C2_91 (vh) WHEN  92 THEN  C2_92 (vh) WHEN  93 THEN  C2_93 (vh) WHEN  94 THEN  C2_94 (vh)
            WHEN 101 THEN C2_101 (vh) WHEN 102 THEN C2_102 (vh) WHEN 103 THEN C2_103 (vh) WHEN 104 THEN C2_104 (vh)
            WHEN 111 THEN C2_111 (vh) WHEN 112 THEN C2_112 (vh) WHEN 113 THEN C2_113 (vh) WHEN 114 THEN C2_114 (vh)
                                                                WHEN 123 THEN C3_123 (vh) WHEN 124 THEN C3_124 (vh)
            WHEN 131 THEN C3_131 (vh) WHEN 132 THEN C3_132 (vh)
            WHEN 141 THEN C3_141 (vh) WHEN 142 THEN C3_142 (vh)
                                                                WHEN 153 THEN C3_153 (vh) WHEN 154 THEN C3_154 (vh)
                                                                WHEN 163 THEN C3_163 (vh) WHEN 164 THEN C3_164 (vh)
          END;
          SV( current_tableau, current_id, res );
          current_id := ose_formule.d_volume_horaire.NEXT(current_id);
        END LOOP;
      
      ELSIF current_tableau IN ( -- calcul des services restants dus
        31, 32, 33, 34, 35, 36, 37
      ) THEN
      
        res := CASE current_tableau
          WHEN 31 THEN C2_31  WHEN 32 THEN C2_32  WHEN 33 THEN C2_33
          WHEN 34 THEN C2_34  WHEN 35 THEN C2_35  WHEN 36 THEN C2_36
          WHEN 37 THEN C2_37
        END;
        SV( current_tableau, res );
  
      ELSIF current_tableau IN ( -- tableaux de calcul des volumes horaires r√©f√©rentiels
         15,  16,  17,
         25,  26,  27,
         45,  46,  47,
         55,  56,  57,     
         95,  96,  97,
        105, 106, 107,
        115, 116, 117
      ) THEN  

        current_id := ose_formule.d_volume_horaire_ref.FIRST;
        LOOP EXIT WHEN current_id IS NULL;
          vhr := ose_formule.d_volume_horaire_ref(current_id);
          res := CASE current_tableau
            WHEN  15 THEN  C2_15 (vhr)  WHEN  16 THEN  C2_16 (vhr)  WHEN  17 THEN  C2_17 (vhr)
            WHEN  25 THEN  C2_25 (vhr)  WHEN  26 THEN  C2_26 (vhr)  WHEN  27 THEN  C2_27 (vhr)
            WHEN  45 THEN  C2_45 (vhr)  WHEN  46 THEN  C2_46 (vhr)  WHEN  47 THEN  C2_47 (vhr)
            WHEN  55 THEN  C2_55 (vhr)  WHEN  56 THEN  C2_56 (vhr)  WHEN  57 THEN  C2_57 (vhr)
            WHEN  95 THEN  C2_95 (vhr)  WHEN  96 THEN  C2_96 (vhr)  WHEN  97 THEN  C2_97 (vhr)
            WHEN 105 THEN C2_105 (vhr)  WHEN 106 THEN C2_106 (vhr)  WHEN 107 THEN C2_107 (vhr)
            WHEN 115 THEN C2_115 (vhr)  WHEN 116 THEN C2_116 (vhr)  WHEN 117 THEN C2_117 (vhr)
          END;
          SV(current_tableau, current_id, res);
          current_id := ose_formule.d_volume_horaire_ref.NEXT(current_id);
        END LOOP;

      END IF;
    END LOOP;

    resultat_total :=                                         gt( 55) + gt( 56) + gt( 57)
                    + gt( 61) + gt( 62)
                    + gt( 71) + gt( 72)
                    + gt( 83) + gt( 84)
                                                            + gt(115) + gt(116) + gt(117)                                       
                    + gt(131) + gt(132)
                    + gt(141) + gt(142)
                    + gt(153) + gt(154)
                                        + gt(163) + gt(164);

    ose_formule.d_resultat.service_du := CASE
      WHEN ose_formule.d_intervenant.depassement_service_du_sans_hc = 1 OR ose_formule.d_intervenant.heures_decharge < 0
      THEN GREATEST(resultat_total, ose_formule.d_intervenant.heures_service_statutaire + ose_formule.d_intervenant.heures_service_modifie)
      ELSE ose_formule.d_intervenant.heures_service_statutaire + ose_formule.d_intervenant.heures_service_modifie
    END;
    ose_formule.d_resultat.solde                    := resultat_total - ose_formule.d_resultat.service_du;
    IF ose_formule.d_resultat.solde >= 0 THEN
      ose_formule.d_resultat.sous_service           := 0;
      ose_formule.d_resultat.heures_compl           := ose_formule.d_resultat.solde;
    ELSE
      ose_formule.d_resultat.sous_service           := ose_formule.d_resultat.solde * -1;
      ose_formule.d_resultat.heures_compl           := 0;
    END IF;

     -- r√©partition des r√©sultats par volumes horaires
    current_id := ose_formule.d_volume_horaire.FIRST;
    LOOP EXIT WHEN current_id IS NULL;
      ose_formule.d_resultat.volume_horaire(current_id).service_fi               := gv( 61) + gv( 62);
      ose_formule.d_resultat.volume_horaire(current_id).service_fa               := gv( 71) + gv( 72);
      ose_formule.d_resultat.volume_horaire(current_id).service_fc               := gv( 83) + gv( 84);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fi          := gv(131) + gv(132);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fa          := gv(141) + gv(142);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fc          := gv(153) + gv(154);
      ose_formule.d_resultat.volume_horaire(current_id).heures_compl_fc_majorees := gv(163) + gv(164);
      current_id := ose_formule.d_volume_horaire.NEXT(current_id); 
    END LOOP;

    -- r√©partition des r√©sultats par volumes horaires r√©f√©rentiel
    current_id := ose_formule.d_volume_horaire_ref.FIRST;
    LOOP EXIT WHEN current_id IS NULL;
      ose_formule.d_resultat.volume_horaire_ref(current_id).service_referentiel      := gv(55) + gv(56) + gv(57);
      ose_formule.d_resultat.volume_horaire_ref(current_id).heures_compl_referentiel := gv(115) + gv(116) + gv(117);
      current_id := ose_formule.d_volume_horaire_ref.NEXT(current_id); 
    END LOOP;

  END;















  PROCEDURE PURGE_EM_NON_FC IS
  BEGIN
    FOR em IN (
      SELECT
        em.id
      FROM 
        ELEMENT_MODULATEUR em
        JOIN element_pedagogique ep ON ep.id = em.element_id AND 1 = ose_divers.comprise_entre(ep.histo_creation,ep.histo_destruction)
      WHERE
        1 = ose_divers.comprise_entre(em.histo_creation,em.histo_destruction)
        AND ep.taux_fc < 1
    ) LOOP
      UPDATE
        element_modulateur
      SET
        histo_destruction = SYSDATE,
        histo_destructeur_id = ose_parametre.get_ose_user 
      WHERE
        id = em.id
      ;
    END LOOP;
  END;

END UNICAEN_OSE_FORMULE;

/
--------------------------------------------------------
--  DDL for Package OSE_AGREMENT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_AGREMENT" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_AGREMENT';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_AGREMENT;

/
--------------------------------------------------------
--  DDL for Package OSE_CHARGENS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_CHARGENS" AS 
  ENABLE_TRIGGER_EFFECTIFS BOOLEAN DEFAULT TRUE;


  FUNCTION GET_SCENARIO RETURN NUMERIC;
  PROCEDURE SET_SCENARIO( SCENARIO NUMERIC );

  FUNCTION GET_NOEUD RETURN NUMERIC;
  PROCEDURE SET_NOEUD( NOEUD NUMERIC );

  
  FUNCTION GET_SCENARIO_NOEUD_ID(noeud_id NUMERIC, scenario_id NUMERIC) RETURN NUMERIC;

  FUNCTION CALC_COEF( choix_min NUMERIC, choix_max NUMERIC, poids NUMERIC, max_poids NUMERIC, total_poids NUMERIC, nb_choix NUMERIC ) RETURN FLOAT;

  PROCEDURE DEM_CALC_SUB_EFFECTIF( scenario_noeud_id NUMERIC, type_heures_id NUMERIC, etape_id NUMERIC, effectif FLOAT );
  PROCEDURE CALC_SUB_EFFECTIF_DEM;
  PROCEDURE CALC_SUB_EFFECTIF( scenario_noeud_id NUMERIC, type_heures_id NUMERIC, etape_id NUMERIC, effectif FLOAT );


  PROCEDURE DUPLIQUER( source_id NUMERIC, destination_id NUMERIC, utilisateur_id NUMERIC, structure_id NUMERIC, noeuds VARCHAR2 DEFAULT '', liens VARCHAR2 DEFAULT '' );

  PROCEDURE CONTROLE_SEUIL( ouverture NUMERIC, dedoublement NUMERIC );

  FUNCTION CREER_SCENARIO_NOEUD( scenario_id NUMERIC, noeud_id NUMERIC, assiduite FLOAT DEFAULT 1 ) RETURN NUMERIC;

  PROCEDURE SET_SCENARIO_NOEUD_EFFECTIF( scenario_noeud_id NUMERIC, type_heures_id NUMERIC, etape_id NUMERIC, effectif FLOAT );

END OSE_CHARGENS;

/
--------------------------------------------------------
--  DDL for Package OSE_CLOTURE_REALISE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_CLOTURE_REALISE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_CLOTURE_REALISE';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_CLOTURE_REALISE;

/
--------------------------------------------------------
--  DDL for Package OSE_CONTRAT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_CONTRAT" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_CONTRAT';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_CONTRAT;

/
--------------------------------------------------------
--  DDL for Package OSE_DIVERS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_DIVERS" AS 

  FUNCTION GET_MSG( code VARCHAR2 ) RETURN CLOB;

  FUNCTION GET_OSE_UTILISATEUR_ID RETURN NUMERIC;
  FUNCTION GET_OSE_SOURCE_ID RETURN NUMERIC;

  FUNCTION INTERVENANT_HAS_PRIVILEGE( intervenant_id NUMERIC, privilege_name VARCHAR2 ) RETURN NUMERIC;

  FUNCTION implode(i_query VARCHAR2, i_seperator VARCHAR2 DEFAULT ',') RETURN VARCHAR2;

  FUNCTION intervenant_est_permanent( INTERVENANT_ID NUMERIC ) RETURN NUMERIC;

  FUNCTION intervenant_est_non_autorise( INTERVENANT_ID NUMERIC ) RETURN NUMERIC;

  FUNCTION intervenant_peut_saisir_serv( INTERVENANT_ID NUMERIC ) RETURN NUMERIC;

  PROCEDURE intervenant_horodatage_service( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, REFERENTIEL NUMERIC, HISTO_MODIFICATEUR_ID NUMERIC, HISTO_MODIFICATION DATE );

  FUNCTION NIVEAU_FORMATION_ID_CALC( gtf_id NUMERIC, gtf_pertinence_niveau NUMERIC, niveau NUMERIC DEFAULT NULL ) RETURN NUMERIC;

  FUNCTION STRUCTURE_DANS_STRUCTURE( structure_testee NUMERIC, structure_cible NUMERIC ) RETURN NUMERIC;

  FUNCTION STR_REDUCE( str CLOB ) RETURN CLOB;
  
  FUNCTION STR_FIND( haystack CLOB, needle VARCHAR2 ) RETURN NUMERIC;
  
  FUNCTION LIKED( haystack CLOB, needle CLOB ) RETURN NUMERIC;

  FUNCTION COMPRISE_ENTRE( date_debut DATE, date_fin DATE, date_obs DATE DEFAULT NULL, inclusif NUMERIC DEFAULT 0 ) RETURN NUMERIC;

  PROCEDURE DO_NOTHING;

  FUNCTION VOLUME_HORAIRE_VALIDE( volume_horaire_id NUMERIC ) RETURN NUMERIC;

  FUNCTION CALCUL_TAUX_FI( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT;
  
  FUNCTION CALCUL_TAUX_FC( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT;
  
  FUNCTION CALCUL_TAUX_FA( eff_fi FLOAT, eff_fc FLOAT, eff_fa FLOAT, fi NUMERIC, fc NUMERIC, fa NUMERIC, arrondi NUMERIC DEFAULT 15 ) RETURN FLOAT;

  FUNCTION STRUCTURE_UNIV_GET_ID RETURN NUMERIC;

  FUNCTION ANNEE_UNIVERSITAIRE( date_ref DATE DEFAULT SYSDATE, mois_deb_au NUMERIC DEFAULT 9, jour_deb_au NUMERIC DEFAULT 1 ) RETURN NUMERIC;

  PROCEDURE SYNC_LOG( msg CLOB );

  FUNCTION FORMATTED_RIB (bic VARCHAR2, iban VARCHAR2) RETURN VARCHAR2;
  
  FUNCTION FORMATTED_ADRESSE(
    no_voie                VARCHAR2,
    nom_voie               VARCHAR2,
    batiment               VARCHAR2,
    mention_complementaire VARCHAR2,
    localite               VARCHAR2,
    code_postal            VARCHAR2,
    ville                  VARCHAR2,
    pays_libelle           VARCHAR2)
  RETURN VARCHAR2;
  
  FUNCTION GET_TRIGGER_BODY( TRIGGER_NAME VARCHAR2 ) RETURN VARCHAR2;
END OSE_DIVERS;

/
--------------------------------------------------------
--  DDL for Package OSE_DOSSIER
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_DOSSIER" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_DOSSIER';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_DOSSIER;

/
--------------------------------------------------------
--  DDL for Package OSE_EVENT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_EVENT" AS 

  FUNCTION GET_ACTIF RETURN BOOLEAN;
  PROCEDURE SET_ACTIF( ACTIF BOOLEAN );

  PROCEDURE FORCE_CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE FORCE_CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE CALCULER( PACKAGE_SUJET VARCHAR2, INTERVENANT_ID NUMERIC,
    WITH_DEPS BOOLEAN DEFAULT FALSE, WITH_SUCS BOOLEAN DEFAULT TRUE  );
    
  PROCEDURE CALCULER_TOUT( PACKAGE_SUJET VARCHAR2, ANNEE_ID NUMERIC DEFAULT NULL, 
    WITH_DEPS BOOLEAN DEFAULT FALSE, WITH_SUCS BOOLEAN DEFAULT TRUE  );
    
  PROCEDURE DEMANDE_CALCUL( PACKAGE_SUJET VARCHAR2, INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_DEMANDES( PACKAGE_SUJET VARCHAR2 DEFAULT NULL );

  PROCEDURE ON_BEFORE_FORMULE_RES_DELETE( INTERVENANT_ID NUMERIC );

END OSE_EVENT;

/
--------------------------------------------------------
--  DDL for Package OSE_FORMULE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_FORMULE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_FORMULE';

  TYPE t_intervenant IS RECORD (
    structure_id                   NUMERIC,
    annee_id                       NUMERIC,
    heures_decharge                FLOAT DEFAULT 0,
    heures_service_statutaire      FLOAT DEFAULT 0,
    heures_service_modifie         FLOAT DEFAULT 0,
    depassement_service_du_sans_hc FLOAT DEFAULT 0
  );
  
  TYPE t_type_etat_vh IS RECORD (
    type_volume_horaire_id    NUMERIC,
    etat_volume_horaire_id    NUMERIC
  );
  TYPE t_lst_type_etat_vh   IS TABLE OF t_type_etat_vh INDEX BY PLS_INTEGER;
  
  TYPE t_service_ref IS RECORD (
    id                        NUMERIC,
    structure_id              NUMERIC
  );
  TYPE t_lst_service_ref      IS TABLE OF t_service_ref INDEX BY PLS_INTEGER;
  
  TYPE t_service IS RECORD (
    id                        NUMERIC,
    taux_fi                   FLOAT   DEFAULT 1,
    taux_fa                   FLOAT   DEFAULT 0,
    taux_fc                   FLOAT   DEFAULT 0,
    ponderation_service_du    FLOAT   DEFAULT 1,
    ponderation_service_compl FLOAT   DEFAULT 1,
    structure_aff_id          NUMERIC,
    structure_ens_id          NUMERIC
  );
  TYPE t_lst_service          IS TABLE OF t_service INDEX BY PLS_INTEGER;
  
  TYPE t_volume_horaire_ref IS RECORD (
    id                        NUMERIC,
    service_referentiel_id    NUMERIC,
    type_volume_horaire_id    NUMERIC,
    etat_volume_horaire_id    NUMERIC,
    etat_volume_horaire_ordre NUMERIC,
    heures                    FLOAT   DEFAULT 0
  );
  TYPE t_lst_volume_horaire_ref   IS TABLE OF t_volume_horaire_ref INDEX BY PLS_INTEGER;
  
  TYPE t_volume_horaire IS RECORD (
    id                        NUMERIC,
    service_id                NUMERIC,
    type_volume_horaire_id    NUMERIC,
    etat_volume_horaire_id    NUMERIC,
    etat_volume_horaire_ordre NUMERIC,
    heures                    FLOAT   DEFAULT 0,
    taux_service_du           FLOAT   DEFAULT 1,
    taux_service_compl        FLOAT   DEFAULT 1
  );
  TYPE t_lst_volume_horaire   IS TABLE OF t_volume_horaire INDEX BY PLS_INTEGER;



  TYPE t_resultat_hetd IS RECORD (
    service_fi                FLOAT DEFAULT 0,
    service_fa                FLOAT DEFAULT 0,
    service_fc                FLOAT DEFAULT 0,
    heures_compl_fi           FLOAT DEFAULT 0,
    heures_compl_fa           FLOAT DEFAULT 0,
    heures_compl_fc           FLOAT DEFAULT 0,
    heures_compl_fc_majorees  FLOAT DEFAULT 0
  );
  TYPE t_lst_resultat_hetd   IS TABLE OF t_resultat_hetd INDEX BY PLS_INTEGER;

  TYPE t_resultat_hetd_ref IS RECORD (
    service_referentiel       FLOAT DEFAULT 0,
    heures_compl_referentiel  FLOAT DEFAULT 0
  );
  TYPE t_lst_resultat_hetd_ref   IS TABLE OF t_resultat_hetd_ref INDEX BY PLS_INTEGER;

  TYPE t_resultat IS RECORD (
    intervenant_id            NUMERIC,
    type_volume_horaire_id    NUMERIC,
    etat_volume_horaire_id    NUMERIC,
    service_du                FLOAT DEFAULT 0,
    solde                     FLOAT DEFAULT 0,
    sous_service              FLOAT DEFAULT 0,
    heures_compl              FLOAT DEFAULT 0,
    volume_horaire            t_lst_resultat_hetd,
    volume_horaire_ref        t_lst_resultat_hetd_ref
  );

  d_intervenant         t_intervenant;
  d_type_etat_vh        t_lst_type_etat_vh;
  d_service_ref         t_lst_service_ref;
  d_service             t_lst_service;
  d_volume_horaire_ref  t_lst_volume_horaire_ref;
  d_volume_horaire      t_lst_volume_horaire;
  d_resultat            t_resultat;

  FUNCTION  GET_DATE_OBS RETURN DATE;
  FUNCTION  SET_DATE_OBS( DATE_OBS DATE DEFAULT NULL ) RETURN DATE;

  PROCEDURE SET_DEBUG_LEVEL( DEBUG_LEVEL NUMERIC );
  FUNCTION GET_DEBUG_LEVEL RETURN NUMERIC;

  FUNCTION GET_TAUX_HORAIRE_HETD( DATE_OBS DATE DEFAULT NULL ) RETURN FLOAT;

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );        -- mise √† jour de TOUTES les donn√©es ! ! ! !
  
  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_FORMULE;

/
--------------------------------------------------------
--  DDL for Package OSE_HISTO
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_HISTO" AS 

  FUNCTION FILTRE( histo_debut NUMERIC, histo_fin NUMERIC ) RETURN NUMERIC;

END OSE_HISTO;

/
--------------------------------------------------------
--  DDL for Package OSE_IMPORT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_IMPORT" IS

  PROCEDURE REFRESH_MVS;
  PROCEDURE SYNC_TABLES;
  PROCEDURE SYNCHRONISATION;

END ose_import;

/
--------------------------------------------------------
--  DDL for Package OSE_PAIEMENT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_PAIEMENT" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_PAIEMENT';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE CHECK_BAD_PAIEMENTS( FORMULE_RES_SERVICE_ID NUMERIC DEFAULT NULL, FORMULE_RES_SERVICE_REF_ID NUMERIC DEFAULT NULL );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_PAIEMENT;

/
--------------------------------------------------------
--  DDL for Package OSE_PARAMETRE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_PARAMETRE" AS 

  function get_etablissement return Numeric;
  function get_annee return Numeric;
  function get_annee_import return Numeric;
  function get_ose_user return Numeric;
  function get_drh_structure_id return Numeric;
  function get_date_fin_saisie_permanents RETURN DATE;
  function get_ddeb_saisie_serv_real RETURN DATE;
  function get_dfin_saisie_serv_real RETURN DATE;
  function get_formule_package_name RETURN VARCHAR2;
  function get_formule_function_name RETURN VARCHAR2;

END OSE_PARAMETRE;

/
--------------------------------------------------------
--  DDL for Package OSE_PIECE_JOINTE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_PIECE_JOINTE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_PIECE_JOINTE';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_PIECE_JOINTE;

/
--------------------------------------------------------
--  DDL for Package OSE_PIECE_JOINTE_DEMANDE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_PIECE_JOINTE_DEMANDE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_PIECE_JOINTE_DEMANDE';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_PIECE_JOINTE_DEMANDE;

/
--------------------------------------------------------
--  DDL for Package OSE_PIECE_JOINTE_FOURNIE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_PIECE_JOINTE_FOURNIE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_PIECE_JOINTE_FOURNIE';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_PIECE_JOINTE_FOURNIE;

/
--------------------------------------------------------
--  DDL for Package OSE_SERVICE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_SERVICE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_SERVICE';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE controle_plafond_fc_maj( intervenant_id NUMERIC, type_volume_horaire_id NUMERIC );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_SERVICE;

/
--------------------------------------------------------
--  DDL for Package OSE_SERVICE_REFERENTIEL
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_SERVICE_REFERENTIEL" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_SERVICE_REFERENTIEL';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_SERVICE_REFERENTIEL;

/
--------------------------------------------------------
--  DDL for Package OSE_SERVICE_SAISIE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_SERVICE_SAISIE" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_SERVICE_SAISIE';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_SERVICE_SAISIE;

/
--------------------------------------------------------
--  DDL for Package OSE_TEST
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_TEST" AS 

  DEBUG_ENABLED BOOLEAN DEFAULT FALSE;

  -- SET SERVEROUTPUT ON

  PROCEDURE SHOW_SUCCES;

  PROCEDURE HIDE_SUCCES;

  PROCEDURE ECHO( MSG CLOB );

  PROCEDURE INIT;

  PROCEDURE SHOW_STATS;

  PROCEDURE DEBUT( TEST_NAME CLOB );
  
  PROCEDURE FIN;

  PROCEDURE ASSERT( condition BOOLEAN, MSG CLOB );
  
  PROCEDURE DELETE_TEST_DATA;

  FUNCTION GET_USER RETURN NUMERIC;

  FUNCTION GET_SOURCE RETURN NUMERIC;


  FUNCTION GET_CIVILITE( libelle_court VARCHAR2 DEFAULT NULL ) RETURN civilite%rowtype;

  FUNCTION GET_TYPE_INTERVENANT( code VARCHAR2 DEFAULT NULL ) RETURN type_intervenant%rowtype;

  FUNCTION GET_TYPE_INTERVENANT_BY_ID( id NUMERIC ) RETURN type_intervenant%rowtype;

  FUNCTION GET_STATUT_INTERVENANT( source_code VARCHAR2 DEFAULT NULL ) RETURN statut_intervenant%rowtype;
  
  FUNCTION GET_STATUT_INTERVENANT_BY_ID( id NUMERIC ) RETURN statut_intervenant%rowtype;

  FUNCTION GET_TYPE_STRUCTURE( code VARCHAR2 DEFAULT NULL ) RETURN type_structure%rowtype;

  FUNCTION GET_STRUCTURE( source_code VARCHAR2 DEFAULT NULL ) RETURN structure%rowtype;
  
  FUNCTION GET_STRUCTURE_BY_ID( id NUMERIC ) RETURN structure%rowtype;
  
  FUNCTION GET_STRUCTURE_ENS_BY_NIVEAU( niveau NUMERIC ) RETURN structure%rowtype;

  FUNCTION GET_STRUCTURE_UNIV RETURN "STRUCTURE"%rowtype;

  FUNCTION ADD_STRUCTURE(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    parente_id    NUMERIC,
    type_id       NUMERIC,
    source_code   VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_INTERVENANT( source_code VARCHAR2 DEFAULT NULL ) RETURN intervenant%rowtype;

  FUNCTION GET_INTERVENANT_BY_ID( id NUMERIC DEFAULT NULL ) RETURN intervenant%rowtype;

  FUNCTION GET_INTERVENANT_BY_STATUT( statut_id NUMERIC ) RETURN intervenant%rowtype;

  FUNCTION ADD_INTERVENANT(
    civilite_id     NUMERIC,
    nom_usuel       VARCHAR2,
    prenom          VARCHAR2,
    date_naissance  DATE,
    email           VARCHAR2,
    statut_id       NUMERIC,
    structure_id    NUMERIC,
    source_code     VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_GROUPE_TYPE_FORMATION( source_code VARCHAR2 DEFAULT NULL ) RETURN groupe_type_formation%rowtype;
  
  FUNCTION ADD_GROUPE_TYPE_FORMATION(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    source_code   VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_TYPE_FORMATION( source_code VARCHAR2 ) RETURN type_formation%rowtype;
  
  FUNCTION ADD_TYPE_FORMATION(
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    groupe_id     NUMERIC,
    source_code   VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_ETAPE( source_code VARCHAR2 DEFAULT NULL ) RETURN etape%rowtype;
  
  FUNCTION ADD_ETAPE(
    libelle           VARCHAR2,
    type_formation_id NUMERIC,
    niveau            NUMERIC,
    structure_id      NUMERIC,
    source_code       VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_PERIODE( code VARCHAR2 DEFAULT NULL ) RETURN periode%rowtype;

  FUNCTION GET_ELEMENT_PEDAGOGIQUE( source_code VARCHAR2 DEFAULT NULL ) RETURN element_pedagogique%rowtype;
  
  FUNCTION GET_ELEMENT_PEDAGOGIQUE_BY_ID( ID NUMERIC ) RETURN element_pedagogique%rowtype;
  
  FUNCTION ADD_ELEMENT_PEDAGOGIQUE(
    libelle       VARCHAR2,
    etape_id      NUMERIC,
    structure_id  NUMERIC,
    periode_id    NUMERIC,
    taux_foad     FLOAT,
    taux_fi       FLOAT,
    taux_fc       FLOAT,
    taux_fa       FLOAT,
    source_code   VARCHAR2
  ) RETURN NUMERIC;

  FUNCTION GET_TYPE_MODULATEUR( code VARCHAR2 DEFAULT NULL ) RETURN type_modulateur%rowtype;
  
  FUNCTION ADD_TYPE_MODULATEUR(
    code        VARCHAR2,
    libelle     VARCHAR2,
    publique    NUMERIC,
    obligatoire NUMERIC
  ) RETURN NUMERIC;

  FUNCTION GET_MODULATEUR( code VARCHAR2 DEFAULT NULL ) RETURN modulateur%rowtype;
  
  FUNCTION ADD_MODULATEUR(
    code                      VARCHAR2,
    libelle                   VARCHAR2,
    type_modulateur_id        NUMERIC,
    ponderation_service_du    FLOAT,
    ponderation_service_compl FLOAT
  ) RETURN NUMERIC;

  FUNCTION ADD_ELEMENT_MODULATEUR(
    element_id    NUMERIC,
    modulateur_id NUMERIC
  ) RETURN NUMERIC;

  FUNCTION GET_FONCTION_REFERENTIEL( code VARCHAR2 DEFAULT NULL ) RETURN fonction_referentiel%rowtype;
  
  FUNCTION ADD_FONCTION_REFERENTIEL(
    code          VARCHAR2,
    libelle_long  VARCHAR2,
    libelle_court VARCHAR2,
    plafond       FLOAT
  ) RETURN NUMERIC;
  
  FUNCTION ADD_SERVICE_REFERENTIEL(
    fonction_id     NUMERIC,
    intervenant_id  NUMERIC,
    structure_id    NUMERIC
  ) RETURN NUMERIC;
  
  FUNCTION ADD_MODIFICATION_SERVICE_DU(
    intervenant_id  NUMERIC,
    heures          FLOAT,
    motif_id        NUMERIC,
    commentaires    CLOB DEFAULT NULL
  ) RETURN NUMERIC;

  FUNCTION GET_MOTIF_MODIFICATION_SERVICE( code VARCHAR2 DEFAULT NULL, multiplicateur FLOAT DEFAULT NULL ) RETURN motif_modification_service%rowtype;

  FUNCTION GET_ETABLISSEMENT( source_code VARCHAR2 DEFAULT NULL ) RETURN etablissement%rowtype;
  
  FUNCTION GET_SERVICE_BY_ID( id NUMERIC ) RETURN service%rowtype;

  FUNCTION ADD_SERVICE(
    intervenant_id          NUMERIC,
    element_pedagogique_id  NUMERIC,
    etablissement_id        NUMERIC DEFAULT NULL
  ) RETURN NUMERIC;

  FUNCTION GET_ETAT_VOLUME_HORAIRE( code VARCHAR2 DEFAULT NULL ) RETURN etat_volume_horaire%rowtype;
  
  FUNCTION GET_TYPE_VOLUME_HORAIRE( code VARCHAR2 DEFAULT NULL ) RETURN type_volume_horaire%rowtype;
  
  FUNCTION GET_TYPE_INTERVENTION( code VARCHAR2 DEFAULT NULL ) RETURN type_intervention%rowtype;

  FUNCTION GET_TYPE_INTERVENTION_BY_ID( id NUMERIC ) RETURN type_intervention%rowtype;

  FUNCTION GET_TYPE_INTERVENTION_BY_ELEMT( ELEMENT_ID NUMERIC ) RETURN type_intervention%rowtype;

  FUNCTION GET_MOTIF_NON_PAIEMENT( code VARCHAR2 DEFAULT NULL ) RETURN motif_non_paiement%rowtype;
  
  FUNCTION GET_VOLUME_HORAIRE( id NUMERIC DEFAULT NULL ) RETURN volume_horaire%rowtype;
  
  FUNCTION ADD_VOLUME_HORAIRE(
    type_volume_horaire_id  NUMERIC,
    service_id              NUMERIC,
    periode_id              NUMERIC,
    type_intervention_id    NUMERIC,
    heures                  FLOAT,
    motif_non_paiement_id   NUMERIC DEFAULT NULL
  ) RETURN NUMERIC;

  FUNCTION ADD_VALIDATION_VOLUME_HORAIRE(
    structure_id      NUMERIC DEFAULT NULL,
    intervenant_id    NUMERIC DEFAULT NULL,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL
  ) RETURN NUMERIC;

  PROCEDURE DEL_VALIDATION_VOLUME_HORAIRE(
    structure_id      NUMERIC DEFAULT NULL,
    intervenant_id    NUMERIC DEFAULT NULL,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL,
    validation_id     NUMERIC DEFAULT NULL
  );

  FUNCTION GET_CONTRAT_BY_ID( ID NUMERIC ) RETURN contrat%rowtype;

  FUNCTION GET_WF_ETAPE_BY_ID( ID NUMERIC ) RETURN wf_etape%rowtype;

  FUNCTION ADD_CONTRAT(
    structure_id      NUMERIC DEFAULT NULL,
    intervenant_id    NUMERIC DEFAULT NULL,
    volume_horaire_id NUMERIC DEFAULT NULL,
    service_id        NUMERIC DEFAULT NULL    
  ) RETURN NUMERIC;
  
  FUNCTION SIGNATURE_CONTRAT( contrat_id NUMERIC ) RETURN NUMERIC;
  
  FUNCTION ADD_CONTRAT_VALIDATION( contrat_id NUMERIC ) RETURN NUMERIC;

  FUNCTION DEL_CONTRAT_VALIDATION( contrat_id NUMERIC ) RETURN NUMERIC;

  FUNCTION GET_TYPE_VALIDATION( code VARCHAR2 DEFAULT NULL ) RETURN type_validation%rowtype;
END OSE_TEST;

/
--------------------------------------------------------
--  DDL for Package OSE_VALIDATION
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_VALIDATION" AS 

  FUNCTION can_devalider ( v validation%rowtype ) RETURN varchar2;

END OSE_VALIDATION;

/
--------------------------------------------------------
--  DDL for Package OSE_VALIDATION_ENSEIGNEMENT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_VALIDATION_ENSEIGNEMENT" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_VALIDATION_ENSEIGNEMENT';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_VALIDATION_ENSEIGNEMENT;

/
--------------------------------------------------------
--  DDL for Package OSE_VALIDATION_REFERENTIEL
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_VALIDATION_REFERENTIEL" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_VALIDATION_REFERENTIEL';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_VALIDATION_REFERENTIEL;

/
--------------------------------------------------------
--  DDL for Package OSE_WORKFLOW
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."OSE_WORKFLOW" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'OSE_WORKFLOW';

  PROCEDURE CALCULER( INTERVENANT_ID NUMERIC );
  PROCEDURE CALCULER_TOUT( ANNEE_ID NUMERIC DEFAULT NULL );

  PROCEDURE DEP_CHECK( etape_suiv_id NUMERIC, etape_prec_id NUMERIC );

  PROCEDURE SET_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL);
  FUNCTION GET_INTERVENANT RETURN NUMERIC;
  FUNCTION MATCH_INTERVENANT(INTERVENANT_ID NUMERIC DEFAULT NULL) RETURN NUMERIC;
END OSE_WORKFLOW;

/
--------------------------------------------------------
--  DDL for Package PTBL_LIEN
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."PTBL_LIEN" AS 

  PACKAGE_SUJET VARCHAR2(80) DEFAULT 'PTBL_LIEN';

  PROCEDURE CALCULER( SUJET NUMERIC );
  PROCEDURE CALCULER_TOUT( COLLECTION NUMERIC DEFAULT NULL );

  PROCEDURE SET_SUJET(SUJET NUMERIC DEFAULT NULL);
  FUNCTION GET_SUJET RETURN NUMERIC;
  FUNCTION MATCH_SUJET(SUJET NUMERIC DEFAULT NULL) RETURN NUMERIC;
END PTBL_LIEN;

/
--------------------------------------------------------
--  DDL for Package UCBN_LDAP
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."UCBN_LDAP" AUTHID CURRENT_USER AS
  ldap_sess DBMS_LDAP.SESSION := NULL ; -- Ne met a NULL qu'une seule fois par session!!!!
  last_used NUMBER ;
  TYPE ARRAY_STR IS VARRAY(64) OF VARCHAR2(256 char);
  a_multi ARRAY_STR ;
  FUNCTION version RETURN VARCHAR2 ;
  FUNCTION get(filtre IN VARCHAR2, attribut IN VARCHAR2, v_multi IN VARCHAR2 DEFAULT 'N', a_multi OUT ARRAY_STR) RETURN VARCHAR2 ;
  FUNCTION uid2mail(ldap_uid IN VARCHAR2) RETURN VARCHAR2 ;
  FUNCTION hid2mail(harpege_uid IN NUMBER) RETURN VARCHAR2 ;
  FUNCTION etu2mail(code_etu IN NUMBER) RETURN VARCHAR2 ;
  FUNCTION uid2alias(ldap_uid IN VARCHAR2) RETURN VARCHAR2 ;
  FUNCTION hid2alias(harpege_uid IN NUMBER) RETURN VARCHAR2 ;
  FUNCTION uid2cn(ldap_uid IN VARCHAR2) RETURN VARCHAR2 ;
  FUNCTION uid2sn(ldap_uid IN VARCHAR2) RETURN VARCHAR2 ;
  FUNCTION uid2givenname(ldap_uid IN VARCHAR2) RETURN VARCHAR2 ;
  FUNCTION uid2gn(ldap_uid IN VARCHAR2) RETURN VARCHAR2 ; -- givenname + sn
  FUNCTION hidIsPrimaryTeacher(harpege_uid IN NUMBER) RETURN VARCHAR2 ;
  FUNCTION hidIsTeacher(harpege_uid IN NUMBER) RETURN VARCHAR2 ;
  FUNCTION ldap_connect RETURN NUMBER ;
  FUNCTION free RETURN NUMBER ;
END ucbn_ldap;

/
--------------------------------------------------------
--  DDL for Package UNICAEN_IMPORT
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."UNICAEN_IMPORT" AS 

  PROCEDURE set_current_user(p_current_user IN INTEGER);
  FUNCTION get_current_user return INTEGER;

  FUNCTION get_current_annee RETURN INTEGER;
  PROCEDURE set_current_annee (p_current_annee INTEGER);

  FUNCTION get_sql_criterion( table_name varchar2, sql_criterion VARCHAR2 ) RETURN CLOB;
  PROCEDURE SYNC_LOG( message CLOB, table_name VARCHAR2 DEFAULT NULL, source_code VARCHAR2 DEFAULT NULL );

  -- AUTOMATIC GENERATION --

  PROCEDURE MAJ_GROUPE_TYPE_FORMATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_TYPE_FORMATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_PERSONNEL(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ADRESSE_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_AFFECTATION_RECHERCHE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_CORPS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ADRESSE_INTERVENANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_CHEMIN_PEDAGOGIQUE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ETABLISSEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_CENTRE_COUT_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_STRUCTURE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_TYPE_INTERVENTION_EP(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_DEPARTEMENT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_PAYS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_GRADE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_AFFECTATION(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_TYPE_MODULATEUR_EP(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_INTERVENANT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ELEMENT_TAUX_REGIMES(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_EFFECTIFS(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ETAPE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_DOMAINE_FONCTIONNEL(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_CENTRE_COUT(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_NOEUD(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_LIEN(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');
  PROCEDURE MAJ_ELEMENT_PEDAGOGIQUE(SQL_CRITERION CLOB DEFAULT '', IGNORE_UPD_COLS CLOB DEFAULT '');

  -- END OF AUTOMATIC GENERATION --
END UNICAEN_IMPORT;

/
--------------------------------------------------------
--  DDL for Package UNICAEN_OSE_FORMULE
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "OSE"."UNICAEN_OSE_FORMULE" AS 

  PROCEDURE CALCUL_RESULTAT_V2( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC );
  
  PROCEDURE CALCUL_RESULTAT_V3( INTERVENANT_ID NUMERIC, TYPE_VOLUME_HORAIRE_ID NUMERIC, ETAT_VOLUME_HORAIRE_ID NUMERIC );

  PROCEDURE PURGE_EM_NON_FC;

END UNICAEN_OSE_FORMULE;

/
--------------------------------------------------------
--  DDL for Function SQUIRREL_GET_ERROR_OFFSET
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "OSE"."SQUIRREL_GET_ERROR_OFFSET" (query IN varchar2) return number authid current_user is      l_theCursor     integer default dbms_sql.open_cursor;      l_status        integer; begin          begin          dbms_sql.parse(  l_theCursor, query, dbms_sql.native );          exception                  when others then l_status := dbms_sql.last_error_position;          end;          dbms_sql.close_cursor( l_theCursor );          return l_status; end; 

/
--------------------------------------------------------
--  Constraints for Table VALIDATION_VOL_HORAIRE_REF
--------------------------------------------------------

  ALTER TABLE "OSE"."VALIDATION_VOL_HORAIRE_REF" ADD CONSTRAINT "VALIDATION_VOL_HORAIRE_REF_PK" PRIMARY KEY ("VALIDATION_ID", "VOLUME_HORAIRE_REF_ID") ENABLE;
  ALTER TABLE "OSE"."VALIDATION_VOL_HORAIRE_REF" MODIFY ("VOLUME_HORAIRE_REF_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VALIDATION_VOL_HORAIRE_REF" MODIFY ("VALIDATION_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STRUCTURE
--------------------------------------------------------

  ALTER TABLE "OSE"."STRUCTURE" MODIFY ("AFF_ADRESSE_CONTRAT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STRUCTURE" ADD CONSTRAINT "STRUCTURE_SOURCE_ID_UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."STRUCTURE" ADD CONSTRAINT "STRUCTURE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."STRUCTURE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STRUCTURE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STRUCTURE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STRUCTURE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STRUCTURE" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STRUCTURE" MODIFY ("NIVEAU" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STRUCTURE" MODIFY ("ETABLISSEMENT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STRUCTURE" MODIFY ("TYPE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STRUCTURE" MODIFY ("LIBELLE_COURT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STRUCTURE" MODIFY ("LIBELLE_LONG" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STRUCTURE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INTERVENANT
--------------------------------------------------------

  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_SOURCE__UN" UNIQUE ("SOURCE_CODE", "ANNEE_ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("STATUT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("DATE_NAISSANCE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("NOM_PATRONYMIQUE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("PRENOM" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("NOM_USUEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("CIVILITE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_SUPANN_UN" UNIQUE ("SUPANN_EMP_ID", "ANNEE_ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_CODE_UN" UNIQUE ("CODE", "ANNEE_ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" MODIFY ("PAYS_NAISSANCE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TMP_CALCUL
--------------------------------------------------------

  ALTER TABLE "OSE"."TMP_CALCUL" ADD CONSTRAINT "TMP_CALCUL_UK1" UNIQUE ("INTERVENANT_ID", "SUJET") ENABLE;
  ALTER TABLE "OSE"."TMP_CALCUL" MODIFY ("SUJET" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TMP_CALCUL" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TMP_CALCUL" ADD CONSTRAINT "TMP_CALCUL_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TMP_CALCUL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ELEMENT_MODULATEUR
--------------------------------------------------------

  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" ADD CONSTRAINT "ELEMENT_MODULATEUR__UN" UNIQUE ("ELEMENT_ID", "MODULATEUR_ID", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" ADD CONSTRAINT "ELEMENT_MODULATEUR_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" MODIFY ("MODULATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" MODIFY ("ELEMENT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_RESSOURCE
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_RESSOURCE" ADD CONSTRAINT "TYPE_RESSOURCE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_RESSOURCE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_RESSOURCE" MODIFY ("FC_MAJOREES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_RESSOURCE" MODIFY ("FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_RESSOURCE" MODIFY ("FA" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_RESSOURCE" MODIFY ("FI" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_RESSOURCE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_RESSOURCE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_RESSOURCE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_RESSOURCE" MODIFY ("ETABLISSEMENT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_RESSOURCE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_RESSOURCE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_RESSOURCE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_RESSOURCE" MODIFY ("REFERENTIEL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_INTERVENANT
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_INTERVENANT" ADD CONSTRAINT "TYPE_INTERVENANT_CODE_UN" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENANT" ADD CONSTRAINT "TYPE_INTERVENANT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENANT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENANT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENANT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENANT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENANT" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENANT" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENANT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STATUT_INTERVENANT
--------------------------------------------------------

  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("PEUT_SAISIR_SERVICE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("NON_AUTORISE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" ADD CONSTRAINT "STATUT_INTERVENANT__UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."STATUT_INTERVENANT" ADD CONSTRAINT "STATUT_INTERVENANT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("PEUT_CHOISIR_DANS_DOSSIER" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("ORDRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("TYPE_INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("FONCTION_E_C" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("MAXIMUM_HETD" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("PLAFOND_REFERENTIEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("DEPASSEMENT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("SERVICE_STATUTAIRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("TEM_BIATSS" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("TEM_ATV" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("PEUT_SAISIR_SERVICE_EXT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("PEUT_CLOTURER_SAISIE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("DEPASSEMENT_SERVICE_DU_SANS_HC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("PLAFOND_HC_REMU_FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("PLAFOND_HC_HORS_REMU_FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("PEUT_AVOIR_CONTRAT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("PEUT_SAISIR_MOTIF_NON_PAIEMENT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("PEUT_SAISIR_REFERENTIEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_INTERVENANT" MODIFY ("PEUT_SAISIR_DOSSIER" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PACKAGE_DEPS
--------------------------------------------------------

  ALTER TABLE "OSE"."PACKAGE_DEPS" ADD CONSTRAINT "PACKAGE_DEPS__UN" UNIQUE ("P1", "P2") ENABLE;
  ALTER TABLE "OSE"."PACKAGE_DEPS" ADD CONSTRAINT "PACKAGE_DEPS_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."PACKAGE_DEPS" MODIFY ("P1" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PACKAGE_DEPS" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CENTRE_COUT_STRUCTURE
--------------------------------------------------------

  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" ADD CONSTRAINT "CCS_CC_S__UN" UNIQUE ("CENTRE_COUT_ID", "STRUCTURE_ID", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" ADD CONSTRAINT "CCS_SOURCE_CODE_UN" UNIQUE ("SOURCE_CODE", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" ADD CONSTRAINT "CENTRE_COUT_STRUCTURE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" MODIFY ("CENTRE_COUT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_AGREMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_AGREMENT" ADD CONSTRAINT "TYPE_AGREMENT__UN" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."TYPE_AGREMENT" ADD CONSTRAINT "TYPE_AGREMENT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_AGREMENT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_AGREMENT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_AGREMENT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_AGREMENT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_AGREMENT" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_AGREMENT" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_AGREMENT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CENTRE_COUT_EP
--------------------------------------------------------

  ALTER TABLE "OSE"."CENTRE_COUT_EP" ADD CONSTRAINT "CENTRE_COUT_EP__UN" UNIQUE ("CENTRE_COUT_ID", "ELEMENT_PEDAGOGIQUE_ID", "TYPE_HEURES_ID", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_EP" ADD CONSTRAINT "CENTRE_COUT_EP_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_EP" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_EP" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_EP" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_EP" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_EP" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_EP" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_EP" MODIFY ("TYPE_HEURES_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_EP" MODIFY ("ELEMENT_PEDAGOGIQUE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_EP" MODIFY ("CENTRE_COUT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT_EP" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CIVILITE
--------------------------------------------------------

  ALTER TABLE "OSE"."CIVILITE" ADD CONSTRAINT "CIVILITE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."CIVILITE" ADD CONSTRAINT "CIVILITE_LIBELLE_COURT_UN" UNIQUE ("LIBELLE_COURT") ENABLE;
  ALTER TABLE "OSE"."CIVILITE" MODIFY ("SEXE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CIVILITE" MODIFY ("LIBELLE_LONG" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CIVILITE" MODIFY ("LIBELLE_COURT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CIVILITE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_AGREMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_AGREMENT" ADD CONSTRAINT "TBL_AGREMENT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_AGREMENT" MODIFY ("OBLIGATOIRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_AGREMENT" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_AGREMENT" MODIFY ("TYPE_AGREMENT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_AGREMENT" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_AGREMENT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_AGREMENT" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_AGREMENT" ADD CONSTRAINT "TBL_AGREMENT__UN" UNIQUE ("TYPE_AGREMENT_ID", "INTERVENANT_ID", "STRUCTURE_ID", "TO_DELETE") ENABLE;
--------------------------------------------------------
--  Constraints for Table MODIFICATION_SERVICE_DU
--------------------------------------------------------

  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" ADD CONSTRAINT "MODIFICATION_SERVICE_DU_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" MODIFY ("MOTIF_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" MODIFY ("HEURES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DISCIPLINE
--------------------------------------------------------

  ALTER TABLE "OSE"."DISCIPLINE" ADD CONSTRAINT "DISCIPLINE_SOURCE_UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."DISCIPLINE" ADD CONSTRAINT "DISCIPLINE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."DISCIPLINE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DISCIPLINE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DISCIPLINE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DISCIPLINE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DISCIPLINE" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DISCIPLINE" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DISCIPLINE" MODIFY ("LIBELLE_LONG" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DISCIPLINE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table FORMULE_RESULTAT_SERVICE_REF
--------------------------------------------------------

  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE_REF" ADD CONSTRAINT "FRSR_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE_REF" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE_REF" MODIFY ("TOTAL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE_REF" MODIFY ("HEURES_COMPL_REFERENTIEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE_REF" MODIFY ("SERVICE_REFERENTIEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE_REF" MODIFY ("SERVICE_REFERENTIEL_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE_REF" MODIFY ("FORMULE_RESULTAT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE_REF" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table STATUT_PRIVILEGE
--------------------------------------------------------

  ALTER TABLE "OSE"."STATUT_PRIVILEGE" ADD CONSTRAINT "STATUT_PRIVILEGE_PK" PRIMARY KEY ("STATUT_ID", "PRIVILEGE_ID") ENABLE;
  ALTER TABLE "OSE"."STATUT_PRIVILEGE" MODIFY ("PRIVILEGE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."STATUT_PRIVILEGE" MODIFY ("STATUT_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_PIECE_JOINTE_FOURNIE
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" ADD CONSTRAINT "TBL_PIECE_JOINTE_FOURNIE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" MODIFY ("TYPE_PIECE_JOINTE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" ADD CONSTRAINT "TBL_PIECE_JOINTE_FOURNIE__UN" UNIQUE ("TYPE_PIECE_JOINTE_ID", "INTERVENANT_ID", "VALIDATION_ID", "FICHIER_ID") ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" MODIFY ("PIECE_JOINTE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_VOLUME_HORAIRE
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_VOLUME_HORAIRE" ADD CONSTRAINT "TYPE_VOLUME_HORAIRE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_VOLUME_HORAIRE" MODIFY ("ORDRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_VOLUME_HORAIRE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_VOLUME_HORAIRE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_VOLUME_HORAIRE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_VOLUME_HORAIRE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_VOLUME_HORAIRE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_VOLUME_HORAIRE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_VOLUME_HORAIRE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CAMPAGNE_SAISIE
--------------------------------------------------------

  ALTER TABLE "OSE"."CAMPAGNE_SAISIE" ADD CONSTRAINT "CAMPAGNE_SAISIE__UN" UNIQUE ("ANNEE_ID", "TYPE_INTERVENANT_ID", "TYPE_VOLUME_HORAIRE_ID") ENABLE;
  ALTER TABLE "OSE"."CAMPAGNE_SAISIE" MODIFY ("MESSAGE_INTERVENANT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CAMPAGNE_SAISIE" ADD CONSTRAINT "CAMPAGNE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."CAMPAGNE_SAISIE" MODIFY ("TYPE_VOLUME_HORAIRE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CAMPAGNE_SAISIE" MODIFY ("TYPE_INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CAMPAGNE_SAISIE" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CAMPAGNE_SAISIE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CHEMIN_PEDAGOGIQUE
--------------------------------------------------------

  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" ADD CONSTRAINT "CHEMIN_PEDAGO_SRC_ID_UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" ADD CONSTRAINT "CHEMIN_PEDAGOGIQUE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" ADD CONSTRAINT "CHEMIN_PEDAGOGIQUE__UN" UNIQUE ("ELEMENT_PEDAGOGIQUE_ID", "ETAPE_ID") DISABLE;
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" MODIFY ("ORDRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" MODIFY ("ETAPE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" MODIFY ("ELEMENT_PEDAGOGIQUE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INDICATEUR
--------------------------------------------------------

  ALTER TABLE "OSE"."INDICATEUR" MODIFY ("TEM_NOT_STRUCTURE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDICATEUR" MODIFY ("ROUTE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDICATEUR" MODIFY ("TEM_DISTINCT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDICATEUR" ADD CONSTRAINT "INDICATEUR_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."INDICATEUR" MODIFY ("ENABLED" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDICATEUR" MODIFY ("ORDRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDICATEUR" MODIFY ("TYPE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDICATEUR" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDICATEUR" MODIFY ("LIBELLE_PLURIEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDICATEUR" MODIFY ("LIBELLE_SINGULIER" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDICATEUR" MODIFY ("NUMERO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ANNEE
--------------------------------------------------------

  ALTER TABLE "OSE"."ANNEE" ADD CONSTRAINT "ANNEE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."ANNEE" MODIFY ("ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ANNEE" MODIFY ("DATE_FIN" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ANNEE" MODIFY ("DATE_DEBUT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ANNEE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ANNEE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WF_DEP_BLOQUANTE
--------------------------------------------------------

  ALTER TABLE "OSE"."WF_DEP_BLOQUANTE" ADD CONSTRAINT "WF_DEPS_BLOQUANTES_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."WF_DEP_BLOQUANTE" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_DEP_BLOQUANTE" MODIFY ("TBL_WORKFLOW_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_DEP_BLOQUANTE" MODIFY ("WF_ETAPE_DEP_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_DEP_BLOQUANTE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table NOTIFICATION_INDICATEUR
--------------------------------------------------------

  ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" MODIFY ("IN_HOME" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" MODIFY ("DATE_ABONNEMENT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" ADD CONSTRAINT "NOTIFICATION_INDICATEUR__UN" UNIQUE ("INDICATEUR_ID", "AFFECTATION_ID") ENABLE;
  ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" ADD CONSTRAINT "NOTIF_INDICATEUR_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" MODIFY ("AFFECTATION_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" MODIFY ("INDICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_VALIDATION
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_VALIDATION" ADD CONSTRAINT "TYPE_VALIDATION_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_VALIDATION" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_VALIDATION" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_VALIDATION" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_VALIDATION" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_VALIDATION" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_VALIDATION" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SCENARIO_LIEN
--------------------------------------------------------

  ALTER TABLE "OSE"."SCENARIO_LIEN" ADD CONSTRAINT "SCENARIO_LIEN__UN" UNIQUE ("SCENARIO_ID", "LIEN_ID", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_LIEN" ADD CONSTRAINT "SCENARIO_LIEN_SRC_UN" UNIQUE ("SOURCE_CODE", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_LIEN" ADD CONSTRAINT "SCENARIO_LIEN_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_LIEN" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_LIEN" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_LIEN" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_LIEN" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_LIEN" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_LIEN" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_LIEN" MODIFY ("POIDS" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_LIEN" MODIFY ("ACTIF" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_LIEN" MODIFY ("LIEN_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_LIEN" MODIFY ("SCENARIO_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_LIEN" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SCENARIO_NOEUD_EFFECTIF
--------------------------------------------------------

  ALTER TABLE "OSE"."SCENARIO_NOEUD_EFFECTIF" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD_EFFECTIF" MODIFY ("ETAPE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD_EFFECTIF" ADD CONSTRAINT "SCENARIO_NOEUD_EFFECTIF_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_NOEUD_EFFECTIF" MODIFY ("TYPE_HEURES_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD_EFFECTIF" MODIFY ("SCENARIO_NOEUD_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VOLUME_HORAIRE_ENS
--------------------------------------------------------

  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" ADD CONSTRAINT "VOLUME_HORAIRE_ENS_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" MODIFY ("HEURES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" MODIFY ("TYPE_INTERVENTION_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" MODIFY ("ELEMENT_PEDAGOGIQUE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VOLUME_HORAIRE
--------------------------------------------------------

  ALTER TABLE "OSE"."VOLUME_HORAIRE" ADD CONSTRAINT "VOLUME_HORAIRE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE" MODIFY ("HEURES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE" MODIFY ("TYPE_INTERVENTION_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE" MODIFY ("PERIODE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE" MODIFY ("SERVICE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE" MODIFY ("TYPE_VOLUME_HORAIRE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE" MODIFY ("TEM_PLAFOND_FC_MAJ" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ADRESSE_INTERVENANT
--------------------------------------------------------

  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" ADD CONSTRAINT "ADRESSE_INTERVENANT_SOURCE_UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" ADD CONSTRAINT "ADRESSE_INTERVENANT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" ADD CONSTRAINT "ADRESSE_INTERVENANT__UN" UNIQUE ("INTERVENANT_ID") ENABLE;
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" MODIFY ("PAYS_LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" MODIFY ("PAYS_CODE_INSEE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ROLE
--------------------------------------------------------

  ALTER TABLE "OSE"."ROLE" ADD CONSTRAINT "ROLE_CODE_UN" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."ROLE" ADD CONSTRAINT "ROLE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."ROLE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ROLE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ROLE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ROLE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ROLE" MODIFY ("PEUT_CHANGER_STRUCTURE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ROLE" MODIFY ("PERIMETRE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ROLE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ROLE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ROLE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table AFFECTATION
--------------------------------------------------------

  ALTER TABLE "OSE"."AFFECTATION" ADD CONSTRAINT "AFFECTATION__UN" UNIQUE ("PERSONNEL_ID", "ROLE_ID", "STRUCTURE_ID", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."AFFECTATION" ADD CONSTRAINT "AFFECTATION_SOURCE_UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."AFFECTATION" ADD CONSTRAINT "AFFECTATION_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."AFFECTATION" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION" MODIFY ("ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION" MODIFY ("PERSONNEL_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_PIECE_JOINTE
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" ADD CONSTRAINT "TBL_PIECE_JOINTE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" MODIFY ("VALIDEE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" MODIFY ("FOURNIE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" MODIFY ("DEMANDEE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" MODIFY ("TYPE_PIECE_JOINTE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" ADD CONSTRAINT "TBL_PIECE_JOINTE__UN" UNIQUE ("TYPE_PIECE_JOINTE_ID", "INTERVENANT_ID", "TO_DELETE") ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" MODIFY ("HEURES_POUR_SEUIL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table GROUPE
--------------------------------------------------------

  ALTER TABLE "OSE"."GROUPE" ADD CONSTRAINT "GROUPE__UN" UNIQUE ("ELEMENT_PEDAGOGIQUE_ID", "HISTO_DESTRUCTEUR_ID", "TYPE_INTERVENTION_ID") ENABLE;
  ALTER TABLE "OSE"."GROUPE" ADD CONSTRAINT "GROUPE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."GROUPE" MODIFY ("HISTO_DESTRUCTEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE" MODIFY ("NOMBRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE" MODIFY ("TYPE_INTERVENTION_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE" MODIFY ("ELEMENT_PEDAGOGIQUE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VOLUME_HORAIRE_CHARGE
--------------------------------------------------------

  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" MODIFY ("GROUPES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" MODIFY ("TYPE_INTERVENTION_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" MODIFY ("ELEMENT_PEDAGOGIQUE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" MODIFY ("SCENARIO_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" ADD CONSTRAINT "VOLUME_HORAIRE_CHARGE__UN" UNIQUE ("ELEMENT_PEDAGOGIQUE_ID", "TYPE_INTERVENTION_ID", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" ADD CONSTRAINT "VHC_HISTO_UN" UNIQUE ("SOURCE_CODE", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" ADD CONSTRAINT "VOLUME_HORAIRE_CHARGE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PIECE_JOINTE
--------------------------------------------------------

  ALTER TABLE "OSE"."PIECE_JOINTE" ADD CONSTRAINT "PIECE_JOINTE__UN" UNIQUE ("TYPE_PIECE_JOINTE_ID", "INTERVENANT_ID", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."PIECE_JOINTE" ADD CONSTRAINT "PIECE_JOINTE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."PIECE_JOINTE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PIECE_JOINTE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PIECE_JOINTE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PIECE_JOINTE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PIECE_JOINTE" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PIECE_JOINTE" MODIFY ("TYPE_PIECE_JOINTE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PIECE_JOINTE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table UNICAEN_CORRESP_STRUCTURE_CC
--------------------------------------------------------

  ALTER TABLE "OSE"."UNICAEN_CORRESP_STRUCTURE_CC" ADD CONSTRAINT "UNICAEN_CORRESP_STR_CC_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."UNICAEN_CORRESP_STRUCTURE_CC" MODIFY ("CODE_HARPEGE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."UNICAEN_CORRESP_STRUCTURE_CC" MODIFY ("CODE_SIFAC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."UNICAEN_CORRESP_STRUCTURE_CC" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table FORMULE_RESULTAT_SERVICE
--------------------------------------------------------

  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" ADD CONSTRAINT "FORMULE_RESULTAT_SERVICE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" MODIFY ("TOTAL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" MODIFY ("HEURES_COMPL_FC_MAJOREES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" MODIFY ("HEURES_COMPL_FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" MODIFY ("HEURES_COMPL_FA" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" MODIFY ("HEURES_COMPL_FI" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" MODIFY ("SERVICE_FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" MODIFY ("SERVICE_FA" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" MODIFY ("SERVICE_FI" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" MODIFY ("SERVICE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" MODIFY ("FORMULE_RESULTAT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VALIDATION_VOL_HORAIRE
--------------------------------------------------------

  ALTER TABLE "OSE"."VALIDATION_VOL_HORAIRE" ADD CONSTRAINT "VALIDATION_VOL_HORAIRE_PK" PRIMARY KEY ("VALIDATION_ID", "VOLUME_HORAIRE_ID") ENABLE;
  ALTER TABLE "OSE"."VALIDATION_VOL_HORAIRE" MODIFY ("VOLUME_HORAIRE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VALIDATION_VOL_HORAIRE" MODIFY ("VALIDATION_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table HISTO_INTERVENANT_SERVICE
--------------------------------------------------------

  ALTER TABLE "OSE"."HISTO_INTERVENANT_SERVICE" ADD CONSTRAINT "HISTO_SERVICE_MODIFICATION_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."HISTO_INTERVENANT_SERVICE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."HISTO_INTERVENANT_SERVICE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."HISTO_INTERVENANT_SERVICE" MODIFY ("REFERENTIEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."HISTO_INTERVENANT_SERVICE" ADD CONSTRAINT "HISTO_INTERVENANT_SERVICE__UN" UNIQUE ("INTERVENANT_ID", "TYPE_VOLUME_HORAIRE_ID", "REFERENTIEL") ENABLE;
  ALTER TABLE "OSE"."HISTO_INTERVENANT_SERVICE" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."HISTO_INTERVENANT_SERVICE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DEPARTEMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."DEPARTEMENT" ADD CONSTRAINT "DEPARTEMENT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."DEPARTEMENT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DEPARTEMENT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DEPARTEMENT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DEPARTEMENT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DEPARTEMENT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DEPARTEMENT" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DEPARTEMENT" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MOTIF_MODIFICATION_SERVICE
--------------------------------------------------------

  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" ADD CONSTRAINT "MOTIF_MODIFICATION_SERVIC_UK1" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" ADD CONSTRAINT "MOTIF_MODIFICATION_SERVICE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" MODIFY ("DECHARGE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" MODIFY ("MULTIPLICATEUR" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_MODULATEUR
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_MODULATEUR" ADD CONSTRAINT "TYPE_MODULATEUR_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR" MODIFY ("SAISIE_PAR_ENSEIGNANT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR" MODIFY ("OBLIGATOIRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR" MODIFY ("PUBLIQUE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VALIDATION
--------------------------------------------------------

  ALTER TABLE "OSE"."VALIDATION" ADD CONSTRAINT "VALIDATION_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."VALIDATION" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VALIDATION" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VALIDATION" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VALIDATION" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VALIDATION" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VALIDATION" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VALIDATION" MODIFY ("TYPE_VALIDATION_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VALIDATION" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_DOSSIER
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_DOSSIER" ADD CONSTRAINT "TBL_DOSSIER_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_DOSSIER" MODIFY ("PEUT_SAISIR_DOSSIER" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_DOSSIER" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_DOSSIER" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_DOSSIER" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_DOSSIER" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_DOSSIER" ADD CONSTRAINT "TBL_DOSSIER__UN" UNIQUE ("INTERVENANT_ID", "TO_DELETE") ENABLE;
--------------------------------------------------------
--  Constraints for Table TYPE_CONTRAT
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_CONTRAT" ADD CONSTRAINT "TYPE_CONTRAT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_CONTRAT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_CONTRAT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_CONTRAT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_CONTRAT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_CONTRAT" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_CONTRAT" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_CONTRAT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ETABLISSEMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."ETABLISSEMENT" ADD CONSTRAINT "ETABLISSEMENT_SOURCE_ID_UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."ETABLISSEMENT" ADD CONSTRAINT "ETABLISSEMENT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."ETABLISSEMENT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETABLISSEMENT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETABLISSEMENT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETABLISSEMENT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETABLISSEMENT" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETABLISSEMENT" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETABLISSEMENT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SYNC_LOG
--------------------------------------------------------

  ALTER TABLE "OSE"."SYNC_LOG" ADD CONSTRAINT "SYNC_LOG_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."SYNC_LOG" MODIFY ("MESSAGE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SYNC_LOG" MODIFY ("DATE_SYNC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SYNC_LOG" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_WORKFLOW
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_WORKFLOW" MODIFY ("ETAPE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_WORKFLOW" MODIFY ("TYPE_INTERVENANT_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_WORKFLOW" MODIFY ("TYPE_INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_WORKFLOW" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_WORKFLOW" MODIFY ("OBJECTIF" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_WORKFLOW" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_WORKFLOW" MODIFY ("REALISATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_WORKFLOW" MODIFY ("ATTEIGNABLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_WORKFLOW" ADD CONSTRAINT "TBL_WORKFLOW_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_WORKFLOW" MODIFY ("ETAPE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_WORKFLOW" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_WORKFLOW" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MESSAGE
--------------------------------------------------------

  ALTER TABLE "OSE"."MESSAGE" ADD CONSTRAINT "MESSAGES__UN" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."MESSAGE" ADD CONSTRAINT "MESSAGES_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."MESSAGE" MODIFY ("TEXTE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MESSAGE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MESSAGE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DOSSIER
--------------------------------------------------------

  ALTER TABLE "OSE"."DOSSIER" MODIFY ("NUMERO_INSEE_EST_PROVISOIRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" ADD CONSTRAINT "DOSSIER_UK1" UNIQUE ("HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."DOSSIER" ADD CONSTRAINT "DOSSIER_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("RIB" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("PREMIER_RECRUTEMENT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("ADRESSE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("STATUT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("NUMERO_INSEE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("CIVILITE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("PRENOM" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("NOM_USUEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOSSIER" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table FICHIER
--------------------------------------------------------

  ALTER TABLE "OSE"."FICHIER" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FICHIER" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FICHIER" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FICHIER" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FICHIER" ADD CONSTRAINT "FICHIER_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."FICHIER" MODIFY ("CONTENU" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FICHIER" MODIFY ("TAILLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FICHIER" MODIFY ("TYPE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FICHIER" MODIFY ("NOM" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FICHIER" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_MODULATEUR_EP
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" ADD CONSTRAINT "TYPE_MODULATEUR_EP__UNV1" UNIQUE ("TYPE_MODULATEUR_ID", "ELEMENT_PEDAGOGIQUE_ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" ADD CONSTRAINT "TYPE_MODULATEUR_EP__UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" ADD CONSTRAINT "TYPE_MODULATEUR_EP_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" MODIFY ("ELEMENT_PEDAGOGIQUE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" MODIFY ("TYPE_MODULATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PARAMETRE
--------------------------------------------------------

  ALTER TABLE "OSE"."PARAMETRE" ADD CONSTRAINT "PARAMETRE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."PARAMETRE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PARAMETRE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PARAMETRE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PARAMETRE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PARAMETRE" MODIFY ("NOM" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PARAMETRE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WF_ETAPE_DEP
--------------------------------------------------------

  ALTER TABLE "OSE"."WF_ETAPE_DEP" MODIFY ("LOCALE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE_DEP" MODIFY ("ETAPE_PREC_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE_DEP" MODIFY ("ETAPE_SUIV_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE_DEP" ADD CONSTRAINT "WF_ETAPE_DEP_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."WF_ETAPE_DEP" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE_DEP" ADD CONSTRAINT "WF_ETAPE_DEP__UN" UNIQUE ("ETAPE_SUIV_ID", "ETAPE_PREC_ID") ENABLE;
  ALTER TABLE "OSE"."WF_ETAPE_DEP" MODIFY ("ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE_DEP" MODIFY ("PARTIELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE_DEP" MODIFY ("INTEGRALE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE_DEP" MODIFY ("OBLIGATOIRE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PERIODE
--------------------------------------------------------

  ALTER TABLE "OSE"."PERIODE" ADD CONSTRAINT "PERIODE__UN" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."PERIODE" ADD CONSTRAINT "PERIODE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."PERIODE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERIODE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERIODE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERIODE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERIODE" MODIFY ("ORDRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERIODE" MODIFY ("ECART_MOIS_PAIEMENT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERIODE" MODIFY ("ECART_MOIS" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERIODE" MODIFY ("LIBELLE_LONG" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERIODE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERIODE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TMP_SCENARIO_NOEUD_EFFECTIF
--------------------------------------------------------

  ALTER TABLE "OSE"."TMP_SCENARIO_NOEUD_EFFECTIF" MODIFY ("ETAPE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TMP_SCENARIO_NOEUD_EFFECTIF" MODIFY ("TYPE_HEURES_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TMP_SCENARIO_NOEUD_EFFECTIF" MODIFY ("SCENARIO_NOEUD_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CORPS
--------------------------------------------------------

  ALTER TABLE "OSE"."CORPS" ADD CONSTRAINT "CORPS_SOURCE_UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."CORPS" ADD CONSTRAINT "CORPS_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."CORPS" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CORPS" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CORPS" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CORPS" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CORPS" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CORPS" MODIFY ("LIBELLE_COURT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CORPS" MODIFY ("LIBELLE_LONG" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CORPS" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SOURCE
--------------------------------------------------------

  ALTER TABLE "OSE"."SOURCE" ADD CONSTRAINT "SOURCE_CODE_UN" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."SOURCE" ADD CONSTRAINT "SOURCE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."SOURCE" MODIFY ("IMPORTABLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SOURCE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SOURCE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SOURCE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_INTERVENTION_STRUCTURE
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" ADD CONSTRAINT "TYPE_INTERVENTION_STRUCTURE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" MODIFY ("VISIBLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" MODIFY ("TYPE_INTERVENTION_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CONTRAT
--------------------------------------------------------

  ALTER TABLE "OSE"."CONTRAT" ADD CONSTRAINT "CONTRAT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."CONTRAT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CONTRAT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CONTRAT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CONTRAT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CONTRAT" MODIFY ("NUMERO_AVENANT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CONTRAT" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CONTRAT" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CONTRAT" MODIFY ("TYPE_CONTRAT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CONTRAT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CONTRAT" ADD CONSTRAINT "CONTRAT_NUMERO_AVENANT_UN" UNIQUE ("INTERVENANT_ID", "STRUCTURE_ID", "NUMERO_AVENANT", "VALIDATION_ID", "HISTO_DESTRUCTION") ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_VALIDATION_REFERENTIEL
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" ADD CONSTRAINT "TBL_VALIDATION_REFERENTIEL__UN" UNIQUE ("INTERVENANT_ID", "STRUCTURE_ID", "TYPE_VOLUME_HORAIRE_ID", "SERVICE_REFERENTIEL_ID", "VOLUME_HORAIRE_REF_ID", "VALIDATION_ID", "TO_DELETE") ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" MODIFY ("VOLUME_HORAIRE_REF_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" ADD CONSTRAINT "TBL_VALIDATION_REFERENTIEL_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" MODIFY ("SERVICE_REFERENTIEL_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" MODIFY ("TYPE_VOLUME_HORAIRE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table AFFECTATION_RECHERCHE
--------------------------------------------------------

  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" ADD CONSTRAINT "AFFECTATION_R_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" ADD CONSTRAINT "AFFECTATION_R_SRC_UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_DOTATION
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_DOTATION" ADD CONSTRAINT "TYPE_DOTATION_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_DOTATION" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_DOTATION" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_DOTATION" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_DOTATION" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_DOTATION" MODIFY ("TYPE_RESSOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_DOTATION" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_DOTATION" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_DOTATION" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CONTRAT_FICHIER
--------------------------------------------------------

  ALTER TABLE "OSE"."CONTRAT_FICHIER" ADD CONSTRAINT "CONTRAT_FICHIER_PK" PRIMARY KEY ("CONTRAT_ID", "FICHIER_ID") ENABLE;
  ALTER TABLE "OSE"."CONTRAT_FICHIER" MODIFY ("FICHIER_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CONTRAT_FICHIER" MODIFY ("CONTRAT_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table FORMULE_RESULTAT
--------------------------------------------------------

  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("TYPE_INTERVENANT_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" ADD CONSTRAINT "FORMULE_RESULTAT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."FORMULE_RESULTAT" ADD CONSTRAINT "FORMULE_RESULTAT__UN" UNIQUE ("INTERVENANT_ID", "TYPE_VOLUME_HORAIRE_ID", "ETAT_VOLUME_HORAIRE_ID") ENABLE;
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("HEURES_COMPL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("SOUS_SERVICE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("SOLDE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("TOTAL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("HEURES_COMPL_REFERENTIEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("HEURES_COMPL_FC_MAJOREES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("HEURES_COMPL_FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("HEURES_COMPL_FA" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("HEURES_COMPL_FI" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("SERVICE_REFERENTIEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("SERVICE_FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("SERVICE_FA" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("SERVICE_FI" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("SERVICE_DU" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("ETAT_VOLUME_HORAIRE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("TYPE_VOLUME_HORAIRE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SERVICE
--------------------------------------------------------

  ALTER TABLE "OSE"."SERVICE" ADD CONSTRAINT "SERVICE__UN" UNIQUE ("INTERVENANT_ID", "ELEMENT_PEDAGOGIQUE_ID", "ETABLISSEMENT_ID", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."SERVICE" ADD CONSTRAINT "SERVICE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."SERVICE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SERVICE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SERVICE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SERVICE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SERVICE" MODIFY ("ETABLISSEMENT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SERVICE" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SERVICE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MOTIF_NON_PAIEMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."MOTIF_NON_PAIEMENT" ADD CONSTRAINT "MOTIF_NON_PAIEMENT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."MOTIF_NON_PAIEMENT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_NON_PAIEMENT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_NON_PAIEMENT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_NON_PAIEMENT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_NON_PAIEMENT" MODIFY ("LIBELLE_LONG" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_NON_PAIEMENT" MODIFY ("LIBELLE_COURT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_NON_PAIEMENT" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MOTIF_NON_PAIEMENT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_LIEN
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_LIEN" ADD CONSTRAINT "TBL_LIEN_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_LIEN" MODIFY ("MAX_POIDS" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_LIEN" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_LIEN" MODIFY ("TOTAL_POIDS" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_LIEN" MODIFY ("NB_CHOIX" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_LIEN" MODIFY ("POIDS" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_LIEN" MODIFY ("ACTIF" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_LIEN" MODIFY ("NOEUD_INF_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_LIEN" MODIFY ("NOEUD_SUP_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_LIEN" MODIFY ("SCENARIO_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_LIEN" MODIFY ("LIEN_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_LIEN" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INTERVENANT_SAISIE
--------------------------------------------------------

  ALTER TABLE "OSE"."INTERVENANT_SAISIE" ADD CONSTRAINT "INTERVENANT_SAISIE__UN" UNIQUE ("INTERVENANT_ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT_SAISIE" ADD CONSTRAINT "INTERVENANT_SAISIE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT_SAISIE" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INTERVENANT_SAISIE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_PIECE_JOINTE_STATUT
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" ADD CONSTRAINT "TYPE_PIECE_JOINTE_STATUT__UN" UNIQUE ("TYPE_PIECE_JOINTE_ID", "STATUT_INTERVENANT_ID", "PREMIER_RECRUTEMENT") ENABLE;
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" ADD CONSTRAINT "TYPE_PIECE_JOINTE_STATUT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" MODIFY ("PREMIER_RECRUTEMENT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" MODIFY ("OBLIGATOIRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" MODIFY ("STATUT_INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" MODIFY ("TYPE_PIECE_JOINTE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_DMEP_LIQUIDATION
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_DMEP_LIQUIDATION" ADD CONSTRAINT "TBL_DMEP_LIQUIDATION_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_DMEP_LIQUIDATION" MODIFY ("HEURES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_DMEP_LIQUIDATION" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_DMEP_LIQUIDATION" MODIFY ("TYPE_RESSOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_DMEP_LIQUIDATION" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_DMEP_LIQUIDATION" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_DMEP_LIQUIDATION" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_DMEP_LIQUIDATION" ADD CONSTRAINT "TBL_DMEP_LIQUIDATION__UN" UNIQUE ("ANNEE_ID", "TYPE_RESSOURCE_ID", "STRUCTURE_ID", "TO_DELETE") ENABLE;
--------------------------------------------------------
--  Constraints for Table FONCTION_REFERENTIEL
--------------------------------------------------------

  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" MODIFY ("DOMAINE_FONCTIONNEL_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" ADD CONSTRAINT "FONCTION_REFERENTIEL_CODE_UN" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" ADD CONSTRAINT "FONCTION_REFERENTIEL_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" MODIFY ("LIBELLE_COURT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" MODIFY ("LIBELLE_LONG" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_INTERVENTION_EP
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" ADD CONSTRAINT "TYPE_INTERVENTION_EP_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" MODIFY ("VISIBLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" MODIFY ("ELEMENT_PEDAGOGIQUE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" MODIFY ("TYPE_INTERVENTION_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VOLUME_HORAIRE_REF
--------------------------------------------------------

  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" ADD CONSTRAINT "VOLUME_HORAIRE_REF_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" MODIFY ("HEURES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" MODIFY ("SERVICE_REFERENTIEL_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" MODIFY ("TYPE_VOLUME_HORAIRE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SERVICE_REFERENTIEL
--------------------------------------------------------

  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" ADD CONSTRAINT "SERVICE_REFERENTIEL_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" MODIFY ("FONCTION_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ADRESSE_STRUCTURE
--------------------------------------------------------

  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" MODIFY ("ID" CONSTRAINT "NNC_ADRESSE_INTERVENANTV1_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" ADD CONSTRAINT "ADRESSE_STRUCTURE_SOURCE_UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" ADD CONSTRAINT "ADRESSE_STRUCTURE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table AGREMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."AGREMENT" ADD CONSTRAINT "AGREMENT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."AGREMENT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AGREMENT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AGREMENT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AGREMENT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AGREMENT" MODIFY ("DATE_DECISION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AGREMENT" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AGREMENT" MODIFY ("TYPE_AGREMENT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AGREMENT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."AGREMENT" ADD CONSTRAINT "AGREMENT__UN" UNIQUE ("TYPE_AGREMENT_ID", "INTERVENANT_ID", "STRUCTURE_ID", "HISTO_DESTRUCTION") ENABLE;
--------------------------------------------------------
--  Constraints for Table MISE_EN_PAIEMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" ADD CONSTRAINT "MISE_EN_PAIEMENT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" MODIFY ("HEURES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" MODIFY ("TYPE_HEURES_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" MODIFY ("CENTRE_COUT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SEUIL_CHARGE
--------------------------------------------------------

  ALTER TABLE "OSE"."SEUIL_CHARGE" MODIFY ("TYPE_INTERVENTION_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SEUIL_CHARGE" MODIFY ("SCENARIO_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SEUIL_CHARGE" ADD CONSTRAINT "SEUIL_CHARGE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."SEUIL_CHARGE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SEUIL_CHARGE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SEUIL_CHARGE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SEUIL_CHARGE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SEUIL_CHARGE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_SERVICE_SAISIE
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" ADD CONSTRAINT "TBL_SERVICE_SAISIE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" MODIFY ("HEURES_REFERENTIEL_REAL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" MODIFY ("HEURES_SERVICE_REAL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" MODIFY ("HEURES_REFERENTIEL_PREV" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" MODIFY ("HEURES_SERVICE_PREV" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" MODIFY ("PEUT_SAISIR_REFERENTIEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" MODIFY ("PEUT_SAISIR_SERVICE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" ADD CONSTRAINT "TBL_SERVICE_SAISIE__UN" UNIQUE ("INTERVENANT_ID", "TO_DELETE") ENABLE;
--------------------------------------------------------
--  Constraints for Table TBL_SERVICE_REFERENTIEL
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_SERVICE_REFERENTIEL" MODIFY ("VALIDE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_REFERENTIEL" MODIFY ("NBVH" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_REFERENTIEL" MODIFY ("PEUT_SAISIR_SERVICE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_REFERENTIEL" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_REFERENTIEL" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_REFERENTIEL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE_REFERENTIEL" ADD CONSTRAINT "TBL_SERVICE_REFERENTIEL_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE_REFERENTIEL" ADD CONSTRAINT "TBL_SERVICE_REFERENTIEL__UN" UNIQUE ("INTERVENANT_ID", "TYPE_VOLUME_HORAIRE_ID", "STRUCTURE_ID", "TO_DELETE") ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE_REFERENTIEL" MODIFY ("TO_DELETE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table GROUPE_TYPE_FORMATION
--------------------------------------------------------

  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" ADD CONSTRAINT "GTYPE_FORMATION_SOURCE_UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" ADD CONSTRAINT "GROUPE_TYPE_FORMATION_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" MODIFY ("PERTINENCE_NIVEAU" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" MODIFY ("ORDRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" MODIFY ("LIBELLE_LONG" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" MODIFY ("LIBELLE_COURT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_PAIEMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_PAIEMENT" ADD CONSTRAINT "TBL_PAIEMENT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_PAIEMENT" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PAIEMENT" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PAIEMENT" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PAIEMENT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PAIEMENT" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PAIEMENT" MODIFY ("HEURES_PAYEES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PAIEMENT" MODIFY ("HEURES_DEMANDEES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PAIEMENT" MODIFY ("HEURES_A_PAYER_POND" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PAIEMENT" MODIFY ("HEURES_A_PAYER" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CC_ACTIVITE
--------------------------------------------------------

  ALTER TABLE "OSE"."CC_ACTIVITE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CC_ACTIVITE" MODIFY ("REFERENTIEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CC_ACTIVITE" MODIFY ("FC_MAJOREES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CC_ACTIVITE" MODIFY ("FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CC_ACTIVITE" MODIFY ("FA" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CC_ACTIVITE" MODIFY ("FI" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CC_ACTIVITE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CC_ACTIVITE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CC_ACTIVITE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CC_ACTIVITE" ADD CONSTRAINT "CC_ACTIVITE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."CC_ACTIVITE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CC_ACTIVITE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CC_ACTIVITE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_HEURES
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_HEURES" ADD CONSTRAINT "TYPE_HEURES_UN" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."TYPE_HEURES" ADD CONSTRAINT "TYPE_HEURES_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_HEURES" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_HEURES" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_HEURES" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_HEURES" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_HEURES" MODIFY ("ELIGIBLE_EXTRACTION_PAIE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_HEURES" MODIFY ("ELIGIBLE_CENTRE_COUT_EP" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_HEURES" MODIFY ("TYPE_HEURES_ELEMENT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_HEURES" MODIFY ("ENSEIGNEMENT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_HEURES" MODIFY ("ORDRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_HEURES" MODIFY ("LIBELLE_LONG" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_HEURES" MODIFY ("LIBELLE_COURT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_HEURES" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_HEURES" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table GRADE
--------------------------------------------------------

  ALTER TABLE "OSE"."GRADE" ADD CONSTRAINT "GRADE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."GRADE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GRADE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GRADE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GRADE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GRADE" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GRADE" MODIFY ("CORPS_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GRADE" MODIFY ("LIBELLE_COURT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GRADE" MODIFY ("LIBELLE_LONG" NOT NULL ENABLE);
  ALTER TABLE "OSE"."GRADE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ELEMENT_TAUX_REGIMES
--------------------------------------------------------

  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" ADD CONSTRAINT "ELEMENT_TAUX_REGIMES__UN" UNIQUE ("SOURCE_CODE", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" ADD CONSTRAINT "ELEMENT_TAUX_REGIMES_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" MODIFY ("TAUX_FA" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" MODIFY ("TAUX_FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" MODIFY ("TAUX_FI" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" MODIFY ("ELEMENT_PEDAGOGIQUE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" ADD CONSTRAINT "ELEMENT_TAUX_REGIMES__UNV1" UNIQUE ("ELEMENT_PEDAGOGIQUE_ID", "HISTO_DESTRUCTION") ENABLE;
--------------------------------------------------------
--  Constraints for Table PRIVILEGE
--------------------------------------------------------

  ALTER TABLE "OSE"."PRIVILEGE" ADD CONSTRAINT "PRIVILEGE__UN" UNIQUE ("CATEGORIE_ID", "CODE") ENABLE;
  ALTER TABLE "OSE"."PRIVILEGE" ADD CONSTRAINT "PRIVILEGE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."PRIVILEGE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PRIVILEGE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PRIVILEGE" MODIFY ("CATEGORIE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PRIVILEGE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TAUX_HORAIRE_HETD
--------------------------------------------------------

  ALTER TABLE "OSE"."TAUX_HORAIRE_HETD" ADD CONSTRAINT "TAUX_HORAIRE_HETD_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TAUX_HORAIRE_HETD" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TAUX_HORAIRE_HETD" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TAUX_HORAIRE_HETD" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TAUX_HORAIRE_HETD" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TAUX_HORAIRE_HETD" MODIFY ("VALEUR" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TAUX_HORAIRE_HETD" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table NOEUD
--------------------------------------------------------

  ALTER TABLE "OSE"."NOEUD" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOEUD" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOEUD" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOEUD" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOEUD" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOEUD" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOEUD" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOEUD" MODIFY ("LISTE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOEUD" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOEUD" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOEUD" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."NOEUD" ADD CONSTRAINT "NOEUD_SRC_UN" UNIQUE ("SOURCE_CODE", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."NOEUD" ADD CONSTRAINT "NOEUD_PK" PRIMARY KEY ("ID") ENABLE;
--------------------------------------------------------
--  Constraints for Table FORMULE_RESULTAT_VH
--------------------------------------------------------

  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" MODIFY ("HEURES_COMPL_FC_MAJOREES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" ADD CONSTRAINT "FORMULE_RESULTAT_VH_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" MODIFY ("TOTAL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" MODIFY ("HEURES_COMPL_FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" MODIFY ("HEURES_COMPL_FA" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" MODIFY ("HEURES_COMPL_FI" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" MODIFY ("SERVICE_FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" MODIFY ("SERVICE_FA" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" MODIFY ("SERVICE_FI" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" MODIFY ("VOLUME_HORAIRE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" MODIFY ("FORMULE_RESULTAT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_STRUCTURE
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_STRUCTURE" ADD CONSTRAINT "TYPE_STRUCTURE_CODE_UN" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."TYPE_STRUCTURE" ADD CONSTRAINT "TYPE_STRUCTURE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_STRUCTURE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_STRUCTURE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_STRUCTURE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_STRUCTURE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_STRUCTURE" MODIFY ("ENSEIGNEMENT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_STRUCTURE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_STRUCTURE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_STRUCTURE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_MODULATEUR_STRUCTURE
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" ADD CONSTRAINT "TYPE_MODULATEUR_STRUCTURE_UN" UNIQUE ("TYPE_MODULATEUR_ID", "STRUCTURE_ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" ADD CONSTRAINT "TYPE_MODULATEUR_STRUCTURE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" MODIFY ("TYPE_MODULATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PERSONNEL
--------------------------------------------------------

  ALTER TABLE "OSE"."PERSONNEL" ADD CONSTRAINT "PERSONNEL_SOURCE__UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."PERSONNEL" ADD CONSTRAINT "PERSONNEL_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."PERSONNEL" ADD CONSTRAINT "PERSONNEL_SUPANN_UN" UNIQUE ("SUPANN_EMP_ID") ENABLE;
  ALTER TABLE "OSE"."PERSONNEL" ADD CONSTRAINT "PERSONNEL_CODE_UN" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."PERSONNEL" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERSONNEL" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERSONNEL" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERSONNEL" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERSONNEL" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERSONNEL" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERSONNEL" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERSONNEL" MODIFY ("NOM_PATRONYMIQUE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERSONNEL" MODIFY ("PRENOM" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERSONNEL" MODIFY ("NOM_USUEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERSONNEL" MODIFY ("CIVILITE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERSONNEL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table WF_ETAPE
--------------------------------------------------------

  ALTER TABLE "OSE"."WF_ETAPE" ADD CONSTRAINT "WF_ETAPE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."WF_ETAPE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE" MODIFY ("OBLIGATOIRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE" MODIFY ("DESC_NON_FRANCHIE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE" ADD CONSTRAINT "WF_ETAPE_ORDRE_UN" UNIQUE ("ORDRE") ENABLE;
  ALTER TABLE "OSE"."WF_ETAPE" MODIFY ("ORDRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE" MODIFY ("ROUTE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE" MODIFY ("LIBELLE_AUTRES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE" MODIFY ("LIBELLE_INTERVENANT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."WF_ETAPE" ADD CONSTRAINT "WF_ETAPE_CODE_UN" UNIQUE ("CODE") ENABLE;
--------------------------------------------------------
--  Constraints for Table SCENARIO
--------------------------------------------------------

  ALTER TABLE "OSE"."SCENARIO" ADD CONSTRAINT "SCENARIO_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO" MODIFY ("TYPE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_PIECE_JOINTE_DEMANDE
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_DEMANDE" MODIFY ("HEURES_POUR_SEUIL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_DEMANDE" ADD CONSTRAINT "TBL_PIECE_JOINTE_DEMANDE__UN" UNIQUE ("TYPE_PIECE_JOINTE_ID", "INTERVENANT_ID", "TO_DELETE") ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_DEMANDE" ADD CONSTRAINT "TBL_PIECE_JOINTE_DEMANDE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_DEMANDE" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_DEMANDE" MODIFY ("TYPE_PIECE_JOINTE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_DEMANDE" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_DEMANDE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_DEMANDE" MODIFY ("TO_DELETE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INDIC_MODIF_DOSSIER
--------------------------------------------------------

  ALTER TABLE "OSE"."INDIC_MODIF_DOSSIER" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDIC_MODIF_DOSSIER" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDIC_MODIF_DOSSIER" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDIC_MODIF_DOSSIER" MODIFY ("EST_CREATION_DOSSIER" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDIC_MODIF_DOSSIER" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDIC_MODIF_DOSSIER" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."INDIC_MODIF_DOSSIER" ADD CONSTRAINT "INDIC_MODIF_DOSSIER_PK" PRIMARY KEY ("ID") ENABLE;
--------------------------------------------------------
--  Constraints for Table TYPE_FORMATION
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_FORMATION" ADD CONSTRAINT "TYPE_FORMATION__UN" UNIQUE ("SOURCE_CODE") ENABLE;
  ALTER TABLE "OSE"."TYPE_FORMATION" ADD CONSTRAINT "TYPE_FORMATION_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_FORMATION" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_FORMATION" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_FORMATION" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_FORMATION" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_FORMATION" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_FORMATION" MODIFY ("GROUPE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_FORMATION" MODIFY ("LIBELLE_COURT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_FORMATION" MODIFY ("LIBELLE_LONG" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_FORMATION" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MODULATEUR
--------------------------------------------------------

  ALTER TABLE "OSE"."MODULATEUR" ADD CONSTRAINT "MODULATEUR__UN" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."MODULATEUR" ADD CONSTRAINT "MODULATEUR_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."MODULATEUR" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODULATEUR" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODULATEUR" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODULATEUR" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODULATEUR" MODIFY ("PONDERATION_SERVICE_COMPL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODULATEUR" MODIFY ("PONDERATION_SERVICE_DU" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODULATEUR" MODIFY ("TYPE_MODULATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODULATEUR" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODULATEUR" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."MODULATEUR" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EFFECTIFS
--------------------------------------------------------

  ALTER TABLE "OSE"."EFFECTIFS" ADD CONSTRAINT "EFFECTIFS_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."EFFECTIFS" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."EFFECTIFS" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."EFFECTIFS" ADD CONSTRAINT "EFFECTIFS__UN" UNIQUE ("SOURCE_CODE", "ANNEE_ID") ENABLE;
  ALTER TABLE "OSE"."EFFECTIFS" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."EFFECTIFS" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."EFFECTIFS" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."EFFECTIFS" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."EFFECTIFS" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."EFFECTIFS" MODIFY ("FA" NOT NULL ENABLE);
  ALTER TABLE "OSE"."EFFECTIFS" MODIFY ("FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."EFFECTIFS" MODIFY ("FI" NOT NULL ENABLE);
  ALTER TABLE "OSE"."EFFECTIFS" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LIEN
--------------------------------------------------------

  ALTER TABLE "OSE"."LIEN" ADD CONSTRAINT "LIEN_SRC_UN" UNIQUE ("SOURCE_CODE", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."LIEN" ADD CONSTRAINT "LIEN_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."LIEN" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."LIEN" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."LIEN" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."LIEN" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."LIEN" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."LIEN" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."LIEN" MODIFY ("NOEUD_INF_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."LIEN" MODIFY ("NOEUD_SUP_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."LIEN" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TEST_BUFFER
--------------------------------------------------------

  ALTER TABLE "OSE"."TEST_BUFFER" ADD CONSTRAINT "TEST_BUFFER_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TEST_BUFFER" MODIFY ("DATA_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TEST_BUFFER" MODIFY ("TABLE_NAME" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TEST_BUFFER" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ROLE_PRIVILEGE
--------------------------------------------------------

  ALTER TABLE "OSE"."ROLE_PRIVILEGE" ADD CONSTRAINT "ROLE_PRIVILEGE_PK" PRIMARY KEY ("PRIVILEGE_ID", "ROLE_ID") ENABLE;
  ALTER TABLE "OSE"."ROLE_PRIVILEGE" MODIFY ("PRIVILEGE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ROLE_PRIVILEGE" MODIFY ("ROLE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PIECE_JOINTE_FICHIER
--------------------------------------------------------

  ALTER TABLE "OSE"."PIECE_JOINTE_FICHIER" ADD CONSTRAINT "PIECE_JOINTE_FICHIER_PK" PRIMARY KEY ("PIECE_JOINTE_ID", "FICHIER_ID") ENABLE;
  ALTER TABLE "OSE"."PIECE_JOINTE_FICHIER" MODIFY ("FICHIER_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PIECE_JOINTE_FICHIER" MODIFY ("PIECE_JOINTE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ELEMENT_PEDAGOGIQUE
--------------------------------------------------------

  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD CONSTRAINT "EP_CODE_UN" UNIQUE ("CODE", "HISTO_DESTRUCTION", "ANNEE_ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD CONSTRAINT "EP_SRC_UN" UNIQUE ("SOURCE_CODE", "ANNEE_ID", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD CONSTRAINT "ELEMENT_PEDAGOGIQUE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("FA" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("FI" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("TAUX_FOAD" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("TAUX_FA" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("TAUX_FC" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("TAUX_FI" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("ETAPE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_PIECE_JOINTE
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE" MODIFY ("ORDRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE" ADD CONSTRAINT "TYPE_PIECE_JOINTE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PERIMETRE
--------------------------------------------------------

  ALTER TABLE "OSE"."PERIMETRE" ADD CONSTRAINT "PERIMETRE_LIBELLE_UN" UNIQUE ("LIBELLE") ENABLE;
  ALTER TABLE "OSE"."PERIMETRE" ADD CONSTRAINT "PERIMETRE_CODE_UN" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."PERIMETRE" ADD CONSTRAINT "PERIMETRE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."PERIMETRE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERIMETRE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PERIMETRE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CATEGORIE_PRIVILEGE
--------------------------------------------------------

  ALTER TABLE "OSE"."CATEGORIE_PRIVILEGE" ADD CONSTRAINT "CATEGORIE_PRIVILEGE__UN" UNIQUE ("CODE") ENABLE;
  ALTER TABLE "OSE"."CATEGORIE_PRIVILEGE" ADD CONSTRAINT "CATEGORIE_PRIVILEGE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."CATEGORIE_PRIVILEGE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CATEGORIE_PRIVILEGE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CATEGORIE_PRIVILEGE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DOTATION
--------------------------------------------------------

  ALTER TABLE "OSE"."DOTATION" MODIFY ("ANNEE_CIVILE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOTATION" MODIFY ("STRUCTURE_ID" CONSTRAINT "NNC_DOTATION_STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOTATION" MODIFY ("ANNEE_ID" CONSTRAINT "NNC_DOTATION_ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOTATION" MODIFY ("TYPE_RESSOURCE_ID" CONSTRAINT "NNC_DOTATION_TYPE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOTATION" MODIFY ("ID" CONSTRAINT "NNC_DOTATION_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOTATION" ADD CONSTRAINT "DOTATION__UN" UNIQUE ("TYPE_RESSOURCE_ID", "ANNEE_ID", "ANNEE_CIVILE", "STRUCTURE_ID", "LIBELLE", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."DOTATION" ADD CONSTRAINT "DOTATION_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."DOTATION" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOTATION" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOTATION" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOTATION" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOTATION" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOTATION" MODIFY ("HEURES" CONSTRAINT "NNC_DOTATION_HEURES" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PAYS
--------------------------------------------------------

  ALTER TABLE "OSE"."PAYS" ADD CONSTRAINT "PAYS_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."PAYS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PAYS" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PAYS" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PAYS" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PAYS" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PAYS" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PAYS" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PAYS" MODIFY ("VALIDITE_DEBUT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PAYS" MODIFY ("TEMOIN_UE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PAYS" MODIFY ("LIBELLE_COURT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."PAYS" MODIFY ("LIBELLE_LONG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_CONTRAT
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_CONTRAT" MODIFY ("SIGNE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CONTRAT" MODIFY ("EDITE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CONTRAT" MODIFY ("NBVH" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CONTRAT" MODIFY ("PEUT_AVOIR_CONTRAT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CONTRAT" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CONTRAT" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CONTRAT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CONTRAT" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CONTRAT" ADD CONSTRAINT "TBL_CONTRAT__UN" UNIQUE ("INTERVENANT_ID", "STRUCTURE_ID", "TO_DELETE") ENABLE;
  ALTER TABLE "OSE"."TBL_CONTRAT" ADD CONSTRAINT "TBL_CONTRAT_PK" PRIMARY KEY ("ID") ENABLE;
--------------------------------------------------------
--  Constraints for Table UTILISATEUR
--------------------------------------------------------

  ALTER TABLE "OSE"."UTILISATEUR" ADD CONSTRAINT "UTILISATEUR_USERNAME_UN" UNIQUE ("USERNAME") ENABLE;
  ALTER TABLE "OSE"."UTILISATEUR" ADD CONSTRAINT "UTILISATEUR_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."UTILISATEUR" MODIFY ("STATE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."UTILISATEUR" MODIFY ("PASSWORD" NOT NULL ENABLE);
  ALTER TABLE "OSE"."UTILISATEUR" MODIFY ("DISPLAY_NAME" NOT NULL ENABLE);
  ALTER TABLE "OSE"."UTILISATEUR" MODIFY ("USERNAME" NOT NULL ENABLE);
  ALTER TABLE "OSE"."UTILISATEUR" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_SERVICE
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_SERVICE" ADD CONSTRAINT "TBL_SERVICE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("VALIDE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("NBVH" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("PEUT_SAISIR_SERVICE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("HEURES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" ADD CONSTRAINT "TBL_SERVICE__UN" UNIQUE ("SERVICE_ID", "TYPE_VOLUME_HORAIRE_ID", "TO_DELETE") ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("TYPE_INTERVENANT_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("TYPE_INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("INTERVENANT_STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("SERVICE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("HAS_HEURES_MAUVAISE_PERIODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("ETAPE_HISTO" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_SERVICE" MODIFY ("ELEMENT_PEDAGOGIQUE_HISTO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_VALIDATION_ENSEIGNEMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" MODIFY ("VOLUME_HORAIRE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ADD CONSTRAINT "TBL_VALIDATION_ENSEIGNEMENT_UN" UNIQUE ("INTERVENANT_ID", "STRUCTURE_ID", "TYPE_VOLUME_HORAIRE_ID", "SERVICE_ID", "VOLUME_HORAIRE_ID", "VALIDATION_ID", "TO_DELETE") ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ADD CONSTRAINT "TBL_VALIDATION_ENSEIGNEMENT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" MODIFY ("SERVICE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" MODIFY ("TYPE_VOLUME_HORAIRE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_AGREMENT_STATUT
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" ADD CONSTRAINT "TYPE_AGREMENT_STATUT__UN" UNIQUE ("TYPE_AGREMENT_ID", "STATUT_INTERVENANT_ID", "PREMIER_RECRUTEMENT") ENABLE;
  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" ADD CONSTRAINT "TYPE_AGREMENT_STATUT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" MODIFY ("OBLIGATOIRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" MODIFY ("STATUT_INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" MODIFY ("TYPE_AGREMENT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table REGLE_STRUCTURE_VALIDATION
--------------------------------------------------------

  ALTER TABLE "OSE"."REGLE_STRUCTURE_VALIDATION" ADD CONSTRAINT "REGLE_STRUCTURE_VALIDATION__UN" UNIQUE ("TYPE_VOLUME_HORAIRE_ID", "TYPE_INTERVENANT_ID") ENABLE;
  ALTER TABLE "OSE"."REGLE_STRUCTURE_VALIDATION" ADD CONSTRAINT "REGLE_STRUCTURE_VALIDATION_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."REGLE_STRUCTURE_VALIDATION" MODIFY ("PRIORITE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."REGLE_STRUCTURE_VALIDATION" MODIFY ("TYPE_INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."REGLE_STRUCTURE_VALIDATION" MODIFY ("TYPE_VOLUME_HORAIRE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."REGLE_STRUCTURE_VALIDATION" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table FORMULE_RESULTAT_VH_REF
--------------------------------------------------------

  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH_REF" ADD CONSTRAINT "FORMULE_RESULTAT_VH_REF_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH_REF" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH_REF" MODIFY ("TOTAL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH_REF" MODIFY ("HEURES_COMPL_REFERENTIEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH_REF" MODIFY ("SERVICE_REFERENTIEL" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH_REF" MODIFY ("VOLUME_HORAIRE_REF_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH_REF" MODIFY ("FORMULE_RESULTAT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH_REF" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ETAPE
--------------------------------------------------------

  ALTER TABLE "OSE"."ETAPE" ADD CONSTRAINT "ETAPE_CODE_UN" UNIQUE ("CODE", "ANNEE_ID", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."ETAPE" ADD CONSTRAINT "ETAPE_SRC_UN" UNIQUE ("SOURCE_CODE", "HISTO_DESTRUCTION", "ANNEE_ID") ENABLE;
  ALTER TABLE "OSE"."ETAPE" ADD CONSTRAINT "ETAPE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."ETAPE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAPE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAPE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAPE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAPE" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAPE" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAPE" MODIFY ("DOMAINE_FONCTIONNEL_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAPE" MODIFY ("STRUCTURE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAPE" MODIFY ("SPECIFIQUE_ECHANGES" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAPE" MODIFY ("TYPE_FORMATION_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAPE" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAPE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAPE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAPE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TBL_CLOTURE_REALISE
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_CLOTURE_REALISE" MODIFY ("TO_DELETE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CLOTURE_REALISE" ADD CONSTRAINT "TBL_CLOTURE_REALISE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_CLOTURE_REALISE" MODIFY ("CLOTURE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CLOTURE_REALISE" MODIFY ("PEUT_CLOTURER_SAISIE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CLOTURE_REALISE" MODIFY ("INTERVENANT_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CLOTURE_REALISE" MODIFY ("ANNEE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CLOTURE_REALISE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TBL_CLOTURE_REALISE" ADD CONSTRAINT "TBL_CLOTURE_REALISE__UN" UNIQUE ("INTERVENANT_ID", "TO_DELETE") ENABLE;
--------------------------------------------------------
--  Constraints for Table DOMAINE_FONCTIONNEL
--------------------------------------------------------

  ALTER TABLE "OSE"."DOMAINE_FONCTIONNEL" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOMAINE_FONCTIONNEL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOMAINE_FONCTIONNEL" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOMAINE_FONCTIONNEL" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOMAINE_FONCTIONNEL" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOMAINE_FONCTIONNEL" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOMAINE_FONCTIONNEL" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."DOMAINE_FONCTIONNEL" ADD CONSTRAINT "DOMAINE_FONCTIONNEL_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."DOMAINE_FONCTIONNEL" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CENTRE_COUT
--------------------------------------------------------

  ALTER TABLE "OSE"."CENTRE_COUT" ADD CONSTRAINT "CENTRE_COUT_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT" MODIFY ("TYPE_RESSOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT" MODIFY ("ACTIVITE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."CENTRE_COUT" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TYPE_INTERVENTION
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_INTERVENTION" MODIFY ("ENSEIGNEMENT" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION" ADD CONSTRAINT "TYPE_INTERVENTION_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION" MODIFY ("VISIBLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION" MODIFY ("INTERVENTION_INDIVIDUALISEE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION" MODIFY ("TAUX_HETD_COMPLEMENTAIRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION" MODIFY ("TAUX_HETD_SERVICE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION" MODIFY ("ORDRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."TYPE_INTERVENTION" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SCENARIO_NOEUD
--------------------------------------------------------

  ALTER TABLE "OSE"."SCENARIO_NOEUD" ADD CONSTRAINT "SCENARIO_NOEUD_SRC_UN" UNIQUE ("SOURCE_CODE", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_NOEUD" ADD CONSTRAINT "SCENARIO_NOEUD_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_NOEUD" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD" MODIFY ("SOURCE_CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD" MODIFY ("SOURCE_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD" MODIFY ("ASSIDUITE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD" MODIFY ("NOEUD_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD" MODIFY ("SCENARIO_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD" ADD CONSTRAINT "SCENARIO_NOEUD__UN" UNIQUE ("SCENARIO_ID", "NOEUD_ID", "HISTO_DESTRUCTION") ENABLE;
--------------------------------------------------------
--  Constraints for Table ETAT_VOLUME_HORAIRE
--------------------------------------------------------

  ALTER TABLE "OSE"."ETAT_VOLUME_HORAIRE" MODIFY ("ORDRE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAT_VOLUME_HORAIRE" ADD CONSTRAINT "ETAT_VOLUME_HORAIRE__UN" UNIQUE ("CODE", "HISTO_DESTRUCTION") ENABLE;
  ALTER TABLE "OSE"."ETAT_VOLUME_HORAIRE" ADD CONSTRAINT "ETAT_VOLUME_HORAIRE_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."ETAT_VOLUME_HORAIRE" MODIFY ("HISTO_MODIFICATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAT_VOLUME_HORAIRE" MODIFY ("HISTO_MODIFICATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAT_VOLUME_HORAIRE" MODIFY ("HISTO_CREATEUR_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAT_VOLUME_HORAIRE" MODIFY ("HISTO_CREATION" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAT_VOLUME_HORAIRE" MODIFY ("LIBELLE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAT_VOLUME_HORAIRE" MODIFY ("CODE" NOT NULL ENABLE);
  ALTER TABLE "OSE"."ETAT_VOLUME_HORAIRE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SCENARIO_NOEUD_SEUIL
--------------------------------------------------------

  ALTER TABLE "OSE"."SCENARIO_NOEUD_SEUIL" ADD CONSTRAINT "SCENARIO_NOEUD_SEUIL_PK" PRIMARY KEY ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_NOEUD_SEUIL" MODIFY ("TYPE_INTERVENTION_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD_SEUIL" MODIFY ("SCENARIO_NOEUD_ID" NOT NULL ENABLE);
  ALTER TABLE "OSE"."SCENARIO_NOEUD_SEUIL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table ADRESSE_INTERVENANT
--------------------------------------------------------

  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" ADD CONSTRAINT "ADRESSE_INTERVENANT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" ADD CONSTRAINT "ADRESSE_INTERVENANT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" ADD CONSTRAINT "ADRESSE_INTERVENANT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" ADD CONSTRAINT "ADRESSE_INTERVENANT_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."ADRESSE_INTERVENANT" ADD CONSTRAINT "AII_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ADRESSE_STRUCTURE
--------------------------------------------------------

  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" ADD CONSTRAINT "ADRESSE_STRUCTURE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" ADD CONSTRAINT "ADRESSE_STRUCTURE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" ADD CONSTRAINT "ADRESSE_STRUCTURE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" ADD CONSTRAINT "ADRESSE_STRUCTURE_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."ADRESSE_STRUCTURE" ADD CONSTRAINT "ADRESSE_STRUCTURE_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table AFFECTATION
--------------------------------------------------------

  ALTER TABLE "OSE"."AFFECTATION" ADD CONSTRAINT "AFFECTATION_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."AFFECTATION" ADD CONSTRAINT "AFFECTATION_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."AFFECTATION" ADD CONSTRAINT "AFFECTATION_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."AFFECTATION" ADD CONSTRAINT "AFFECTATION_PERSONNEL_FK" FOREIGN KEY ("PERSONNEL_ID")
	  REFERENCES "OSE"."PERSONNEL" ("ID") ENABLE;
  ALTER TABLE "OSE"."AFFECTATION" ADD CONSTRAINT "AFFECTATION_ROLE_FK" FOREIGN KEY ("ROLE_ID")
	  REFERENCES "OSE"."ROLE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."AFFECTATION" ADD CONSTRAINT "AFFECTATION_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ENABLE;
  ALTER TABLE "OSE"."AFFECTATION" ADD CONSTRAINT "AFFECTATION_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table AFFECTATION_RECHERCHE
--------------------------------------------------------

  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" ADD CONSTRAINT "AFFECTATION_R_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" ADD CONSTRAINT "AFFECTATION_R_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" ADD CONSTRAINT "AFFECTATION_R_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" ADD CONSTRAINT "AFFECTATION_R_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" ADD CONSTRAINT "AFFECTATION_R_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."AFFECTATION_RECHERCHE" ADD CONSTRAINT "AFFECTATION_R_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table AGREMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."AGREMENT" ADD CONSTRAINT "AGREMENT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."AGREMENT" ADD CONSTRAINT "AGREMENT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."AGREMENT" ADD CONSTRAINT "AGREMENT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."AGREMENT" ADD CONSTRAINT "AGREMENT_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."AGREMENT" ADD CONSTRAINT "AGREMENT_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
  ALTER TABLE "OSE"."AGREMENT" ADD CONSTRAINT "AGREMENT_TYPE_AGREMENT_FK" FOREIGN KEY ("TYPE_AGREMENT_ID")
	  REFERENCES "OSE"."TYPE_AGREMENT" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CAMPAGNE_SAISIE
--------------------------------------------------------

  ALTER TABLE "OSE"."CAMPAGNE_SAISIE" ADD CONSTRAINT "CAMPAGNE_SAISIE_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ENABLE;
  ALTER TABLE "OSE"."CAMPAGNE_SAISIE" ADD CONSTRAINT "CS_TYPE_INTERVENANT_FK" FOREIGN KEY ("TYPE_INTERVENANT_ID")
	  REFERENCES "OSE"."TYPE_INTERVENANT" ("ID") ENABLE;
  ALTER TABLE "OSE"."CAMPAGNE_SAISIE" ADD CONSTRAINT "CS_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CC_ACTIVITE
--------------------------------------------------------

  ALTER TABLE "OSE"."CC_ACTIVITE" ADD CONSTRAINT "CC_ACTIVITE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CC_ACTIVITE" ADD CONSTRAINT "CC_ACTIVITE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CC_ACTIVITE" ADD CONSTRAINT "CC_ACTIVITE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CENTRE_COUT
--------------------------------------------------------

  ALTER TABLE "OSE"."CENTRE_COUT" ADD CONSTRAINT "CENTRE_COUT_ACTIVITE_FK" FOREIGN KEY ("ACTIVITE_ID")
	  REFERENCES "OSE"."CC_ACTIVITE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT" ADD CONSTRAINT "CENTRE_COUT_CENTRE_COUT_FK" FOREIGN KEY ("PARENT_ID")
	  REFERENCES "OSE"."CENTRE_COUT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT" ADD CONSTRAINT "CENTRE_COUT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT" ADD CONSTRAINT "CENTRE_COUT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT" ADD CONSTRAINT "CENTRE_COUT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT" ADD CONSTRAINT "CENTRE_COUT_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT" ADD CONSTRAINT "CENTRE_COUT_TYPE_RESSOURCE_FK" FOREIGN KEY ("TYPE_RESSOURCE_ID")
	  REFERENCES "OSE"."TYPE_RESSOURCE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CENTRE_COUT_EP
--------------------------------------------------------

  ALTER TABLE "OSE"."CENTRE_COUT_EP" ADD CONSTRAINT "CCEP_CENTRE_COUT_FK" FOREIGN KEY ("CENTRE_COUT_ID")
	  REFERENCES "OSE"."CENTRE_COUT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_EP" ADD CONSTRAINT "CCEP_ELEMENT_PEDAGOGIQUE_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	  REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_EP" ADD CONSTRAINT "CCEP_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_EP" ADD CONSTRAINT "CCEP_TYPE_HEURES_FK" FOREIGN KEY ("TYPE_HEURES_ID")
	  REFERENCES "OSE"."TYPE_HEURES" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_EP" ADD CONSTRAINT "CENTRE_COUT_EP_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_EP" ADD CONSTRAINT "CENTRE_COUT_EP_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_EP" ADD CONSTRAINT "CENTRE_COUT_EP_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CENTRE_COUT_STRUCTURE
--------------------------------------------------------

  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" ADD CONSTRAINT "CCS_CENTRE_COUT_FK" FOREIGN KEY ("CENTRE_COUT_ID")
	  REFERENCES "OSE"."CENTRE_COUT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" ADD CONSTRAINT "CCS_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" ADD CONSTRAINT "CENTRE_COUT_STRUCTURE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" ADD CONSTRAINT "CENTRE_COUT_STRUCTURE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CENTRE_COUT_STRUCTURE" ADD CONSTRAINT "CENTRE_COUT_STRUCTURE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CHEMIN_PEDAGOGIQUE
--------------------------------------------------------

  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" ADD CONSTRAINT "CHEMIN_PEDAGOGIQUE_ETAPE_FK" FOREIGN KEY ("ETAPE_ID")
	  REFERENCES "OSE"."ETAPE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" ADD CONSTRAINT "CHEMIN_PEDAGOGIQUE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" ADD CONSTRAINT "CHEMIN_PEDAGOGIQUE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" ADD CONSTRAINT "CHEMIN_PEDAGOGIQUE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" ADD CONSTRAINT "CHEMIN_PEDAGOGIQUE_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CHEMIN_PEDAGOGIQUE" ADD CONSTRAINT "CPEP_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	  REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CONTRAT
--------------------------------------------------------

  ALTER TABLE "OSE"."CONTRAT" ADD CONSTRAINT "CONTRAT_CONTRAT_FK" FOREIGN KEY ("CONTRAT_ID")
	  REFERENCES "OSE"."CONTRAT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CONTRAT" ADD CONSTRAINT "CONTRAT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CONTRAT" ADD CONSTRAINT "CONTRAT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CONTRAT" ADD CONSTRAINT "CONTRAT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CONTRAT" ADD CONSTRAINT "CONTRAT_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CONTRAT" ADD CONSTRAINT "CONTRAT_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
  ALTER TABLE "OSE"."CONTRAT" ADD CONSTRAINT "CONTRAT_TYPE_CONTRAT_FK" FOREIGN KEY ("TYPE_CONTRAT_ID")
	  REFERENCES "OSE"."TYPE_CONTRAT" ("ID") ENABLE;
  ALTER TABLE "OSE"."CONTRAT" ADD CONSTRAINT "CONTRAT_VALIDATION_FK" FOREIGN KEY ("VALIDATION_ID")
	  REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE SET NULL ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CONTRAT_FICHIER
--------------------------------------------------------

  ALTER TABLE "OSE"."CONTRAT_FICHIER" ADD CONSTRAINT "CONTRAT_FICHIER_FFK" FOREIGN KEY ("FICHIER_ID")
	  REFERENCES "OSE"."FICHIER" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."CONTRAT_FICHIER" ADD CONSTRAINT "CONTRAT_FICHIER_FK" FOREIGN KEY ("CONTRAT_ID")
	  REFERENCES "OSE"."CONTRAT" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CORPS
--------------------------------------------------------

  ALTER TABLE "OSE"."CORPS" ADD CONSTRAINT "CORPS_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CORPS" ADD CONSTRAINT "CORPS_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CORPS" ADD CONSTRAINT "CORPS_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."CORPS" ADD CONSTRAINT "CORPS_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DEPARTEMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."DEPARTEMENT" ADD CONSTRAINT "DEPARTEMENT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DEPARTEMENT" ADD CONSTRAINT "DEPARTEMENT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DEPARTEMENT" ADD CONSTRAINT "DEPARTEMENT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DEPARTEMENT" ADD CONSTRAINT "DEPARTEMENT_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DISCIPLINE
--------------------------------------------------------

  ALTER TABLE "OSE"."DISCIPLINE" ADD CONSTRAINT "DISCIPLINE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DISCIPLINE" ADD CONSTRAINT "DISCIPLINE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DISCIPLINE" ADD CONSTRAINT "DISCIPLINE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DISCIPLINE" ADD CONSTRAINT "DISCIPLINE_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DOMAINE_FONCTIONNEL
--------------------------------------------------------

  ALTER TABLE "OSE"."DOMAINE_FONCTIONNEL" ADD CONSTRAINT "DOMAINE_FONCTIONNEL_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DOMAINE_FONCTIONNEL" ADD CONSTRAINT "DOMAINE_FONCTIONNEL_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DOMAINE_FONCTIONNEL" ADD CONSTRAINT "DOMAINE_FONCTIONNEL_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DOMAINE_FONCTIONNEL" ADD CONSTRAINT "DOMAINE_FONCTIONNEL_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DOSSIER
--------------------------------------------------------

  ALTER TABLE "OSE"."DOSSIER" ADD CONSTRAINT "DOSSIER_D_FK" FOREIGN KEY ("DEPT_NAISSANCE_ID")
	  REFERENCES "OSE"."DEPARTEMENT" ("ID") ENABLE;
  ALTER TABLE "OSE"."DOSSIER" ADD CONSTRAINT "DOSSIER_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DOSSIER" ADD CONSTRAINT "DOSSIER_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DOSSIER" ADD CONSTRAINT "DOSSIER_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DOSSIER" ADD CONSTRAINT "DOSSIER_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ENABLE;
  ALTER TABLE "OSE"."DOSSIER" ADD CONSTRAINT "DOSSIER_P_FK" FOREIGN KEY ("PAYS_NAISSANCE_ID")
	  REFERENCES "OSE"."PAYS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DOTATION
--------------------------------------------------------

  ALTER TABLE "OSE"."DOTATION" ADD CONSTRAINT "DOTATION_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."DOTATION" ADD CONSTRAINT "DOTATION_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DOTATION" ADD CONSTRAINT "DOTATION_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DOTATION" ADD CONSTRAINT "DOTATION_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."DOTATION" ADD CONSTRAINT "DOTATION_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."DOTATION" ADD CONSTRAINT "DOTATION_TYPE_RESSOURCE_FK" FOREIGN KEY ("TYPE_RESSOURCE_ID")
	  REFERENCES "OSE"."TYPE_RESSOURCE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EFFECTIFS
--------------------------------------------------------

  ALTER TABLE "OSE"."EFFECTIFS" ADD CONSTRAINT "EFFECTIFS_ELEMENT_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	  REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."EFFECTIFS" ADD CONSTRAINT "EFFECTIFS_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ENABLE;
  ALTER TABLE "OSE"."EFFECTIFS" ADD CONSTRAINT "EFFECTIFS_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."EFFECTIFS" ADD CONSTRAINT "EFFECTIFS_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."EFFECTIFS" ADD CONSTRAINT "EFFECTIFS_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."EFFECTIFS" ADD CONSTRAINT "EFFECTIFS_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ELEMENT_MODULATEUR
--------------------------------------------------------

  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" ADD CONSTRAINT "ELEMENT_MODULATEUR_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" ADD CONSTRAINT "ELEMENT_MODULATEUR_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" ADD CONSTRAINT "ELEMENT_MODULATEUR_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" ADD CONSTRAINT "EM_ELEMENT_PEDAGOGIQUE_FK" FOREIGN KEY ("ELEMENT_ID")
	  REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."ELEMENT_MODULATEUR" ADD CONSTRAINT "EM_MODULATEUR_FK" FOREIGN KEY ("MODULATEUR_ID")
	  REFERENCES "OSE"."MODULATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ELEMENT_PEDAGOGIQUE
--------------------------------------------------------

  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD CONSTRAINT "ELEMENT_PEDAGOGIQUE_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD CONSTRAINT "ELEMENT_PEDAGOGIQUE_ETAPE_FK" FOREIGN KEY ("ETAPE_ID")
	  REFERENCES "OSE"."ETAPE" ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD CONSTRAINT "ELEMENT_PEDAGOGIQUE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD CONSTRAINT "ELEMENT_PEDAGOGIQUE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD CONSTRAINT "ELEMENT_PEDAGOGIQUE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD CONSTRAINT "ELEMENT_PEDAGOGIQUE_PERIODE_FK" FOREIGN KEY ("PERIODE_ID")
	  REFERENCES "OSE"."PERIODE" ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD CONSTRAINT "ELEMENT_PEDAGOGIQUE_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD CONSTRAINT "EPS_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_PEDAGOGIQUE" ADD CONSTRAINT "EP_DISCIPLINE_FK" FOREIGN KEY ("DISCIPLINE_ID")
	  REFERENCES "OSE"."DISCIPLINE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ELEMENT_TAUX_REGIMES
--------------------------------------------------------

  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" ADD CONSTRAINT "ELEMENT_TAUX_REGIMES_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" ADD CONSTRAINT "ELEMENT_TAUX_REGIMES_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" ADD CONSTRAINT "ELEMENT_TAUX_REGIMES_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" ADD CONSTRAINT "ETR_ELEMENT_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	  REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."ELEMENT_TAUX_REGIMES" ADD CONSTRAINT "ETR_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ETABLISSEMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."ETABLISSEMENT" ADD CONSTRAINT "ETABLISSEMENT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ETABLISSEMENT" ADD CONSTRAINT "ETABLISSEMENT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ETABLISSEMENT" ADD CONSTRAINT "ETABLISSEMENT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ETABLISSEMENT" ADD CONSTRAINT "ETABLISSEMENT_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ETAPE
--------------------------------------------------------

  ALTER TABLE "OSE"."ETAPE" ADD CONSTRAINT "ETAPE_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ENABLE;
  ALTER TABLE "OSE"."ETAPE" ADD CONSTRAINT "ETAPE_DOMAINE_FONCTIONNEL_FK" FOREIGN KEY ("DOMAINE_FONCTIONNEL_ID")
	  REFERENCES "OSE"."DOMAINE_FONCTIONNEL" ("ID") ENABLE;
  ALTER TABLE "OSE"."ETAPE" ADD CONSTRAINT "ETAPE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ETAPE" ADD CONSTRAINT "ETAPE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ETAPE" ADD CONSTRAINT "ETAPE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ETAPE" ADD CONSTRAINT "ETAPE_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."ETAPE" ADD CONSTRAINT "ETAPE_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
  ALTER TABLE "OSE"."ETAPE" ADD CONSTRAINT "ETAPE_TYPE_FORMATION_FK" FOREIGN KEY ("TYPE_FORMATION_ID")
	  REFERENCES "OSE"."TYPE_FORMATION" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ETAT_VOLUME_HORAIRE
--------------------------------------------------------

  ALTER TABLE "OSE"."ETAT_VOLUME_HORAIRE" ADD CONSTRAINT "ETAT_VOLUME_HORAIRE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ETAT_VOLUME_HORAIRE" ADD CONSTRAINT "ETAT_VOLUME_HORAIRE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ETAT_VOLUME_HORAIRE" ADD CONSTRAINT "ETAT_VOLUME_HORAIRE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table FICHIER
--------------------------------------------------------

  ALTER TABLE "OSE"."FICHIER" ADD CONSTRAINT "FICHIER_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."FICHIER" ADD CONSTRAINT "FICHIER_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."FICHIER" ADD CONSTRAINT "FICHIER_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."FICHIER" ADD CONSTRAINT "FICHIER_VALID_FK" FOREIGN KEY ("VALIDATION_ID")
	  REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE SET NULL ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table FONCTION_REFERENTIEL
--------------------------------------------------------

  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" ADD CONSTRAINT "FONCTION_REFERENTIEL_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" ADD CONSTRAINT "FONCTION_REFERENTIEL_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" ADD CONSTRAINT "FONCTION_REFERENTIEL_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" ADD CONSTRAINT "FONCTION_REFERENTIEL_SFK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
  ALTER TABLE "OSE"."FONCTION_REFERENTIEL" ADD CONSTRAINT "FONC_REF_DOMAINE_FONCT_FK" FOREIGN KEY ("DOMAINE_FONCTIONNEL_ID")
	  REFERENCES "OSE"."DOMAINE_FONCTIONNEL" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table FORMULE_RESULTAT
--------------------------------------------------------

  ALTER TABLE "OSE"."FORMULE_RESULTAT" ADD CONSTRAINT "FRES_ETAT_VOLUME_HORAIRE_FK" FOREIGN KEY ("ETAT_VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."ETAT_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."FORMULE_RESULTAT" ADD CONSTRAINT "FRES_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."FORMULE_RESULTAT" ADD CONSTRAINT "FRES_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table FORMULE_RESULTAT_SERVICE
--------------------------------------------------------

  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" ADD CONSTRAINT "FRS_FORMULE_RESULTAT_FK" FOREIGN KEY ("FORMULE_RESULTAT_ID")
	  REFERENCES "OSE"."FORMULE_RESULTAT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE" ADD CONSTRAINT "FRS_SERVICE_FK" FOREIGN KEY ("SERVICE_ID")
	  REFERENCES "OSE"."SERVICE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table FORMULE_RESULTAT_SERVICE_REF
--------------------------------------------------------

  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE_REF" ADD CONSTRAINT "FRR_FORMULE_RESULTAT_FK" FOREIGN KEY ("FORMULE_RESULTAT_ID")
	  REFERENCES "OSE"."FORMULE_RESULTAT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."FORMULE_RESULTAT_SERVICE_REF" ADD CONSTRAINT "FRSR_SERVICE_REFERENTIEL_FK" FOREIGN KEY ("SERVICE_REFERENTIEL_ID")
	  REFERENCES "OSE"."SERVICE_REFERENTIEL" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table FORMULE_RESULTAT_VH
--------------------------------------------------------

  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" ADD CONSTRAINT "FRVH_FORMULE_RESULTAT_FK" FOREIGN KEY ("FORMULE_RESULTAT_ID")
	  REFERENCES "OSE"."FORMULE_RESULTAT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH" ADD CONSTRAINT "FRVH_VOLUME_HORAIRE_FK" FOREIGN KEY ("VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table FORMULE_RESULTAT_VH_REF
--------------------------------------------------------

  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH_REF" ADD CONSTRAINT "FRVHR_FORMULE_RESULTAT_FK" FOREIGN KEY ("FORMULE_RESULTAT_ID")
	  REFERENCES "OSE"."FORMULE_RESULTAT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."FORMULE_RESULTAT_VH_REF" ADD CONSTRAINT "FRVHR_VOLUME_HORAIRE_REF_FK" FOREIGN KEY ("VOLUME_HORAIRE_REF_ID")
	  REFERENCES "OSE"."VOLUME_HORAIRE_REF" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table GRADE
--------------------------------------------------------

  ALTER TABLE "OSE"."GRADE" ADD CONSTRAINT "GRADE_CORPS_FK" FOREIGN KEY ("CORPS_ID")
	  REFERENCES "OSE"."CORPS" ("ID") ENABLE;
  ALTER TABLE "OSE"."GRADE" ADD CONSTRAINT "GRADE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."GRADE" ADD CONSTRAINT "GRADE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."GRADE" ADD CONSTRAINT "GRADE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table GROUPE
--------------------------------------------------------

  ALTER TABLE "OSE"."GROUPE" ADD CONSTRAINT "GROUPE_ELEMENT_PEDAGOGIQUE_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	  REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."GROUPE" ADD CONSTRAINT "GROUPE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."GROUPE" ADD CONSTRAINT "GROUPE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."GROUPE" ADD CONSTRAINT "GROUPE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."GROUPE" ADD CONSTRAINT "GROUPE_TYPE_INTERVENTION_FK" FOREIGN KEY ("TYPE_INTERVENTION_ID")
	  REFERENCES "OSE"."TYPE_INTERVENTION" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table GROUPE_TYPE_FORMATION
--------------------------------------------------------

  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" ADD CONSTRAINT "GROUPE_TYPE_FORMATION_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" ADD CONSTRAINT "GROUPE_TYPE_FORMATION_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" ADD CONSTRAINT "GROUPE_TYPE_FORMATION_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."GROUPE_TYPE_FORMATION" ADD CONSTRAINT "GTYPE_FORMATION_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table HISTO_INTERVENANT_SERVICE
--------------------------------------------------------

  ALTER TABLE "OSE"."HISTO_INTERVENANT_SERVICE" ADD CONSTRAINT "HSM_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."HISTO_INTERVENANT_SERVICE" ADD CONSTRAINT "HSM_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."HISTO_INTERVENANT_SERVICE" ADD CONSTRAINT "HSM_UTILISATEUR_FK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table INDIC_MODIF_DOSSIER
--------------------------------------------------------

  ALTER TABLE "OSE"."INDIC_MODIF_DOSSIER" ADD CONSTRAINT "INDIC_MODIF_DOSSIER_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."INDIC_MODIF_DOSSIER" ADD CONSTRAINT "INDIC_MODIF_DOSSIER_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."INDIC_MODIF_DOSSIER" ADD CONSTRAINT "INDIC_MODIF_DOSSIER_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."INDIC_MODIF_DOSSIER" ADD CONSTRAINT "indic_diff_dossier_INT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table INTERVENANT
--------------------------------------------------------

  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANTS_CIVILITES_FK" FOREIGN KEY ("CIVILITE_ID")
	  REFERENCES "OSE"."CIVILITE" ("ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_DEPARTEMENT_FK" FOREIGN KEY ("DEP_NAISSANCE_ID")
	  REFERENCES "OSE"."DEPARTEMENT" ("ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_DISCIPLINE_FK" FOREIGN KEY ("DISCIPLINE_ID")
	  REFERENCES "OSE"."DISCIPLINE" ("ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_GRADE_FK" FOREIGN KEY ("GRADE_ID")
	  REFERENCES "OSE"."GRADE" ("ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_PAYS_NAISS_FK" FOREIGN KEY ("PAYS_NAISSANCE_ID")
	  REFERENCES "OSE"."PAYS" ("ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_PAYS_NAT_FK" FOREIGN KEY ("PAYS_NATIONALITE_ID")
	  REFERENCES "OSE"."PAYS" ("ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_STATUT_FK" FOREIGN KEY ("STATUT_ID")
	  REFERENCES "OSE"."STATUT_INTERVENANT" ("ID") ENABLE;
  ALTER TABLE "OSE"."INTERVENANT" ADD CONSTRAINT "INTERVENANT_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table INTERVENANT_SAISIE
--------------------------------------------------------

  ALTER TABLE "OSE"."INTERVENANT_SAISIE" ADD CONSTRAINT "INTERVENANT_SAISIE_INTERV_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."INTERVENANT_SAISIE" ADD CONSTRAINT "IS_STATUT_INTERVENANT_FK" FOREIGN KEY ("STATUT_ID")
	  REFERENCES "OSE"."STATUT_INTERVENANT" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table LIEN
--------------------------------------------------------

  ALTER TABLE "OSE"."LIEN" ADD CONSTRAINT "LIEN_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."LIEN" ADD CONSTRAINT "LIEN_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."LIEN" ADD CONSTRAINT "LIEN_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."LIEN" ADD CONSTRAINT "LIEN_NOEUD_INF_FK" FOREIGN KEY ("NOEUD_INF_ID")
	  REFERENCES "OSE"."NOEUD" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."LIEN" ADD CONSTRAINT "LIEN_NOEUD_SUP_FK" FOREIGN KEY ("NOEUD_SUP_ID")
	  REFERENCES "OSE"."NOEUD" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."LIEN" ADD CONSTRAINT "LIEN_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ENABLE;
  ALTER TABLE "OSE"."LIEN" ADD CONSTRAINT "LIEN_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MISE_EN_PAIEMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" ADD CONSTRAINT "MEP_CENTRE_COUT_FK" FOREIGN KEY ("CENTRE_COUT_ID")
	  REFERENCES "OSE"."CENTRE_COUT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" ADD CONSTRAINT "MEP_DOMAINE_FONCTIONNEL_FK" FOREIGN KEY ("DOMAINE_FONCTIONNEL_ID")
	  REFERENCES "OSE"."DOMAINE_FONCTIONNEL" ("ID") ENABLE;
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" ADD CONSTRAINT "MEP_FR_SERVICE_FK" FOREIGN KEY ("FORMULE_RES_SERVICE_ID")
	  REFERENCES "OSE"."FORMULE_RESULTAT_SERVICE" ("ID") ENABLE;
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" ADD CONSTRAINT "MEP_FR_SERVICE_REF_FK" FOREIGN KEY ("FORMULE_RES_SERVICE_REF_ID")
	  REFERENCES "OSE"."FORMULE_RESULTAT_SERVICE_REF" ("ID") ENABLE;
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" ADD CONSTRAINT "MEP_TYPE_HEURES_FK" FOREIGN KEY ("TYPE_HEURES_ID")
	  REFERENCES "OSE"."TYPE_HEURES" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" ADD CONSTRAINT "MISE_EN_PAIEMENT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" ADD CONSTRAINT "MISE_EN_PAIEMENT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" ADD CONSTRAINT "MISE_EN_PAIEMENT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" ADD CONSTRAINT "MISE_EN_PAIEMENT_PERIODE_FK" FOREIGN KEY ("PERIODE_PAIEMENT_ID")
	  REFERENCES "OSE"."PERIODE" ("ID") ENABLE;
  ALTER TABLE "OSE"."MISE_EN_PAIEMENT" ADD CONSTRAINT "MISE_EN_PAIEMENT_VALIDATION_FK" FOREIGN KEY ("VALIDATION_ID")
	  REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MODIFICATION_SERVICE_DU
--------------------------------------------------------

  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" ADD CONSTRAINT "DS_MDS_FK" FOREIGN KEY ("MOTIF_ID")
	  REFERENCES "OSE"."MOTIF_MODIFICATION_SERVICE" ("ID") ENABLE;
  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" ADD CONSTRAINT "MODIFICATION_SERVICE_DU_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" ADD CONSTRAINT "MODIFICATION_SERVICE_DU_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" ADD CONSTRAINT "MODIFICATION_SERVICE_DU_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."MODIFICATION_SERVICE_DU" ADD CONSTRAINT "MSD_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MODULATEUR
--------------------------------------------------------

  ALTER TABLE "OSE"."MODULATEUR" ADD CONSTRAINT "MODULATEUR_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."MODULATEUR" ADD CONSTRAINT "MODULATEUR_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."MODULATEUR" ADD CONSTRAINT "MODULATEUR_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."MODULATEUR" ADD CONSTRAINT "MODULATEUR_TYPE_MODULATEUR_FK" FOREIGN KEY ("TYPE_MODULATEUR_ID")
	  REFERENCES "OSE"."TYPE_MODULATEUR" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MOTIF_MODIFICATION_SERVICE
--------------------------------------------------------

  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" ADD CONSTRAINT "MOTIF_MODIFICATION_SERVIC_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" ADD CONSTRAINT "MOTIF_MODIFICATION_SERVIC_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."MOTIF_MODIFICATION_SERVICE" ADD CONSTRAINT "MOTIF_MODIFICATION_SERVIC_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table MOTIF_NON_PAIEMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."MOTIF_NON_PAIEMENT" ADD CONSTRAINT "MOTIF_NON_PAIEMENT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."MOTIF_NON_PAIEMENT" ADD CONSTRAINT "MOTIF_NON_PAIEMENT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."MOTIF_NON_PAIEMENT" ADD CONSTRAINT "MOTIF_NON_PAIEMENT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table NOEUD
--------------------------------------------------------

  ALTER TABLE "OSE"."NOEUD" ADD CONSTRAINT "NOEUD_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ENABLE;
  ALTER TABLE "OSE"."NOEUD" ADD CONSTRAINT "NOEUD_ELEMENT_PEDAGOGIQUE_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	  REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."NOEUD" ADD CONSTRAINT "NOEUD_ETAPE_FK" FOREIGN KEY ("ETAPE_ID")
	  REFERENCES "OSE"."ETAPE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."NOEUD" ADD CONSTRAINT "NOEUD_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."NOEUD" ADD CONSTRAINT "NOEUD_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."NOEUD" ADD CONSTRAINT "NOEUD_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."NOEUD" ADD CONSTRAINT "NOEUD_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ENABLE;
  ALTER TABLE "OSE"."NOEUD" ADD CONSTRAINT "NOEUD_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table NOTIFICATION_INDICATEUR
--------------------------------------------------------

  ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" ADD CONSTRAINT "NI_AFFECTATION_FK" FOREIGN KEY ("AFFECTATION_ID")
	  REFERENCES "OSE"."AFFECTATION" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."NOTIFICATION_INDICATEUR" ADD CONSTRAINT "NOTIF_INDICATEUR_IFK" FOREIGN KEY ("INDICATEUR_ID")
	  REFERENCES "OSE"."INDICATEUR" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PARAMETRE
--------------------------------------------------------

  ALTER TABLE "OSE"."PARAMETRE" ADD CONSTRAINT "PARAMETRE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."PARAMETRE" ADD CONSTRAINT "PARAMETRE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."PARAMETRE" ADD CONSTRAINT "PARAMETRE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PAYS
--------------------------------------------------------

  ALTER TABLE "OSE"."PAYS" ADD CONSTRAINT "PAYS_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."PAYS" ADD CONSTRAINT "PAYS_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."PAYS" ADD CONSTRAINT "PAYS_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."PAYS" ADD CONSTRAINT "PAYS_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PERIODE
--------------------------------------------------------

  ALTER TABLE "OSE"."PERIODE" ADD CONSTRAINT "PERIODE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."PERIODE" ADD CONSTRAINT "PERIODE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."PERIODE" ADD CONSTRAINT "PERIODE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PERSONNEL
--------------------------------------------------------

  ALTER TABLE "OSE"."PERSONNEL" ADD CONSTRAINT "PERSONNEL_CIVILITE_FK" FOREIGN KEY ("CIVILITE_ID")
	  REFERENCES "OSE"."CIVILITE" ("ID") ENABLE;
  ALTER TABLE "OSE"."PERSONNEL" ADD CONSTRAINT "PERSONNEL_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."PERSONNEL" ADD CONSTRAINT "PERSONNEL_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."PERSONNEL" ADD CONSTRAINT "PERSONNEL_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."PERSONNEL" ADD CONSTRAINT "PERSONNEL_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."PERSONNEL" ADD CONSTRAINT "PERSONNEL_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PIECE_JOINTE
--------------------------------------------------------

  ALTER TABLE "OSE"."PIECE_JOINTE" ADD CONSTRAINT "PIECE_JOINTE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."PIECE_JOINTE" ADD CONSTRAINT "PIECE_JOINTE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."PIECE_JOINTE" ADD CONSTRAINT "PIECE_JOINTE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."PIECE_JOINTE" ADD CONSTRAINT "PIECE_JOINTE_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ENABLE;
  ALTER TABLE "OSE"."PIECE_JOINTE" ADD CONSTRAINT "PIECE_JOINTE_VFK" FOREIGN KEY ("VALIDATION_ID")
	  REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE SET NULL ENABLE;
  ALTER TABLE "OSE"."PIECE_JOINTE" ADD CONSTRAINT "PJ_TYPE_PIECE_JOINTE_FK" FOREIGN KEY ("TYPE_PIECE_JOINTE_ID")
	  REFERENCES "OSE"."TYPE_PIECE_JOINTE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PIECE_JOINTE_FICHIER
--------------------------------------------------------

  ALTER TABLE "OSE"."PIECE_JOINTE_FICHIER" ADD CONSTRAINT "PIECE_JOINTE_FICHIER_FFK" FOREIGN KEY ("FICHIER_ID")
	  REFERENCES "OSE"."FICHIER" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."PIECE_JOINTE_FICHIER" ADD CONSTRAINT "PIECE_JOINTE_FICHIER_PJFK" FOREIGN KEY ("PIECE_JOINTE_ID")
	  REFERENCES "OSE"."PIECE_JOINTE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRIVILEGE
--------------------------------------------------------

  ALTER TABLE "OSE"."PRIVILEGE" ADD CONSTRAINT "PRIVILEGE_CATEGORIE_FK" FOREIGN KEY ("CATEGORIE_ID")
	  REFERENCES "OSE"."CATEGORIE_PRIVILEGE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table REGLE_STRUCTURE_VALIDATION
--------------------------------------------------------

  ALTER TABLE "OSE"."REGLE_STRUCTURE_VALIDATION" ADD CONSTRAINT "RSV_TYPE_INTERVENANT_FK" FOREIGN KEY ("TYPE_INTERVENANT_ID")
	  REFERENCES "OSE"."TYPE_INTERVENANT" ("ID") ENABLE;
  ALTER TABLE "OSE"."REGLE_STRUCTURE_VALIDATION" ADD CONSTRAINT "RSV_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ROLE
--------------------------------------------------------

  ALTER TABLE "OSE"."ROLE" ADD CONSTRAINT "ROLE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ROLE" ADD CONSTRAINT "ROLE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ROLE" ADD CONSTRAINT "ROLE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."ROLE" ADD CONSTRAINT "ROLE_PERIMETRE_FK" FOREIGN KEY ("PERIMETRE_ID")
	  REFERENCES "OSE"."PERIMETRE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ROLE_PRIVILEGE
--------------------------------------------------------

  ALTER TABLE "OSE"."ROLE_PRIVILEGE" ADD CONSTRAINT "ROLE_PRIVILEGE_PRIVILEGE_FK" FOREIGN KEY ("PRIVILEGE_ID")
	  REFERENCES "OSE"."PRIVILEGE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."ROLE_PRIVILEGE" ADD CONSTRAINT "ROLE_PRIVILEGE_ROLE_FK" FOREIGN KEY ("ROLE_ID")
	  REFERENCES "OSE"."ROLE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SCENARIO
--------------------------------------------------------

  ALTER TABLE "OSE"."SCENARIO" ADD CONSTRAINT "SCENARIO_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO" ADD CONSTRAINT "SCENARIO_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO" ADD CONSTRAINT "SCENARIO_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO" ADD CONSTRAINT "SCENARIO_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SCENARIO_LIEN
--------------------------------------------------------

  ALTER TABLE "OSE"."SCENARIO_LIEN" ADD CONSTRAINT "SCENARIO_LIEN_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_LIEN" ADD CONSTRAINT "SCENARIO_LIEN_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_LIEN" ADD CONSTRAINT "SCENARIO_LIEN_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_LIEN" ADD CONSTRAINT "SCENARIO_LIEN_LIEN_FK" FOREIGN KEY ("LIEN_ID")
	  REFERENCES "OSE"."LIEN" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."SCENARIO_LIEN" ADD CONSTRAINT "SCENARIO_LIEN_SCENARIO_FK" FOREIGN KEY ("SCENARIO_ID")
	  REFERENCES "OSE"."SCENARIO" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."SCENARIO_LIEN" ADD CONSTRAINT "SCENARIO_LIEN_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SCENARIO_NOEUD
--------------------------------------------------------

  ALTER TABLE "OSE"."SCENARIO_NOEUD" ADD CONSTRAINT "SCENARIO_NOEUD_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_NOEUD" ADD CONSTRAINT "SCENARIO_NOEUD_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_NOEUD" ADD CONSTRAINT "SCENARIO_NOEUD_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_NOEUD" ADD CONSTRAINT "SCENARIO_NOEUD_NOEUD_FK" FOREIGN KEY ("NOEUD_ID")
	  REFERENCES "OSE"."NOEUD" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."SCENARIO_NOEUD" ADD CONSTRAINT "SCENARIO_NOEUD_SCENARIO_FK" FOREIGN KEY ("SCENARIO_ID")
	  REFERENCES "OSE"."SCENARIO" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."SCENARIO_NOEUD" ADD CONSTRAINT "SCENARIO_NOEUD_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SCENARIO_NOEUD_EFFECTIF
--------------------------------------------------------

  ALTER TABLE "OSE"."SCENARIO_NOEUD_EFFECTIF" ADD CONSTRAINT "SNE_ETAPE_FK" FOREIGN KEY ("ETAPE_ID")
	  REFERENCES "OSE"."ETAPE" ("ID") ENABLE;
  ALTER TABLE "OSE"."SCENARIO_NOEUD_EFFECTIF" ADD CONSTRAINT "SNE_SCENARIO_NOEUD_FK" FOREIGN KEY ("SCENARIO_NOEUD_ID")
	  REFERENCES "OSE"."SCENARIO_NOEUD" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."SCENARIO_NOEUD_EFFECTIF" ADD CONSTRAINT "SNE_TYPE_HEURES_FK" FOREIGN KEY ("TYPE_HEURES_ID")
	  REFERENCES "OSE"."TYPE_HEURES" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SCENARIO_NOEUD_SEUIL
--------------------------------------------------------

  ALTER TABLE "OSE"."SCENARIO_NOEUD_SEUIL" ADD CONSTRAINT "SNS_SCENARIO_NOEUD_FK" FOREIGN KEY ("SCENARIO_NOEUD_ID")
	  REFERENCES "OSE"."SCENARIO_NOEUD" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."SCENARIO_NOEUD_SEUIL" ADD CONSTRAINT "SNS_TYPE_INTERVENTION_FK" FOREIGN KEY ("TYPE_INTERVENTION_ID")
	  REFERENCES "OSE"."TYPE_INTERVENTION" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SERVICE
--------------------------------------------------------

  ALTER TABLE "OSE"."SERVICE" ADD CONSTRAINT "SERVICE_ELEMENT_PEDAGOGIQUE_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	  REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ENABLE;
  ALTER TABLE "OSE"."SERVICE" ADD CONSTRAINT "SERVICE_ETABLISSEMENT_FK" FOREIGN KEY ("ETABLISSEMENT_ID")
	  REFERENCES "OSE"."ETABLISSEMENT" ("ID") ENABLE;
  ALTER TABLE "OSE"."SERVICE" ADD CONSTRAINT "SERVICE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SERVICE" ADD CONSTRAINT "SERVICE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SERVICE" ADD CONSTRAINT "SERVICE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SERVICE" ADD CONSTRAINT "SERVICE_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SERVICE_REFERENTIEL
--------------------------------------------------------

  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" ADD CONSTRAINT "SERVICE_REFERENTIEL_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" ADD CONSTRAINT "SERVICE_REFERENTIEL_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" ADD CONSTRAINT "SERVICE_REFERENTIEL_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" ADD CONSTRAINT "SRFR_FK" FOREIGN KEY ("FONCTION_ID")
	  REFERENCES "OSE"."FONCTION_REFERENTIEL" ("ID") ENABLE;
  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" ADD CONSTRAINT "SR_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."SERVICE_REFERENTIEL" ADD CONSTRAINT "SR_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table SEUIL_CHARGE
--------------------------------------------------------

  ALTER TABLE "OSE"."SEUIL_CHARGE" ADD CONSTRAINT "SEUIL_CH_GT_FORMATION_FK" FOREIGN KEY ("GROUPE_TYPE_FORMATION_ID")
	  REFERENCES "OSE"."GROUPE_TYPE_FORMATION" ("ID") ENABLE;
  ALTER TABLE "OSE"."SEUIL_CHARGE" ADD CONSTRAINT "SEUIL_CH_SCENARIO_FK" FOREIGN KEY ("SCENARIO_ID")
	  REFERENCES "OSE"."SCENARIO" ("ID") ENABLE;
  ALTER TABLE "OSE"."SEUIL_CHARGE" ADD CONSTRAINT "SEUIL_CH_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
  ALTER TABLE "OSE"."SEUIL_CHARGE" ADD CONSTRAINT "SEUIL_CH_TYPE_INTERVENTION_FK" FOREIGN KEY ("TYPE_INTERVENTION_ID")
	  REFERENCES "OSE"."TYPE_INTERVENTION" ("ID") ENABLE;
  ALTER TABLE "OSE"."SEUIL_CHARGE" ADD CONSTRAINT "SEUIL_CH_UTILISATEUR_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SEUIL_CHARGE" ADD CONSTRAINT "SEUIL_CH_UTILISATEUR_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."SEUIL_CHARGE" ADD CONSTRAINT "SEUIL_CH_UTILISATEUR_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STATUT_INTERVENANT
--------------------------------------------------------

  ALTER TABLE "OSE"."STATUT_INTERVENANT" ADD CONSTRAINT "STATUT_INTERVENANT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."STATUT_INTERVENANT" ADD CONSTRAINT "STATUT_INTERVENANT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."STATUT_INTERVENANT" ADD CONSTRAINT "STATUT_INTERVENANT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."STATUT_INTERVENANT" ADD CONSTRAINT "STATUT_INTERVENANT_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."STATUT_INTERVENANT" ADD CONSTRAINT "STATUT_INTERVENANT_TYPE_FK" FOREIGN KEY ("TYPE_INTERVENANT_ID")
	  REFERENCES "OSE"."TYPE_INTERVENANT" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STATUT_PRIVILEGE
--------------------------------------------------------

  ALTER TABLE "OSE"."STATUT_PRIVILEGE" ADD CONSTRAINT "STAT_PRIV_PRIVILEGE_FK" FOREIGN KEY ("PRIVILEGE_ID")
	  REFERENCES "OSE"."PRIVILEGE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."STATUT_PRIVILEGE" ADD CONSTRAINT "STAT_PRIV_STATUT_FK" FOREIGN KEY ("STATUT_ID")
	  REFERENCES "OSE"."STATUT_INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table STRUCTURE
--------------------------------------------------------

  ALTER TABLE "OSE"."STRUCTURE" ADD CONSTRAINT "STRUCTURES_STRUCTURES_FK" FOREIGN KEY ("PARENTE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
  ALTER TABLE "OSE"."STRUCTURE" ADD CONSTRAINT "STRUCTURE_ETABLISSEMENT_FK" FOREIGN KEY ("ETABLISSEMENT_ID")
	  REFERENCES "OSE"."ETABLISSEMENT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."STRUCTURE" ADD CONSTRAINT "STRUCTURE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."STRUCTURE" ADD CONSTRAINT "STRUCTURE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."STRUCTURE" ADD CONSTRAINT "STRUCTURE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."STRUCTURE" ADD CONSTRAINT "STRUCTURE_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."STRUCTURE" ADD CONSTRAINT "STRUCTURE_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_NIV2_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE SET NULL ENABLE;
  ALTER TABLE "OSE"."STRUCTURE" ADD CONSTRAINT "STRUCTURE_TYPE_STRUCTURE_FK" FOREIGN KEY ("TYPE_ID")
	  REFERENCES "OSE"."TYPE_STRUCTURE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TAUX_HORAIRE_HETD
--------------------------------------------------------

  ALTER TABLE "OSE"."TAUX_HORAIRE_HETD" ADD CONSTRAINT "TAUX_HORAIRE_HETD_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TAUX_HORAIRE_HETD" ADD CONSTRAINT "TAUX_HORAIRE_HETD_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TAUX_HORAIRE_HETD" ADD CONSTRAINT "TAUX_HORAIRE_HETD_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_AGREMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_AGREMENT" ADD CONSTRAINT "TBL_AGR_AGREMENT_FK" FOREIGN KEY ("AGREMENT_ID")
	  REFERENCES "OSE"."AGREMENT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_AGREMENT" ADD CONSTRAINT "TBL_AGR_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_AGREMENT" ADD CONSTRAINT "TBL_AGR_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_AGREMENT" ADD CONSTRAINT "TBL_AGR_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_AGREMENT" ADD CONSTRAINT "TBL_AGR_TYPE_AGREMENT_FK" FOREIGN KEY ("TYPE_AGREMENT_ID")
	  REFERENCES "OSE"."TYPE_AGREMENT" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_CLOTURE_REALISE
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_CLOTURE_REALISE" ADD CONSTRAINT "TBL_CLOTURE_REALISE_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_CLOTURE_REALISE" ADD CONSTRAINT "TBL_CLO_REAL_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_CONTRAT
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_CONTRAT" ADD CONSTRAINT "TBL_CONTRAT_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_CONTRAT" ADD CONSTRAINT "TBL_CONTRAT_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_CONTRAT" ADD CONSTRAINT "TBL_CONTRAT_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_DMEP_LIQUIDATION
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_DMEP_LIQUIDATION" ADD CONSTRAINT "TBL_DMLIQ_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_DMEP_LIQUIDATION" ADD CONSTRAINT "TBL_DMLIQ_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_DMEP_LIQUIDATION" ADD CONSTRAINT "TBL_DMLIQ_TYPE_RESSOURCE_FK" FOREIGN KEY ("TYPE_RESSOURCE_ID")
	  REFERENCES "OSE"."TYPE_RESSOURCE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_DOSSIER
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_DOSSIER" ADD CONSTRAINT "TBL_DOSSIER_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_DOSSIER" ADD CONSTRAINT "TBL_DOSSIER_DOSSIER_FK" FOREIGN KEY ("DOSSIER_ID")
	  REFERENCES "OSE"."DOSSIER" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_DOSSIER" ADD CONSTRAINT "TBL_DOSSIER_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_DOSSIER" ADD CONSTRAINT "TBL_DOSSIER_VALIDATION_FK" FOREIGN KEY ("VALIDATION_ID")
	  REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_LIEN
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_LIEN" ADD CONSTRAINT "TBL_LIEN_LIEN_FK" FOREIGN KEY ("LIEN_ID")
	  REFERENCES "OSE"."LIEN" ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_LIEN" ADD CONSTRAINT "TBL_LIEN_NOEUD_INF_FK" FOREIGN KEY ("NOEUD_INF_ID")
	  REFERENCES "OSE"."NOEUD" ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_LIEN" ADD CONSTRAINT "TBL_LIEN_NOEUD_SUP_FK" FOREIGN KEY ("NOEUD_SUP_ID")
	  REFERENCES "OSE"."NOEUD" ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_LIEN" ADD CONSTRAINT "TBL_LIEN_SCENARIO_FK" FOREIGN KEY ("SCENARIO_ID")
	  REFERENCES "OSE"."SCENARIO" ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_LIEN" ADD CONSTRAINT "TBL_LIEN_SCENARIO_LIEN_FK" FOREIGN KEY ("SCENARIO_LIEN_ID")
	  REFERENCES "OSE"."SCENARIO_LIEN" ("ID") ENABLE;
  ALTER TABLE "OSE"."TBL_LIEN" ADD CONSTRAINT "TBL_LIEN_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_PAIEMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_PAIEMENT" ADD CONSTRAINT "TBL_PAIEMENT_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PAIEMENT" ADD CONSTRAINT "TBL_PAIEMENT_FRSR_FK" FOREIGN KEY ("FORMULE_RES_SERVICE_REF_ID")
	  REFERENCES "OSE"."FORMULE_RESULTAT_SERVICE_REF" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PAIEMENT" ADD CONSTRAINT "TBL_PAIEMENT_FRS_FK" FOREIGN KEY ("FORMULE_RES_SERVICE_ID")
	  REFERENCES "OSE"."FORMULE_RESULTAT_SERVICE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PAIEMENT" ADD CONSTRAINT "TBL_PAIEMENT_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PAIEMENT" ADD CONSTRAINT "TBL_PAIEMENT_MEP_FK" FOREIGN KEY ("MISE_EN_PAIEMENT_ID")
	  REFERENCES "OSE"."MISE_EN_PAIEMENT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PAIEMENT" ADD CONSTRAINT "TBL_PAIEMENT_PERIODE_FK" FOREIGN KEY ("PERIODE_PAIEMENT_ID")
	  REFERENCES "OSE"."PERIODE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PAIEMENT" ADD CONSTRAINT "TBL_PAIEMENT_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_PIECE_JOINTE
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" ADD CONSTRAINT "TBL_PIECE_JOINTE_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" ADD CONSTRAINT "TBL_PJ_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE" ADD CONSTRAINT "TBL_PJ_TYPE_PIECE_JOINTE_FK" FOREIGN KEY ("TYPE_PIECE_JOINTE_ID")
	  REFERENCES "OSE"."TYPE_PIECE_JOINTE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_PIECE_JOINTE_DEMANDE
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_DEMANDE" ADD CONSTRAINT "TBL_PJD_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_DEMANDE" ADD CONSTRAINT "TBL_PJD_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_DEMANDE" ADD CONSTRAINT "TBL_PJD_TYPE_PIECE_JOINTE_FK" FOREIGN KEY ("TYPE_PIECE_JOINTE_ID")
	  REFERENCES "OSE"."TYPE_PIECE_JOINTE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_PIECE_JOINTE_FOURNIE
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" ADD CONSTRAINT "TBL_PJF_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" ADD CONSTRAINT "TBL_PJF_FICHIER_FK" FOREIGN KEY ("FICHIER_ID")
	  REFERENCES "OSE"."FICHIER" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" ADD CONSTRAINT "TBL_PJF_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" ADD CONSTRAINT "TBL_PJF_PIECE_JOINTE_FK" FOREIGN KEY ("PIECE_JOINTE_ID")
	  REFERENCES "OSE"."PIECE_JOINTE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" ADD CONSTRAINT "TBL_PJF_TYPE_PIECE_JOINTE_FK" FOREIGN KEY ("TYPE_PIECE_JOINTE_ID")
	  REFERENCES "OSE"."TYPE_PIECE_JOINTE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_PIECE_JOINTE_FOURNIE" ADD CONSTRAINT "TBL_PJF_VALIDATION_FK" FOREIGN KEY ("VALIDATION_ID")
	  REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_SERVICE
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_SERVICE" ADD CONSTRAINT "TBL_SERVICE_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE" ADD CONSTRAINT "TBL_SERVICE_ELEMENT_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	  REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE" ADD CONSTRAINT "TBL_SERVICE_ETAPE_FK" FOREIGN KEY ("ETAPE_ID")
	  REFERENCES "OSE"."ETAPE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE" ADD CONSTRAINT "TBL_SERVICE_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE" ADD CONSTRAINT "TBL_SERVICE_PERIODE_EP_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_PERIODE_ID")
	  REFERENCES "OSE"."PERIODE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE" ADD CONSTRAINT "TBL_SERVICE_SERVICE_FK" FOREIGN KEY ("SERVICE_ID")
	  REFERENCES "OSE"."SERVICE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE" ADD CONSTRAINT "TBL_SERVICE_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE" ADD CONSTRAINT "TBL_SERVICE_STRUCTURE_FKV1" FOREIGN KEY ("INTERVENANT_STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE" ADD CONSTRAINT "TBL_SERVICE_TINTERVENANT_FK" FOREIGN KEY ("TYPE_INTERVENANT_ID")
	  REFERENCES "OSE"."TYPE_INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE" ADD CONSTRAINT "TBL_SERVICE_TVH_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_SERVICE_REFERENTIEL
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_SERVICE_REFERENTIEL" ADD CONSTRAINT "TBL_SERVICE_REF_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE_REFERENTIEL" ADD CONSTRAINT "TBL_SERVICE_REF_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE_REFERENTIEL" ADD CONSTRAINT "TBL_SERVICE_REF_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE_REFERENTIEL" ADD CONSTRAINT "TBL_SERVICE_REF_TVH_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_SERVICE_SAISIE
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" ADD CONSTRAINT "TBL_SERVICE_SAISIE_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_SERVICE_SAISIE" ADD CONSTRAINT "TBL_SRV_SAISIE_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_VALIDATION_ENSEIGNEMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ADD CONSTRAINT "TVE_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ADD CONSTRAINT "TVE_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ADD CONSTRAINT "TVE_SERVICE_FK" FOREIGN KEY ("SERVICE_ID")
	  REFERENCES "OSE"."SERVICE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ADD CONSTRAINT "TVE_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ADD CONSTRAINT "TVE_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ADD CONSTRAINT "TVE_VALIDATION_FK" FOREIGN KEY ("VALIDATION_ID")
	  REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_ENSEIGNEMENT" ADD CONSTRAINT "TVE_VOLUME_HORAIRE_FK" FOREIGN KEY ("VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_VALIDATION_REFERENTIEL
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" ADD CONSTRAINT "TVR_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" ADD CONSTRAINT "TVR_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" ADD CONSTRAINT "TVR_SERVICE_REFERENTIEL_FK" FOREIGN KEY ("SERVICE_REFERENTIEL_ID")
	  REFERENCES "OSE"."SERVICE_REFERENTIEL" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" ADD CONSTRAINT "TVR_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" ADD CONSTRAINT "TVR_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" ADD CONSTRAINT "TVR_VALIDATION_FK" FOREIGN KEY ("VALIDATION_ID")
	  REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_VALIDATION_REFERENTIEL" ADD CONSTRAINT "TVR_VOLUME_HORAIRE_REF_FK" FOREIGN KEY ("VOLUME_HORAIRE_REF_ID")
	  REFERENCES "OSE"."VOLUME_HORAIRE_REF" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TBL_WORKFLOW
--------------------------------------------------------

  ALTER TABLE "OSE"."TBL_WORKFLOW" ADD CONSTRAINT "TBL_WORKFLOW_ANNEE_FK" FOREIGN KEY ("ANNEE_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_WORKFLOW" ADD CONSTRAINT "TBL_WORKFLOW_EFK" FOREIGN KEY ("ETAPE_ID")
	  REFERENCES "OSE"."WF_ETAPE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_WORKFLOW" ADD CONSTRAINT "TBL_WORKFLOW_IFK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_WORKFLOW" ADD CONSTRAINT "TBL_WORKFLOW_SFK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TBL_WORKFLOW" ADD CONSTRAINT "TBL_WORKFLOW_TINTERVENANT_FK" FOREIGN KEY ("TYPE_INTERVENANT_ID")
	  REFERENCES "OSE"."TYPE_INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_AGREMENT
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_AGREMENT" ADD CONSTRAINT "TYPE_AGREMENT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_AGREMENT" ADD CONSTRAINT "TYPE_AGREMENT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_AGREMENT" ADD CONSTRAINT "TYPE_AGREMENT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_AGREMENT_STATUT
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" ADD CONSTRAINT "TAS_STATUT_INTERVENANT_FK" FOREIGN KEY ("STATUT_INTERVENANT_ID")
	  REFERENCES "OSE"."STATUT_INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" ADD CONSTRAINT "TAS_TYPE_AGREMENT_FK" FOREIGN KEY ("TYPE_AGREMENT_ID")
	  REFERENCES "OSE"."TYPE_AGREMENT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" ADD CONSTRAINT "TYPE_AGREMENT_STATUT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" ADD CONSTRAINT "TYPE_AGREMENT_STATUT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_AGREMENT_STATUT" ADD CONSTRAINT "TYPE_AGREMENT_STATUT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_CONTRAT
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_CONTRAT" ADD CONSTRAINT "TYPE_CONTRAT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_CONTRAT" ADD CONSTRAINT "TYPE_CONTRAT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_CONTRAT" ADD CONSTRAINT "TYPE_CONTRAT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_DOTATION
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_DOTATION" ADD CONSTRAINT "TD_TYPE_RESSOURCE_FK" FOREIGN KEY ("TYPE_RESSOURCE_ID")
	  REFERENCES "OSE"."TYPE_RESSOURCE" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_DOTATION" ADD CONSTRAINT "TYPE_DOTATION_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_DOTATION" ADD CONSTRAINT "TYPE_DOTATION_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_DOTATION" ADD CONSTRAINT "TYPE_DOTATION_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_DOTATION" ADD CONSTRAINT "TYPE_DOTATION_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_FORMATION
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_FORMATION" ADD CONSTRAINT "TYPE_FORMATION_GROUPE_FK" FOREIGN KEY ("GROUPE_ID")
	  REFERENCES "OSE"."GROUPE_TYPE_FORMATION" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_FORMATION" ADD CONSTRAINT "TYPE_FORMATION_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_FORMATION" ADD CONSTRAINT "TYPE_FORMATION_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_FORMATION" ADD CONSTRAINT "TYPE_FORMATION_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_FORMATION" ADD CONSTRAINT "TYPE_FORMATION_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_HEURES
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_HEURES" ADD CONSTRAINT "TYPE_HEURES_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_HEURES" ADD CONSTRAINT "TYPE_HEURES_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_HEURES" ADD CONSTRAINT "TYPE_HEURES_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_HEURES" ADD CONSTRAINT "TYPE_HEURES_TYPE_HEURES_FK" FOREIGN KEY ("TYPE_HEURES_ELEMENT_ID")
	  REFERENCES "OSE"."TYPE_HEURES" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_INTERVENANT
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_INTERVENANT" ADD CONSTRAINT "TYPE_INTERVENANT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENANT" ADD CONSTRAINT "TYPE_INTERVENANT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENANT" ADD CONSTRAINT "TYPE_INTERVENANT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_INTERVENTION
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_INTERVENTION" ADD CONSTRAINT "TYPE_INTERVENTION_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION" ADD CONSTRAINT "TYPE_INTERVENTION_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION" ADD CONSTRAINT "TYPE_INTERVENTION_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_INTERVENTION_EP
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" ADD CONSTRAINT "TIEP_ELEMENT_PEDAGOGIQUE_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	  REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" ADD CONSTRAINT "TIEP_TYPE_INTERVENTION_FK" FOREIGN KEY ("TYPE_INTERVENTION_ID")
	  REFERENCES "OSE"."TYPE_INTERVENTION" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" ADD CONSTRAINT "TYPE_INTERVENTION_EP_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" ADD CONSTRAINT "TYPE_INTERVENTION_EP_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" ADD CONSTRAINT "TYPE_INTERVENTION_EP_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION_EP" ADD CONSTRAINT "TYPE_INTERVENTION_EP_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_INTERVENTION_STRUCTURE
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" ADD CONSTRAINT "TIS_ANNEE_DEBUT_FK" FOREIGN KEY ("ANNEE_DEBUT_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" ADD CONSTRAINT "TIS_ANNEE_FIN_FK" FOREIGN KEY ("ANNEE_FIN_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" ADD CONSTRAINT "TIS_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" ADD CONSTRAINT "TIS_TYPE_INTERVENTION_FK" FOREIGN KEY ("TYPE_INTERVENTION_ID")
	  REFERENCES "OSE"."TYPE_INTERVENTION" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" ADD CONSTRAINT "TYPE_INTERVENTION_STRUCTU_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" ADD CONSTRAINT "TYPE_INTERVENTION_STRUCTU_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_INTERVENTION_STRUCTURE" ADD CONSTRAINT "TYPE_INTERVENTION_STRUCTU_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_MODULATEUR
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_MODULATEUR" ADD CONSTRAINT "TYPE_MODULATEUR_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR" ADD CONSTRAINT "TYPE_MODULATEUR_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR" ADD CONSTRAINT "TYPE_MODULATEUR_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_MODULATEUR_EP
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" ADD CONSTRAINT "TME_ELEMENT_PEDAGOGIQUE_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	  REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" ADD CONSTRAINT "TME_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" ADD CONSTRAINT "TME_TYPE_MODULATEUR_FK" FOREIGN KEY ("TYPE_MODULATEUR_ID")
	  REFERENCES "OSE"."TYPE_MODULATEUR" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" ADD CONSTRAINT "TYPE_MODULATEUR_EP_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" ADD CONSTRAINT "TYPE_MODULATEUR_EP_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_EP" ADD CONSTRAINT "TYPE_MODULATEUR_EP_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_MODULATEUR_STRUCTURE
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" ADD CONSTRAINT "TMS_ANNEE_DEBUT_FK" FOREIGN KEY ("ANNEE_DEBUT_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" ADD CONSTRAINT "TMS_ANNEE_FIN_FK" FOREIGN KEY ("ANNEE_FIN_ID")
	  REFERENCES "OSE"."ANNEE" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" ADD CONSTRAINT "TMS_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" ADD CONSTRAINT "TMS_TYPE_MODUL_FK" FOREIGN KEY ("TYPE_MODULATEUR_ID")
	  REFERENCES "OSE"."TYPE_MODULATEUR" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" ADD CONSTRAINT "TYPE_MODULATEUR_STRUCTURE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" ADD CONSTRAINT "TYPE_MODULATEUR_STRUCTURE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_MODULATEUR_STRUCTURE" ADD CONSTRAINT "TYPE_MODULATEUR_STRUCTURE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_PIECE_JOINTE
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE" ADD CONSTRAINT "TYPE_PIECE_JOINTE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE" ADD CONSTRAINT "TYPE_PIECE_JOINTE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE" ADD CONSTRAINT "TYPE_PIECE_JOINTE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_PIECE_JOINTE_STATUT
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" ADD CONSTRAINT "TPJS_STATUT_INTERVENANT_FK" FOREIGN KEY ("STATUT_INTERVENANT_ID")
	  REFERENCES "OSE"."STATUT_INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" ADD CONSTRAINT "TPJS_TYPE_PIECE_JOINTE_FK" FOREIGN KEY ("TYPE_PIECE_JOINTE_ID")
	  REFERENCES "OSE"."TYPE_PIECE_JOINTE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" ADD CONSTRAINT "TYPE_PIECE_JOINTE_STATUT_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" ADD CONSTRAINT "TYPE_PIECE_JOINTE_STATUT_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_PIECE_JOINTE_STATUT" ADD CONSTRAINT "TYPE_PIECE_JOINTE_STATUT_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_RESSOURCE
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_RESSOURCE" ADD CONSTRAINT "TYPE_RESSOURCE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_RESSOURCE" ADD CONSTRAINT "TYPE_RESSOURCE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_RESSOURCE" ADD CONSTRAINT "TYPE_RESSOURCE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_STRUCTURE
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_STRUCTURE" ADD CONSTRAINT "TYPE_STRUCTURE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_STRUCTURE" ADD CONSTRAINT "TYPE_STRUCTURE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_STRUCTURE" ADD CONSTRAINT "TYPE_STRUCTURE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_VALIDATION
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_VALIDATION" ADD CONSTRAINT "TYPE_VALIDATION_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_VALIDATION" ADD CONSTRAINT "TYPE_VALIDATION_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_VALIDATION" ADD CONSTRAINT "TYPE_VALIDATION_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TYPE_VOLUME_HORAIRE
--------------------------------------------------------

  ALTER TABLE "OSE"."TYPE_VOLUME_HORAIRE" ADD CONSTRAINT "TYPE_VOLUME_HORAIRE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_VOLUME_HORAIRE" ADD CONSTRAINT "TYPE_VOLUME_HORAIRE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."TYPE_VOLUME_HORAIRE" ADD CONSTRAINT "TYPE_VOLUME_HORAIRE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table VALIDATION
--------------------------------------------------------

  ALTER TABLE "OSE"."VALIDATION" ADD CONSTRAINT "VALIDATION_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."VALIDATION" ADD CONSTRAINT "VALIDATION_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."VALIDATION" ADD CONSTRAINT "VALIDATION_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."VALIDATION" ADD CONSTRAINT "VALIDATION_INTERVENANT_FK" FOREIGN KEY ("INTERVENANT_ID")
	  REFERENCES "OSE"."INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."VALIDATION" ADD CONSTRAINT "VALIDATION_STRUCTURE_FK" FOREIGN KEY ("STRUCTURE_ID")
	  REFERENCES "OSE"."STRUCTURE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."VALIDATION" ADD CONSTRAINT "VALIDATION_TYPE_VALIDATION_FK" FOREIGN KEY ("TYPE_VALIDATION_ID")
	  REFERENCES "OSE"."TYPE_VALIDATION" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table VALIDATION_VOL_HORAIRE
--------------------------------------------------------

  ALTER TABLE "OSE"."VALIDATION_VOL_HORAIRE" ADD CONSTRAINT "VVH_VALIDATION_FK" FOREIGN KEY ("VALIDATION_ID")
	  REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."VALIDATION_VOL_HORAIRE" ADD CONSTRAINT "VVH_VOLUME_HORAIRE_FK" FOREIGN KEY ("VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."VOLUME_HORAIRE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table VALIDATION_VOL_HORAIRE_REF
--------------------------------------------------------

  ALTER TABLE "OSE"."VALIDATION_VOL_HORAIRE_REF" ADD CONSTRAINT "VVHR_VALIDATION_FK" FOREIGN KEY ("VALIDATION_ID")
	  REFERENCES "OSE"."VALIDATION" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."VALIDATION_VOL_HORAIRE_REF" ADD CONSTRAINT "VVHR_VOLUME_HORAIRE_REF_FK" FOREIGN KEY ("VOLUME_HORAIRE_REF_ID")
	  REFERENCES "OSE"."VOLUME_HORAIRE_REF" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table VOLUME_HORAIRE
--------------------------------------------------------

  ALTER TABLE "OSE"."VOLUME_HORAIRE" ADD CONSTRAINT "VHIT_FK" FOREIGN KEY ("TYPE_INTERVENTION_ID")
	  REFERENCES "OSE"."TYPE_INTERVENTION" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE" ADD CONSTRAINT "VHMNP_FK" FOREIGN KEY ("MOTIF_NON_PAIEMENT_ID")
	  REFERENCES "OSE"."MOTIF_NON_PAIEMENT" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE" ADD CONSTRAINT "VH_PERIODE_FK" FOREIGN KEY ("PERIODE_ID")
	  REFERENCES "OSE"."PERIODE" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE" ADD CONSTRAINT "VH_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE" ADD CONSTRAINT "VOLUMES_HORAIRES_SERVICES_FK" FOREIGN KEY ("SERVICE_ID")
	  REFERENCES "OSE"."SERVICE" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE" ADD CONSTRAINT "VOLUME_HORAIRE_CONTRAT_FK" FOREIGN KEY ("CONTRAT_ID")
	  REFERENCES "OSE"."CONTRAT" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE" ADD CONSTRAINT "VOLUME_HORAIRE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE" ADD CONSTRAINT "VOLUME_HORAIRE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE" ADD CONSTRAINT "VOLUME_HORAIRE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table VOLUME_HORAIRE_CHARGE
--------------------------------------------------------

  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" ADD CONSTRAINT "VHC_ELEMENT_PEDAGOGIQUE_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	  REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" ADD CONSTRAINT "VHC_SCENARIO_FK" FOREIGN KEY ("SCENARIO_ID")
	  REFERENCES "OSE"."SCENARIO" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" ADD CONSTRAINT "VHC_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" ADD CONSTRAINT "VHC_TYPE_INTERVENTION_FK" FOREIGN KEY ("TYPE_INTERVENTION_ID")
	  REFERENCES "OSE"."TYPE_INTERVENTION" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" ADD CONSTRAINT "VOLUME_HORAIRE_CHARGE_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" ADD CONSTRAINT "VOLUME_HORAIRE_CHARGE_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_CHARGE" ADD CONSTRAINT "VOLUME_HORAIRE_CHARGE_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table VOLUME_HORAIRE_ENS
--------------------------------------------------------

  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" ADD CONSTRAINT "VHENS_ELEMENT_PEDAGOGIQUE_FK" FOREIGN KEY ("ELEMENT_PEDAGOGIQUE_ID")
	  REFERENCES "OSE"."ELEMENT_PEDAGOGIQUE" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" ADD CONSTRAINT "VHENS_TYPE_INTERVENTION_FK" FOREIGN KEY ("TYPE_INTERVENTION_ID")
	  REFERENCES "OSE"."TYPE_INTERVENTION" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" ADD CONSTRAINT "VOLUME_HORAIRE_ENS_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" ADD CONSTRAINT "VOLUME_HORAIRE_ENS_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" ADD CONSTRAINT "VOLUME_HORAIRE_ENS_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_ENS" ADD CONSTRAINT "VOLUME_HORAIRE_ENS_SOURCE_FK" FOREIGN KEY ("SOURCE_ID")
	  REFERENCES "OSE"."SOURCE" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table VOLUME_HORAIRE_REF
--------------------------------------------------------

  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" ADD CONSTRAINT "VHR_SERVICE_REFERENTIEL_FK" FOREIGN KEY ("SERVICE_REFERENTIEL_ID")
	  REFERENCES "OSE"."SERVICE_REFERENTIEL" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" ADD CONSTRAINT "VHR_TYPE_VOLUME_HORAIRE_FK" FOREIGN KEY ("TYPE_VOLUME_HORAIRE_ID")
	  REFERENCES "OSE"."TYPE_VOLUME_HORAIRE" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" ADD CONSTRAINT "VOLUME_HORAIRE_REF_HCFK" FOREIGN KEY ("HISTO_CREATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" ADD CONSTRAINT "VOLUME_HORAIRE_REF_HDFK" FOREIGN KEY ("HISTO_DESTRUCTEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
  ALTER TABLE "OSE"."VOLUME_HORAIRE_REF" ADD CONSTRAINT "VOLUME_HORAIRE_REF_HMFK" FOREIGN KEY ("HISTO_MODIFICATEUR_ID")
	  REFERENCES "OSE"."UTILISATEUR" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table WF_DEP_BLOQUANTE
--------------------------------------------------------

  ALTER TABLE "OSE"."WF_DEP_BLOQUANTE" ADD CONSTRAINT "WF_DB_ETAPE_DEP_FK" FOREIGN KEY ("WF_ETAPE_DEP_ID")
	  REFERENCES "OSE"."WF_ETAPE_DEP" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."WF_DEP_BLOQUANTE" ADD CONSTRAINT "WF_DB_TBL_WORKFLOW_FK" FOREIGN KEY ("TBL_WORKFLOW_ID")
	  REFERENCES "OSE"."TBL_WORKFLOW" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table WF_ETAPE_DEP
--------------------------------------------------------

  ALTER TABLE "OSE"."WF_ETAPE_DEP" ADD CONSTRAINT "WE_PREC_WE_FK" FOREIGN KEY ("ETAPE_PREC_ID")
	  REFERENCES "OSE"."WF_ETAPE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."WF_ETAPE_DEP" ADD CONSTRAINT "WE_SUIV_WE_FK" FOREIGN KEY ("ETAPE_SUIV_ID")
	  REFERENCES "OSE"."WF_ETAPE" ("ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "OSE"."WF_ETAPE_DEP" ADD CONSTRAINT "WE_TYPE_INTERVENANT_FK" FOREIGN KEY ("TYPE_INTERVENANT_ID")
	  REFERENCES "OSE"."TYPE_INTERVENANT" ("ID") ON DELETE CASCADE ENABLE;

